{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _temp;\nimport { IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nexport var View = (_dec = injectable(), _dec2 = inject(IDENTIFIER.Systems), _dec3 = named(IDENTIFIER.RendererSystem), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function View() {\n    _classCallCheck(this, View);\n    _initializerDefineProperty(this, \"rendererSystem\", _descriptor, this);\n    this.camera = void 0;\n    this.scene = void 0;\n    this.viewport = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.clearColor = [1, 1, 1, 1];\n  }\n  _createClass(View, [{\n    key: \"getCamera\",\n    value: function getCamera() {\n      return this.camera;\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene() {\n      return this.scene;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport() {\n      return this.viewport;\n    }\n  }, {\n    key: \"getClearColor\",\n    value: function getClearColor() {\n      return this.clearColor;\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera(camera) {\n      this.camera = camera;\n      return this;\n    }\n  }, {\n    key: \"setScene\",\n    value: function setScene(scene) {\n      this.scene = scene;\n      return this;\n    }\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(viewport) {\n      this.viewport = viewport;\n      return this;\n    }\n  }, {\n    key: \"setClearColor\",\n    value: function setClearColor(clearColor) {\n      this.clearColor = clearColor;\n      return this;\n    }\n  }, {\n    key: \"pick\",\n    value: function pick(position) {\n      return this.rendererSystem.pick(position, this);\n    }\n  }]);\n  return View;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererSystem\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["IDENTIFIER","inject","injectable","named","View","_dec","_dec2","Systems","_dec3","RendererSystem","_class","_class2","_temp","_classCallCheck","_initializerDefineProperty","_descriptor","camera","scene","viewport","x","y","width","height","clearColor","_createClass","key","value","getCamera","getScene","getViewport","getClearColor","setCamera","setScene","setViewport","setClearColor","pick","position","rendererSystem","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu/src/View.ts"],"sourcesContent":["import {\n  ICamera,\n  IDENTIFIER,\n  IScene,\n  IView,\n  IViewport,\n  RendererSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\n\n@injectable()\nexport class View implements IView {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.RendererSystem)\n  private readonly rendererSystem: RendererSystem;\n\n  private camera: ICamera;\n  private scene: IScene;\n  private viewport: IViewport = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n  private clearColor: [number, number, number, number] = [1, 1, 1, 1];\n\n  public getCamera() {\n    return this.camera;\n  }\n\n  public getScene() {\n    return this.scene;\n  }\n\n  public getViewport() {\n    return this.viewport;\n  }\n\n  public getClearColor() {\n    return this.clearColor;\n  }\n\n  public setCamera(camera: ICamera) {\n    this.camera = camera;\n    return this;\n  }\n\n  public setScene(scene: IScene) {\n    this.scene = scene;\n    return this;\n  }\n\n  public setViewport(viewport: IViewport) {\n    this.viewport = viewport;\n    return this;\n  }\n\n  public setClearColor(clearColor: [number, number, number, number]) {\n    this.clearColor = clearColor;\n    return this;\n  }\n\n  public pick(position: { x: number; y: number }) {\n    return this.rendererSystem.pick(position, this);\n  }\n}\n"],"mappings":";;;;;;AAAA,SAEEA,UAFF,QAOO,qBAPP;AAQA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,QAA0C,WAA1C;AAGA,WAAaC,IAAb,IAAAC,IAAA,GADCH,UAAU,EACX,EAAAI,KAAA,GACGL,MAAM,CAACD,UAAU,CAACO,OAAZ,CADT,EAAAC,KAAA,GAEGL,KAAK,CAACH,UAAU,CAACS,cAAZ,CAFR,EAAAJ,IAAA,CAAAK,MAAA,IAAAC,OAAA,IAAAC,KAAA;EAAA,SAAAR,KAAA;IAAAS,eAAA,OAAAT,IAAA;IAAAU,0BAAA,yBAAAC,WAAA;IAAA,KAKUC,MALV;IAAA,KAMUC,KANV;IAAA,KAOUC,QAPV,GAOgC;MAC5BC,CAAC,EAAE,CADyB;MAE5BC,CAAC,EAAE,CAFyB;MAG5BC,KAAK,EAAE,CAHqB;MAI5BC,MAAM,EAAE;IAJoB,CAPhC;IAAA,KAaUC,UAbV,GAayD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAbzD;EAAA;EAAAC,YAAA,CAAApB,IAAA;IAAAqB,GAAA;IAAAC,KAAA,WAAAC,UAAA,EAeqB;MACjB,OAAO,KAAKX,MAAZ;IACD;EAjBH;IAAAS,GAAA;IAAAC,KAAA,WAAAE,SAAA,EAmBoB;MAChB,OAAO,KAAKX,KAAZ;IACD;EArBH;IAAAQ,GAAA;IAAAC,KAAA,WAAAG,YAAA,EAuBuB;MACnB,OAAO,KAAKX,QAAZ;IACD;EAzBH;IAAAO,GAAA;IAAAC,KAAA,WAAAI,cAAA,EA2ByB;MACrB,OAAO,KAAKP,UAAZ;IACD;EA7BH;IAAAE,GAAA;IAAAC,KAAA,WAAAK,UA+BmBf,MA/BnB,EA+BoC;MAChC,KAAKA,MAAL,GAAcA,MAAd;MACA,OAAO,IAAP;IACD;EAlCH;IAAAS,GAAA;IAAAC,KAAA,WAAAM,SAoCkBf,KApClB,EAoCiC;MAC7B,KAAKA,KAAL,GAAaA,KAAb;MACA,OAAO,IAAP;IACD;EAvCH;IAAAQ,GAAA;IAAAC,KAAA,WAAAO,YAyCqBf,QAzCrB,EAyC0C;MACtC,KAAKA,QAAL,GAAgBA,QAAhB;MACA,OAAO,IAAP;IACD;EA5CH;IAAAO,GAAA;IAAAC,KAAA,WAAAQ,cA8CuBX,UA9CvB,EA8CqE;MACjE,KAAKA,UAAL,GAAkBA,UAAlB;MACA,OAAO,IAAP;IACD;EAjDH;IAAAE,GAAA;IAAAC,KAAA,WAAAS,KAmDcC,QAnDd,EAmDkD;MAC9C,OAAO,KAAKC,cAAL,CAAoBF,IAApB,CAAyBC,QAAzB,EAAmC,IAAnC,CAAP;IACD;EArDH;EAAA,OAAAhC,IAAA;AAAA,KAAAQ,KAAA,GAAAG,WAAA,GAAAuB,yBAAA,CAAA3B,OAAA,CAAA4B,SAAA,qBAAAjC,KAAA,EAAAE,KAAA;EAAAgC,YAAA;EAAAC,UAAA;EAAAC,QAAA;EAAAC,WAAA;AAAA,IAAAhC,OAAA,MAAAD,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}