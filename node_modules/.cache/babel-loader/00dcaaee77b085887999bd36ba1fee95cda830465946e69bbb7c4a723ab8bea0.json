{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport class Graph extends Basecoat {\n  constructor(options) {\n    super();\n    this.options = GraphOptions.get(options);\n    this.css = new CSSManager(this);\n    this.hook = new HookManager(this);\n    this.view = this.hook.createView();\n    this.defs = this.hook.createDefsManager();\n    this.coord = this.hook.createCoordManager();\n    this.transform = this.hook.createTransformManager();\n    this.knob = this.hook.createKnobManager();\n    this.highlight = this.hook.createHighlightManager();\n    this.grid = this.hook.createGridManager();\n    this.background = this.hook.createBackgroundManager();\n    this.model = this.hook.createModel();\n    this.renderer = this.hook.createRenderer();\n    this.clipboard = this.hook.createClipboardManager();\n    this.snapline = this.hook.createSnaplineManager();\n    this.selection = this.hook.createSelectionManager();\n    this.history = this.hook.createHistoryManager();\n    this.scroller = this.hook.createScrollerManager();\n    this.minimap = this.hook.createMiniMapManager();\n    this.keyboard = this.hook.createKeyboard();\n    this.mousewheel = this.hook.createMouseWheel();\n    this.print = this.hook.createPrintManager();\n    this.format = this.hook.createFormatManager();\n    this.panning = this.hook.createPanningManager();\n    this.size = this.hook.createSizeManager();\n  }\n  get container() {\n    return this.view.container;\n  }\n  get [Symbol.toStringTag]() {\n    return Graph.toStringTag;\n  }\n  // #region model\n  isNode(cell) {\n    return cell.isNode();\n  }\n  isEdge(cell) {\n    return cell.isEdge();\n  }\n  resetCells(cells, options = {}) {\n    this.model.resetCells(cells, options);\n    return this;\n  }\n  clearCells(options = {}) {\n    this.model.clear(options);\n    return this;\n  }\n  toJSON(options = {}) {\n    return this.model.toJSON(options);\n  }\n  parseJSON(data) {\n    return this.model.parseJSON(data);\n  }\n  fromJSON(data, options = {}) {\n    this.model.fromJSON(data, options);\n    return this;\n  }\n  getCellById(id) {\n    return this.model.getCell(id);\n  }\n  addNode(node, options = {}) {\n    return this.model.addNode(node, options);\n  }\n  addNodes(nodes, options = {}) {\n    return this.addCell(nodes.map(node => Node.isNode(node) ? node : this.createNode(node)), options);\n  }\n  createNode(metadata) {\n    return this.model.createNode(metadata);\n  }\n  removeNode(node, options = {}) {\n    return this.model.removeCell(node, options);\n  }\n  addEdge(edge, options = {}) {\n    return this.model.addEdge(edge, options);\n  }\n  addEdges(edges, options = {}) {\n    return this.addCell(edges.map(edge => Edge.isEdge(edge) ? edge : this.createEdge(edge)), options);\n  }\n  removeEdge(edge, options = {}) {\n    return this.model.removeCell(edge, options);\n  }\n  createEdge(metadata) {\n    return this.model.createEdge(metadata);\n  }\n  addCell(cell, options = {}) {\n    this.model.addCell(cell, options);\n    return this;\n  }\n  removeCell(cell, options = {}) {\n    return this.model.removeCell(cell, options);\n  }\n  removeCells(cells, options = {}) {\n    return this.model.removeCells(cells, options);\n  }\n  removeConnectedEdges(cell, options = {}) {\n    return this.model.removeConnectedEdges(cell, options);\n  }\n  disconnectConnectedEdges(cell, options = {}) {\n    this.model.disconnectConnectedEdges(cell, options);\n    return this;\n  }\n  hasCell(cell) {\n    return this.model.has(cell);\n  }\n  /**\n   * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n   * major release. Use `getCellById()` instead.\n   *\n   * @deprecated\n   */\n  getCell(id) {\n    return this.model.getCell(id);\n  }\n  getCells() {\n    return this.model.getCells();\n  }\n  getCellCount() {\n    return this.model.total();\n  }\n  /**\n   * Returns all the nodes in the graph.\n   */\n  getNodes() {\n    return this.model.getNodes();\n  }\n  /**\n   * Returns all the edges in the graph.\n   */\n  getEdges() {\n    return this.model.getEdges();\n  }\n  /**\n   * Returns all outgoing edges for the node.\n   */\n  getOutgoingEdges(cell) {\n    return this.model.getOutgoingEdges(cell);\n  }\n  /**\n   * Returns all incoming edges for the node.\n   */\n  getIncomingEdges(cell) {\n    return this.model.getIncomingEdges(cell);\n  }\n  /**\n   * Returns edges connected with cell.\n   */\n  getConnectedEdges(cell, options = {}) {\n    return this.model.getConnectedEdges(cell, options);\n  }\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n  getRootNodes() {\n    return this.model.getRoots();\n  }\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n  getLeafNodes() {\n    return this.model.getLeafs();\n  }\n  /**\n   * Returns `true` if the node is a root node, i.e.\n   * there is no  edges coming to the node.\n   */\n  isRootNode(cell) {\n    return this.model.isRoot(cell);\n  }\n  /**\n   * Returns `true` if the node is a leaf node, i.e.\n   * there is no edges going out from the node.\n   */\n  isLeafNode(cell) {\n    return this.model.isLeaf(cell);\n  }\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n  getNeighbors(cell, options = {}) {\n    return this.model.getNeighbors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n  isNeighbor(cell1, cell2, options = {}) {\n    return this.model.isNeighbor(cell1, cell2, options);\n  }\n  getSuccessors(cell, options = {}) {\n    return this.model.getSuccessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n  isSuccessor(cell1, cell2, options = {}) {\n    return this.model.isSuccessor(cell1, cell2, options);\n  }\n  getPredecessors(cell, options = {}) {\n    return this.model.getPredecessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n  isPredecessor(cell1, cell2, options = {}) {\n    return this.model.isPredecessor(cell1, cell2, options);\n  }\n  getCommonAncestor(...cells) {\n    return this.model.getCommonAncestor(...cells);\n  }\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n  getSubGraph(cells, options = {}) {\n    return this.model.getSubGraph(cells, options);\n  }\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n  cloneSubGraph(cells, options = {}) {\n    return this.model.cloneSubGraph(cells, options);\n  }\n  cloneCells(cells) {\n    return this.model.cloneCells(cells);\n  }\n  getNodesFromPoint(x, y) {\n    return this.model.getNodesFromPoint(x, y);\n  }\n  getNodesInArea(x, y, w, h, options) {\n    return this.model.getNodesInArea(x, y, w, h, options);\n  }\n  getNodesUnderNode(node, options = {}) {\n    return this.model.getNodesUnderNode(node, options);\n  }\n  searchCell(cell, iterator, options = {}) {\n    this.model.search(cell, iterator, options);\n    return this;\n  }\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n  getShortestPath(source, target, options = {}) {\n    return this.model.getShortestPath(source, target, options);\n  }\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n  getAllCellsBBox() {\n    return this.model.getAllCellsBBox();\n  }\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n  getCellsBBox(cells, options = {}) {\n    return this.model.getCellsBBox(cells, options);\n  }\n  startBatch(name, data = {}) {\n    this.model.startBatch(name, data);\n  }\n  stopBatch(name, data = {}) {\n    this.model.stopBatch(name, data);\n  }\n  batchUpdate(arg1, arg2, arg3) {\n    const name = typeof arg1 === 'string' ? arg1 : 'update';\n    const execute = typeof arg1 === 'string' ? arg2 : arg1;\n    const data = typeof arg2 === 'function' ? arg3 : arg2;\n    this.startBatch(name, data);\n    const result = execute();\n    this.stopBatch(name, data);\n    return result;\n  }\n  updateCellId(cell, newId) {\n    return this.model.updateCellId(cell, newId);\n  }\n  // #endregion\n  // #region view\n  isFrozen() {\n    return this.renderer.isFrozen();\n  }\n  freeze(options = {}) {\n    this.renderer.freeze(options);\n    return this;\n  }\n  unfreeze(options = {}) {\n    this.renderer.unfreeze(options);\n    return this;\n  }\n  isAsync() {\n    return this.renderer.isAsync();\n  }\n  setAsync(async) {\n    this.renderer.setAsync(async);\n    return this;\n  }\n  findView(ref) {\n    if (Cell.isCell(ref)) {\n      return this.findViewByCell(ref);\n    }\n    return this.findViewByElem(ref);\n  }\n  findViews(ref) {\n    if (Rectangle.isRectangleLike(ref)) {\n      return this.findViewsInArea(ref);\n    }\n    if (Point.isPointLike(ref)) {\n      return this.findViewsFromPoint(ref);\n    }\n    return [];\n  }\n  findViewByCell(cell) {\n    return this.renderer.findViewByCell(cell);\n  }\n  findViewByElem(elem) {\n    return this.renderer.findViewByElem(elem);\n  }\n  findViewsFromPoint(x, y) {\n    const p = typeof x === 'number' ? {\n      x,\n      y: y\n    } : x;\n    return this.renderer.findViewsFromPoint(p);\n  }\n  findViewsInArea(x, y, width, height, options) {\n    const rect = typeof x === 'number' ? {\n      x,\n      y: y,\n      width: width,\n      height: height\n    } : x;\n    const localOptions = typeof x === 'number' ? options : y;\n    return this.renderer.findViewsInArea(rect, localOptions);\n  }\n  isViewMounted(view) {\n    return this.renderer.isViewMounted(view);\n  }\n  getMountedViews() {\n    return this.renderer.getMountedViews();\n  }\n  getUnmountedViews() {\n    return this.renderer.getUnmountedViews();\n  }\n  matrix(mat) {\n    if (typeof mat === 'undefined') {\n      return this.transform.getMatrix();\n    }\n    this.transform.setMatrix(mat);\n    return this;\n  }\n  resize(width, height) {\n    this.size.resize(width, height);\n    return this;\n  }\n  resizeGraph(width, height) {\n    this.size.resizeGraph(width, height);\n    return this;\n  }\n  resizeScroller(width, height) {\n    this.size.resizeScroller(width, height);\n    return this;\n  }\n  resizePage(width, height) {\n    this.size.resizePage(width, height);\n    return this;\n  }\n  scale(sx, sy = sx, cx = 0, cy = 0) {\n    if (typeof sx === 'undefined') {\n      return this.transform.getScale();\n    }\n    this.transform.scale(sx, sy, cx, cy);\n    return this;\n  }\n  zoom(factor, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      if (typeof factor === 'undefined') {\n        return scroller.zoom();\n      }\n      scroller.zoom(factor, options);\n    } else {\n      if (typeof factor === 'undefined') {\n        return this.transform.getZoom();\n      }\n      this.transform.zoom(factor, options);\n    }\n    return this;\n  }\n  zoomTo(factor, options = {}) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    } else {\n      this.transform.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    }\n    return this;\n  }\n  zoomToRect(rect, options = {}) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.zoomToRect(rect, options);\n    } else {\n      this.transform.zoomToRect(rect, options);\n    }\n    return this;\n  }\n  zoomToFit(options = {}) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.zoomToFit(options);\n    } else {\n      this.transform.zoomToFit(options);\n    }\n    return this;\n  }\n  rotate(angle, cx, cy) {\n    if (typeof angle === 'undefined') {\n      return this.transform.getRotation();\n    }\n    this.transform.rotate(angle, cx, cy);\n    return this;\n  }\n  translate(tx, ty) {\n    if (typeof tx === 'undefined') {\n      return this.transform.getTranslation();\n    }\n    this.transform.translate(tx, ty);\n    return this;\n  }\n  translateBy(dx, dy) {\n    const ts = this.translate();\n    const tx = ts.tx + dx;\n    const ty = ts.ty + dy;\n    return this.translate(tx, ty);\n  }\n  /**\n   * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n   * major release. Use `getGraphArea()` instead.\n   *\n   * @deprecated\n   */\n  getArea() {\n    return this.transform.getGraphArea();\n  }\n  getGraphArea() {\n    return this.transform.getGraphArea();\n  }\n  getContentArea(options = {}) {\n    return this.transform.getContentArea(options);\n  }\n  getContentBBox(options = {}) {\n    return this.transform.getContentBBox(options);\n  }\n  fitToContent(gridWidth, gridHeight, padding, options) {\n    return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n  }\n  scaleContentToFit(options = {}) {\n    this.transform.scaleContentToFit(options);\n    return this;\n  }\n  /**\n   * Position the center of graph to the center of the viewport.\n   */\n  center(optons) {\n    return this.centerPoint(optons);\n  }\n  centerPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.centerPoint(x, y, options);\n    } else {\n      this.transform.centerPoint(x, y);\n    }\n    return this;\n  }\n  centerContent(options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.centerContent(options);\n    } else {\n      this.transform.centerContent(options);\n    }\n    return this;\n  }\n  centerCell(cell, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.centerCell(cell, options);\n    } else {\n      this.transform.centerCell(cell);\n    }\n    return this;\n  }\n  positionPoint(point, x, y, options = {}) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.positionPoint(point, x, y, options);\n    } else {\n      this.transform.positionPoint(point, x, y);\n    }\n    return this;\n  }\n  positionRect(rect, direction, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.positionRect(rect, direction, options);\n    } else {\n      this.transform.positionRect(rect, direction);\n    }\n    return this;\n  }\n  positionCell(cell, direction, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.positionCell(cell, direction, options);\n    } else {\n      this.transform.positionCell(cell, direction);\n    }\n    return this;\n  }\n  positionContent(pos, options) {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      scroller.positionContent(pos, options);\n    } else {\n      this.transform.positionContent(pos, options);\n    }\n    return this;\n  }\n  // #endregion\n  // #region coord\n  getClientMatrix() {\n    return this.coord.getClientMatrix();\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the window.\n   */\n  getClientOffset() {\n    return this.coord.getClientOffset();\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the document.\n   */\n  getPageOffset() {\n    return this.coord.getPageOffset();\n  }\n  snapToGrid(x, y) {\n    return this.coord.snapToGrid(x, y);\n  }\n  pageToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.pageToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.pageToLocalRect(x, y, width, height);\n    }\n    return this.coord.pageToLocalPoint(x, y);\n  }\n  localToPage(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToPageRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToPageRect(x, y, width, height);\n    }\n    return this.coord.localToPagePoint(x, y);\n  }\n  clientToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToLocalRect(x, y, width, height);\n    }\n    return this.coord.clientToLocalPoint(x, y);\n  }\n  localToClient(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToClientRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToClientRect(x, y, width, height);\n    }\n    return this.coord.localToClientPoint(x, y);\n  }\n  localToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToGraphRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToGraphRect(x, y, width, height);\n    }\n    return this.coord.localToGraphPoint(x, y);\n  }\n  graphToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.graphToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.graphToLocalRect(x, y, width, height);\n    }\n    return this.coord.graphToLocalPoint(x, y);\n  }\n  clientToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToGraphRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToGraphRect(x, y, width, height);\n    }\n    return this.coord.clientToGraphPoint(x, y);\n  }\n  // #endregion\n  // #region defs\n  defineFilter(options) {\n    return this.defs.filter(options);\n  }\n  defineGradient(options) {\n    return this.defs.gradient(options);\n  }\n  defineMarker(options) {\n    return this.defs.marker(options);\n  }\n  // #endregion\n  // #region grid\n  getGridSize() {\n    return this.grid.getGridSize();\n  }\n  setGridSize(gridSize) {\n    this.grid.setGridSize(gridSize);\n    return this;\n  }\n  showGrid() {\n    this.grid.show();\n    return this;\n  }\n  hideGrid() {\n    this.grid.hide();\n    return this;\n  }\n  clearGrid() {\n    this.grid.clear();\n    return this;\n  }\n  drawGrid(options) {\n    this.grid.draw(options);\n    return this;\n  }\n  // #endregion\n  // #region background\n  updateBackground() {\n    this.background.update();\n    return this;\n  }\n  drawBackground(options, onGraph) {\n    const scroller = this.scroller.widget;\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.draw(options);\n    } else {\n      this.background.draw(options);\n    }\n    return this;\n  }\n  clearBackground(onGraph) {\n    const scroller = this.scroller.widget;\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.clear();\n    } else {\n      this.background.clear();\n    }\n    return this;\n  }\n  // #endregion\n  // #region clipboard\n  isClipboardEnabled() {\n    return !this.clipboard.disabled;\n  }\n  enableClipboard() {\n    this.clipboard.enable();\n    return this;\n  }\n  disableClipboard() {\n    this.clipboard.disable();\n    return this;\n  }\n  toggleClipboard(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isClipboardEnabled()) {\n        if (enabled) {\n          this.enableClipboard();\n        } else {\n          this.disableClipboard();\n        }\n      }\n    } else if (this.isClipboardEnabled()) {\n      this.disableClipboard();\n    } else {\n      this.enableClipboard();\n    }\n    return this;\n  }\n  isClipboardEmpty() {\n    return this.clipboard.isEmpty();\n  }\n  getCellsInClipboard() {\n    return this.clipboard.cells;\n  }\n  cleanClipboard() {\n    this.clipboard.clean();\n    return this;\n  }\n  copy(cells, options = {}) {\n    this.clipboard.copy(cells, options);\n    return this;\n  }\n  cut(cells, options = {}) {\n    this.clipboard.cut(cells, options);\n    return this;\n  }\n  paste(options = {}, graph = this) {\n    return this.clipboard.paste(options, graph);\n  }\n  // #endregion\n  // #region redo/undo\n  isHistoryEnabled() {\n    return !this.history.disabled;\n  }\n  enableHistory() {\n    this.history.enable();\n    return this;\n  }\n  disableHistory() {\n    this.history.disable();\n    return this;\n  }\n  toggleHistory(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isHistoryEnabled()) {\n        if (enabled) {\n          this.enableHistory();\n        } else {\n          this.disableHistory();\n        }\n      }\n    } else if (this.isHistoryEnabled()) {\n      this.disableHistory();\n    } else {\n      this.enableHistory();\n    }\n    return this;\n  }\n  undo(options = {}) {\n    this.history.undo(options);\n    return this;\n  }\n  undoAndCancel(options = {}) {\n    this.history.cancel(options);\n    return this;\n  }\n  redo(options = {}) {\n    this.history.redo(options);\n    return this;\n  }\n  canUndo() {\n    return this.history.canUndo();\n  }\n  canRedo() {\n    return this.history.canRedo();\n  }\n  cleanHistory(options = {}) {\n    this.history.clean(options);\n  }\n  // #endregion\n  // #region keyboard\n  isKeyboardEnabled() {\n    return !this.keyboard.disabled;\n  }\n  enableKeyboard() {\n    this.keyboard.enable();\n    return this;\n  }\n  disableKeyboard() {\n    this.keyboard.disable();\n    return this;\n  }\n  toggleKeyboard(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isKeyboardEnabled()) {\n        if (enabled) {\n          this.enableKeyboard();\n        } else {\n          this.disableKeyboard();\n        }\n      }\n    } else if (this.isKeyboardEnabled()) {\n      this.disableKeyboard();\n    } else {\n      this.enableKeyboard();\n    }\n    return this;\n  }\n  bindKey(keys, callback, action) {\n    this.keyboard.on(keys, callback, action);\n    return this;\n  }\n  unbindKey(keys, action) {\n    this.keyboard.off(keys, action);\n    return this;\n  }\n  // #endregion\n  // #region mousewheel\n  isMouseWheelEnabled() {\n    return !this.mousewheel.disabled;\n  }\n  enableMouseWheel() {\n    this.mousewheel.enable();\n    return this;\n  }\n  disableMouseWheel() {\n    this.mousewheel.disable();\n    return this;\n  }\n  toggleMouseWheel(enabled) {\n    if (enabled == null) {\n      if (this.isMouseWheelEnabled()) {\n        this.disableMouseWheel();\n      } else {\n        this.enableMouseWheel();\n      }\n    } else if (enabled) {\n      this.enableMouseWheel();\n    } else {\n      this.disableMouseWheel();\n    }\n    return this;\n  }\n  // #endregion\n  // #region panning\n  isPannable() {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      return this.scroller.pannable;\n    }\n    return this.panning.pannable;\n  }\n  enablePanning() {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      this.scroller.enablePanning();\n    } else {\n      this.panning.enablePanning();\n    }\n    return this;\n  }\n  disablePanning() {\n    const scroller = this.scroller.widget;\n    if (scroller) {\n      this.scroller.disablePanning();\n    } else {\n      this.panning.disablePanning();\n    }\n    return this;\n  }\n  togglePanning(pannable) {\n    if (pannable == null) {\n      if (this.isPannable()) {\n        this.disablePanning();\n      } else {\n        this.enablePanning();\n      }\n    } else if (pannable !== this.isPannable()) {\n      if (pannable) {\n        this.enablePanning();\n      } else {\n        this.disablePanning();\n      }\n    }\n    return this;\n  }\n  // #endregion\n  // #region scroller\n  lockScroller() {\n    var _a;\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n  }\n  unlockScroller() {\n    var _a;\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n  }\n  updateScroller() {\n    var _a;\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n  }\n  getScrollbarPosition() {\n    const scroller = this.scroller.widget;\n    return scroller.scrollbarPosition();\n  }\n  setScrollbarPosition(left, top, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollbarPosition(left, top, options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the position (x,y) on the graph (in local\n   * coordinates) is at the center of the viewport. If only one of the\n   * coordinates is specified, only scroll in the specified dimension and\n   * keep the other coordinate unchanged.\n   */\n  scrollToPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToPoint(x, y, options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the center of graph content is at the\n   * center of the viewport.\n   */\n  scrollToContent(options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToContent(options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the center of cell is at the center of\n   * the viewport.\n   */\n  scrollToCell(cell, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToCell(cell, options);\n    return this;\n  }\n  transitionToPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n    scroller.transitionToPoint(x, y, options);\n    return this;\n  }\n  transitionToRect(rect, options = {}) {\n    const scroller = this.scroller.widget;\n    scroller.transitionToRect(rect, options);\n    return this;\n  }\n  // #endregion\n  // #region selection\n  isSelectionEnabled() {\n    return !this.selection.disabled;\n  }\n  enableSelection() {\n    this.selection.enable();\n    return this;\n  }\n  disableSelection() {\n    this.selection.disable();\n    return this;\n  }\n  toggleSelection(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isSelectionEnabled()) {\n        if (enabled) {\n          this.enableSelection();\n        } else {\n          this.disableSelection();\n        }\n      }\n    } else if (this.isSelectionEnabled()) {\n      this.disableSelection();\n    } else {\n      this.enableSelection();\n    }\n    return this;\n  }\n  isMultipleSelection() {\n    return this.selection.isMultiple();\n  }\n  enableMultipleSelection() {\n    this.selection.enableMultiple();\n    return this;\n  }\n  disableMultipleSelection() {\n    this.selection.disableMultiple();\n    return this;\n  }\n  toggleMultipleSelection(multiple) {\n    if (multiple != null) {\n      if (multiple !== this.isMultipleSelection()) {\n        if (multiple) {\n          this.enableMultipleSelection();\n        } else {\n          this.disableMultipleSelection();\n        }\n      }\n    } else if (this.isMultipleSelection()) {\n      this.disableMultipleSelection();\n    } else {\n      this.enableMultipleSelection();\n    }\n    return this;\n  }\n  isSelectionMovable() {\n    return this.selection.widget.options.movable !== false;\n  }\n  enableSelectionMovable() {\n    this.selection.widget.options.movable = true;\n    return this;\n  }\n  disableSelectionMovable() {\n    this.selection.widget.options.movable = false;\n    return this;\n  }\n  toggleSelectionMovable(movable) {\n    if (movable != null) {\n      if (movable !== this.isSelectionMovable()) {\n        if (movable) {\n          this.enableSelectionMovable();\n        } else {\n          this.disableSelectionMovable();\n        }\n      }\n    } else if (this.isSelectionMovable()) {\n      this.disableSelectionMovable();\n    } else {\n      this.enableSelectionMovable();\n    }\n    return this;\n  }\n  isRubberbandEnabled() {\n    return !this.selection.rubberbandDisabled;\n  }\n  enableRubberband() {\n    this.selection.enableRubberband();\n    return this;\n  }\n  disableRubberband() {\n    this.selection.disableRubberband();\n    return this;\n  }\n  toggleRubberband(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isRubberbandEnabled()) {\n        if (enabled) {\n          this.enableRubberband();\n        } else {\n          this.disableRubberband();\n        }\n      }\n    } else if (this.isRubberbandEnabled()) {\n      this.disableRubberband();\n    } else {\n      this.enableRubberband();\n    }\n    return this;\n  }\n  isStrictRubberband() {\n    return this.selection.widget.options.strict === true;\n  }\n  enableStrictRubberband() {\n    this.selection.widget.options.strict = true;\n    return this;\n  }\n  disableStrictRubberband() {\n    this.selection.widget.options.strict = false;\n    return this;\n  }\n  toggleStrictRubberband(strict) {\n    if (strict != null) {\n      if (strict !== this.isStrictRubberband()) {\n        if (strict) {\n          this.enableStrictRubberband();\n        } else {\n          this.disableStrictRubberband();\n        }\n      }\n    } else if (this.isStrictRubberband()) {\n      this.disableStrictRubberband();\n    } else {\n      this.enableStrictRubberband();\n    }\n    return this;\n  }\n  setRubberbandModifiers(modifiers) {\n    this.selection.setModifiers(modifiers);\n  }\n  setSelectionFilter(filter) {\n    this.selection.setFilter(filter);\n    return this;\n  }\n  setSelectionDisplayContent(content) {\n    this.selection.setContent(content);\n    return this;\n  }\n  isSelectionEmpty() {\n    return this.selection.isEmpty();\n  }\n  cleanSelection(options) {\n    this.selection.clean(options);\n    return this;\n  }\n  resetSelection(cells, options) {\n    this.selection.reset(cells, options);\n    return this;\n  }\n  getSelectedCells() {\n    return this.selection.cells;\n  }\n  getSelectedCellCount() {\n    return this.selection.length;\n  }\n  isSelected(cell) {\n    return this.selection.isSelected(cell);\n  }\n  select(cells, options) {\n    this.selection.select(cells, options);\n    return this;\n  }\n  unselect(cells, options) {\n    this.selection.unselect(cells, options);\n    return this;\n  }\n  // #endregion\n  // #region snapline\n  isSnaplineEnabled() {\n    return !this.snapline.widget.disabled;\n  }\n  enableSnapline() {\n    this.snapline.widget.enable();\n    return this;\n  }\n  disableSnapline() {\n    this.snapline.widget.disable();\n    return this;\n  }\n  toggleSnapline(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isSnaplineEnabled()) {\n        if (enabled) {\n          this.enableSnapline();\n        } else {\n          this.disableSnapline();\n        }\n      }\n    } else {\n      if (this.isSnaplineEnabled()) {\n        this.disableSnapline();\n      } else {\n        this.enableSnapline();\n      }\n      return this;\n    }\n  }\n  hideSnapline() {\n    this.snapline.widget.hide();\n    return this;\n  }\n  setSnaplineFilter(filter) {\n    this.snapline.widget.setFilter(filter);\n    return this;\n  }\n  isSnaplineOnResizingEnabled() {\n    return this.snapline.widget.options.resizing === true;\n  }\n  enableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = true;\n    return this;\n  }\n  disableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = false;\n    return this;\n  }\n  toggleSnaplineOnResizing(enableOnResizing) {\n    if (enableOnResizing != null) {\n      if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n        if (enableOnResizing) {\n          this.enableSnaplineOnResizing();\n        } else {\n          this.disableSnaplineOnResizing();\n        }\n      }\n    } else if (this.isSnaplineOnResizingEnabled()) {\n      this.disableSnaplineOnResizing();\n    } else {\n      this.enableSnaplineOnResizing();\n    }\n    return this;\n  }\n  isSharpSnapline() {\n    return this.snapline.widget.options.sharp === true;\n  }\n  enableSharpSnapline() {\n    this.snapline.widget.options.sharp = true;\n    return this;\n  }\n  disableSharpSnapline() {\n    this.snapline.widget.options.sharp = false;\n    return this;\n  }\n  toggleSharpSnapline(sharp) {\n    if (sharp != null) {\n      if (sharp !== this.isSharpSnapline()) {\n        if (sharp) {\n          this.enableSharpSnapline();\n        } else {\n          this.disableSharpSnapline();\n        }\n      }\n    } else if (this.isSharpSnapline()) {\n      this.disableSharpSnapline();\n    } else {\n      this.enableSharpSnapline();\n    }\n    return this;\n  }\n  getSnaplineTolerance() {\n    return this.snapline.widget.options.tolerance;\n  }\n  setSnaplineTolerance(tolerance) {\n    this.snapline.widget.options.tolerance = tolerance;\n    return this;\n  }\n  // #endregion\n  // #region tools\n  removeTools() {\n    this.emit('tools:remove');\n    return this;\n  }\n  hideTools() {\n    this.emit('tools:hide');\n    return this;\n  }\n  showTools() {\n    this.emit('tools:show');\n    return this;\n  }\n  // #endregion\n  // #region format\n  toSVG(callback, options = {}) {\n    this.format.toSVG(callback, options);\n  }\n  toDataURL(callback, options) {\n    this.format.toDataURL(callback, options);\n  }\n  toPNG(callback, options = {}) {\n    this.format.toPNG(callback, options);\n  }\n  toJPEG(callback, options = {}) {\n    this.format.toJPEG(callback, options);\n  }\n  // #endregion\n  // #region print\n  printPreview(options) {\n    this.print.show(options);\n  }\n  // #endregion\n  // #region dispose\n  dispose() {\n    this.clearCells();\n    this.off();\n    this.css.dispose();\n    this.hook.dispose();\n    this.defs.dispose();\n    this.grid.dispose();\n    this.coord.dispose();\n    this.transform.dispose();\n    this.knob.dispose();\n    this.highlight.dispose();\n    this.background.dispose();\n    this.clipboard.dispose();\n    this.snapline.dispose();\n    this.selection.dispose();\n    this.history.dispose();\n    this.keyboard.dispose();\n    this.mousewheel.dispose();\n    this.print.dispose();\n    this.format.dispose();\n    this.minimap.dispose();\n    this.panning.dispose();\n    this.scroller.dispose();\n    this.view.dispose();\n    this.renderer.dispose();\n    this.size.dispose();\n  }\n}\n__decorate([Decorator.checkScroller()], Graph.prototype, \"lockScroller\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"unlockScroller\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"updateScroller\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"getScrollbarPosition\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"setScrollbarPosition\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToPoint\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToContent\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToCell\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToPoint\", null);\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToRect\", null);\n__decorate([Basecoat.dispose()], Graph.prototype, \"dispose\", null);\n(function (Graph) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  Graph.View = GraphView;\n  Graph.Hook = HookManager;\n  Graph.Renderer = ViewRenderer;\n  Graph.Keyboard = Shortcut;\n  Graph.MouseWheel = Wheel;\n  Graph.BaseManager = Base;\n  Graph.DefsManager = Defs;\n  Graph.GridManager = Grid;\n  Graph.CoordManager = Coord;\n  Graph.PrintManager = Print;\n  Graph.FormatManager = Format;\n  Graph.MiniMapManager = MiniMap;\n  Graph.HistoryManager = History;\n  Graph.SnaplineManager = Snapline;\n  Graph.ScrollerManager = Scroller;\n  Graph.ClipboardManager = Clipboard;\n  Graph.TransformManager = Transform;\n  Graph.HighlightManager = Highlight;\n  Graph.BackgroundManager = Background;\n  Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.toStringTag = `X6.${Graph.name}`;\n  function isGraph(instance) {\n    if (instance == null) {\n      return false;\n    }\n    if (instance instanceof Graph) {\n      return true;\n    }\n    const tag = instance[Symbol.toStringTag];\n    const graph = instance;\n    if ((tag == null || tag === Graph.toStringTag) && graph.hook != null && graph.view != null && graph.model != null) {\n      return true;\n    }\n    return false;\n  }\n  Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  function render(options, data) {\n    const graph = options instanceof HTMLElement ? new Graph({\n      container: options\n    }) : new Graph(options);\n    if (data != null) {\n      graph.fromJSON(data);\n    }\n    return graph;\n  }\n  Graph.render = render;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.registerNode = Node.registry.register;\n  Graph.registerEdge = Edge.registry.register;\n  Graph.registerView = CellView.registry.register;\n  Graph.registerAttr = Registry.Attr.registry.register;\n  Graph.registerGrid = Registry.Grid.registry.register;\n  Graph.registerFilter = Registry.Filter.registry.register;\n  Graph.registerNodeTool = Registry.NodeTool.registry.register;\n  Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n  Graph.registerBackground = Registry.Background.registry.register;\n  Graph.registerHighlighter = Registry.Highlighter.registry.register;\n  Graph.registerPortLayout = Registry.PortLayout.registry.register;\n  Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n  Graph.registerMarker = Registry.Marker.registry.register;\n  Graph.registerRouter = Registry.Router.registry.register;\n  Graph.registerConnector = Registry.Connector.registry.register;\n  Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n  Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n  Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n  Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n  Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.unregisterNode = Node.registry.unregister;\n  Graph.unregisterEdge = Edge.registry.unregister;\n  Graph.unregisterView = CellView.registry.unregister;\n  Graph.unregisterAttr = Registry.Attr.registry.unregister;\n  Graph.unregisterGrid = Registry.Grid.registry.unregister;\n  Graph.unregisterFilter = Registry.Filter.registry.unregister;\n  Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n  Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n  Graph.unregisterBackground = Registry.Background.registry.unregister;\n  Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n  Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n  Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n  Graph.unregisterMarker = Registry.Marker.registry.unregister;\n  Graph.unregisterRouter = Registry.Router.registry.unregister;\n  Graph.unregisterConnector = Registry.Connector.registry.unregister;\n  Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n  Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n  Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n  Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n  Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));","map":{"version":3,"names":["Basecoat","Point","Rectangle","Cell","Node","Edge","CellView","Registry","HTML","Base","GraphView","Decorator","CSSManager","Hook","HookManager","Options","GraphOptions","DefsManager","Defs","GridManager","Grid","CoordManager","Coord","Keyboard","Shortcut","PrintManager","Print","MouseWheel","Wheel","FormatManager","Format","Renderer","ViewRenderer","HistoryManager","History","MiniMapManager","MiniMap","SnaplineManager","Snapline","ScrollerManager","Scroller","SelectionManager","Selection","HighlightManager","Highlight","TransformManager","Transform","ClipboardManager","Clipboard","BackgroundManager","Background","Graph","constructor","options","get","css","hook","view","createView","defs","createDefsManager","coord","createCoordManager","transform","createTransformManager","knob","createKnobManager","highlight","createHighlightManager","grid","createGridManager","background","createBackgroundManager","model","createModel","renderer","createRenderer","clipboard","createClipboardManager","snapline","createSnaplineManager","selection","createSelectionManager","history","createHistoryManager","scroller","createScrollerManager","minimap","createMiniMapManager","keyboard","createKeyboard","mousewheel","createMouseWheel","print","createPrintManager","format","createFormatManager","panning","createPanningManager","size","createSizeManager","container","Symbol","toStringTag","isNode","cell","isEdge","resetCells","cells","clearCells","clear","toJSON","parseJSON","data","fromJSON","getCellById","id","getCell","addNode","node","addNodes","nodes","addCell","map","createNode","metadata","removeNode","removeCell","addEdge","edge","addEdges","edges","createEdge","removeEdge","removeCells","removeConnectedEdges","disconnectConnectedEdges","hasCell","has","getCells","getCellCount","total","getNodes","getEdges","getOutgoingEdges","getIncomingEdges","getConnectedEdges","getRootNodes","getRoots","getLeafNodes","getLeafs","isRootNode","isRoot","isLeafNode","isLeaf","getNeighbors","isNeighbor","cell1","cell2","getSuccessors","isSuccessor","getPredecessors","isPredecessor","getCommonAncestor","getSubGraph","cloneSubGraph","cloneCells","getNodesFromPoint","x","y","getNodesInArea","w","h","getNodesUnderNode","searchCell","iterator","search","getShortestPath","source","target","getAllCellsBBox","getCellsBBox","startBatch","name","stopBatch","batchUpdate","arg1","arg2","arg3","execute","result","updateCellId","newId","isFrozen","freeze","unfreeze","isAsync","setAsync","async","findView","ref","isCell","findViewByCell","findViewByElem","findViews","isRectangleLike","findViewsInArea","isPointLike","findViewsFromPoint","elem","p","width","height","rect","localOptions","isViewMounted","getMountedViews","getUnmountedViews","matrix","mat","getMatrix","setMatrix","resize","resizeGraph","resizeScroller","resizePage","scale","sx","sy","cx","cy","getScale","zoom","factor","widget","getZoom","zoomTo","Object","assign","absolute","zoomToRect","zoomToFit","rotate","angle","getRotation","translate","tx","ty","getTranslation","translateBy","dx","dy","ts","getArea","getGraphArea","getContentArea","getContentBBox","fitToContent","gridWidth","gridHeight","padding","scaleContentToFit","center","optons","centerPoint","centerContent","centerCell","positionPoint","point","positionRect","direction","positionCell","positionContent","pos","getClientMatrix","getClientOffset","getPageOffset","snapToGrid","pageToLocal","pageToLocalRect","pageToLocalPoint","localToPage","localToPageRect","localToPagePoint","clientToLocal","clientToLocalRect","clientToLocalPoint","localToClient","localToClientRect","localToClientPoint","localToGraph","localToGraphRect","localToGraphPoint","graphToLocal","graphToLocalRect","graphToLocalPoint","clientToGraph","clientToGraphRect","clientToGraphPoint","defineFilter","filter","defineGradient","gradient","defineMarker","marker","getGridSize","setGridSize","gridSize","showGrid","show","hideGrid","hide","clearGrid","drawGrid","draw","updateBackground","update","drawBackground","onGraph","backgroundManager","clearBackground","isClipboardEnabled","disabled","enableClipboard","enable","disableClipboard","disable","toggleClipboard","enabled","isClipboardEmpty","isEmpty","getCellsInClipboard","cleanClipboard","clean","copy","cut","paste","graph","isHistoryEnabled","enableHistory","disableHistory","toggleHistory","undo","undoAndCancel","cancel","redo","canUndo","canRedo","cleanHistory","isKeyboardEnabled","enableKeyboard","disableKeyboard","toggleKeyboard","bindKey","keys","callback","action","on","unbindKey","off","isMouseWheelEnabled","enableMouseWheel","disableMouseWheel","toggleMouseWheel","isPannable","pannable","enablePanning","disablePanning","togglePanning","lockScroller","_a","lock","unlockScroller","unlock","updateScroller","getScrollbarPosition","scrollbarPosition","setScrollbarPosition","left","top","scrollToPoint","scrollToContent","scrollToCell","transitionToPoint","transitionToRect","isSelectionEnabled","enableSelection","disableSelection","toggleSelection","isMultipleSelection","isMultiple","enableMultipleSelection","enableMultiple","disableMultipleSelection","disableMultiple","toggleMultipleSelection","multiple","isSelectionMovable","movable","enableSelectionMovable","disableSelectionMovable","toggleSelectionMovable","isRubberbandEnabled","rubberbandDisabled","enableRubberband","disableRubberband","toggleRubberband","isStrictRubberband","strict","enableStrictRubberband","disableStrictRubberband","toggleStrictRubberband","setRubberbandModifiers","modifiers","setModifiers","setSelectionFilter","setFilter","setSelectionDisplayContent","content","setContent","isSelectionEmpty","cleanSelection","resetSelection","reset","getSelectedCells","getSelectedCellCount","length","isSelected","select","unselect","isSnaplineEnabled","enableSnapline","disableSnapline","toggleSnapline","hideSnapline","setSnaplineFilter","isSnaplineOnResizingEnabled","resizing","enableSnaplineOnResizing","disableSnaplineOnResizing","toggleSnaplineOnResizing","enableOnResizing","isSharpSnapline","sharp","enableSharpSnapline","disableSharpSnapline","toggleSharpSnapline","getSnaplineTolerance","tolerance","setSnaplineTolerance","removeTools","emit","hideTools","showTools","toSVG","toDataURL","toPNG","toJPEG","printPreview","dispose","__decorate","checkScroller","View","BaseManager","isGraph","instance","tag","render","HTMLElement","registerNode","registry","register","registerEdge","registerView","registerAttr","Attr","registerGrid","registerFilter","Filter","registerNodeTool","NodeTool","registerEdgeTool","EdgeTool","registerBackground","registerHighlighter","Highlighter","registerPortLayout","PortLayout","registerPortLabelLayout","PortLabelLayout","registerMarker","Marker","registerRouter","Router","registerConnector","Connector","registerAnchor","NodeAnchor","registerEdgeAnchor","EdgeAnchor","registerConnectionPoint","ConnectionPoint","registerConnectionStrategy","ConnectionStrategy","registerHTMLComponent","componentRegistry","unregisterNode","unregister","unregisterEdge","unregisterView","unregisterAttr","unregisterGrid","unregisterFilter","unregisterNodeTool","unregisterEdgeTool","unregisterBackground","unregisterHighlighter","unregisterPortLayout","unregisterPortLabelLayout","unregisterMarker","unregisterRouter","unregisterConnector","unregisterAnchor","unregisterEdgeAnchor","unregisterConnectionPoint","unregisterConnectionStrategy","unregisterHTMLComponent"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/graph/graph.ts"],"sourcesContent":["import { Basecoat } from '../common'\nimport { NumberExt, Dom } from '../util'\nimport { Point, Rectangle } from '../geometry'\nimport { KeyValue, ModifierKey } from '../types'\nimport { Cell } from '../model/cell'\nimport { Node } from '../model/node'\nimport { Edge } from '../model/edge'\nimport { Model } from '../model/model'\nimport { Collection } from '../model/collection'\nimport { CellView } from '../view/cell'\nimport * as Registry from '../registry'\nimport { HTML } from '../shape/standard/html'\nimport { Scroller as ScrollerWidget } from '../addon/scroller'\nimport { Base } from './base'\nimport { GraphView } from './view'\nimport { EventArgs } from './events'\nimport { Decorator } from './decorator'\nimport { CSSManager } from './css'\nimport { SizeManager } from './size'\nimport { Hook as HookManager } from './hook'\nimport { Options as GraphOptions } from './options'\nimport { DefsManager as Defs } from './defs'\nimport { GridManager as Grid } from './grid'\nimport { CoordManager as Coord } from './coord'\nimport { Keyboard as Shortcut } from './keyboard'\nimport { KnobManager as Knob } from './knob'\nimport { PrintManager as Print } from './print'\nimport { MouseWheel as Wheel } from './mousewheel'\nimport { FormatManager as Format } from './format'\nimport { Renderer as ViewRenderer } from './renderer'\nimport { HistoryManager as History } from './history'\nimport { PanningManager as Panning } from './panning'\nimport { MiniMapManager as MiniMap } from './minimap'\nimport { SnaplineManager as Snapline } from './snapline'\nimport { ScrollerManager as Scroller } from './scroller'\nimport { SelectionManager as Selection } from './selection'\nimport { HighlightManager as Highlight } from './highlight'\nimport { TransformManager as Transform } from './transform'\nimport { ClipboardManager as Clipboard } from './clipboard'\nimport { BackgroundManager as Background } from './background'\n\nexport class Graph extends Basecoat<EventArgs> {\n  public readonly options: GraphOptions.Definition\n  public readonly css: CSSManager\n  public readonly model: Model\n  public readonly view: GraphView\n  public readonly hook: HookManager\n  public readonly grid: Grid\n  public readonly defs: Defs\n  public readonly knob: Knob\n  public readonly coord: Coord\n  public readonly renderer: ViewRenderer\n  public readonly snapline: Snapline\n  public readonly highlight: Highlight\n  public readonly transform: Transform\n  public readonly clipboard: Clipboard\n  public readonly selection: Selection\n  public readonly background: Background\n  public readonly history: History\n  public readonly scroller: Scroller\n  public readonly minimap: MiniMap\n  public readonly keyboard: Shortcut\n  public readonly mousewheel: Wheel\n  public readonly panning: Panning\n  public readonly print: Print\n  public readonly format: Format\n  public readonly size: SizeManager\n\n  public get container() {\n    return this.view.container\n  }\n\n  protected get [Symbol.toStringTag]() {\n    return Graph.toStringTag\n  }\n\n  constructor(options: Partial<GraphOptions.Manual>) {\n    super()\n\n    this.options = GraphOptions.get(options)\n    this.css = new CSSManager(this)\n    this.hook = new HookManager(this)\n    this.view = this.hook.createView()\n    this.defs = this.hook.createDefsManager()\n    this.coord = this.hook.createCoordManager()\n    this.transform = this.hook.createTransformManager()\n    this.knob = this.hook.createKnobManager()\n    this.highlight = this.hook.createHighlightManager()\n    this.grid = this.hook.createGridManager()\n    this.background = this.hook.createBackgroundManager()\n    this.model = this.hook.createModel()\n    this.renderer = this.hook.createRenderer()\n    this.clipboard = this.hook.createClipboardManager()\n    this.snapline = this.hook.createSnaplineManager()\n    this.selection = this.hook.createSelectionManager()\n    this.history = this.hook.createHistoryManager()\n    this.scroller = this.hook.createScrollerManager()\n    this.minimap = this.hook.createMiniMapManager()\n    this.keyboard = this.hook.createKeyboard()\n    this.mousewheel = this.hook.createMouseWheel()\n    this.print = this.hook.createPrintManager()\n    this.format = this.hook.createFormatManager()\n    this.panning = this.hook.createPanningManager()\n    this.size = this.hook.createSizeManager()\n  }\n\n  // #region model\n\n  isNode(cell: Cell): cell is Node {\n    return cell.isNode()\n  }\n\n  isEdge(cell: Cell): cell is Edge {\n    return cell.isEdge()\n  }\n\n  resetCells(cells: Cell[], options: Collection.SetOptions = {}) {\n    this.model.resetCells(cells, options)\n    return this\n  }\n\n  clearCells(options: Cell.SetOptions = {}) {\n    this.model.clear(options)\n    return this\n  }\n\n  toJSON(options: Model.ToJSONOptions = {}) {\n    return this.model.toJSON(options)\n  }\n\n  parseJSON(data: Model.FromJSONData) {\n    return this.model.parseJSON(data)\n  }\n\n  fromJSON(data: Model.FromJSONData, options: Model.FromJSONOptions = {}) {\n    this.model.fromJSON(data, options)\n    return this\n  }\n\n  getCellById(id: string) {\n    return this.model.getCell(id)\n  }\n\n  addNode(metadata: Node.Metadata, options?: Model.AddOptions): Node\n  addNode(node: Node, options?: Model.AddOptions): Node\n  addNode(node: Node | Node.Metadata, options: Model.AddOptions = {}): Node {\n    return this.model.addNode(node, options)\n  }\n\n  addNodes(nodes: (Node | Node.Metadata)[], options: Model.AddOptions = {}) {\n    return this.addCell(\n      nodes.map((node) => (Node.isNode(node) ? node : this.createNode(node))),\n      options,\n    )\n  }\n\n  createNode(metadata: Node.Metadata) {\n    return this.model.createNode(metadata)\n  }\n\n  removeNode(nodeId: string, options?: Collection.RemoveOptions): Node | null\n  removeNode(node: Node, options?: Collection.RemoveOptions): Node | null\n  removeNode(node: Node | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(node as Node, options) as Node\n  }\n\n  addEdge(metadata: Edge.Metadata, options?: Model.AddOptions): Edge\n  addEdge(edge: Edge, options?: Model.AddOptions): Edge\n  addEdge(edge: Edge | Edge.Metadata, options: Model.AddOptions = {}): Edge {\n    return this.model.addEdge(edge, options)\n  }\n\n  addEdges(edges: (Edge | Edge.Metadata)[], options: Model.AddOptions = {}) {\n    return this.addCell(\n      edges.map((edge) => (Edge.isEdge(edge) ? edge : this.createEdge(edge))),\n      options,\n    )\n  }\n\n  removeEdge(edgeId: string, options?: Collection.RemoveOptions): Edge | null\n  removeEdge(edge: Edge, options?: Collection.RemoveOptions): Edge | null\n  removeEdge(edge: Edge | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(edge as Edge, options) as Edge\n  }\n\n  createEdge(metadata: Edge.Metadata) {\n    return this.model.createEdge(metadata)\n  }\n\n  addCell(cell: Cell | Cell[], options: Model.AddOptions = {}) {\n    this.model.addCell(cell, options)\n    return this\n  }\n\n  removeCell(cellId: string, options?: Collection.RemoveOptions): Cell | null\n  removeCell(cell: Cell, options?: Collection.RemoveOptions): Cell | null\n  removeCell(cell: Cell | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(cell as Cell, options)\n  }\n\n  removeCells(cells: (Cell | string)[], options: Cell.RemoveOptions = {}) {\n    return this.model.removeCells(cells, options)\n  }\n\n  removeConnectedEdges(cell: Cell | string, options: Cell.RemoveOptions = {}) {\n    return this.model.removeConnectedEdges(cell, options)\n  }\n\n  disconnectConnectedEdges(cell: Cell | string, options: Edge.SetOptions = {}) {\n    this.model.disconnectConnectedEdges(cell, options)\n    return this\n  }\n\n  hasCell(cellId: string): boolean\n  hasCell(cell: Cell): boolean\n  hasCell(cell: string | Cell): boolean {\n    return this.model.has(cell as Cell)\n  }\n\n  /**\n   * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n   * major release. Use `getCellById()` instead.\n   *\n   * @deprecated\n   */\n  getCell<T extends Cell = Cell>(id: string) {\n    return this.model.getCell<T>(id)\n  }\n\n  getCells() {\n    return this.model.getCells()\n  }\n\n  getCellCount() {\n    return this.model.total()\n  }\n\n  /**\n   * Returns all the nodes in the graph.\n   */\n  getNodes() {\n    return this.model.getNodes()\n  }\n\n  /**\n   * Returns all the edges in the graph.\n   */\n  getEdges() {\n    return this.model.getEdges()\n  }\n\n  /**\n   * Returns all outgoing edges for the node.\n   */\n  getOutgoingEdges(cell: Cell | string) {\n    return this.model.getOutgoingEdges(cell)\n  }\n\n  /**\n   * Returns all incoming edges for the node.\n   */\n  getIncomingEdges(cell: Cell | string) {\n    return this.model.getIncomingEdges(cell)\n  }\n\n  /**\n   * Returns edges connected with cell.\n   */\n  getConnectedEdges(\n    cell: Cell | string,\n    options: Model.GetConnectedEdgesOptions = {},\n  ) {\n    return this.model.getConnectedEdges(cell, options)\n  }\n\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n  getRootNodes() {\n    return this.model.getRoots()\n  }\n\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n  getLeafNodes() {\n    return this.model.getLeafs()\n  }\n\n  /**\n   * Returns `true` if the node is a root node, i.e.\n   * there is no  edges coming to the node.\n   */\n  isRootNode(cell: Cell | string) {\n    return this.model.isRoot(cell)\n  }\n\n  /**\n   * Returns `true` if the node is a leaf node, i.e.\n   * there is no edges going out from the node.\n   */\n  isLeafNode(cell: Cell | string) {\n    return this.model.isLeaf(cell)\n  }\n\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n  getNeighbors(cell: Cell, options: Model.GetNeighborsOptions = {}) {\n    return this.model.getNeighbors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n  isNeighbor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetNeighborsOptions = {},\n  ) {\n    return this.model.isNeighbor(cell1, cell2, options)\n  }\n\n  getSuccessors(cell: Cell, options: Model.GetPredecessorsOptions = {}) {\n    return this.model.getSuccessors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n  isSuccessor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetPredecessorsOptions = {},\n  ) {\n    return this.model.isSuccessor(cell1, cell2, options)\n  }\n\n  getPredecessors(cell: Cell, options: Model.GetPredecessorsOptions = {}) {\n    return this.model.getPredecessors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n  isPredecessor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetPredecessorsOptions = {},\n  ) {\n    return this.model.isPredecessor(cell1, cell2, options)\n  }\n\n  getCommonAncestor(...cells: (Cell | null | undefined)[]) {\n    return this.model.getCommonAncestor(...cells)\n  }\n\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n  getSubGraph(cells: Cell[], options: Model.GetSubgraphOptions = {}) {\n    return this.model.getSubGraph(cells, options)\n  }\n\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n  cloneSubGraph(cells: Cell[], options: Model.GetSubgraphOptions = {}) {\n    return this.model.cloneSubGraph(cells, options)\n  }\n\n  cloneCells(cells: Cell[]) {\n    return this.model.cloneCells(cells)\n  }\n\n  /**\n   * Returns an array of nodes whose bounding box contains point.\n   * Note that there can be more then one node as nodes might overlap.\n   */\n  getNodesFromPoint(x: number, y: number): Node[]\n  getNodesFromPoint(p: Point.PointLike): Node[]\n  getNodesFromPoint(x: number | Point.PointLike, y?: number) {\n    return this.model.getNodesFromPoint(x as number, y as number)\n  }\n\n  /**\n   * Returns an array of nodes whose bounding box top/left coordinate\n   * falls into the rectangle.\n   */\n  getNodesInArea(\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[]\n  getNodesInArea(\n    rect: Rectangle.RectangleLike,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[]\n  getNodesInArea(\n    x: number | Rectangle.RectangleLike,\n    y?: number | Model.GetCellsInAreaOptions,\n    w?: number,\n    h?: number,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[] {\n    return this.model.getNodesInArea(\n      x as number,\n      y as number,\n      w as number,\n      h as number,\n      options,\n    )\n  }\n\n  getNodesUnderNode(\n    node: Node,\n    options: {\n      by?: 'bbox' | Rectangle.KeyPoint\n    } = {},\n  ) {\n    return this.model.getNodesUnderNode(node, options)\n  }\n\n  searchCell(\n    cell: Cell,\n    iterator: Model.SearchIterator,\n    options: Model.SearchOptions = {},\n  ) {\n    this.model.search(cell, iterator, options)\n    return this\n  }\n\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n  getShortestPath(\n    source: Cell | string,\n    target: Cell | string,\n    options: Model.GetShortestPathOptions = {},\n  ) {\n    return this.model.getShortestPath(source, target, options)\n  }\n\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n  getAllCellsBBox() {\n    return this.model.getAllCellsBBox()\n  }\n\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n  getCellsBBox(cells: Cell[], options: Cell.GetCellsBBoxOptions = {}) {\n    return this.model.getCellsBBox(cells, options)\n  }\n\n  startBatch(name: string | Model.BatchName, data: KeyValue = {}) {\n    this.model.startBatch(name as Model.BatchName, data)\n  }\n\n  stopBatch(name: string | Model.BatchName, data: KeyValue = {}) {\n    this.model.stopBatch(name as Model.BatchName, data)\n  }\n\n  batchUpdate<T>(execute: () => T, data?: KeyValue): T\n  batchUpdate<T>(\n    name: string | Model.BatchName,\n    execute: () => T,\n    data?: KeyValue,\n  ): T\n  batchUpdate<T>(\n    arg1: string | Model.BatchName | (() => T),\n    arg2?: (() => T) | KeyValue,\n    arg3?: KeyValue,\n  ): T {\n    const name = typeof arg1 === 'string' ? arg1 : 'update'\n    const execute = typeof arg1 === 'string' ? (arg2 as () => T) : arg1\n    const data = typeof arg2 === 'function' ? arg3 : arg2\n    this.startBatch(name, data)\n    const result = execute()\n    this.stopBatch(name, data)\n    return result\n  }\n\n  updateCellId(cell: Cell, newId: string) {\n    return this.model.updateCellId(cell, newId)\n  }\n\n  // #endregion\n\n  // #region view\n\n  isFrozen() {\n    return this.renderer.isFrozen()\n  }\n\n  freeze(options: ViewRenderer.FreezeOptions = {}) {\n    this.renderer.freeze(options)\n    return this\n  }\n\n  unfreeze(options: ViewRenderer.UnfreezeOptions = {}) {\n    this.renderer.unfreeze(options)\n    return this\n  }\n\n  isAsync() {\n    return this.renderer.isAsync()\n  }\n\n  setAsync(async: boolean) {\n    this.renderer.setAsync(async)\n    return this\n  }\n\n  findView(ref: Cell | JQuery | Element) {\n    if (Cell.isCell(ref)) {\n      return this.findViewByCell(ref)\n    }\n\n    return this.findViewByElem(ref)\n  }\n\n  findViews(ref: Point.PointLike | Rectangle.RectangleLike) {\n    if (Rectangle.isRectangleLike(ref)) {\n      return this.findViewsInArea(ref)\n    }\n\n    if (Point.isPointLike(ref)) {\n      return this.findViewsFromPoint(ref)\n    }\n\n    return []\n  }\n\n  findViewByCell(cellId: string | number): CellView | null\n  findViewByCell(cell: Cell | null): CellView | null\n  findViewByCell(\n    cell: Cell | string | number | null | undefined,\n  ): CellView | null {\n    return this.renderer.findViewByCell(cell as Cell)\n  }\n\n  findViewByElem(elem: string | JQuery | Element | undefined | null) {\n    return this.renderer.findViewByElem(elem)\n  }\n\n  findViewsFromPoint(x: number, y: number): CellView[]\n  findViewsFromPoint(p: Point.PointLike): CellView[]\n  findViewsFromPoint(x: number | Point.PointLike, y?: number) {\n    const p = typeof x === 'number' ? { x, y: y as number } : x\n    return this.renderer.findViewsFromPoint(p)\n  }\n\n  findViewsInArea(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ): CellView[]\n  findViewsInArea(\n    rect: Rectangle.RectangleLike,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ): CellView[]\n  findViewsInArea(\n    x: number | Rectangle.RectangleLike,\n    y?: number | ViewRenderer.FindViewsInAreaOptions,\n    width?: number,\n    height?: number,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ) {\n    const rect =\n      typeof x === 'number'\n        ? {\n            x,\n            y: y as number,\n            width: width as number,\n            height: height as number,\n          }\n        : x\n    const localOptions =\n      typeof x === 'number'\n        ? options\n        : (y as ViewRenderer.FindViewsInAreaOptions)\n    return this.renderer.findViewsInArea(rect, localOptions)\n  }\n\n  isViewMounted(view: CellView) {\n    return this.renderer.isViewMounted(view)\n  }\n\n  getMountedViews() {\n    return this.renderer.getMountedViews()\n  }\n\n  getUnmountedViews() {\n    return this.renderer.getUnmountedViews()\n  }\n\n  // #endregion\n\n  // #region transform\n\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  matrix(): DOMMatrix\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  matrix(mat: DOMMatrix | Dom.MatrixLike | null): this\n  matrix(mat?: DOMMatrix | Dom.MatrixLike | null) {\n    if (typeof mat === 'undefined') {\n      return this.transform.getMatrix()\n    }\n    this.transform.setMatrix(mat)\n    return this\n  }\n\n  resize(width?: number, height?: number) {\n    this.size.resize(width, height)\n    return this\n  }\n\n  resizeGraph(width?: number, height?: number) {\n    this.size.resizeGraph(width, height)\n    return this\n  }\n\n  resizeScroller(width?: number, height?: number) {\n    this.size.resizeScroller(width, height)\n    return this\n  }\n\n  resizePage(width?: number, height?: number) {\n    this.size.resizePage(width, height)\n    return this\n  }\n\n  scale(): Dom.Scale\n  scale(sx: number, sy?: number, cx?: number, cy?: number): this\n  scale(sx?: number, sy: number = sx as number, cx = 0, cy = 0) {\n    if (typeof sx === 'undefined') {\n      return this.transform.getScale()\n    }\n    this.transform.scale(sx, sy, cx, cy)\n    return this\n  }\n\n  zoom(): number\n  zoom(factor: number, options?: Transform.ZoomOptions): this\n  zoom(factor?: number, options?: Transform.ZoomOptions) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      if (typeof factor === 'undefined') {\n        return scroller.zoom()\n      }\n      scroller.zoom(factor, options)\n    } else {\n      if (typeof factor === 'undefined') {\n        return this.transform.getZoom()\n      }\n      this.transform.zoom(factor, options)\n    }\n\n    return this\n  }\n\n  zoomTo(\n    factor: number,\n    options: Omit<Transform.ZoomOptions, 'absolute'> = {},\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.zoom(factor, { ...options, absolute: true })\n    } else {\n      this.transform.zoom(factor, { ...options, absolute: true })\n    }\n\n    return this\n  }\n\n  zoomToRect(\n    rect: Rectangle.RectangleLike,\n    options: Transform.ScaleContentToFitOptions &\n      Transform.ScaleContentToFitOptions = {},\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.zoomToRect(rect, options)\n    } else {\n      this.transform.zoomToRect(rect, options)\n    }\n\n    return this\n  }\n\n  zoomToFit(\n    options: Transform.GetContentAreaOptions &\n      Transform.ScaleContentToFitOptions = {},\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.zoomToFit(options)\n    } else {\n      this.transform.zoomToFit(options)\n    }\n\n    return this\n  }\n\n  rotate(): Dom.Rotation\n  rotate(angle: number, cx?: number, cy?: number): this\n  rotate(angle?: number, cx?: number, cy?: number) {\n    if (typeof angle === 'undefined') {\n      return this.transform.getRotation()\n    }\n\n    this.transform.rotate(angle, cx, cy)\n    return this\n  }\n\n  translate(): Dom.Translation\n  translate(tx: number, ty: number): this\n  translate(tx?: number, ty?: number) {\n    if (typeof tx === 'undefined') {\n      return this.transform.getTranslation()\n    }\n\n    this.transform.translate(tx, ty as number)\n    return this\n  }\n\n  translateBy(dx: number, dy: number): this {\n    const ts = this.translate()\n    const tx = ts.tx + dx\n    const ty = ts.ty + dy\n    return this.translate(tx, ty)\n  }\n\n  /**\n   * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n   * major release. Use `getGraphArea()` instead.\n   *\n   * @deprecated\n   */\n  getArea() {\n    return this.transform.getGraphArea()\n  }\n\n  getGraphArea() {\n    return this.transform.getGraphArea()\n  }\n\n  getContentArea(options: Transform.GetContentAreaOptions = {}) {\n    return this.transform.getContentArea(options)\n  }\n\n  getContentBBox(options: Transform.GetContentAreaOptions = {}) {\n    return this.transform.getContentBBox(options)\n  }\n\n  fitToContent(\n    gridWidth?: number,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: Transform.FitToContentOptions,\n  ): Rectangle\n  fitToContent(options?: Transform.FitToContentFullOptions): Rectangle\n  fitToContent(\n    gridWidth?: number | Transform.FitToContentFullOptions,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: Transform.FitToContentOptions,\n  ) {\n    return this.transform.fitToContent(gridWidth, gridHeight, padding, options)\n  }\n\n  scaleContentToFit(options: Transform.ScaleContentToFitOptions = {}) {\n    this.transform.scaleContentToFit(options)\n    return this\n  }\n\n  /**\n   * Position the center of graph to the center of the viewport.\n   */\n  center(optons?: ScrollerWidget.CenterOptions) {\n    return this.centerPoint(optons)\n  }\n\n  /**\n   * Position the point (x,y) on the graph (in local coordinates) to the\n   * center of the viewport. If only one of the coordinates is specified,\n   * only center along the specified dimension and keep the other coordinate\n   * unchanged.\n   */\n  centerPoint(\n    x: number,\n    y: null | number,\n    options?: ScrollerWidget.CenterOptions,\n  ): this\n  centerPoint(\n    x: null | number,\n    y: number,\n    options?: ScrollerWidget.CenterOptions,\n  ): this\n  centerPoint(optons?: ScrollerWidget.CenterOptions): this\n  centerPoint(\n    x?: number | null | ScrollerWidget.CenterOptions,\n    y?: number | null,\n    options?: ScrollerWidget.CenterOptions,\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.centerPoint(x as number, y as number, options)\n    } else {\n      this.transform.centerPoint(x as number, y as number)\n    }\n\n    return this\n  }\n\n  centerContent(options?: ScrollerWidget.PositionContentOptions) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.centerContent(options)\n    } else {\n      this.transform.centerContent(options)\n    }\n    return this\n  }\n\n  centerCell(cell: Cell, options?: ScrollerWidget.CenterOptions) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.centerCell(cell, options)\n    } else {\n      this.transform.centerCell(cell)\n    }\n\n    return this\n  }\n\n  positionPoint(\n    point: Point.PointLike,\n    x: number | string,\n    y: number | string,\n    options: ScrollerWidget.CenterOptions = {},\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.positionPoint(point, x, y, options)\n    } else {\n      this.transform.positionPoint(point, x, y)\n    }\n\n    return this\n  }\n\n  positionRect(\n    rect: Rectangle.RectangleLike,\n    direction: ScrollerWidget.Direction,\n    options?: ScrollerWidget.CenterOptions,\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.positionRect(rect, direction, options)\n    } else {\n      this.transform.positionRect(rect, direction)\n    }\n\n    return this\n  }\n\n  positionCell(\n    cell: Cell,\n    direction: ScrollerWidget.Direction,\n    options?: ScrollerWidget.CenterOptions,\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.positionCell(cell, direction, options)\n    } else {\n      this.transform.positionCell(cell, direction)\n    }\n\n    return this\n  }\n\n  positionContent(\n    pos: ScrollerWidget.Direction,\n    options?: ScrollerWidget.PositionContentOptions,\n  ) {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      scroller.positionContent(pos, options)\n    } else {\n      this.transform.positionContent(pos, options)\n    }\n\n    return this\n  }\n\n  // #endregion\n\n  // #region coord\n\n  getClientMatrix() {\n    return this.coord.getClientMatrix()\n  }\n\n  /**\n   * Returns coordinates of the graph viewport, relative to the window.\n   */\n  getClientOffset() {\n    return this.coord.getClientOffset()\n  }\n\n  /**\n   * Returns coordinates of the graph viewport, relative to the document.\n   */\n  getPageOffset() {\n    return this.coord.getPageOffset()\n  }\n\n  snapToGrid(p: Point.PointLike): Point\n  snapToGrid(x: number, y: number): Point\n  snapToGrid(x: number | Point.PointLike, y?: number) {\n    return this.coord.snapToGrid(x, y)\n  }\n\n  pageToLocal(rect: Rectangle.RectangleLike): Rectangle\n  pageToLocal(x: number, y: number, width: number, height: number): Rectangle\n  pageToLocal(p: Point.PointLike): Point\n  pageToLocal(x: number, y: number): Point\n  pageToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.pageToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.pageToLocalRect(x, y, width, height)\n    }\n\n    return this.coord.pageToLocalPoint(x, y)\n  }\n\n  localToPage(rect: Rectangle.RectangleLike): Rectangle\n  localToPage(x: number, y: number, width: number, height: number): Rectangle\n  localToPage(p: Point.PointLike): Point\n  localToPage(x: number, y: number): Point\n  localToPage(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToPageRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToPageRect(x, y, width, height)\n    }\n\n    return this.coord.localToPagePoint(x, y)\n  }\n\n  clientToLocal(rect: Rectangle.RectangleLike): Rectangle\n  clientToLocal(x: number, y: number, width: number, height: number): Rectangle\n  clientToLocal(p: Point.PointLike): Point\n  clientToLocal(x: number, y: number): Point\n  clientToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.clientToLocalRect(x, y, width, height)\n    }\n\n    return this.coord.clientToLocalPoint(x, y)\n  }\n\n  localToClient(rect: Rectangle.RectangleLike): Rectangle\n  localToClient(x: number, y: number, width: number, height: number): Rectangle\n  localToClient(p: Point.PointLike): Point\n  localToClient(x: number, y: number): Point\n  localToClient(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToClientRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToClientRect(x, y, width, height)\n    }\n\n    return this.coord.localToClientPoint(x, y)\n  }\n\n  /**\n   * Transform the rectangle `rect` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(rect: Rectangle.RectangleLike): Rectangle\n  /**\n   * Transform the rectangle `x`, `y`, `width`, `height` defined in the local\n   * coordinate system to the graph coordinate system.\n   */\n  localToGraph(x: number, y: number, width: number, height: number): Rectangle\n  /**\n   * Transform the point `p` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(p: Point.PointLike): Point\n  /**\n   * Transform the point `x`, `y` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(x: number, y: number): Point\n  localToGraph(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToGraphRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToGraphRect(x, y, width, height)\n    }\n\n    return this.coord.localToGraphPoint(x, y)\n  }\n\n  graphToLocal(rect: Rectangle.RectangleLike): Rectangle\n  graphToLocal(x: number, y: number, width: number, height: number): Rectangle\n  graphToLocal(p: Point.PointLike): Point\n  graphToLocal(x: number, y: number): Point\n  graphToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.graphToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.graphToLocalRect(x, y, width, height)\n    }\n    return this.coord.graphToLocalPoint(x, y)\n  }\n\n  clientToGraph(rect: Rectangle.RectangleLike): Rectangle\n  clientToGraph(x: number, y: number, width: number, height: number): Rectangle\n  clientToGraph(p: Point.PointLike): Point\n  clientToGraph(x: number, y: number): Point\n  clientToGraph(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToGraphRect(x)\n    }\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.clientToGraphRect(x, y, width, height)\n    }\n    return this.coord.clientToGraphPoint(x, y)\n  }\n\n  // #endregion\n\n  // #region defs\n\n  defineFilter(options: Defs.FilterOptions) {\n    return this.defs.filter(options)\n  }\n\n  defineGradient(options: Defs.GradientOptions) {\n    return this.defs.gradient(options)\n  }\n\n  defineMarker(options: Defs.MarkerOptions) {\n    return this.defs.marker(options)\n  }\n\n  // #endregion\n\n  // #region grid\n\n  getGridSize() {\n    return this.grid.getGridSize()\n  }\n\n  setGridSize(gridSize: number) {\n    this.grid.setGridSize(gridSize)\n    return this\n  }\n\n  showGrid() {\n    this.grid.show()\n    return this\n  }\n\n  hideGrid() {\n    this.grid.hide()\n    return this\n  }\n\n  clearGrid() {\n    this.grid.clear()\n    return this\n  }\n\n  drawGrid(options?: Grid.DrawGridOptions) {\n    this.grid.draw(options)\n    return this\n  }\n\n  // #endregion\n\n  // #region background\n\n  updateBackground() {\n    this.background.update()\n    return this\n  }\n\n  drawBackground(options?: Background.Options, onGraph?: boolean) {\n    const scroller = this.scroller.widget\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.draw(options)\n    } else {\n      this.background.draw(options)\n    }\n    return this\n  }\n\n  clearBackground(onGraph?: boolean) {\n    const scroller = this.scroller.widget\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.clear()\n    } else {\n      this.background.clear()\n    }\n    return this\n  }\n\n  // #endregion\n\n  // #region clipboard\n\n  isClipboardEnabled() {\n    return !this.clipboard.disabled\n  }\n\n  enableClipboard() {\n    this.clipboard.enable()\n    return this\n  }\n\n  disableClipboard() {\n    this.clipboard.disable()\n    return this\n  }\n\n  toggleClipboard(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isClipboardEnabled()) {\n        if (enabled) {\n          this.enableClipboard()\n        } else {\n          this.disableClipboard()\n        }\n      }\n    } else if (this.isClipboardEnabled()) {\n      this.disableClipboard()\n    } else {\n      this.enableClipboard()\n    }\n\n    return this\n  }\n\n  isClipboardEmpty() {\n    return this.clipboard.isEmpty()\n  }\n\n  getCellsInClipboard() {\n    return this.clipboard.cells\n  }\n\n  cleanClipboard() {\n    this.clipboard.clean()\n    return this\n  }\n\n  copy(cells: Cell[], options: Clipboard.CopyOptions = {}) {\n    this.clipboard.copy(cells, options)\n    return this\n  }\n\n  cut(cells: Cell[], options: Clipboard.CopyOptions = {}) {\n    this.clipboard.cut(cells, options)\n    return this\n  }\n\n  paste(options: Clipboard.PasteOptions = {}, graph: Graph = this) {\n    return this.clipboard.paste(options, graph)\n  }\n\n  // #endregion\n\n  // #region redo/undo\n\n  isHistoryEnabled() {\n    return !this.history.disabled\n  }\n\n  enableHistory() {\n    this.history.enable()\n    return this\n  }\n\n  disableHistory() {\n    this.history.disable()\n    return this\n  }\n\n  toggleHistory(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isHistoryEnabled()) {\n        if (enabled) {\n          this.enableHistory()\n        } else {\n          this.disableHistory()\n        }\n      }\n    } else if (this.isHistoryEnabled()) {\n      this.disableHistory()\n    } else {\n      this.enableHistory()\n    }\n\n    return this\n  }\n\n  undo(options: KeyValue = {}) {\n    this.history.undo(options)\n    return this\n  }\n\n  undoAndCancel(options: KeyValue = {}) {\n    this.history.cancel(options)\n    return this\n  }\n\n  redo(options: KeyValue = {}) {\n    this.history.redo(options)\n    return this\n  }\n\n  canUndo() {\n    return this.history.canUndo()\n  }\n\n  canRedo() {\n    return this.history.canRedo()\n  }\n\n  cleanHistory(options: KeyValue = {}) {\n    this.history.clean(options)\n  }\n\n  // #endregion\n\n  // #region keyboard\n\n  isKeyboardEnabled() {\n    return !this.keyboard.disabled\n  }\n\n  enableKeyboard() {\n    this.keyboard.enable()\n    return this\n  }\n\n  disableKeyboard() {\n    this.keyboard.disable()\n    return this\n  }\n\n  toggleKeyboard(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isKeyboardEnabled()) {\n        if (enabled) {\n          this.enableKeyboard()\n        } else {\n          this.disableKeyboard()\n        }\n      }\n    } else if (this.isKeyboardEnabled()) {\n      this.disableKeyboard()\n    } else {\n      this.enableKeyboard()\n    }\n    return this\n  }\n\n  bindKey(\n    keys: string | string[],\n    callback: Shortcut.Handler,\n    action?: Shortcut.Action,\n  ) {\n    this.keyboard.on(keys, callback, action)\n    return this\n  }\n\n  unbindKey(keys: string | string[], action?: Shortcut.Action) {\n    this.keyboard.off(keys, action)\n    return this\n  }\n\n  // #endregion\n\n  // #region mousewheel\n\n  isMouseWheelEnabled() {\n    return !this.mousewheel.disabled\n  }\n\n  enableMouseWheel() {\n    this.mousewheel.enable()\n    return this\n  }\n\n  disableMouseWheel() {\n    this.mousewheel.disable()\n    return this\n  }\n\n  toggleMouseWheel(enabled?: boolean) {\n    if (enabled == null) {\n      if (this.isMouseWheelEnabled()) {\n        this.disableMouseWheel()\n      } else {\n        this.enableMouseWheel()\n      }\n    } else if (enabled) {\n      this.enableMouseWheel()\n    } else {\n      this.disableMouseWheel()\n    }\n    return this\n  }\n\n  // #endregion\n\n  // #region panning\n\n  isPannable() {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      return this.scroller.pannable\n    }\n    return this.panning.pannable\n  }\n\n  enablePanning() {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      this.scroller.enablePanning()\n    } else {\n      this.panning.enablePanning()\n    }\n\n    return this\n  }\n\n  disablePanning() {\n    const scroller = this.scroller.widget\n    if (scroller) {\n      this.scroller.disablePanning()\n    } else {\n      this.panning.disablePanning()\n    }\n\n    return this\n  }\n\n  togglePanning(pannable?: boolean) {\n    if (pannable == null) {\n      if (this.isPannable()) {\n        this.disablePanning()\n      } else {\n        this.enablePanning()\n      }\n    } else if (pannable !== this.isPannable()) {\n      if (pannable) {\n        this.enablePanning()\n      } else {\n        this.disablePanning()\n      }\n    }\n\n    return this\n  }\n\n  // #endregion\n\n  // #region scroller\n\n  @Decorator.checkScroller()\n  lockScroller() {\n    this.scroller.widget?.lock()\n  }\n\n  @Decorator.checkScroller()\n  unlockScroller() {\n    this.scroller.widget?.unlock()\n  }\n\n  @Decorator.checkScroller()\n  updateScroller() {\n    this.scroller.widget?.update()\n  }\n\n  @Decorator.checkScroller()\n  getScrollbarPosition() {\n    const scroller = this.scroller.widget!\n    return scroller.scrollbarPosition()\n  }\n\n  @Decorator.checkScroller()\n  setScrollbarPosition(\n    left?: number,\n    top?: number,\n    options?: ScrollerWidget.ScrollOptions,\n  ) {\n    const scroller = this.scroller.widget!\n    scroller.scrollbarPosition(left, top, options)\n    return this\n  }\n\n  /**\n   * Try to scroll to ensure that the position (x,y) on the graph (in local\n   * coordinates) is at the center of the viewport. If only one of the\n   * coordinates is specified, only scroll in the specified dimension and\n   * keep the other coordinate unchanged.\n   */\n  @Decorator.checkScroller()\n  scrollToPoint(\n    x: number | null | undefined,\n    y: number | null | undefined,\n    options?: ScrollerWidget.ScrollOptions,\n  ) {\n    const scroller = this.scroller.widget!\n    scroller.scrollToPoint(x, y, options)\n    return this\n  }\n\n  /**\n   * Try to scroll to ensure that the center of graph content is at the\n   * center of the viewport.\n   */\n  @Decorator.checkScroller()\n  scrollToContent(options?: ScrollerWidget.ScrollOptions) {\n    const scroller = this.scroller.widget!\n    scroller.scrollToContent(options)\n    return this\n  }\n\n  /**\n   * Try to scroll to ensure that the center of cell is at the center of\n   * the viewport.\n   */\n  @Decorator.checkScroller()\n  scrollToCell(cell: Cell, options?: ScrollerWidget.ScrollOptions) {\n    const scroller = this.scroller.widget!\n    scroller.scrollToCell(cell, options)\n    return this\n  }\n\n  transitionToPoint(\n    p: Point.PointLike,\n    options?: ScrollerWidget.TransitionOptions,\n  ): this\n  transitionToPoint(\n    x: number,\n    y: number,\n    options?: ScrollerWidget.TransitionOptions,\n  ): this\n  @Decorator.checkScroller()\n  transitionToPoint(\n    x: number | Point.PointLike,\n    y?: number | ScrollerWidget.TransitionOptions,\n    options?: ScrollerWidget.TransitionOptions,\n  ) {\n    const scroller = this.scroller.widget!\n    scroller.transitionToPoint(x as number, y as number, options)\n    return this\n  }\n\n  @Decorator.checkScroller()\n  transitionToRect(\n    rect: Rectangle.RectangleLike,\n    options: ScrollerWidget.TransitionToRectOptions = {},\n  ) {\n    const scroller = this.scroller.widget!\n    scroller.transitionToRect(rect, options)\n    return this\n  }\n  // #endregion\n\n  // #region selection\n\n  isSelectionEnabled() {\n    return !this.selection.disabled\n  }\n\n  enableSelection() {\n    this.selection.enable()\n    return this\n  }\n\n  disableSelection() {\n    this.selection.disable()\n    return this\n  }\n\n  toggleSelection(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isSelectionEnabled()) {\n        if (enabled) {\n          this.enableSelection()\n        } else {\n          this.disableSelection()\n        }\n      }\n    } else if (this.isSelectionEnabled()) {\n      this.disableSelection()\n    } else {\n      this.enableSelection()\n    }\n\n    return this\n  }\n\n  isMultipleSelection() {\n    return this.selection.isMultiple()\n  }\n\n  enableMultipleSelection() {\n    this.selection.enableMultiple()\n    return this\n  }\n\n  disableMultipleSelection() {\n    this.selection.disableMultiple()\n    return this\n  }\n\n  toggleMultipleSelection(multiple?: boolean) {\n    if (multiple != null) {\n      if (multiple !== this.isMultipleSelection()) {\n        if (multiple) {\n          this.enableMultipleSelection()\n        } else {\n          this.disableMultipleSelection()\n        }\n      }\n    } else if (this.isMultipleSelection()) {\n      this.disableMultipleSelection()\n    } else {\n      this.enableMultipleSelection()\n    }\n\n    return this\n  }\n\n  isSelectionMovable() {\n    return this.selection.widget.options.movable !== false\n  }\n\n  enableSelectionMovable() {\n    this.selection.widget.options.movable = true\n    return this\n  }\n\n  disableSelectionMovable() {\n    this.selection.widget.options.movable = false\n    return this\n  }\n\n  toggleSelectionMovable(movable?: boolean) {\n    if (movable != null) {\n      if (movable !== this.isSelectionMovable()) {\n        if (movable) {\n          this.enableSelectionMovable()\n        } else {\n          this.disableSelectionMovable()\n        }\n      }\n    } else if (this.isSelectionMovable()) {\n      this.disableSelectionMovable()\n    } else {\n      this.enableSelectionMovable()\n    }\n\n    return this\n  }\n\n  isRubberbandEnabled() {\n    return !this.selection.rubberbandDisabled\n  }\n\n  enableRubberband() {\n    this.selection.enableRubberband()\n    return this\n  }\n\n  disableRubberband() {\n    this.selection.disableRubberband()\n    return this\n  }\n\n  toggleRubberband(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isRubberbandEnabled()) {\n        if (enabled) {\n          this.enableRubberband()\n        } else {\n          this.disableRubberband()\n        }\n      }\n    } else if (this.isRubberbandEnabled()) {\n      this.disableRubberband()\n    } else {\n      this.enableRubberband()\n    }\n\n    return this\n  }\n\n  isStrictRubberband() {\n    return this.selection.widget.options.strict === true\n  }\n\n  enableStrictRubberband() {\n    this.selection.widget.options.strict = true\n    return this\n  }\n\n  disableStrictRubberband() {\n    this.selection.widget.options.strict = false\n    return this\n  }\n\n  toggleStrictRubberband(strict?: boolean) {\n    if (strict != null) {\n      if (strict !== this.isStrictRubberband()) {\n        if (strict) {\n          this.enableStrictRubberband()\n        } else {\n          this.disableStrictRubberband()\n        }\n      }\n    } else if (this.isStrictRubberband()) {\n      this.disableStrictRubberband()\n    } else {\n      this.enableStrictRubberband()\n    }\n\n    return this\n  }\n\n  setRubberbandModifiers(modifiers?: string | ModifierKey[] | null) {\n    this.selection.setModifiers(modifiers)\n  }\n\n  setSelectionFilter(filter?: Selection.Filter) {\n    this.selection.setFilter(filter)\n    return this\n  }\n\n  setSelectionDisplayContent(content?: Selection.Content) {\n    this.selection.setContent(content)\n    return this\n  }\n\n  isSelectionEmpty() {\n    return this.selection.isEmpty()\n  }\n\n  cleanSelection(options?: Selection.SetOptions) {\n    this.selection.clean(options)\n    return this\n  }\n\n  resetSelection(\n    cells?: Cell | string | (Cell | string)[],\n    options?: Selection.SetOptions,\n  ) {\n    this.selection.reset(cells, options)\n    return this\n  }\n\n  getSelectedCells() {\n    return this.selection.cells\n  }\n\n  getSelectedCellCount() {\n    return this.selection.length\n  }\n\n  isSelected(cell: Cell | string) {\n    return this.selection.isSelected(cell)\n  }\n\n  select(\n    cells: Cell | string | (Cell | string)[],\n    options?: Selection.AddOptions,\n  ) {\n    this.selection.select(cells, options)\n    return this\n  }\n\n  unselect(\n    cells: Cell | string | (Cell | string)[],\n    options?: Selection.RemoveOptions,\n  ) {\n    this.selection.unselect(cells, options)\n    return this\n  }\n\n  // #endregion\n\n  // #region snapline\n\n  isSnaplineEnabled() {\n    return !this.snapline.widget.disabled\n  }\n\n  enableSnapline() {\n    this.snapline.widget.enable()\n    return this\n  }\n\n  disableSnapline() {\n    this.snapline.widget.disable()\n    return this\n  }\n\n  toggleSnapline(enabled?: boolean) {\n    if (enabled != null) {\n      if (enabled !== this.isSnaplineEnabled()) {\n        if (enabled) {\n          this.enableSnapline()\n        } else {\n          this.disableSnapline()\n        }\n      }\n    } else {\n      if (this.isSnaplineEnabled()) {\n        this.disableSnapline()\n      } else {\n        this.enableSnapline()\n      }\n      return this\n    }\n  }\n\n  hideSnapline() {\n    this.snapline.widget.hide()\n    return this\n  }\n\n  setSnaplineFilter(filter?: Snapline.Filter) {\n    this.snapline.widget.setFilter(filter)\n    return this\n  }\n\n  isSnaplineOnResizingEnabled() {\n    return this.snapline.widget.options.resizing === true\n  }\n\n  enableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = true\n    return this\n  }\n\n  disableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = false\n    return this\n  }\n\n  toggleSnaplineOnResizing(enableOnResizing?: boolean) {\n    if (enableOnResizing != null) {\n      if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n        if (enableOnResizing) {\n          this.enableSnaplineOnResizing()\n        } else {\n          this.disableSnaplineOnResizing()\n        }\n      }\n    } else if (this.isSnaplineOnResizingEnabled()) {\n      this.disableSnaplineOnResizing()\n    } else {\n      this.enableSnaplineOnResizing()\n    }\n    return this\n  }\n\n  isSharpSnapline() {\n    return this.snapline.widget.options.sharp === true\n  }\n\n  enableSharpSnapline() {\n    this.snapline.widget.options.sharp = true\n    return this\n  }\n\n  disableSharpSnapline() {\n    this.snapline.widget.options.sharp = false\n    return this\n  }\n\n  toggleSharpSnapline(sharp?: boolean) {\n    if (sharp != null) {\n      if (sharp !== this.isSharpSnapline()) {\n        if (sharp) {\n          this.enableSharpSnapline()\n        } else {\n          this.disableSharpSnapline()\n        }\n      }\n    } else if (this.isSharpSnapline()) {\n      this.disableSharpSnapline()\n    } else {\n      this.enableSharpSnapline()\n    }\n    return this\n  }\n\n  getSnaplineTolerance() {\n    return this.snapline.widget.options.tolerance\n  }\n\n  setSnaplineTolerance(tolerance: number) {\n    this.snapline.widget.options.tolerance = tolerance\n    return this\n  }\n\n  // #endregion\n\n  // #region tools\n\n  removeTools() {\n    this.emit('tools:remove')\n    return this\n  }\n\n  hideTools() {\n    this.emit('tools:hide')\n    return this\n  }\n\n  showTools() {\n    this.emit('tools:show')\n    return this\n  }\n\n  // #endregion\n\n  // #region format\n\n  toSVG(callback: Format.ToSVGCallback, options: Format.ToSVGOptions = {}) {\n    this.format.toSVG(callback, options)\n  }\n\n  toDataURL(callback: Format.ToSVGCallback, options: Format.ToDataURLOptions) {\n    this.format.toDataURL(callback, options)\n  }\n\n  toPNG(callback: Format.ToSVGCallback, options: Format.ToImageOptions = {}) {\n    this.format.toPNG(callback, options)\n  }\n\n  toJPEG(callback: Format.ToSVGCallback, options: Format.ToImageOptions = {}) {\n    this.format.toJPEG(callback, options)\n  }\n\n  // #endregion\n\n  // #region print\n\n  printPreview(options?: Partial<Print.Options>) {\n    this.print.show(options)\n  }\n\n  // #endregion\n\n  // #region dispose\n\n  @Basecoat.dispose()\n  dispose() {\n    this.clearCells()\n    this.off()\n\n    this.css.dispose()\n    this.hook.dispose()\n    this.defs.dispose()\n    this.grid.dispose()\n    this.coord.dispose()\n    this.transform.dispose()\n    this.knob.dispose()\n    this.highlight.dispose()\n    this.background.dispose()\n    this.clipboard.dispose()\n    this.snapline.dispose()\n    this.selection.dispose()\n    this.history.dispose()\n    this.keyboard.dispose()\n    this.mousewheel.dispose()\n    this.print.dispose()\n    this.format.dispose()\n    this.minimap.dispose()\n    this.panning.dispose()\n    this.scroller.dispose()\n    this.view.dispose()\n    this.renderer.dispose()\n    this.size.dispose()\n  }\n\n  // #endregion\n}\n\nexport namespace Graph {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  export import View = GraphView\n  export import Hook = HookManager\n  export import Renderer = ViewRenderer\n  export import Keyboard = Shortcut\n  export import MouseWheel = Wheel\n  export import BaseManager = Base\n  export import DefsManager = Defs\n  export import GridManager = Grid\n  export import CoordManager = Coord\n  export import PrintManager = Print\n  export import FormatManager = Format\n  export import MiniMapManager = MiniMap\n  export import HistoryManager = History\n  export import SnaplineManager = Snapline\n  export import ScrollerManager = Scroller\n  export import ClipboardManager = Clipboard\n  export import TransformManager = Transform\n  export import HighlightManager = Highlight\n  export import BackgroundManager = Background\n  export import SelectionManager = Selection\n}\n\nexport namespace Graph {\n  export interface Options extends GraphOptions.Manual {}\n}\n\nexport namespace Graph {\n  export const toStringTag = `X6.${Graph.name}`\n\n  export function isGraph(instance: any): instance is Graph {\n    if (instance == null) {\n      return false\n    }\n\n    if (instance instanceof Graph) {\n      return true\n    }\n\n    const tag = instance[Symbol.toStringTag]\n    const graph = instance as Graph\n\n    if (\n      (tag == null || tag === toStringTag) &&\n      graph.hook != null &&\n      graph.view != null &&\n      graph.model != null\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n\nexport namespace Graph {\n  export function render(\n    options: Partial<Options>,\n    data?: Model.FromJSONData,\n  ): Graph\n  export function render(\n    container: HTMLElement,\n    data?: Model.FromJSONData,\n  ): Graph\n  export function render(\n    options: Partial<Options> | HTMLElement,\n    data?: Model.FromJSONData,\n  ): Graph {\n    const graph =\n      options instanceof HTMLElement\n        ? new Graph({ container: options })\n        : new Graph(options)\n\n    if (data != null) {\n      graph.fromJSON(data)\n    }\n\n    return graph\n  }\n}\n\nexport namespace Graph {\n  export const registerNode = Node.registry.register\n  export const registerEdge = Edge.registry.register\n  export const registerView = CellView.registry.register\n  export const registerAttr = Registry.Attr.registry.register\n  export const registerGrid = Registry.Grid.registry.register\n  export const registerFilter = Registry.Filter.registry.register\n  export const registerNodeTool = Registry.NodeTool.registry.register\n  export const registerEdgeTool = Registry.EdgeTool.registry.register\n  export const registerBackground = Registry.Background.registry.register\n  export const registerHighlighter = Registry.Highlighter.registry.register\n  export const registerPortLayout = Registry.PortLayout.registry.register\n  export const registerPortLabelLayout =\n    Registry.PortLabelLayout.registry.register\n  export const registerMarker = Registry.Marker.registry.register\n  export const registerRouter = Registry.Router.registry.register\n  export const registerConnector = Registry.Connector.registry.register\n  export const registerAnchor = Registry.NodeAnchor.registry.register\n  export const registerEdgeAnchor = Registry.EdgeAnchor.registry.register\n  export const registerConnectionPoint =\n    Registry.ConnectionPoint.registry.register\n  export const registerConnectionStrategy =\n    Registry.ConnectionStrategy.registry.register\n  export const registerHTMLComponent = HTML.componentRegistry.register\n}\n\nexport namespace Graph {\n  export const unregisterNode = Node.registry.unregister\n  export const unregisterEdge = Edge.registry.unregister\n  export const unregisterView = CellView.registry.unregister\n  export const unregisterAttr = Registry.Attr.registry.unregister\n  export const unregisterGrid = Registry.Grid.registry.unregister\n  export const unregisterFilter = Registry.Filter.registry.unregister\n  export const unregisterNodeTool = Registry.NodeTool.registry.unregister\n  export const unregisterEdgeTool = Registry.EdgeTool.registry.unregister\n  export const unregisterBackground = Registry.Background.registry.unregister\n  export const unregisterHighlighter = Registry.Highlighter.registry.unregister\n  export const unregisterPortLayout = Registry.PortLayout.registry.unregister\n  export const unregisterPortLabelLayout =\n    Registry.PortLabelLayout.registry.unregister\n  export const unregisterMarker = Registry.Marker.registry.unregister\n  export const unregisterRouter = Registry.Router.registry.unregister\n  export const unregisterConnector = Registry.Connector.registry.unregister\n  export const unregisterAnchor = Registry.NodeAnchor.registry.unregister\n  export const unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister\n  export const unregisterConnectionPoint =\n    Registry.ConnectionPoint.registry.unregister\n  export const unregisterConnectionStrategy =\n    Registry.ConnectionStrategy.registry.unregister\n  export const unregisterHTMLComponent = HTML.componentRegistry.unregister\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}