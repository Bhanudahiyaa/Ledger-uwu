{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/hexagonalpixelate.glsl' */\nconst hexagonalPixelate = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_Center : [0.5, 0.5];\\nuniform float u_Scale : 10;\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/hexagonalpixelate.js\\nvec4 hexagonalPixelate_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 tex = (texCoord * texSize - u_Center * texSize) / u_Scale;\\n  tex.y /= 0.866025404;\\n  tex.x -= tex.y * 0.5;\\n  vec2 a;\\n  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {\\n    a = vec2(floor(tex.x), floor(tex.y));\\n  }\\n  else a = vec2(ceil(tex.x), ceil(tex.y));\\n  vec2 b = vec2(ceil(tex.x), floor(tex.y));\\n  vec2 c = vec2(floor(tex.x), ceil(tex.y));\\n  vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\\n  vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\\n  vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\\n  vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\\n  float alen = length(TEX - A);\\n  float blen = length(TEX - B);\\n  float clen = length(TEX - C);\\n  vec2 choice;\\n  if (alen < blen) {\\n    if (alen < clen) choice = a;\\n    else choice = c;\\n  } else {\\n    if (blen < clen) choice = b;\\n    else choice = c;\\n  }\\n  choice.x += choice.y * 0.5;\\n  choice.y *= 0.866025404;\\n  choice *= u_Scale / texSize;\\n  return texture2D(texture, choice + u_Center);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = hexagonalPixelate_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class HexagonalPixelatePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('hexagonalpixelate-pass', {\n      vs: quad,\n      fs: hexagonalPixelate\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('hexagonalpixelate-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}","map":{"version":3,"names":["_objectSpread","hexagonalPixelate","quad","BasePostProcessingPass","HexagonalPixelatePass","setupShaders","shaderModuleService","registerModule","vs","fs","uniforms","getModule","width","height","rendererService","getViewportSize","u_ViewportSize"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/HexagonalPixelatePass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/hexagonalpixelate.glsl' */\nconst hexagonalPixelate = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_Center : [0.5, 0.5];\\nuniform float u_Scale : 10;\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/hexagonalpixelate.js\\nvec4 hexagonalPixelate_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 tex = (texCoord * texSize - u_Center * texSize) / u_Scale;\\n  tex.y /= 0.866025404;\\n  tex.x -= tex.y * 0.5;\\n  vec2 a;\\n  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {\\n    a = vec2(floor(tex.x), floor(tex.y));\\n  }\\n  else a = vec2(ceil(tex.x), ceil(tex.y));\\n  vec2 b = vec2(ceil(tex.x), floor(tex.y));\\n  vec2 c = vec2(floor(tex.x), ceil(tex.y));\\n  vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\\n  vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\\n  vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\\n  vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\\n  float alen = length(TEX - A);\\n  float blen = length(TEX - B);\\n  float clen = length(TEX - C);\\n  vec2 choice;\\n  if (alen < blen) {\\n    if (alen < clen) choice = a;\\n    else choice = c;\\n  } else {\\n    if (blen < clen) choice = b;\\n    else choice = c;\\n  }\\n  choice.x += choice.y * 0.5;\\n  choice.y *= 0.866025404;\\n  choice *= u_Scale / texSize;\\n  return texture2D(texture, choice + u_Center);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = hexagonalPixelate_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class HexagonalPixelatePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('hexagonalpixelate-pass', {\n      vs: quad,\n      fs: hexagonalPixelate\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('hexagonalpixelate-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE;AACA,MAAMC,iBAAiB,GAAG,i7CAAi7C;AAC38C;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,eAAe,MAAMC,qBAAqB,SAASD,sBAAsB,CAAC;EACxEE,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,wBAAwB,EAAE;MAChEC,EAAE,EAAEN,IAAI;MACRO,EAAE,EAAER;IACN,CAAC,CAAC;IACF,MAAM;MACJO,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACJ,mBAAmB,CAACK,SAAS,CAAC,wBAAwB,CAAC;IAChE,MAAM;MACJC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC,CAAC;IAC1C,OAAO;MACLP,EAAE;MACFC,EAAE;MACFC,QAAQ,EAAEV,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEU,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QACvDM,cAAc,EAAE,CAACJ,KAAK,EAAEC,MAAM;MAChC,CAAC;IACH,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}