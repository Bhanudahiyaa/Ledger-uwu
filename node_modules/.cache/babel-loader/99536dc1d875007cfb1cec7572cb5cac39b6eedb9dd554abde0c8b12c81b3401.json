{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { mat3, vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { Mask } from '../../shape/Frustum';\nimport { getRotationScale } from '../../utils/math';\nexport var MeshSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.CullableComponentManager), _dec4 = inject(IDENTIFIER.GeometryComponentManager), _dec5 = inject(IDENTIFIER.HierarchyComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MeshSystem() {\n    _classCallCheck(this, MeshSystem);\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n    _initializerDefineProperty(this, \"cullable\", _descriptor2, this);\n    _initializerDefineProperty(this, \"geometry\", _descriptor3, this);\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor4, this);\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n    this.planes = void 0;\n  }\n  _createClass(MeshSystem, [{\n    key: \"setFrustumPlanes\",\n    value: function setFrustumPlanes(planes) {\n      this.planes = planes;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        var _iterator, _step, view, scene, camera, _iterator2, _step2, entity, component, hierarchyComponent, cullableComponent, geometryComponent, meshTransform, worldTransform, _geometryComponent$aa, center, halfExtents, transformedCenter, rotationScale, transformedHalfExtents, parentCullableComponent;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(views);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    view = _step.value;\n                    scene = view.getScene();\n                    camera = view.getCamera(); // get VP matrix from camera\n\n                    _iterator2 = _createForOfIteratorHelper(scene.getEntities());\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        entity = _step2.value;\n                        component = this.mesh.getComponentByEntity(entity);\n                        if (component) {\n                          hierarchyComponent = this.hierarchy.getComponentByEntity(entity);\n                          cullableComponent = this.cullable.getComponentByEntity(entity);\n                          geometryComponent = component.geometry;\n                          meshTransform = this.transform.getComponentByEntity(entity); // update mesh.aabb\n\n                          if (geometryComponent && geometryComponent.aabb && meshTransform && component.aabbDirty) {\n                            worldTransform = meshTransform.worldTransform; // apply transform to geometry.aabb\n\n                            _geometryComponent$aa = geometryComponent.aabb, center = _geometryComponent$aa.center, halfExtents = _geometryComponent$aa.halfExtents;\n                            transformedCenter = vec3.transformMat4(vec3.create(), center, worldTransform);\n                            rotationScale = getRotationScale(worldTransform, mat3.create());\n                            transformedHalfExtents = vec3.transformMat3(vec3.create(), halfExtents, rotationScale);\n                            component.aabb.update(transformedCenter, transformedHalfExtents);\n                            component.aabbDirty = false;\n                          } // culling\n\n                          if (cullableComponent && geometryComponent) {\n                            parentCullableComponent = this.cullable.getComponentByEntity((hierarchyComponent === null || hierarchyComponent === void 0 ? void 0 : hierarchyComponent.parentID) || -1);\n                            cullableComponent.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(component.aabb, (parentCullableComponent === null || parentCullableComponent === void 0 ? void 0 : parentCullableComponent.visibilityPlaneMask) || Mask.INDETERMINATE, this.planes || camera.getFrustum().planes);\n                            cullableComponent.visible = cullableComponent.visibilityPlaneMask !== Mask.OUTSIDE;\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.cullable.clear();\n      this.mesh.clear();\n    }\n    /**\n     *\n     * @see「Optimized View Frustum Culling Algorithms for Bounding Boxes」\n     * @see https://github.com/antvis/GWebGPUEngine/issues/3\n     *\n     * * 基础相交测试 the basic intersection test\n     * * 标记 masking @see https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/\n     * * TODO: 平面一致性测试 the plane-coherency test\n     * * TODO: 支持 mesh 指定自身的剔除策略，参考 Babylon.js @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n     *\n     * @param aabb aabb\n     * @param parentPlaneMask mask of parent\n     * @param planes planes of frustum\n     */\n  }, {\n    key: \"computeVisibilityWithPlaneMask\",\n    value: function computeVisibilityWithPlaneMask(aabb, parentPlaneMask, planes) {\n      if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n        // 父节点完全位于视锥内或者外部，直接返回\n        return parentPlaneMask;\n      } // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n      // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n\n      var mask = Mask.INSIDE;\n      for (var k = 0, len = planes.length; k < len; ++k) {\n        // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n        var flag = k < 31 ? 1 << k : 0;\n        if (k < 31 && (parentPlaneMask & flag) === 0) {\n          // 父节点处于当前面内部，可以跳过\n          continue;\n        } // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n\n        var _planes$k = planes[k],\n          normal = _planes$k.normal,\n          distance = _planes$k.distance;\n        if (vec3.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance > 0) {\n          return Mask.OUTSIDE;\n        }\n        if (vec3.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance > 0) {\n          // 和当前面相交，对应位置为1，继续检测下一个面\n          mask |= flag;\n        }\n      }\n      return mask;\n    }\n  }]);\n  return MeshSystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["mat3","vec3","inject","injectable","IDENTIFIER","Mask","getRotationScale","MeshSystem","_dec","_dec2","MeshComponentManager","_dec3","CullableComponentManager","_dec4","GeometryComponentManager","_dec5","HierarchyComponentManager","_dec6","TransformComponentManager","_class","_class2","_temp","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","planes","_createClass","key","value","setFrustumPlanes","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","views","_iterator","_step","view","scene","camera","_iterator2","_step2","entity","component","hierarchyComponent","cullableComponent","geometryComponent","meshTransform","worldTransform","_geometryComponent$aa","center","halfExtents","transformedCenter","rotationScale","transformedHalfExtents","parentCullableComponent","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","getScene","getCamera","getEntities","mesh","getComponentByEntity","hierarchy","cullable","geometry","transform","aabb","aabbDirty","transformMat4","create","transformMat3","update","parentID","visibilityPlaneMask","computeVisibilityWithPlaneMask","INDETERMINATE","getFrustum","visible","OUTSIDE","err","e","f","stop","execute","_x","apply","arguments","tearDown","clear","parentPlaneMask","INSIDE","mask","k","len","length","flag","_planes$k","normal","distance","dot","getNegativeFarPoint","getPositiveFarPoint","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/mesh/System.ts"],"sourcesContent":["import { mat3, mat4, vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { AABB } from '../../shape/AABB';\nimport { Mask } from '../../shape/Frustum';\nimport { Plane } from '../../shape/Plane';\nimport { getRotationScale } from '../../utils/math';\nimport { GeometryComponent } from '../geometry/GeometryComponent';\nimport { MaterialComponent } from '../material/MaterialComponent';\nimport { IView } from '../renderer/IRendererService';\nimport { HierarchyComponent } from '../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../scenegraph/TransformComponent';\nimport { CullableComponent } from './CullableComponent';\nimport { IMeshParams } from './interface';\nimport { MeshComponent } from './MeshComponent';\n\n@injectable()\nexport class MeshSystem implements ISystem {\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  private planes: Plane[];\n\n  public setFrustumPlanes(planes: Plane[]) {\n    this.planes = planes;\n  }\n\n  public async execute(views: IView[]) {\n    for (const view of views) {\n      const scene = view.getScene();\n      const camera = view.getCamera();\n\n      // get VP matrix from camera\n      for (const entity of scene.getEntities()) {\n        const component = this.mesh.getComponentByEntity(entity);\n\n        if (component) {\n          const hierarchyComponent = this.hierarchy.getComponentByEntity(entity);\n          const cullableComponent = this.cullable.getComponentByEntity(entity);\n          const geometryComponent = component.geometry;\n          const meshTransform = this.transform.getComponentByEntity(entity);\n\n          // update mesh.aabb\n          if (\n            geometryComponent &&\n            geometryComponent.aabb &&\n            meshTransform &&\n            component.aabbDirty\n          ) {\n            const { worldTransform } = meshTransform;\n\n            // apply transform to geometry.aabb\n            const { center, halfExtents } = geometryComponent.aabb;\n            const transformedCenter = vec3.transformMat4(\n              vec3.create(),\n              center,\n              worldTransform,\n            );\n\n            const rotationScale = getRotationScale(worldTransform, mat3.create());\n            const transformedHalfExtents = vec3.transformMat3(\n              vec3.create(),\n              halfExtents,\n              rotationScale,\n            );\n\n            component.aabb.update(transformedCenter, transformedHalfExtents);\n            component.aabbDirty = false;\n          }\n\n          // culling\n          if (cullableComponent && geometryComponent) {\n            const parentCullableComponent = this.cullable.getComponentByEntity(\n              hierarchyComponent?.parentID || -1,\n            );\n            cullableComponent.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(\n              component.aabb,\n              parentCullableComponent?.visibilityPlaneMask || Mask.INDETERMINATE,\n              this.planes || camera.getFrustum().planes,\n            );\n            cullableComponent.visible =\n              cullableComponent.visibilityPlaneMask !== Mask.OUTSIDE;\n          }\n        }\n      }\n    }\n  }\n\n  public tearDown() {\n    this.cullable.clear();\n    this.mesh.clear();\n  }\n\n  /**\n   *\n   * @see「Optimized View Frustum Culling Algorithms for Bounding Boxes」\n   * @see https://github.com/antvis/GWebGPUEngine/issues/3\n   *\n   * * 基础相交测试 the basic intersection test\n   * * 标记 masking @see https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/\n   * * TODO: 平面一致性测试 the plane-coherency test\n   * * TODO: 支持 mesh 指定自身的剔除策略，参考 Babylon.js @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n   *\n   * @param aabb aabb\n   * @param parentPlaneMask mask of parent\n   * @param planes planes of frustum\n   */\n  public computeVisibilityWithPlaneMask(\n    aabb: AABB,\n    parentPlaneMask: Mask,\n    planes: Plane[],\n  ) {\n    if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n      // 父节点完全位于视锥内或者外部，直接返回\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = Mask.INSIDE;\n\n    for (let k = 0, len = planes.length; k < len; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // 父节点处于当前面内部，可以跳过\n        continue;\n      }\n\n      // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n      const { normal, distance } = planes[k];\n      if (\n        vec3.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance >\n        0\n      ) {\n        return Mask.OUTSIDE;\n      }\n      if (\n        vec3.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance >\n        0\n      ) {\n        // 和当前面相交，对应位置为1，继续检测下一个面\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}