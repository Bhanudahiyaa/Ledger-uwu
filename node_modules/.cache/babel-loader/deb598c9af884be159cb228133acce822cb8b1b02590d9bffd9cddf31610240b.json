{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/ink.glsl' */\nconst ink = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_Strength : 0.6;\\n\\nvec4 ink_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 dx = vec2(1.0 / texSize.x, 0.0);\\n  vec2 dy = vec2(0.0, 1.0 / texSize.y);\\n  vec4 color = texture2D(texture, texCoord);\\n  float bigTotal = 0.0;\\n  float smallTotal = 0.0;\\n  vec3 bigAverage = vec3(0.0);\\n  vec3 smallAverage = vec3(0.0);\\n  for (float x = -2.0; x <= 2.0; x += 1.0) {\\n    for (float y = -2.0; y <= 2.0; y += 1.0) {\\n      vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\\n      bigAverage += sample;\\n      bigTotal += 1.0;\\n      if (abs(x) + abs(y) < 2.0) {\\n        smallAverage += sample;\\n        smallTotal += 1.0;\\n      }\\n    }\\n  }\\n  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\\n  float power = u_Strength * u_Strength * u_Strength * u_Strength * u_Strength;\\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = ink_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class InkPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('ink-pass', {\n      vs: quad,\n      fs: ink\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('ink-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}","map":{"version":3,"names":["_objectSpread","ink","quad","BasePostProcessingPass","InkPass","setupShaders","shaderModuleService","registerModule","vs","fs","uniforms","getModule","width","height","rendererService","getViewportSize","u_ViewportSize"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/InkPass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/ink.glsl' */\nconst ink = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_Strength : 0.6;\\n\\nvec4 ink_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 dx = vec2(1.0 / texSize.x, 0.0);\\n  vec2 dy = vec2(0.0, 1.0 / texSize.y);\\n  vec4 color = texture2D(texture, texCoord);\\n  float bigTotal = 0.0;\\n  float smallTotal = 0.0;\\n  vec3 bigAverage = vec3(0.0);\\n  vec3 smallAverage = vec3(0.0);\\n  for (float x = -2.0; x <= 2.0; x += 1.0) {\\n    for (float y = -2.0; y <= 2.0; y += 1.0) {\\n      vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\\n      bigAverage += sample;\\n      bigTotal += 1.0;\\n      if (abs(x) + abs(y) < 2.0) {\\n        smallAverage += sample;\\n        smallTotal += 1.0;\\n      }\\n    }\\n  }\\n  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\\n  float power = u_Strength * u_Strength * u_Strength * u_Strength * u_Strength;\\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = ink_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class InkPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('ink-pass', {\n      vs: quad,\n      fs: ink\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('ink-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE;AACA,MAAMC,GAAG,GAAG,4oCAA4oC;AACxpC;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,eAAe,MAAMC,OAAO,SAASD,sBAAsB,CAAC;EAC1DE,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,UAAU,EAAE;MAClDC,EAAE,EAAEN,IAAI;MACRO,EAAE,EAAER;IACN,CAAC,CAAC;IACF,MAAM;MACJO,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACJ,mBAAmB,CAACK,SAAS,CAAC,UAAU,CAAC;IAClD,MAAM;MACJC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC,CAAC;IAC1C,OAAO;MACLP,EAAE;MACFC,EAAE;MACFC,QAAQ,EAAEV,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEU,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QACvDM,cAAc,EAAE,CAACJ,KAAK,EAAEC,MAAM;MAChC,CAAC;IACH,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}