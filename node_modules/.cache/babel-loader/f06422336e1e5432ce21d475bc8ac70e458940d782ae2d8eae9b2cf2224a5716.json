{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, encodePickingColor } from '@antv/l7-utils';\nimport { TileSourceService } from \"./TileSourceService\";\nconst SELECT = 'select';\nconst ACTIVE = 'active';\nexport class TilePickService {\n  constructor({\n    layerService,\n    tileLayerService,\n    parent\n  }) {\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"tileLayerService\", void 0);\n    _defineProperty(this, \"tileSourceService\", void 0);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"tilePickID\", new Map());\n    this.layerService = layerService;\n    this.tileLayerService = tileLayerService;\n    this.parent = parent;\n    this.tileSourceService = new TileSourceService();\n  }\n  pickRender(target) {\n    // 一个 TileLayer 有多个 Tile，但是会同时触发事件的只有一个 Tile\n    const tile = this.tileLayerService.getVisibleTileBylngLat(target.lngLat);\n    if (tile) {\n      // TODO 多图层拾取\n      const pickLayer = tile.getMainLayer();\n      pickLayer === null || pickLayer === void 0 || pickLayer.layerPickService.pickRender(target);\n    }\n  }\n  pick(layer, target) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.parent.getContainer();\n      const pickingService = container.pickingService;\n      if (layer.type === 'RasterLayer') {\n        const tile = _this.tileLayerService.getVisibleTileBylngLat(target.lngLat);\n        if (tile && tile.getMainLayer() !== undefined) {\n          const pickLayer = tile.getMainLayer();\n          return pickLayer.layerPickService.pickRasterLayer(pickLayer, target, _this.parent);\n        }\n        return false;\n      }\n      _this.pickRender(target);\n      return pickingService.pickFromPickingFBO(layer, target);\n    })();\n  }\n  selectFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    const id = this.color2PickId(r, g, b);\n    this.tilePickID.set(SELECT, id);\n    this.updateHighLight(r, g, b, SELECT);\n  }\n  highlightPickedFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    const id = this.color2PickId(r, g, b);\n    this.tilePickID.set(ACTIVE, id);\n    this.updateHighLight(r, g, b, ACTIVE);\n  }\n  updateHighLight(r, g, b, type) {\n    this.tileLayerService.tiles.map(tile => {\n      const layer = tile.getMainLayer();\n      switch (type) {\n        case SELECT:\n          layer === null || layer === void 0 || layer.hooks.beforeSelect.call([r, g, b]);\n          break;\n        case ACTIVE:\n          layer === null || layer === void 0 || layer.hooks.beforeHighlight.call([r, g, b]);\n          break;\n      }\n    });\n  }\n  setPickState() {\n    const selectColor = this.tilePickID.get(SELECT);\n    const activeColor = this.tilePickID.get(ACTIVE);\n    if (selectColor) {\n      const [r, g, b] = this.pickId2Color(selectColor);\n      this.updateHighLight(r, g, b, SELECT);\n      return;\n    }\n    if (activeColor) {\n      const [r, g, b] = this.pickId2Color(activeColor);\n      this.updateHighLight(r, g, b, ACTIVE);\n      return;\n    }\n  }\n  color2PickId(r, g, b) {\n    return decodePickingColor(new Uint8Array([r, g, b]));\n  }\n  pickId2Color(str) {\n    return encodePickingColor(str);\n  }\n\n  /** 从瓦片中根据数据 */\n  getFeatureById(pickedFeatureIdx) {\n    // 提取当前可见瓦片\n    const tiles = this.tileLayerService.getTiles().filter(tile => tile.visible);\n    // 提取当前可见瓦片中匹配 ID 的 feature 列表\n    const features = [];\n    tiles.forEach(tile => {\n      features.push(...tile.getFeatureById(pickedFeatureIdx));\n    });\n\n    // 将 feature 列表合并后返回\n    // 统一返回成 polygon 的格式 点、线、面可以通用\n\n    // const data = this.tileSourceService.getCombineFeature(features);\n\n    return features;\n  }\n\n  // Tip: for interface define\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  pickRasterLayer() {\n    return false;\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","decodePickingColor","encodePickingColor","TileSourceService","SELECT","ACTIVE","TilePickService","constructor","layerService","tileLayerService","parent","Map","tileSourceService","pickRender","target","tile","getVisibleTileBylngLat","lngLat","pickLayer","getMainLayer","layerPickService","pick","layer","_this","container","getContainer","pickingService","type","undefined","pickRasterLayer","pickFromPickingFBO","selectFeature","pickedColors","r","g","b","id","color2PickId","tilePickID","set","updateHighLight","highlightPickedFeature","tiles","map","hooks","beforeSelect","call","beforeHighlight","setPickState","selectColor","get","activeColor","pickId2Color","Uint8Array","str","getFeatureById","pickedFeatureIdx","getTiles","filter","visible","features","forEach","push"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/tile/service/TilePickService.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, encodePickingColor } from '@antv/l7-utils';\nimport { TileSourceService } from \"./TileSourceService\";\nconst SELECT = 'select';\nconst ACTIVE = 'active';\nexport class TilePickService {\n  constructor({\n    layerService,\n    tileLayerService,\n    parent\n  }) {\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"tileLayerService\", void 0);\n    _defineProperty(this, \"tileSourceService\", void 0);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"tilePickID\", new Map());\n    this.layerService = layerService;\n    this.tileLayerService = tileLayerService;\n    this.parent = parent;\n    this.tileSourceService = new TileSourceService();\n  }\n  pickRender(target) {\n    // 一个 TileLayer 有多个 Tile，但是会同时触发事件的只有一个 Tile\n    const tile = this.tileLayerService.getVisibleTileBylngLat(target.lngLat);\n    if (tile) {\n      // TODO 多图层拾取\n      const pickLayer = tile.getMainLayer();\n      pickLayer === null || pickLayer === void 0 || pickLayer.layerPickService.pickRender(target);\n    }\n  }\n  pick(layer, target) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.parent.getContainer();\n      const pickingService = container.pickingService;\n      if (layer.type === 'RasterLayer') {\n        const tile = _this.tileLayerService.getVisibleTileBylngLat(target.lngLat);\n        if (tile && tile.getMainLayer() !== undefined) {\n          const pickLayer = tile.getMainLayer();\n          return pickLayer.layerPickService.pickRasterLayer(pickLayer, target, _this.parent);\n        }\n        return false;\n      }\n      _this.pickRender(target);\n      return pickingService.pickFromPickingFBO(layer, target);\n    })();\n  }\n  selectFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    const id = this.color2PickId(r, g, b);\n    this.tilePickID.set(SELECT, id);\n    this.updateHighLight(r, g, b, SELECT);\n  }\n  highlightPickedFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    const id = this.color2PickId(r, g, b);\n    this.tilePickID.set(ACTIVE, id);\n    this.updateHighLight(r, g, b, ACTIVE);\n  }\n  updateHighLight(r, g, b, type) {\n    this.tileLayerService.tiles.map(tile => {\n      const layer = tile.getMainLayer();\n      switch (type) {\n        case SELECT:\n          layer === null || layer === void 0 || layer.hooks.beforeSelect.call([r, g, b]);\n          break;\n        case ACTIVE:\n          layer === null || layer === void 0 || layer.hooks.beforeHighlight.call([r, g, b]);\n          break;\n      }\n    });\n  }\n  setPickState() {\n    const selectColor = this.tilePickID.get(SELECT);\n    const activeColor = this.tilePickID.get(ACTIVE);\n    if (selectColor) {\n      const [r, g, b] = this.pickId2Color(selectColor);\n      this.updateHighLight(r, g, b, SELECT);\n      return;\n    }\n    if (activeColor) {\n      const [r, g, b] = this.pickId2Color(activeColor);\n      this.updateHighLight(r, g, b, ACTIVE);\n      return;\n    }\n  }\n  color2PickId(r, g, b) {\n    return decodePickingColor(new Uint8Array([r, g, b]));\n  }\n  pickId2Color(str) {\n    return encodePickingColor(str);\n  }\n\n  /** 从瓦片中根据数据 */\n  getFeatureById(pickedFeatureIdx) {\n    // 提取当前可见瓦片\n    const tiles = this.tileLayerService.getTiles().filter(tile => tile.visible);\n    // 提取当前可见瓦片中匹配 ID 的 feature 列表\n    const features = [];\n    tiles.forEach(tile => {\n      features.push(...tile.getFeatureById(pickedFeatureIdx));\n    });\n\n    // 将 feature 列表合并后返回\n    // 统一返回成 polygon 的格式 点、线、面可以通用\n\n    // const data = this.tileSourceService.getCombineFeature(features);\n\n    return features;\n  }\n\n  // Tip: for interface define\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  pickRasterLayer() {\n    return false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}