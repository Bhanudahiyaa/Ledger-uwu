{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { lodashUtil } from '@antv/l7-utils';\nimport { TileLayerService } from \"../service/TileLayerService\";\nimport { TilePickService } from \"../service/TilePickService\";\nimport { getTileFactory } from \"../tile\";\nimport { ProxyFuncs } from \"../utils/constants\";\nconst {\n  debounce\n} = lodashUtil;\nexport default class BaseTileLayer {\n  constructor(parent) {\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"tileLayerService\", void 0);\n    _defineProperty(this, \"mapService\", void 0);\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"rendererService\", void 0);\n    _defineProperty(this, \"pickingService\", void 0);\n    _defineProperty(this, \"tilePickService\", void 0);\n    _defineProperty(this, \"tilesetManager\", void 0);\n    // 瓦片数据管理器\n    _defineProperty(this, \"initedTileset\", false);\n    // 瓦片是否加载成功\n    _defineProperty(this, \"lastViewStates\", void 0);\n    _defineProperty(this, \"mapchange\", () => {\n      var _this$tilesetManager;\n      // 图层不可见时，不触发加载瓦片\n      if (this.parent.isVisible() === false) {\n        return;\n      }\n      const {\n        latLonBounds,\n        zoom\n      } = this.getCurrentView();\n      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {\n        return;\n      }\n      this.lastViewStates = {\n        zoom,\n        latLonBounds\n      };\n      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 || _this$tilesetManager.throttleUpdate(zoom, latLonBounds);\n    });\n    //  防抖操作\n    _defineProperty(this, \"viewchange\", debounce(this.mapchange, 24));\n    this.parent = parent;\n    const container = this.parent.getContainer();\n    this.rendererService = container.rendererService;\n    this.layerService = container.layerService;\n    this.mapService = container.mapService;\n    this.pickingService = container.pickingService;\n\n    // 初始化瓦片管理服务\n    this.tileLayerService = new TileLayerService({\n      rendererService: this.rendererService,\n      layerService: this.layerService,\n      parent\n    });\n    // 初始化拾取服务\n    this.tilePickService = new TilePickService({\n      tileLayerService: this.tileLayerService,\n      layerService: this.layerService,\n      parent\n    });\n\n    // 重置\n    this.parent.setLayerPickService(this.tilePickService);\n    this.proxy(parent);\n    this.initTileSetManager();\n  }\n  initTileSetManager() {\n    var _this$tilesetManager2;\n    const source = this.parent.getSource();\n    this.tilesetManager = source.tileset;\n    if (!this.initedTileset) {\n      this.bindTilesetEvent();\n      this.initedTileset = true;\n    }\n\n    // 图层不可见时，不触发加载瓦片\n    if (this.parent.isVisible() === false) {\n      return;\n    }\n    const {\n      latLonBounds,\n      zoom\n    } = this.getCurrentView();\n    (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 || _this$tilesetManager2.update(zoom, latLonBounds);\n  }\n  getCurrentView() {\n    const bounds = this.mapService.getBounds();\n    const latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];\n    const zoom = this.mapService.getZoom();\n    return {\n      latLonBounds,\n      zoom\n    };\n  }\n  bindTilesetEvent() {\n    // 瓦片数据加载成功\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.tilesetManager.on('tile-loaded', tile => {\n      // 将事件抛出，图层上可以监听使用\n    });\n\n    // 瓦片数据从缓存删除或被执行重新加载\n    this.tilesetManager.on('tile-unload', tile => {\n      // 将事件抛出，图层上可以监听使用\n      this.tileUnLoad(tile);\n    });\n\n    // 瓦片数据加载失败\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.tilesetManager.on('tile-error', (error, tile) => {\n      // 将事件抛出，图层上可以监听使用\n      this.tileError(error);\n    });\n\n    // 瓦片显隐状态更新\n    this.tilesetManager.on('tile-update', () => {\n      this.tileUpdate();\n    });\n\n    // 地图视野发生改变\n    this.mapService.on('zoomend', this.mapchange);\n    this.mapService.on('moveend', this.viewchange);\n  }\n  render() {\n    this.tileLayerService.render();\n  }\n  getLayers() {\n    return this.tileLayerService.getLayers();\n  }\n  getTiles() {\n    return this.tileLayerService.getTiles();\n  }\n  getTile(key) {\n    return this.tileLayerService.getTile(key);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  tileLoaded(tile) {\n    //\n  }\n  tileError(error) {\n    console.warn('error:', error);\n  }\n  destroy() {\n    var _this$tilesetManager3;\n    this.mapService.off('zoomend', this.mapchange);\n    this.mapService.off('moveend', this.viewchange);\n    (_this$tilesetManager3 = this.tilesetManager) === null || _this$tilesetManager3 === void 0 || _this$tilesetManager3.destroy();\n    this.tileLayerService.destroy();\n  }\n  // 重新加载\n  reload() {\n    var _this$tilesetManager4;\n    // 瓦片重新加载\n    this.tilesetManager.clear();\n    const {\n      latLonBounds,\n      zoom\n    } = this.getCurrentView();\n    (_this$tilesetManager4 = this.tilesetManager) === null || _this$tilesetManager4 === void 0 || _this$tilesetManager4.update(zoom, latLonBounds);\n  }\n  tileUnLoad(tile) {\n    this.tileLayerService.removeTile(tile.key);\n  }\n  tileUpdate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.tilesetManager) {\n        return;\n      }\n      const minZoom = _this.parent.getMinZoom();\n      const maxZoom = _this.parent.getMaxZoom();\n      const tiles = _this.tilesetManager.tiles.filter(tile => tile.isLoaded) // 过滤未加载完成的\n      .filter(tile => tile.isVisibleChange) // 过滤未发生变化的\n      .filter(tile => tile.data) //\n      .filter(tile => tile.z >= minZoom && tile.z < maxZoom); // 过滤不可见见\n      yield Promise.all(tiles.map(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (tile) {\n          // 未加载瓦片\n          if (!_this.tileLayerService.hasTile(tile.key)) {\n            const tileInstance = getTileFactory(_this.parent);\n            const tileLayer = new tileInstance(tile, _this.parent);\n            yield tileLayer.initTileLayer();\n            _this.tilePickService.setPickState();\n            if (tileLayer.getLayers().length !== 0) {\n              _this.tileLayerService.addTile(tileLayer);\n              _this.tileLayerService.updateTileVisible(tile);\n              _this.layerService.reRender();\n            }\n          } else {\n            // 已加载瓦片\n            _this.tileLayerService.updateTileVisible(tile);\n            _this.tilePickService.setPickState();\n            _this.layerService.reRender();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      if (_this.tilesetManager.isLoaded) {\n        // 将事件抛出，图层上可以使用瓦片\n        _this.parent.emit('tiles-loaded', _this.tilesetManager.currentTiles);\n      }\n    })();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setPickState(layers) {\n    return;\n  }\n  pickRender(target) {\n    this.tilePickService.pickRender(target);\n  }\n  selectFeature(pickedColors) {\n    this.tilePickService.selectFeature(pickedColors);\n  }\n  highlightPickedFeature(pickedColors) {\n    this.tilePickService.highlightPickedFeature(pickedColors);\n  }\n\n  /**\n   * 实现 TileLayer 对子图层方法的代理\n   * @param parent\n   */\n  proxy(parent) {\n    ProxyFuncs.forEach(func => {\n      // @ts-ignore\n      const oldStyleFunc = parent[func].bind(parent);\n      // @ts-ignore\n      parent[func] = (...args) => {\n        oldStyleFunc(...args);\n        this.getLayers().map(child => {\n          // @ts-ignore\n          child[func](...args);\n        });\n        // Tip: 目前在更新 RasterData 的 colorTexture 的时候需要额外优化\n        if (func === 'style') {\n          this.getTiles().forEach(tile => tile.styleUpdate(...args));\n        }\n        return parent;\n      };\n    });\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","lodashUtil","TileLayerService","TilePickService","getTileFactory","ProxyFuncs","debounce","BaseTileLayer","constructor","parent","_this$tilesetManager","isVisible","latLonBounds","zoom","getCurrentView","lastViewStates","toString","tilesetManager","throttleUpdate","mapchange","container","getContainer","rendererService","layerService","mapService","pickingService","tileLayerService","tilePickService","setLayerPickService","proxy","initTileSetManager","_this$tilesetManager2","source","getSource","tileset","initedTileset","bindTilesetEvent","update","bounds","getBounds","getZoom","on","tile","tileUnLoad","error","tileError","tileUpdate","viewchange","render","getLayers","getTiles","getTile","key","tileLoaded","console","warn","destroy","_this$tilesetManager3","off","reload","_this$tilesetManager4","clear","removeTile","_this","minZoom","getMinZoom","maxZoom","getMaxZoom","tiles","filter","isLoaded","isVisibleChange","data","z","Promise","all","map","_ref","hasTile","tileInstance","tileLayer","initTileLayer","setPickState","length","addTile","updateTileVisible","reRender","_x","apply","arguments","emit","currentTiles","layers","pickRender","target","selectFeature","pickedColors","highlightPickedFeature","forEach","func","oldStyleFunc","bind","args","child","styleUpdate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/tile/core/BaseLayer.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { lodashUtil } from '@antv/l7-utils';\nimport { TileLayerService } from \"../service/TileLayerService\";\nimport { TilePickService } from \"../service/TilePickService\";\nimport { getTileFactory } from \"../tile\";\nimport { ProxyFuncs } from \"../utils/constants\";\nconst {\n  debounce\n} = lodashUtil;\nexport default class BaseTileLayer {\n  constructor(parent) {\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"tileLayerService\", void 0);\n    _defineProperty(this, \"mapService\", void 0);\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"rendererService\", void 0);\n    _defineProperty(this, \"pickingService\", void 0);\n    _defineProperty(this, \"tilePickService\", void 0);\n    _defineProperty(this, \"tilesetManager\", void 0);\n    // 瓦片数据管理器\n    _defineProperty(this, \"initedTileset\", false);\n    // 瓦片是否加载成功\n    _defineProperty(this, \"lastViewStates\", void 0);\n    _defineProperty(this, \"mapchange\", () => {\n      var _this$tilesetManager;\n      // 图层不可见时，不触发加载瓦片\n      if (this.parent.isVisible() === false) {\n        return;\n      }\n      const {\n        latLonBounds,\n        zoom\n      } = this.getCurrentView();\n      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {\n        return;\n      }\n      this.lastViewStates = {\n        zoom,\n        latLonBounds\n      };\n      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 || _this$tilesetManager.throttleUpdate(zoom, latLonBounds);\n    });\n    //  防抖操作\n    _defineProperty(this, \"viewchange\", debounce(this.mapchange, 24));\n    this.parent = parent;\n    const container = this.parent.getContainer();\n    this.rendererService = container.rendererService;\n    this.layerService = container.layerService;\n    this.mapService = container.mapService;\n    this.pickingService = container.pickingService;\n\n    // 初始化瓦片管理服务\n    this.tileLayerService = new TileLayerService({\n      rendererService: this.rendererService,\n      layerService: this.layerService,\n      parent\n    });\n    // 初始化拾取服务\n    this.tilePickService = new TilePickService({\n      tileLayerService: this.tileLayerService,\n      layerService: this.layerService,\n      parent\n    });\n\n    // 重置\n    this.parent.setLayerPickService(this.tilePickService);\n    this.proxy(parent);\n    this.initTileSetManager();\n  }\n  initTileSetManager() {\n    var _this$tilesetManager2;\n    const source = this.parent.getSource();\n    this.tilesetManager = source.tileset;\n    if (!this.initedTileset) {\n      this.bindTilesetEvent();\n      this.initedTileset = true;\n    }\n\n    // 图层不可见时，不触发加载瓦片\n    if (this.parent.isVisible() === false) {\n      return;\n    }\n    const {\n      latLonBounds,\n      zoom\n    } = this.getCurrentView();\n    (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 || _this$tilesetManager2.update(zoom, latLonBounds);\n  }\n  getCurrentView() {\n    const bounds = this.mapService.getBounds();\n    const latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];\n    const zoom = this.mapService.getZoom();\n    return {\n      latLonBounds,\n      zoom\n    };\n  }\n  bindTilesetEvent() {\n    // 瓦片数据加载成功\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.tilesetManager.on('tile-loaded', tile => {\n      // 将事件抛出，图层上可以监听使用\n    });\n\n    // 瓦片数据从缓存删除或被执行重新加载\n    this.tilesetManager.on('tile-unload', tile => {\n      // 将事件抛出，图层上可以监听使用\n      this.tileUnLoad(tile);\n    });\n\n    // 瓦片数据加载失败\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.tilesetManager.on('tile-error', (error, tile) => {\n      // 将事件抛出，图层上可以监听使用\n      this.tileError(error);\n    });\n\n    // 瓦片显隐状态更新\n    this.tilesetManager.on('tile-update', () => {\n      this.tileUpdate();\n    });\n\n    // 地图视野发生改变\n    this.mapService.on('zoomend', this.mapchange);\n    this.mapService.on('moveend', this.viewchange);\n  }\n  render() {\n    this.tileLayerService.render();\n  }\n  getLayers() {\n    return this.tileLayerService.getLayers();\n  }\n  getTiles() {\n    return this.tileLayerService.getTiles();\n  }\n  getTile(key) {\n    return this.tileLayerService.getTile(key);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  tileLoaded(tile) {\n    //\n  }\n  tileError(error) {\n    console.warn('error:', error);\n  }\n  destroy() {\n    var _this$tilesetManager3;\n    this.mapService.off('zoomend', this.mapchange);\n    this.mapService.off('moveend', this.viewchange);\n    (_this$tilesetManager3 = this.tilesetManager) === null || _this$tilesetManager3 === void 0 || _this$tilesetManager3.destroy();\n    this.tileLayerService.destroy();\n  }\n  // 重新加载\n  reload() {\n    var _this$tilesetManager4;\n    // 瓦片重新加载\n    this.tilesetManager.clear();\n    const {\n      latLonBounds,\n      zoom\n    } = this.getCurrentView();\n    (_this$tilesetManager4 = this.tilesetManager) === null || _this$tilesetManager4 === void 0 || _this$tilesetManager4.update(zoom, latLonBounds);\n  }\n  tileUnLoad(tile) {\n    this.tileLayerService.removeTile(tile.key);\n  }\n  tileUpdate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.tilesetManager) {\n        return;\n      }\n      const minZoom = _this.parent.getMinZoom();\n      const maxZoom = _this.parent.getMaxZoom();\n      const tiles = _this.tilesetManager.tiles.filter(tile => tile.isLoaded) // 过滤未加载完成的\n      .filter(tile => tile.isVisibleChange) // 过滤未发生变化的\n      .filter(tile => tile.data) //\n      .filter(tile => tile.z >= minZoom && tile.z < maxZoom); // 过滤不可见见\n      yield Promise.all(tiles.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (tile) {\n          // 未加载瓦片\n          if (!_this.tileLayerService.hasTile(tile.key)) {\n            const tileInstance = getTileFactory(_this.parent);\n            const tileLayer = new tileInstance(tile, _this.parent);\n            yield tileLayer.initTileLayer();\n            _this.tilePickService.setPickState();\n            if (tileLayer.getLayers().length !== 0) {\n              _this.tileLayerService.addTile(tileLayer);\n              _this.tileLayerService.updateTileVisible(tile);\n              _this.layerService.reRender();\n            }\n          } else {\n            // 已加载瓦片\n            _this.tileLayerService.updateTileVisible(tile);\n            _this.tilePickService.setPickState();\n            _this.layerService.reRender();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      if (_this.tilesetManager.isLoaded) {\n        // 将事件抛出，图层上可以使用瓦片\n        _this.parent.emit('tiles-loaded', _this.tilesetManager.currentTiles);\n      }\n    })();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setPickState(layers) {\n    return;\n  }\n  pickRender(target) {\n    this.tilePickService.pickRender(target);\n  }\n  selectFeature(pickedColors) {\n    this.tilePickService.selectFeature(pickedColors);\n  }\n  highlightPickedFeature(pickedColors) {\n    this.tilePickService.highlightPickedFeature(pickedColors);\n  }\n\n  /**\n   * 实现 TileLayer 对子图层方法的代理\n   * @param parent\n   */\n  proxy(parent) {\n    ProxyFuncs.forEach(func => {\n      // @ts-ignore\n      const oldStyleFunc = parent[func].bind(parent);\n      // @ts-ignore\n      parent[func] = (...args) => {\n        oldStyleFunc(...args);\n        this.getLayers().map(child => {\n          // @ts-ignore\n          child[func](...args);\n        });\n        // Tip: 目前在更新 RasterData 的 colorTexture 的时候需要额外优化\n        if (func === 'style') {\n          this.getTiles().forEach(tile => tile.styleUpdate(...args));\n        }\n        return parent;\n      };\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}