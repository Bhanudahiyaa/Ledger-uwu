{"ast":null,"code":"/**\n * The namespace for JSON-specific functions.\n */\nexport var JSONExt;\n(function (JSONExt) {\n  /**\n   * A shared frozen empty JSONObject\n   */\n  JSONExt.emptyObject = Object.freeze({});\n  /**\n   * A shared frozen empty JSONArray\n   */\n  JSONExt.emptyArray = Object.freeze([]);\n  /**\n   * Test whether a JSON value is a primitive.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a primitive,`false` otherwise.\n   */\n  function isPrimitive(value) {\n    return value === null || value === undefined || typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string';\n  }\n  JSONExt.isPrimitive = isPrimitive;\n  function isArray(value) {\n    return Array.isArray(value);\n  }\n  JSONExt.isArray = isArray;\n  function isObject(value) {\n    return !isPrimitive(value) && !isArray(value);\n  }\n  JSONExt.isObject = isObject;\n  /**\n   * Compare two JSON values for deep equality.\n   *\n   * @param first - The first JSON value of interest.\n   *\n   * @param second - The second JSON value of interest.\n   *\n   * @returns `true` if the values are equivalent, `false` otherwise.\n   */\n  function deepEqual(first, second) {\n    // Check referential and primitive equality first.\n    if (first === second) {\n      return true;\n    }\n    // If one is a primitive, the `===` check ruled out the other.\n    if (isPrimitive(first) || isPrimitive(second)) {\n      return false;\n    }\n    // Test whether they are arrays.\n    const a1 = isArray(first);\n    const a2 = isArray(second);\n    // Bail if the types are different.\n    if (a1 !== a2) {\n      return false;\n    }\n    // If they are both arrays, compare them.\n    if (a1 && a2) {\n      return deepArrayEqual(first, second);\n    }\n    // At this point, they must both be objects.\n    return deepObjectEqual(first, second);\n  }\n  JSONExt.deepEqual = deepEqual;\n  /**\n   * Create a deep copy of a JSON value.\n   *\n   * @param value - The JSON value to copy.\n   *\n   * @returns A deep copy of the given JSON value.\n   */\n  function deepCopy(value) {\n    // Do nothing for primitive values.\n    if (isPrimitive(value)) {\n      return value;\n    }\n    // Deep copy an array.\n    if (isArray(value)) {\n      return deepArrayCopy(value);\n    }\n    // Deep copy an object.\n    return deepObjectCopy(value);\n  }\n  JSONExt.deepCopy = deepCopy;\n  /**\n   * Compare two JSON arrays for deep equality.\n   */\n  function deepArrayEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    }\n    // Test the arrays for equal length.\n    if (first.length !== second.length) {\n      return false;\n    }\n    // Compare the values for equality.\n    for (let i = 0, n = first.length; i < n; i += 1) {\n      if (!deepEqual(first[i], second[i])) {\n        return false;\n      }\n    }\n    // At this point, the arrays are equal.\n    return true;\n  }\n  /**\n   * Compare two JSON objects for deep equality.\n   */\n  function deepObjectEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    }\n    // Check for the first object's keys in the second object.\n    // eslint-disable-next-line\n    for (const key in first) {\n      if (!(key in second)) {\n        return false;\n      }\n    }\n    // Check for the second object's keys in the first object.\n    // eslint-disable-next-line\n    for (const key in second) {\n      if (!(key in first)) {\n        return false;\n      }\n    }\n    // Compare the values for equality.\n    // eslint-disable-next-line\n    for (const key in first) {\n      if (!deepEqual(first[key], second[key])) {\n        return false;\n      }\n    }\n    // At this point, the objects are equal.\n    return true;\n  }\n  /**\n   * Create a deep copy of a JSON array.\n   */\n  function deepArrayCopy(value) {\n    const result = new Array(value.length); // eslint-disable-line\n    for (let i = 0, n = value.length; i < n; i += 1) {\n      result[i] = deepCopy(value[i]);\n    }\n    return result;\n  }\n  /**\n   * Create a deep copy of a JSON object.\n   */\n  function deepObjectCopy(value) {\n    const result = {};\n    Object.keys(value).forEach(key => {\n      result[key] = deepCopy(value[key]);\n    });\n    return result;\n  }\n})(JSONExt || (JSONExt = {}));","map":{"version":3,"names":["JSONExt","emptyObject","Object","freeze","emptyArray","isPrimitive","value","undefined","isArray","Array","isObject","deepEqual","first","second","a1","a2","deepArrayEqual","deepObjectEqual","deepCopy","deepArrayCopy","deepObjectCopy","length","i","n","key","result","keys","forEach"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/util/json/index.ts"],"sourcesContent":["/**\n * A type alias for a JSON primitive.\n */\nexport type JSONPrimitive = boolean | number | string | null | undefined\n\n/**\n * A type alias for a JSON value.\n */\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray\n\n/**\n * A type definition for a JSON object.\n */\nexport interface JSONObject {\n  [key: string]: JSONValue\n}\n\n/**\n * A type definition for a JSON array.\n */\nexport interface JSONArray extends Array<JSONValue> {}\n\n/**\n * A type definition for a readonly JSON object.\n */\nexport interface ReadonlyJSONObject {\n  readonly [key: string]: ReadonlyJSONValue\n}\n\n/**\n * A type definition for a readonly JSON array.\n */\nexport interface ReadonlyJSONArray extends ReadonlyArray<ReadonlyJSONValue> {}\n\n/**\n * A type alias for a readonly JSON value.\n */\nexport type ReadonlyJSONValue =\n  | JSONPrimitive\n  | ReadonlyJSONObject\n  | ReadonlyJSONArray\n\n/**\n * The namespace for JSON-specific functions.\n */\nexport namespace JSONExt {\n  /**\n   * A shared frozen empty JSONObject\n   */\n  export const emptyObject = Object.freeze({}) as ReadonlyJSONObject\n\n  /**\n   * A shared frozen empty JSONArray\n   */\n  export const emptyArray = Object.freeze([]) as ReadonlyJSONArray\n\n  /**\n   * Test whether a JSON value is a primitive.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a primitive,`false` otherwise.\n   */\n  export function isPrimitive(\n    value: ReadonlyJSONValue,\n  ): value is JSONPrimitive {\n    return (\n      value === null ||\n      value === undefined ||\n      typeof value === 'boolean' ||\n      typeof value === 'number' ||\n      typeof value === 'string'\n    )\n  }\n\n  /**\n   * Test whether a JSON value is an array.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a an array, `false` otherwise.\n   */\n  export function isArray(value: JSONValue): value is JSONArray\n  export function isArray(value: ReadonlyJSONValue): value is ReadonlyJSONArray\n  export function isArray(value: ReadonlyJSONValue): boolean {\n    return Array.isArray(value)\n  }\n\n  /**\n   * Test whether a JSON value is an object.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a an object, `false` otherwise.\n   */\n  export function isObject(value: JSONValue): value is JSONObject\n  export function isObject(\n    value: ReadonlyJSONValue,\n  ): value is ReadonlyJSONObject\n  export function isObject(value: ReadonlyJSONValue): boolean {\n    return !isPrimitive(value) && !isArray(value)\n  }\n\n  /**\n   * Compare two JSON values for deep equality.\n   *\n   * @param first - The first JSON value of interest.\n   *\n   * @param second - The second JSON value of interest.\n   *\n   * @returns `true` if the values are equivalent, `false` otherwise.\n   */\n  export function deepEqual(\n    first: ReadonlyJSONValue,\n    second: ReadonlyJSONValue,\n  ): boolean {\n    // Check referential and primitive equality first.\n    if (first === second) {\n      return true\n    }\n\n    // If one is a primitive, the `===` check ruled out the other.\n    if (isPrimitive(first) || isPrimitive(second)) {\n      return false\n    }\n\n    // Test whether they are arrays.\n    const a1 = isArray(first)\n    const a2 = isArray(second)\n\n    // Bail if the types are different.\n    if (a1 !== a2) {\n      return false\n    }\n\n    // If they are both arrays, compare them.\n    if (a1 && a2) {\n      return deepArrayEqual(\n        first as ReadonlyJSONArray,\n        second as ReadonlyJSONArray,\n      )\n    }\n\n    // At this point, they must both be objects.\n    return deepObjectEqual(\n      first as ReadonlyJSONObject,\n      second as ReadonlyJSONObject,\n    )\n  }\n\n  /**\n   * Create a deep copy of a JSON value.\n   *\n   * @param value - The JSON value to copy.\n   *\n   * @returns A deep copy of the given JSON value.\n   */\n  export function deepCopy<T extends ReadonlyJSONValue>(value: T): T {\n    // Do nothing for primitive values.\n    if (isPrimitive(value)) {\n      return value\n    }\n\n    // Deep copy an array.\n    if (isArray(value)) {\n      return deepArrayCopy(value)\n    }\n\n    // Deep copy an object.\n    return deepObjectCopy(value)\n  }\n\n  /**\n   * Compare two JSON arrays for deep equality.\n   */\n  function deepArrayEqual(\n    first: ReadonlyJSONArray,\n    second: ReadonlyJSONArray,\n  ): boolean {\n    // Check referential equality first.\n    if (first === second) {\n      return true\n    }\n\n    // Test the arrays for equal length.\n    if (first.length !== second.length) {\n      return false\n    }\n\n    // Compare the values for equality.\n    for (let i = 0, n = first.length; i < n; i += 1) {\n      if (!deepEqual(first[i], second[i])) {\n        return false\n      }\n    }\n\n    // At this point, the arrays are equal.\n    return true\n  }\n\n  /**\n   * Compare two JSON objects for deep equality.\n   */\n  function deepObjectEqual(\n    first: ReadonlyJSONObject,\n    second: ReadonlyJSONObject,\n  ): boolean {\n    // Check referential equality first.\n    if (first === second) {\n      return true\n    }\n\n    // Check for the first object's keys in the second object.\n    // eslint-disable-next-line\n    for (const key in first) {\n      if (!(key in second)) {\n        return false\n      }\n    }\n\n    // Check for the second object's keys in the first object.\n    // eslint-disable-next-line\n    for (const key in second) {\n      if (!(key in first)) {\n        return false\n      }\n    }\n\n    // Compare the values for equality.\n    // eslint-disable-next-line\n    for (const key in first) {\n      if (!deepEqual(first[key], second[key])) {\n        return false\n      }\n    }\n\n    // At this point, the objects are equal.\n    return true\n  }\n\n  /**\n   * Create a deep copy of a JSON array.\n   */\n  function deepArrayCopy(value: any): any {\n    const result = new Array<any>(value.length) // eslint-disable-line\n    for (let i = 0, n = value.length; i < n; i += 1) {\n      result[i] = deepCopy(value[i])\n    }\n    return result\n  }\n\n  /**\n   * Create a deep copy of a JSON object.\n   */\n  function deepObjectCopy(value: any): any {\n    const result: any = {}\n    Object.keys(value).forEach((key) => {\n      result[key] = deepCopy(value[key])\n    })\n    return result\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}