{"ast":null,"code":"export var Scheduler;\n(function (Scheduler) {\n  const queue = [];\n  const threshold = 1000 / 60;\n  const unit = [];\n  let deadline = 0;\n  const getTime = () => performance.now();\n  const peek = queue => queue[0];\n  const schedule = cb => unit.push(cb) === 1 && postMessage();\n  const postMessage = (() => {\n    const cb = () => {\n      var _a, _b;\n      return (_b = (_a = unit.splice(0, unit.length))[0]) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    if (typeof MessageChannel !== 'undefined') {\n      const {\n        port1,\n        port2\n      } = new MessageChannel();\n      port1.onmessage = cb;\n      return () => port2.postMessage(null);\n    }\n    return () => setTimeout(cb);\n  })();\n  const flushTask = () => {\n    deadline = getTime() + threshold;\n    let job = peek(queue);\n    while (job && !Scheduler.shouldYield()) {\n      const {\n        callback,\n        data\n      } = job;\n      job.callback = null;\n      const next = callback && callback(data);\n      if (next) {\n        job.callback = next;\n      } else {\n        queue.shift();\n      }\n      job = peek(queue);\n    }\n    job && schedule(flushTask);\n  };\n  Scheduler.scheduleTask = (callback, data) => {\n    const task = {\n      callback,\n      data\n    };\n    queue.push(task);\n    schedule(flushTask);\n  };\n  Scheduler.shouldYield = () => {\n    var _a, _b;\n    return ((_b = (_a = navigator) === null || _a === void 0 ? void 0 : _a.scheduling) === null || _b === void 0 ? void 0 : _b.isInputPending()) || getTime() >= deadline;\n  };\n})(Scheduler || (Scheduler = {}));","map":{"version":3,"names":["Scheduler","queue","threshold","unit","deadline","getTime","performance","now","peek","schedule","cb","push","postMessage","_a","_b","splice","length","call","MessageChannel","port1","port2","onmessage","setTimeout","flushTask","job","shouldYield","callback","data","next","shift","scheduleTask","task","navigator","scheduling","isInputPending"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/util/scheduler/index.ts"],"sourcesContent":["export namespace Scheduler {\n  type FlushTaskFn = () => void\n  type ITaskCallback = ((data: any) => void | ITaskCallback) | null\n\n  interface ITask {\n    callback: ITaskCallback\n    data?: any\n  }\n\n  const queue: ITask[] = []\n  const threshold: number = 1000 / 60\n  const unit: FlushTaskFn[] = []\n  let deadline = 0\n\n  const getTime = () => performance.now()\n  const peek = (queue: ITask[]) => queue[0]\n  const schedule = (cb: FlushTaskFn) => unit.push(cb) === 1 && postMessage()\n\n  const postMessage = (() => {\n    const cb = () => unit.splice(0, unit.length)[0]?.()\n    if (typeof MessageChannel !== 'undefined') {\n      const { port1, port2 } = new MessageChannel()\n      port1.onmessage = cb\n      return () => port2.postMessage(null)\n    }\n    return () => setTimeout(cb)\n  })()\n\n  const flushTask = () => {\n    deadline = getTime() + threshold\n    let job = peek(queue)\n    while (job && !shouldYield()) {\n      const { callback, data } = job\n      job.callback = null\n      const next = callback && callback(data)\n      if (next) {\n        job.callback = next\n      } else {\n        queue.shift()\n      }\n      job = peek(queue)\n    }\n    job && schedule(flushTask)\n  }\n\n  export const scheduleTask = (callback: ITaskCallback, data?: any) => {\n    const task = {\n      callback,\n      data,\n    }\n    queue.push(task)\n    schedule(flushTask)\n  }\n\n  export const shouldYield = (): boolean => {\n    return (\n      (navigator as any)?.scheduling?.isInputPending() || getTime() >= deadline\n    )\n  }\n}\n"],"mappings":"AAAA,OAAM,IAAWA,SAAS;AAA1B,WAAiBA,SAAS;EASxB,MAAMC,KAAK,GAAY,EAAE;EACzB,MAAMC,SAAS,GAAW,IAAI,GAAG,EAAE;EACnC,MAAMC,IAAI,GAAkB,EAAE;EAC9B,IAAIC,QAAQ,GAAG,CAAC;EAEhB,MAAMC,OAAO,GAAGA,CAAA,KAAMC,WAAW,CAACC,GAAG,EAAE;EACvC,MAAMC,IAAI,GAAIP,KAAc,IAAKA,KAAK,CAAC,CAAC,CAAC;EACzC,MAAMQ,QAAQ,GAAIC,EAAe,IAAKP,IAAI,CAACQ,IAAI,CAACD,EAAE,CAAC,KAAK,CAAC,IAAIE,WAAW,EAAE;EAE1E,MAAMA,WAAW,GAAG,CAAC,MAAK;IACxB,MAAMF,EAAE,GAAGA,CAAA,KAAK;MAAA,IAAAG,EAAA,EAAAC,EAAA;MAAC,QAAAA,EAAA,IAAAD,EAAA,GAAAV,IAAI,CAACY,MAAM,CAAC,CAAC,EAAEZ,IAAI,CAACa,MAAM,CAAC,EAAC,CAAC,CAAC,cAAAF,EAAA,uBAAAA,EAAA,CAAAG,IAAA,CAAAJ,EAAA,CAAI;IAAA;IACnD,IAAI,OAAOK,cAAc,KAAK,WAAW,EAAE;MACzC,MAAM;QAAEC,KAAK;QAAEC;MAAK,CAAE,GAAG,IAAIF,cAAc,EAAE;MAC7CC,KAAK,CAACE,SAAS,GAAGX,EAAE;MACpB,OAAO,MAAMU,KAAK,CAACR,WAAW,CAAC,IAAI,CAAC;;IAEtC,OAAO,MAAMU,UAAU,CAACZ,EAAE,CAAC;EAC7B,CAAC,EAAC,CAAE;EAEJ,MAAMa,SAAS,GAAGA,CAAA,KAAK;IACrBnB,QAAQ,GAAGC,OAAO,EAAE,GAAGH,SAAS;IAChC,IAAIsB,GAAG,GAAGhB,IAAI,CAACP,KAAK,CAAC;IACrB,OAAOuB,GAAG,IAAI,CAACxB,SAAA,CAAAyB,WAAW,EAAE,EAAE;MAC5B,MAAM;QAAEC,QAAQ;QAAEC;MAAI,CAAE,GAAGH,GAAG;MAC9BA,GAAG,CAACE,QAAQ,GAAG,IAAI;MACnB,MAAME,IAAI,GAAGF,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;MACvC,IAAIC,IAAI,EAAE;QACRJ,GAAG,CAACE,QAAQ,GAAGE,IAAI;OACpB,MAAM;QACL3B,KAAK,CAAC4B,KAAK,EAAE;;MAEfL,GAAG,GAAGhB,IAAI,CAACP,KAAK,CAAC;;IAEnBuB,GAAG,IAAIf,QAAQ,CAACc,SAAS,CAAC;EAC5B,CAAC;EAEYvB,SAAA,CAAA8B,YAAY,GAAG,CAACJ,QAAuB,EAAEC,IAAU,KAAI;IAClE,MAAMI,IAAI,GAAG;MACXL,QAAQ;MACRC;KACD;IACD1B,KAAK,CAACU,IAAI,CAACoB,IAAI,CAAC;IAChBtB,QAAQ,CAACc,SAAS,CAAC;EACrB,CAAC;EAEYvB,SAAA,CAAAyB,WAAW,GAAG,MAAc;;IACvC,OACE,EAAAX,EAAA,IAAAD,EAAA,GAACmB,SAAiB,cAAAnB,EAAA,uBAAAA,EAAA,CAAEoB,UAAU,cAAAnB,EAAA,uBAAAA,EAAA,CAAEoB,cAAc,EAAE,KAAI7B,OAAO,EAAE,IAAID,QAAQ;EAE7E,CAAC;AACH,CAAC,EA3DgBJ,SAAS,KAATA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}