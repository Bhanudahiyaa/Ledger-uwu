{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport class CellView extends View {\n  constructor(cell, options = {}) {\n    super();\n    this.cell = cell;\n    this.options = this.ensureOptions(options);\n    this.graph = this.options.graph;\n    this.attr = new AttrManager(this);\n    this.flag = new FlagManager(this, this.options.actions, this.options.bootstrap);\n    this.cache = new Cache(this);\n    this.setContainer(this.ensureContainer());\n    this.setup();\n    this.$(this.container).data('view', this);\n    this.init();\n  }\n  static getDefaults() {\n    return this.defaults;\n  }\n  static config(options) {\n    this.defaults = this.getOptions(options);\n  }\n  static getOptions(options) {\n    const mergeActions = (arr1, arr2) => {\n      if (arr2 != null) {\n        return ArrayExt.uniq([...(Array.isArray(arr1) ? arr1 : [arr1]), ...(Array.isArray(arr2) ? arr2 : [arr2])]);\n      }\n      return Array.isArray(arr1) ? [...arr1] : [arr1];\n    };\n    const ret = ObjectExt.cloneDeep(this.getDefaults());\n    const {\n        bootstrap,\n        actions,\n        events,\n        documentEvents\n      } = options,\n      others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n    if (bootstrap) {\n      ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n    }\n    if (actions) {\n      Object.keys(actions).forEach(key => {\n        const val = actions[key];\n        const raw = ret.actions[key];\n        if (val && raw) {\n          ret.actions[key] = mergeActions(raw, val);\n        } else if (val) {\n          ret.actions[key] = mergeActions(val);\n        }\n      });\n    }\n    if (events) {\n      ret.events = Object.assign(Object.assign({}, ret.events), events);\n    }\n    if (options.documentEvents) {\n      ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n    }\n    return ObjectExt.merge(ret, others);\n  }\n  get [Symbol.toStringTag]() {\n    return CellView.toStringTag;\n  }\n  init() {}\n  onRemove() {\n    this.removeTools();\n  }\n  get priority() {\n    return this.options.priority;\n  }\n  get rootSelector() {\n    return this.options.rootSelector;\n  }\n  getConstructor() {\n    return this.constructor;\n  }\n  ensureOptions(options) {\n    return this.getConstructor().getOptions(options);\n  }\n  getContainerTagName() {\n    return this.options.isSvgElement ? 'g' : 'div';\n  }\n  getContainerStyle() {}\n  getContainerAttrs() {\n    return {\n      'data-cell-id': this.cell.id,\n      'data-shape': this.cell.shape\n    };\n  }\n  getContainerClassName() {\n    return this.prefixClassName('cell');\n  }\n  ensureContainer() {\n    return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n  }\n  setContainer(container) {\n    if (this.container !== container) {\n      this.undelegateEvents();\n      this.container = container;\n      if (this.options.events != null) {\n        this.delegateEvents(this.options.events);\n      }\n      const attrs = this.getContainerAttrs();\n      if (attrs != null) {\n        this.setAttrs(attrs, container);\n      }\n      const style = this.getContainerStyle();\n      if (style != null) {\n        this.setStyle(style, container);\n      }\n      const className = this.getContainerClassName();\n      if (className != null) {\n        this.addClass(className, container);\n      }\n    }\n    return this;\n  }\n  isNodeView() {\n    return false;\n  }\n  isEdgeView() {\n    return false;\n  }\n  render() {\n    return this;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  confirmUpdate(flag, options = {}) {\n    return 0;\n  }\n  getBootstrapFlag() {\n    return this.flag.getBootstrapFlag();\n  }\n  getFlag(actions) {\n    return this.flag.getFlag(actions);\n  }\n  hasAction(flag, actions) {\n    return this.flag.hasAction(flag, actions);\n  }\n  removeAction(flag, actions) {\n    return this.flag.removeAction(flag, actions);\n  }\n  handleAction(flag, action, handle, additionalRemovedActions) {\n    if (this.hasAction(flag, action)) {\n      handle();\n      const removedFlags = [action];\n      if (additionalRemovedActions) {\n        if (typeof additionalRemovedActions === 'string') {\n          removedFlags.push(additionalRemovedActions);\n        } else {\n          removedFlags.push(...additionalRemovedActions);\n        }\n      }\n      return this.removeAction(flag, removedFlags);\n    }\n    return flag;\n  }\n  setup() {\n    this.cell.on('changed', ({\n      options\n    }) => this.onAttrsChange(options));\n  }\n  onAttrsChange(options) {\n    let flag = this.flag.getChangedFlag();\n    if (options.updated || !flag) {\n      return;\n    }\n    if (options.dirty && this.hasAction(flag, 'update')) {\n      flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n    }\n    // tool changes should be sync render\n    if (options.toolId) {\n      options.async = false;\n    }\n    if (this.graph != null) {\n      this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n    }\n  }\n  parseJSONMarkup(markup, rootElem) {\n    const result = Markup.parseJSONMarkup(markup);\n    const selectors = result.selectors;\n    const rootSelector = this.rootSelector;\n    if (rootElem && rootSelector) {\n      if (selectors[rootSelector]) {\n        throw new Error('Invalid root selector');\n      }\n      selectors[rootSelector] = rootElem;\n    }\n    return result;\n  }\n  can(feature) {\n    let interacting = this.graph.options.interacting;\n    if (typeof interacting === 'function') {\n      interacting = FunctionExt.call(interacting, this.graph, this);\n    }\n    if (typeof interacting === 'object') {\n      let val = interacting[feature];\n      if (typeof val === 'function') {\n        val = FunctionExt.call(val, this.graph, this);\n      }\n      return val !== false;\n    }\n    if (typeof interacting === 'boolean') {\n      return interacting;\n    }\n    return false;\n  }\n  cleanCache() {\n    this.cache.clean();\n    return this;\n  }\n  getCache(elem) {\n    return this.cache.get(elem);\n  }\n  getDataOfElement(elem) {\n    return this.cache.getData(elem);\n  }\n  getMatrixOfElement(elem) {\n    return this.cache.getMatrix(elem);\n  }\n  getShapeOfElement(elem) {\n    return this.cache.getShape(elem);\n  }\n  getScaleOfElement(node, scalableNode) {\n    let sx;\n    let sy;\n    if (scalableNode && scalableNode.contains(node)) {\n      const scale = Dom.scale(scalableNode);\n      sx = 1 / scale.sx;\n      sy = 1 / scale.sy;\n    } else {\n      sx = 1;\n      sy = 1;\n    }\n    return {\n      sx,\n      sy\n    };\n  }\n  getBoundingRectOfElement(elem) {\n    return this.cache.getBoundingRect(elem);\n  }\n  getBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const rm = this.getRootRotatedMatrix();\n    const tm = this.getRootTranslatedMatrix();\n    return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n  }\n  getUnrotatedBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const tm = this.getRootTranslatedMatrix();\n    return Dom.transformRectangle(rect, tm.multiply(matrix));\n  }\n  getBBox(options = {}) {\n    let bbox;\n    if (options.useCellGeometry) {\n      const cell = this.cell;\n      const angle = cell.isNode() ? cell.getAngle() : 0;\n      bbox = cell.getBBox().bbox(angle);\n    } else {\n      bbox = this.getBBoxOfElement(this.container);\n    }\n    return this.graph.localToGraph(bbox);\n  }\n  getRootTranslatedMatrix() {\n    const cell = this.cell;\n    const pos = cell.isNode() ? cell.getPosition() : {\n      x: 0,\n      y: 0\n    };\n    return Dom.createSVGMatrix().translate(pos.x, pos.y);\n  }\n  getRootRotatedMatrix() {\n    let matrix = Dom.createSVGMatrix();\n    const cell = this.cell;\n    const angle = cell.isNode() ? cell.getAngle() : 0;\n    if (angle) {\n      const bbox = cell.getBBox();\n      const cx = bbox.width / 2;\n      const cy = bbox.height / 2;\n      matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n    }\n    return matrix;\n  }\n  findMagnet(elem = this.container) {\n    // If the overall cell has set `magnet === false`, then returns\n    // `undefined` to announce there is no magnet found for this cell.\n    // This is especially useful to set on cells that have 'ports'.\n    // In this case, only the ports have set `magnet === true` and the\n    // overall element has `magnet === false`.\n    return this.findByAttr('magnet', elem);\n  }\n  updateAttrs(rootNode, attrs, options = {}) {\n    if (options.rootBBox == null) {\n      options.rootBBox = new Rectangle();\n    }\n    if (options.selectors == null) {\n      options.selectors = this.selectors;\n    }\n    this.attr.update(rootNode, attrs, options);\n  }\n  isEdgeElement(magnet) {\n    return this.cell.isEdge() && (magnet == null || magnet === this.container);\n  }\n  // #region highlight\n  prepareHighlight(elem, options = {}) {\n    const magnet = elem && this.$(elem)[0] || this.container;\n    options.partial = magnet === this.container;\n    return magnet;\n  }\n  highlight(elem, options = {}) {\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:highlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n    if (this.isEdgeView()) {\n      this.notify('edge:highlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isNodeView()) {\n      this.notify('node:highlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    }\n    return this;\n  }\n  unhighlight(elem, options = {}) {\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:unhighlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n    if (this.isNodeView()) {\n      this.notify('node:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isEdgeView()) {\n      this.notify('edge:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    }\n    return this;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  notifyUnhighlight(magnet, options) {}\n  // #endregion\n  getEdgeTerminal(magnet, x, y, edge, type) {\n    const cell = this.cell;\n    const portId = this.findAttr('port', magnet);\n    const selector = magnet.getAttribute('data-selector');\n    const terminal = {\n      cell: cell.id\n    };\n    if (selector != null) {\n      terminal.magnet = selector;\n    }\n    if (portId != null) {\n      terminal.port = portId;\n      if (cell.isNode()) {\n        if (!cell.hasPort(portId) && selector == null) {\n          // port created via the `port` attribute (not API)\n          terminal.selector = this.getSelector(magnet);\n        }\n      }\n    } else if (selector == null && this.container !== magnet) {\n      terminal.selector = this.getSelector(magnet);\n    }\n    return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n  }\n  customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n    const raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n    if (raw) {\n      const name = typeof raw === 'string' ? raw : raw.name;\n      const args = typeof raw === 'string' ? {} : raw.args || {};\n      const registry = ConnectionStrategy.registry;\n      if (name) {\n        const fn = registry.get(name);\n        if (fn == null) {\n          return registry.onNotFound(name);\n        }\n        const result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n        if (result) {\n          return result;\n        }\n      }\n    }\n    return terminal;\n  }\n  getMagnetFromEdgeTerminal(terminal) {\n    const cell = this.cell;\n    const root = this.container;\n    const portId = terminal.port;\n    let selector = terminal.magnet;\n    let magnet;\n    if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n      magnet = this.findPortElem(portId, selector) || root;\n    } else {\n      if (!selector) {\n        selector = terminal.selector;\n      }\n      if (!selector && portId != null) {\n        selector = `[port=\"${portId}\"]`;\n      }\n      magnet = this.findOne(selector, root, this.selectors);\n    }\n    return magnet;\n  }\n  // #region animate\n  animate(elem, options) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n    if (target == null) {\n      throw new Error('Invalid animation element.');\n    }\n    const parent = target.parentNode;\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target);\n      }\n    };\n    const vTarget = Vector.create(target);\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage);\n    }\n    const onComplete = options.complete;\n    options.complete = e => {\n      revert();\n      if (onComplete) {\n        onComplete(e);\n      }\n    };\n    return vTarget.animate(options);\n  }\n  animateTransform(elem, options) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n    if (target == null) {\n      throw new Error('Invalid animation element.');\n    }\n    const parent = target.parentNode;\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target);\n      }\n    };\n    const vTarget = Vector.create(target);\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage);\n    }\n    const onComplete = options.complete;\n    options.complete = e => {\n      revert();\n      if (onComplete) {\n        onComplete(e);\n      }\n    };\n    return vTarget.animateTransform(options);\n  }\n  hasTools(name) {\n    const tools = this.tools;\n    if (tools == null) {\n      return false;\n    }\n    if (name == null) {\n      return true;\n    }\n    return tools.name === name;\n  }\n  addTools(config) {\n    if (!this.can('toolsAddable')) {\n      return this;\n    }\n    this.removeTools();\n    if (config) {\n      const tools = ToolsView.isToolsView(config) ? config : new ToolsView(config);\n      this.tools = tools;\n      this.graph.on('tools:hide', this.hideTools, this);\n      this.graph.on('tools:show', this.showTools, this);\n      this.graph.on('tools:remove', this.removeTools, this);\n      tools.config({\n        view: this\n      });\n      tools.mount();\n    }\n    return this;\n  }\n  updateTools(options = {}) {\n    if (this.tools) {\n      this.tools.update(options);\n    }\n    return this;\n  }\n  removeTools() {\n    if (this.tools) {\n      this.tools.remove();\n      this.graph.off('tools:hide', this.hideTools, this);\n      this.graph.off('tools:show', this.showTools, this);\n      this.graph.off('tools:remove', this.removeTools, this);\n      this.tools = null;\n    }\n    return this;\n  }\n  hideTools() {\n    if (this.tools) {\n      this.tools.hide();\n    }\n    return this;\n  }\n  showTools() {\n    if (this.tools) {\n      this.tools.show();\n    }\n    return this;\n  }\n  renderTools() {\n    const tools = this.cell.getTools();\n    this.addTools(tools);\n    return this;\n  }\n  notify(name, args) {\n    this.trigger(name, args);\n    this.graph.trigger(name, args);\n    return this;\n  }\n  getEventArgs(e, x, y) {\n    const view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const cell = view.cell;\n    if (x == null || y == null) {\n      return {\n        e,\n        view,\n        cell\n      };\n    }\n    return {\n      e,\n      x,\n      y,\n      view,\n      cell\n    };\n  }\n  onClick(e, x, y) {\n    this.notify('cell:click', this.getEventArgs(e, x, y));\n  }\n  onDblClick(e, x, y) {\n    this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n  }\n  onContextMenu(e, x, y) {\n    this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n  }\n  onMouseDown(e, x, y) {\n    if (this.cell.model) {\n      this.cachedModelForMouseEvent = this.cell.model;\n      this.cachedModelForMouseEvent.startBatch('mouse');\n    }\n    this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n  }\n  onMouseUp(e, x, y) {\n    this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n    if (this.cachedModelForMouseEvent) {\n      this.cachedModelForMouseEvent.stopBatch('mouse', {\n        cell: this.cell\n      });\n      this.cachedModelForMouseEvent = null;\n    }\n  }\n  onMouseMove(e, x, y) {\n    this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n  }\n  onMouseOver(e) {\n    this.notify('cell:mouseover', this.getEventArgs(e));\n  }\n  onMouseOut(e) {\n    this.notify('cell:mouseout', this.getEventArgs(e));\n  }\n  onMouseEnter(e) {\n    this.notify('cell:mouseenter', this.getEventArgs(e));\n  }\n  onMouseLeave(e) {\n    this.notify('cell:mouseleave', this.getEventArgs(e));\n  }\n  onMouseWheel(e, x, y, delta) {\n    this.notify('cell:mousewheel', Object.assign({\n      delta\n    }, this.getEventArgs(e, x, y)));\n  }\n  onCustomEvent(e, name, x, y) {\n    this.notify('cell:customevent', Object.assign({\n      name\n    }, this.getEventArgs(e, x, y)));\n    this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n  }\n  onMagnetMouseDown(e, magnet, x, y) {}\n  onMagnetDblClick(e, magnet, x, y) {}\n  onMagnetContextMenu(e, magnet, x, y) {}\n  onLabelMouseDown(e, x, y) {}\n  checkMouseleave(e) {\n    const graph = this.graph;\n    if (graph.renderer.isAsync()) {\n      // Do the updates of the current view synchronously now\n      graph.renderer.dumpView(this);\n    }\n    const target = this.getEventTarget(e, {\n      fromPoint: true\n    });\n    const view = graph.renderer.findViewByElem(target);\n    if (view === this) {\n      return;\n    }\n    // Leaving the current view\n    this.onMouseLeave(e);\n    if (!view) {\n      return;\n    }\n    // Entering another view\n    view.onMouseEnter(e);\n  }\n}\nCellView.defaults = {\n  isSvgElement: true,\n  rootSelector: 'root',\n  priority: 0,\n  bootstrap: [],\n  actions: {}\n};\n(function (CellView) {\n  CellView.Flag = FlagManager;\n  CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n(function (CellView) {\n  CellView.toStringTag = `X6.${CellView.name}`;\n  function isCellView(instance) {\n    if (instance == null) {\n      return false;\n    }\n    if (instance instanceof CellView) {\n      return true;\n    }\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n    if ((tag == null || tag === CellView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function') {\n      return true;\n    }\n    return false;\n  }\n  CellView.isCellView = isCellView;\n})(CellView || (CellView = {}));\n// decorators\n// ----\n(function (CellView) {\n  function priority(value) {\n    return function (ctor) {\n      ctor.config({\n        priority: value\n      });\n    };\n  }\n  CellView.priority = priority;\n  function bootstrap(actions) {\n    return function (ctor) {\n      ctor.config({\n        bootstrap: actions\n      });\n    };\n  }\n  CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n(function (CellView) {\n  CellView.registry = Registry.create({\n    type: 'view'\n  });\n})(CellView || (CellView = {}));","map":{"version":3,"names":["Rectangle","Point","ArrayExt","ObjectExt","Dom","FunctionExt","Vector","Registry","ConnectionStrategy","View","Cache","Markup","ToolsView","AttrManager","FlagManager","CellView","constructor","cell","options","ensureOptions","graph","attr","flag","actions","bootstrap","cache","setContainer","ensureContainer","setup","$","container","data","init","getDefaults","defaults","config","getOptions","mergeActions","arr1","arr2","uniq","Array","isArray","ret","cloneDeep","events","documentEvents","others","__rest","Object","keys","forEach","key","val","raw","assign","merge","Symbol","toStringTag","onRemove","removeTools","priority","rootSelector","getConstructor","getContainerTagName","isSvgElement","getContainerStyle","getContainerAttrs","id","shape","getContainerClassName","prefixClassName","createElement","undelegateEvents","delegateEvents","attrs","setAttrs","style","setStyle","className","addClass","isNodeView","isEdgeView","render","confirmUpdate","getBootstrapFlag","getFlag","hasAction","removeAction","handleAction","action","handle","additionalRemovedActions","removedFlags","push","on","onAttrsChange","getChangedFlag","updated","dirty","toolId","async","renderer","requestViewUpdate","parseJSONMarkup","markup","rootElem","result","selectors","Error","can","feature","interacting","call","cleanCache","clean","getCache","elem","get","getDataOfElement","getData","getMatrixOfElement","getMatrix","getShapeOfElement","getShape","getScaleOfElement","node","scalableNode","sx","sy","contains","scale","getBoundingRectOfElement","getBoundingRect","getBBoxOfElement","rect","matrix","rm","getRootRotatedMatrix","tm","getRootTranslatedMatrix","transformRectangle","multiply","getUnrotatedBBoxOfElement","getBBox","bbox","useCellGeometry","angle","isNode","getAngle","localToGraph","pos","getPosition","x","y","createSVGMatrix","translate","cx","width","cy","height","rotate","findMagnet","findByAttr","updateAttrs","rootNode","rootBBox","update","isEdgeElement","magnet","isEdge","prepareHighlight","partial","highlight","notify","view","edge","unhighlight","notifyUnhighlight","getEdgeTerminal","type","portId","findAttr","selector","getAttribute","terminal","port","hasPort","getSelector","customizeEdgeTerminal","getStrategy","connecting","strategy","name","args","registry","fn","onNotFound","getMagnetFromEdgeTerminal","root","findPortElem","findOne","animate","target","parent","parentNode","revert","remove","vTarget","create","appendTo","stage","onComplete","complete","e","animateTransform","hasTools","tools","addTools","isToolsView","hideTools","showTools","mount","updateTools","off","hide","show","renderTools","getTools","trigger","getEventArgs","onClick","onDblClick","onContextMenu","onMouseDown","model","cachedModelForMouseEvent","startBatch","onMouseUp","stopBatch","onMouseMove","onMouseOver","onMouseOut","onMouseEnter","onMouseLeave","onMouseWheel","delta","onCustomEvent","onMagnetMouseDown","onMagnetDblClick","onMagnetContextMenu","onLabelMouseDown","checkMouseleave","isAsync","dumpView","getEventTarget","fromPoint","findViewByElem","Flag","Attr","isCellView","instance","tag","value","ctor"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/view/cell.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { Nilable, KeyValue } from '../types'\nimport { Rectangle, Point } from '../geometry'\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util'\nimport { Attr } from '../registry/attr'\nimport { Registry } from '../registry/registry'\nimport { ConnectionStrategy } from '../registry/connection-strategy'\nimport { Cell } from '../model/cell'\nimport { Edge } from '../model/edge'\nimport { Model } from '../model/model'\nimport { Graph } from '../graph/graph'\nimport { View } from './view'\nimport { Cache } from './cache'\nimport { Markup } from './markup'\nimport { EdgeView } from './edge'\nimport { NodeView } from './node'\nimport { ToolsView } from './tool'\nimport { AttrManager } from './attr'\nimport { FlagManager } from './flag'\n\nexport class CellView<\n  Entity extends Cell = Cell,\n  Options extends CellView.Options = CellView.Options,\n> extends View<CellView.EventArgs> {\n  protected static defaults: Partial<CellView.Options> = {\n    isSvgElement: true,\n    rootSelector: 'root',\n    priority: 0,\n    bootstrap: [],\n    actions: {},\n  }\n\n  public static getDefaults() {\n    return this.defaults\n  }\n\n  public static config<T extends CellView.Options = CellView.Options>(\n    options: Partial<T>,\n  ) {\n    this.defaults = this.getOptions(options)\n  }\n\n  public static getOptions<T extends CellView.Options = CellView.Options>(\n    options: Partial<T>,\n  ): T {\n    const mergeActions = <T>(arr1: T | T[], arr2?: T | T[]) => {\n      if (arr2 != null) {\n        return ArrayExt.uniq([\n          ...(Array.isArray(arr1) ? arr1 : [arr1]),\n          ...(Array.isArray(arr2) ? arr2 : [arr2]),\n        ])\n      }\n      return Array.isArray(arr1) ? [...arr1] : [arr1]\n    }\n\n    const ret = ObjectExt.cloneDeep(this.getDefaults()) as T\n    const { bootstrap, actions, events, documentEvents, ...others } = options\n\n    if (bootstrap) {\n      ret.bootstrap = mergeActions(ret.bootstrap, bootstrap)\n    }\n\n    if (actions) {\n      Object.keys(actions).forEach((key) => {\n        const val = actions[key]\n        const raw = ret.actions[key]\n        if (val && raw) {\n          ret.actions[key] = mergeActions(raw, val)\n        } else if (val) {\n          ret.actions[key] = mergeActions(val)\n        }\n      })\n    }\n\n    if (events) {\n      ret.events = { ...ret.events, ...events }\n    }\n\n    if (options.documentEvents) {\n      ret.documentEvents = { ...ret.documentEvents, ...documentEvents }\n    }\n\n    return ObjectExt.merge(ret, others) as T\n  }\n\n  public graph: Graph\n  public cell: Entity\n  protected selectors: Markup.Selectors\n  protected readonly options: Options\n  protected readonly flag: FlagManager\n  protected readonly attr: AttrManager\n  protected readonly cache: Cache\n  public scalableNode: Element | null\n  public rotatableNode: Element | null\n\n  protected get [Symbol.toStringTag]() {\n    return CellView.toStringTag\n  }\n\n  constructor(cell: Entity, options: Partial<Options> = {}) {\n    super()\n\n    this.cell = cell\n    this.options = this.ensureOptions(options)\n    this.graph = this.options.graph\n    this.attr = new AttrManager(this)\n    this.flag = new FlagManager(\n      this,\n      this.options.actions,\n      this.options.bootstrap,\n    )\n    this.cache = new Cache(this)\n\n    this.setContainer(this.ensureContainer())\n    this.setup()\n    this.$(this.container).data('view', this)\n\n    this.init()\n  }\n\n  protected init() {}\n\n  protected onRemove() {\n    this.removeTools()\n  }\n\n  public get priority() {\n    return this.options.priority\n  }\n\n  protected get rootSelector() {\n    return this.options.rootSelector\n  }\n\n  protected getConstructor<T extends CellView.Definition>() {\n    return this.constructor as any as T\n  }\n\n  protected ensureOptions(options: Partial<Options>) {\n    return this.getConstructor().getOptions(options) as Options\n  }\n\n  protected getContainerTagName(): string {\n    return this.options.isSvgElement ? 'g' : 'div'\n  }\n\n  protected getContainerStyle(): Nilable<\n    JQuery.PlainObject<string | number>\n  > | void {}\n\n  protected getContainerAttrs(): Nilable<Attr.SimpleAttrs> {\n    return {\n      'data-cell-id': this.cell.id,\n      'data-shape': this.cell.shape,\n    }\n  }\n\n  protected getContainerClassName(): Nilable<string | string[]> {\n    return this.prefixClassName('cell')\n  }\n\n  protected ensureContainer() {\n    return View.createElement(\n      this.getContainerTagName(),\n      this.options.isSvgElement,\n    )\n  }\n\n  protected setContainer(container: Element) {\n    if (this.container !== container) {\n      this.undelegateEvents()\n      this.container = container\n\n      if (this.options.events != null) {\n        this.delegateEvents(this.options.events)\n      }\n\n      const attrs = this.getContainerAttrs()\n      if (attrs != null) {\n        this.setAttrs(attrs, container)\n      }\n\n      const style = this.getContainerStyle()\n      if (style != null) {\n        this.setStyle(style, container)\n      }\n\n      const className = this.getContainerClassName()\n      if (className != null) {\n        this.addClass(className, container)\n      }\n    }\n\n    return this\n  }\n\n  isNodeView(): this is NodeView {\n    return false\n  }\n\n  isEdgeView(): this is EdgeView {\n    return false\n  }\n\n  render() {\n    return this\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  confirmUpdate(flag: number, options: any = {}) {\n    return 0\n  }\n\n  getBootstrapFlag() {\n    return this.flag.getBootstrapFlag()\n  }\n\n  getFlag(actions: FlagManager.Actions) {\n    return this.flag.getFlag(actions)\n  }\n\n  hasAction(flag: number, actions: FlagManager.Actions) {\n    return this.flag.hasAction(flag, actions)\n  }\n\n  removeAction(flag: number, actions: FlagManager.Actions) {\n    return this.flag.removeAction(flag, actions)\n  }\n\n  handleAction(\n    flag: number,\n    action: FlagManager.Action,\n    handle: () => void,\n    additionalRemovedActions?: FlagManager.Actions | null,\n  ) {\n    if (this.hasAction(flag, action)) {\n      handle()\n      const removedFlags = [action]\n      if (additionalRemovedActions) {\n        if (typeof additionalRemovedActions === 'string') {\n          removedFlags.push(additionalRemovedActions)\n        } else {\n          removedFlags.push(...additionalRemovedActions)\n        }\n      }\n      return this.removeAction(flag, removedFlags)\n    }\n    return flag\n  }\n\n  protected setup() {\n    this.cell.on('changed', ({ options }) => this.onAttrsChange(options))\n  }\n\n  protected onAttrsChange(options: Cell.MutateOptions) {\n    let flag = this.flag.getChangedFlag()\n    if (options.updated || !flag) {\n      return\n    }\n\n    if (options.dirty && this.hasAction(flag, 'update')) {\n      flag |= this.getFlag('render') // eslint-disable-line no-bitwise\n    }\n\n    // tool changes should be sync render\n    if (options.toolId) {\n      options.async = false\n    }\n\n    if (this.graph != null) {\n      this.graph.renderer.requestViewUpdate(this, flag, this.priority, options)\n    }\n  }\n\n  parseJSONMarkup(\n    markup: Markup.JSONMarkup | Markup.JSONMarkup[],\n    rootElem?: Element,\n  ) {\n    const result = Markup.parseJSONMarkup(markup)\n    const selectors = result.selectors\n    const rootSelector = this.rootSelector\n    if (rootElem && rootSelector) {\n      if (selectors[rootSelector]) {\n        throw new Error('Invalid root selector')\n      }\n      selectors[rootSelector] = rootElem\n    }\n    return result\n  }\n\n  can(feature: CellView.InteractionNames): boolean {\n    let interacting = this.graph.options.interacting\n\n    if (typeof interacting === 'function') {\n      interacting = FunctionExt.call(interacting, this.graph, this)\n    }\n\n    if (typeof interacting === 'object') {\n      let val = interacting[feature]\n      if (typeof val === 'function') {\n        val = FunctionExt.call(val, this.graph, this)\n      }\n      return val !== false\n    }\n\n    if (typeof interacting === 'boolean') {\n      return interacting\n    }\n\n    return false\n  }\n\n  cleanCache() {\n    this.cache.clean()\n    return this\n  }\n\n  getCache(elem: Element) {\n    return this.cache.get(elem)\n  }\n\n  getDataOfElement(elem: Element) {\n    return this.cache.getData(elem)\n  }\n\n  getMatrixOfElement(elem: Element) {\n    return this.cache.getMatrix(elem)\n  }\n\n  getShapeOfElement(elem: SVGElement) {\n    return this.cache.getShape(elem)\n  }\n\n  getScaleOfElement(node: Element, scalableNode?: SVGElement) {\n    let sx\n    let sy\n    if (scalableNode && scalableNode.contains(node)) {\n      const scale = Dom.scale(scalableNode)\n      sx = 1 / scale.sx\n      sy = 1 / scale.sy\n    } else {\n      sx = 1\n      sy = 1\n    }\n\n    return { sx, sy }\n  }\n\n  getBoundingRectOfElement(elem: Element) {\n    return this.cache.getBoundingRect(elem)\n  }\n\n  getBBoxOfElement(elem: Element) {\n    const rect = this.getBoundingRectOfElement(elem)\n    const matrix = this.getMatrixOfElement(elem)\n    const rm = this.getRootRotatedMatrix()\n    const tm = this.getRootTranslatedMatrix()\n    return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix))\n  }\n\n  getUnrotatedBBoxOfElement(elem: SVGElement) {\n    const rect = this.getBoundingRectOfElement(elem)\n    const matrix = this.getMatrixOfElement(elem)\n    const tm = this.getRootTranslatedMatrix()\n    return Dom.transformRectangle(rect, tm.multiply(matrix))\n  }\n\n  getBBox(options: { useCellGeometry?: boolean } = {}) {\n    let bbox\n    if (options.useCellGeometry) {\n      const cell = this.cell\n      const angle = cell.isNode() ? cell.getAngle() : 0\n      bbox = cell.getBBox().bbox(angle)\n    } else {\n      bbox = this.getBBoxOfElement(this.container)\n    }\n\n    return this.graph.localToGraph(bbox)\n  }\n\n  getRootTranslatedMatrix() {\n    const cell = this.cell\n    const pos = cell.isNode() ? cell.getPosition() : { x: 0, y: 0 }\n    return Dom.createSVGMatrix().translate(pos.x, pos.y)\n  }\n\n  getRootRotatedMatrix() {\n    let matrix = Dom.createSVGMatrix()\n    const cell = this.cell\n    const angle = cell.isNode() ? cell.getAngle() : 0\n    if (angle) {\n      const bbox = cell.getBBox()\n      const cx = bbox.width / 2\n      const cy = bbox.height / 2\n      matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy)\n    }\n    return matrix\n  }\n\n  findMagnet(elem: Element = this.container) {\n    // If the overall cell has set `magnet === false`, then returns\n    // `undefined` to announce there is no magnet found for this cell.\n    // This is especially useful to set on cells that have 'ports'.\n    // In this case, only the ports have set `magnet === true` and the\n    // overall element has `magnet === false`.\n    return this.findByAttr('magnet', elem)\n  }\n\n  updateAttrs(\n    rootNode: Element,\n    attrs: Attr.CellAttrs,\n    options: Partial<AttrManager.UpdateOptions> = {},\n  ) {\n    if (options.rootBBox == null) {\n      options.rootBBox = new Rectangle()\n    }\n\n    if (options.selectors == null) {\n      options.selectors = this.selectors\n    }\n\n    this.attr.update(rootNode, attrs, options as AttrManager.UpdateOptions)\n  }\n\n  isEdgeElement(magnet?: Element | null) {\n    return this.cell.isEdge() && (magnet == null || magnet === this.container)\n  }\n\n  // #region highlight\n\n  protected prepareHighlight(\n    elem?: Element | null,\n    options: CellView.HighlightOptions = {},\n  ) {\n    const magnet = (elem && this.$(elem)[0]) || this.container\n    options.partial = magnet === this.container\n    return magnet\n  }\n\n  highlight(elem?: Element | null, options: CellView.HighlightOptions = {}) {\n    const magnet = this.prepareHighlight(elem, options)\n    this.notify('cell:highlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell,\n    })\n    if (this.isEdgeView()) {\n      this.notify('edge:highlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell,\n      })\n    } else if (this.isNodeView()) {\n      this.notify('node:highlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell,\n      })\n    }\n    return this\n  }\n\n  unhighlight(elem?: Element | null, options: CellView.HighlightOptions = {}) {\n    const magnet = this.prepareHighlight(elem, options)\n    this.notify('cell:unhighlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell,\n    })\n    if (this.isNodeView()) {\n      this.notify('node:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell,\n      })\n    } else if (this.isEdgeView()) {\n      this.notify('edge:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell,\n      })\n    }\n    return this\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  notifyUnhighlight(magnet: Element, options: CellView.HighlightOptions) {}\n\n  // #endregion\n\n  getEdgeTerminal(\n    magnet: Element,\n    x: number,\n    y: number,\n    edge: Edge,\n    type: Edge.TerminalType,\n  ) {\n    const cell = this.cell\n    const portId = this.findAttr('port', magnet)\n    const selector = magnet.getAttribute('data-selector')\n    const terminal: Edge.TerminalCellData = { cell: cell.id }\n\n    if (selector != null) {\n      terminal.magnet = selector\n    }\n\n    if (portId != null) {\n      terminal.port = portId\n      if (cell.isNode()) {\n        if (!cell.hasPort(portId) && selector == null) {\n          // port created via the `port` attribute (not API)\n          terminal.selector = this.getSelector(magnet)\n        }\n      }\n    } else if (selector == null && this.container !== magnet) {\n      terminal.selector = this.getSelector(magnet)\n    }\n\n    return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type)\n  }\n\n  protected customizeEdgeTerminal(\n    terminal: Edge.TerminalCellData,\n    magnet: Element,\n    x: number,\n    y: number,\n    edge: Edge,\n    type: Edge.TerminalType,\n  ): Edge.TerminalCellData {\n    const raw = edge.getStrategy() || this.graph.options.connecting.strategy\n    if (raw) {\n      const name = typeof raw === 'string' ? raw : raw.name\n      const args = typeof raw === 'string' ? {} : raw.args || {}\n      const registry = ConnectionStrategy.registry\n\n      if (name) {\n        const fn = registry.get(name)\n        if (fn == null) {\n          return registry.onNotFound(name)\n        }\n\n        const result = FunctionExt.call(\n          fn,\n          this.graph,\n          terminal,\n          this,\n          magnet,\n          new Point(x, y),\n          edge,\n          type,\n          args,\n        )\n\n        if (result) {\n          return result\n        }\n      }\n    }\n\n    return terminal\n  }\n\n  getMagnetFromEdgeTerminal(terminal: Edge.TerminalData) {\n    const cell = this.cell\n    const root = this.container\n    const portId = (terminal as Edge.TerminalCellData).port\n    let selector = terminal.magnet\n    let magnet\n    if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n      magnet = (this as any).findPortElem(portId, selector) || root\n    } else {\n      if (!selector) {\n        selector = terminal.selector\n      }\n      if (!selector && portId != null) {\n        selector = `[port=\"${portId}\"]`\n      }\n      magnet = this.findOne(selector, root, this.selectors)\n    }\n\n    return magnet\n  }\n\n  // #region animate\n\n  animate(elem: SVGElement | string, options: Dom.AnimationOptions) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem\n    if (target == null) {\n      throw new Error('Invalid animation element.')\n    }\n\n    const parent = target.parentNode\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target)\n      }\n    }\n\n    const vTarget = Vector.create(target as SVGElement)\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage)\n    }\n\n    const onComplete = options.complete\n    options.complete = (e: Event) => {\n      revert()\n\n      if (onComplete) {\n        onComplete(e)\n      }\n    }\n\n    return vTarget.animate(options)\n  }\n\n  animateTransform(elem: SVGElement | string, options: Dom.AnimationOptions) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem\n    if (target == null) {\n      throw new Error('Invalid animation element.')\n    }\n\n    const parent = target.parentNode\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target)\n      }\n    }\n\n    const vTarget = Vector.create(target as SVGElement)\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage)\n    }\n\n    const onComplete = options.complete\n    options.complete = (e: Event) => {\n      revert()\n\n      if (onComplete) {\n        onComplete(e)\n      }\n    }\n\n    return vTarget.animateTransform(options)\n  }\n\n  // #endregion\n\n  // #region tools\n\n  protected tools: ToolsView | null\n\n  hasTools(name?: string) {\n    const tools = this.tools\n    if (tools == null) {\n      return false\n    }\n\n    if (name == null) {\n      return true\n    }\n\n    return tools.name === name\n  }\n\n  addTools(options: ToolsView.Options | null): this\n  addTools(tools: ToolsView | null): this\n  addTools(config: ToolsView | ToolsView.Options | null) {\n    if (!this.can('toolsAddable')) {\n      return this\n    }\n    this.removeTools()\n    if (config) {\n      const tools = ToolsView.isToolsView(config)\n        ? config\n        : new ToolsView(config)\n      this.tools = tools\n      this.graph.on('tools:hide', this.hideTools, this)\n      this.graph.on('tools:show', this.showTools, this)\n      this.graph.on('tools:remove', this.removeTools, this)\n      tools.config({ view: this })\n      tools.mount()\n    }\n    return this\n  }\n\n  updateTools(options: ToolsView.UpdateOptions = {}) {\n    if (this.tools) {\n      this.tools.update(options)\n    }\n    return this\n  }\n\n  removeTools() {\n    if (this.tools) {\n      this.tools.remove()\n      this.graph.off('tools:hide', this.hideTools, this)\n      this.graph.off('tools:show', this.showTools, this)\n      this.graph.off('tools:remove', this.removeTools, this)\n      this.tools = null\n    }\n    return this\n  }\n\n  hideTools() {\n    if (this.tools) {\n      this.tools.hide()\n    }\n    return this\n  }\n\n  showTools() {\n    if (this.tools) {\n      this.tools.show()\n    }\n    return this\n  }\n\n  protected renderTools() {\n    const tools = this.cell.getTools()\n    this.addTools(tools as ToolsView.Options)\n    return this\n  }\n\n  // #endregion\n\n  // #region events\n\n  notify<Key extends keyof CellView.EventArgs>(\n    name: Key,\n    args: CellView.EventArgs[Key],\n  ): this\n  notify(name: Exclude<string, keyof CellView.EventArgs>, args: any): this\n  notify<Key extends keyof CellView.EventArgs>(\n    name: Key,\n    args: CellView.EventArgs[Key],\n  ) {\n    this.trigger(name, args)\n    this.graph.trigger(name, args)\n    return this\n  }\n\n  protected getEventArgs<E>(e: E): CellView.MouseEventArgs<E>\n  protected getEventArgs<E>(\n    e: E,\n    x: number,\n    y: number,\n  ): CellView.MousePositionEventArgs<E>\n  protected getEventArgs<E>(e: E, x?: number, y?: number) {\n    const view = this // eslint-disable-line @typescript-eslint/no-this-alias\n    const cell = view.cell\n    if (x == null || y == null) {\n      return { e, view, cell } as CellView.MouseEventArgs<E>\n    }\n    return { e, x, y, view, cell } as CellView.MousePositionEventArgs<E>\n  }\n\n  onClick(e: JQuery.ClickEvent, x: number, y: number) {\n    this.notify('cell:click', this.getEventArgs(e, x, y))\n  }\n\n  onDblClick(e: JQuery.DoubleClickEvent, x: number, y: number) {\n    this.notify('cell:dblclick', this.getEventArgs(e, x, y))\n  }\n\n  onContextMenu(e: JQuery.ContextMenuEvent, x: number, y: number) {\n    this.notify('cell:contextmenu', this.getEventArgs(e, x, y))\n  }\n\n  protected cachedModelForMouseEvent: Model | null\n\n  onMouseDown(e: JQuery.MouseDownEvent, x: number, y: number) {\n    if (this.cell.model) {\n      this.cachedModelForMouseEvent = this.cell.model\n      this.cachedModelForMouseEvent.startBatch('mouse')\n    }\n\n    this.notify('cell:mousedown', this.getEventArgs(e, x, y))\n  }\n\n  onMouseUp(e: JQuery.MouseUpEvent, x: number, y: number) {\n    this.notify('cell:mouseup', this.getEventArgs(e, x, y))\n\n    if (this.cachedModelForMouseEvent) {\n      this.cachedModelForMouseEvent.stopBatch('mouse', { cell: this.cell })\n      this.cachedModelForMouseEvent = null\n    }\n  }\n\n  onMouseMove(e: JQuery.MouseMoveEvent, x: number, y: number) {\n    this.notify('cell:mousemove', this.getEventArgs(e, x, y))\n  }\n\n  onMouseOver(e: JQuery.MouseOverEvent) {\n    this.notify('cell:mouseover', this.getEventArgs(e))\n  }\n\n  onMouseOut(e: JQuery.MouseOutEvent) {\n    this.notify('cell:mouseout', this.getEventArgs(e))\n  }\n\n  onMouseEnter(e: JQuery.MouseEnterEvent) {\n    this.notify('cell:mouseenter', this.getEventArgs(e))\n  }\n\n  onMouseLeave(e: JQuery.MouseLeaveEvent) {\n    this.notify('cell:mouseleave', this.getEventArgs(e))\n  }\n\n  onMouseWheel(e: JQuery.TriggeredEvent, x: number, y: number, delta: number) {\n    this.notify('cell:mousewheel', {\n      delta,\n      ...this.getEventArgs(e, x, y),\n    })\n  }\n\n  onCustomEvent(e: JQuery.MouseDownEvent, name: string, x: number, y: number) {\n    this.notify('cell:customevent', { name, ...this.getEventArgs(e, x, y) })\n    this.notify(name, { ...this.getEventArgs(e, x, y) })\n  }\n\n  onMagnetMouseDown(\n    e: JQuery.MouseDownEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onMagnetDblClick(\n    e: JQuery.DoubleClickEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onMagnetContextMenu(\n    e: JQuery.ContextMenuEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onLabelMouseDown(e: JQuery.MouseDownEvent, x: number, y: number) {}\n\n  checkMouseleave(e: JQuery.TriggeredEvent) {\n    const graph = this.graph\n    if (graph.renderer.isAsync()) {\n      // Do the updates of the current view synchronously now\n      graph.renderer.dumpView(this)\n    }\n    const target = this.getEventTarget(e, { fromPoint: true })\n    const view = graph.renderer.findViewByElem(target)\n    if (view === this) {\n      return\n    }\n\n    // Leaving the current view\n    this.onMouseLeave(e as JQuery.MouseLeaveEvent)\n    if (!view) {\n      return\n    }\n\n    // Entering another view\n    view.onMouseEnter(e as JQuery.MouseEnterEvent)\n  }\n\n  // #endregion\n}\n\nexport namespace CellView {\n  export interface Options {\n    graph: Graph\n    priority: number\n    isSvgElement: boolean\n    rootSelector: string\n    bootstrap: FlagManager.Actions\n    actions: KeyValue<FlagManager.Actions>\n    events?: View.Events | null\n    documentEvents?: View.Events | null\n  }\n\n  type Interactable = boolean | ((this: Graph, cellView: CellView) => boolean)\n\n  interface InteractionMap {\n    // edge\n    edgeMovable?: Interactable\n    edgeLabelMovable?: Interactable\n    arrowheadMovable?: Interactable\n    vertexMovable?: Interactable\n    vertexAddable?: Interactable\n    vertexDeletable?: Interactable\n    useEdgeTools?: Interactable\n\n    // node\n    nodeMovable?: Interactable\n    magnetConnectable?: Interactable\n    stopDelegateOnDragging?: Interactable\n\n    // general\n    toolsAddable?: Interactable\n  }\n\n  export type InteractionNames = keyof InteractionMap\n\n  export type Interacting =\n    | boolean\n    | InteractionMap\n    | ((this: Graph, cellView: CellView) => InteractionMap | boolean)\n\n  export interface HighlightOptions {\n    highlighter?:\n      | string\n      | {\n          name: string\n          args: KeyValue\n        }\n\n    type?: 'embedding' | 'nodeAvailable' | 'magnetAvailable' | 'magnetAdsorbed'\n\n    partial?: boolean\n  }\n}\n\nexport namespace CellView {\n  export interface PositionEventArgs {\n    x: number\n    y: number\n  }\n\n  export interface MouseDeltaEventArgs {\n    delta: number\n  }\n\n  export interface MouseEventArgs<E> {\n    e: E\n    view: CellView\n    cell: Cell\n  }\n\n  export interface MousePositionEventArgs<E>\n    extends MouseEventArgs<E>,\n      PositionEventArgs {}\n\n  export interface EventArgs extends NodeView.EventArgs, EdgeView.EventArgs {\n    'cell:click': MousePositionEventArgs<JQuery.ClickEvent>\n    'cell:dblclick': MousePositionEventArgs<JQuery.DoubleClickEvent>\n    'cell:contextmenu': MousePositionEventArgs<JQuery.ContextMenuEvent>\n    'cell:mousedown': MousePositionEventArgs<JQuery.MouseDownEvent>\n    'cell:mousemove': MousePositionEventArgs<JQuery.MouseMoveEvent>\n    'cell:mouseup': MousePositionEventArgs<JQuery.MouseUpEvent>\n    'cell:mouseover': MouseEventArgs<JQuery.MouseOverEvent>\n    'cell:mouseout': MouseEventArgs<JQuery.MouseOutEvent>\n    'cell:mouseenter': MouseEventArgs<JQuery.MouseEnterEvent>\n    'cell:mouseleave': MouseEventArgs<JQuery.MouseLeaveEvent>\n    'cell:mousewheel': MousePositionEventArgs<JQuery.TriggeredEvent> &\n      MouseDeltaEventArgs\n    'cell:customevent': MousePositionEventArgs<JQuery.MouseDownEvent> & {\n      name: string\n    }\n    'cell:highlight': {\n      magnet: Element\n      view: CellView\n      cell: Cell\n      options: CellView.HighlightOptions\n    }\n    'cell:unhighlight': EventArgs['cell:highlight']\n  }\n}\n\nexport namespace CellView {\n  export const Flag = FlagManager\n  export const Attr = AttrManager\n}\n\nexport namespace CellView {\n  export const toStringTag = `X6.${CellView.name}`\n\n  export function isCellView(instance: any): instance is CellView {\n    if (instance == null) {\n      return false\n    }\n\n    if (instance instanceof CellView) {\n      return true\n    }\n\n    const tag = instance[Symbol.toStringTag]\n    const view = instance as CellView\n\n    if (\n      (tag == null || tag === toStringTag) &&\n      typeof view.isNodeView === 'function' &&\n      typeof view.isEdgeView === 'function' &&\n      typeof view.confirmUpdate === 'function'\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n\n// decorators\n// ----\nexport namespace CellView {\n  export function priority(value: number) {\n    return function (ctor: Definition) {\n      ctor.config({ priority: value })\n    }\n  }\n\n  export function bootstrap(actions: FlagManager.Actions) {\n    return function (ctor: Definition) {\n      ctor.config({ bootstrap: actions })\n    }\n  }\n}\n\nexport namespace CellView {\n  type CellViewClass = typeof CellView\n\n  export interface Definition extends CellViewClass {\n    new <\n      Entity extends Cell = Cell,\n      Options extends CellView.Options = CellView.Options,\n    >(\n      cell: Entity,\n      options: Partial<Options>,\n    ): CellView\n  }\n\n  export const registry = Registry.create<Definition>({\n    type: 'view',\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}