{"ast":null,"code":"var GraphPasteSelectionCommand_1;\nimport { __awaiter, __decorate, __metadata, __rest } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n(function (NsGraphPasteSelection) {\n  /** Command: 用于注册named factory */\n  NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n  /** hookName */\n  NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\nfunction randomNumber(max, min = 0) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\nlet GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = class GraphPasteSelectionCommand {\n  constructor() {\n    this.updateNodeCopiedProps = (position, nodeConfig) => {\n      let dx = randomNumber(100);\n      let dy = randomNumber(100);\n      if (position) {\n        dx = nodeConfig.x - position.x + randomNumber(30);\n        dy = nodeConfig.y - position.y + randomNumber(30);\n      }\n      // 修改坐标\n      nodeConfig.x += dx;\n      nodeConfig.y += dy;\n      // 删除 id\n      nodeConfig.originalId = nodeConfig.id;\n      delete nodeConfig.id;\n      // 修改label\n      nodeConfig.label = nodeConfig.label ? `${nodeConfig.label}_copied` : '';\n      nodeConfig.isCollapsed = false;\n      return nodeConfig;\n    };\n    // 复制的 edge 包含了节点 id, 需要去除, 按照新节点来处理\n    this.getEdgeCopiedConfig = edgeConfig => {\n      const {\n        nodeMappingRecord\n      } = this.mappingHelper;\n      const {\n          id,\n          source,\n          target\n        } = edgeConfig,\n        otherEdgeConfig = __rest(edgeConfig, [\"id\", \"source\", \"target\"]);\n      return Object.assign(Object.assign({}, otherEdgeConfig), {\n        originalId: id,\n        source: nodeMappingRecord.get((source === null || source === void 0 ? void 0 : source.cell) || source),\n        target: nodeMappingRecord.get((target === null || target === void 0 ? void 0 : target.cell) || target)\n      });\n    };\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      if (GraphPasteSelectionCommand_1.doing) {\n        return this;\n      }\n      GraphPasteSelectionCommand_1.doing = true;\n      const result = yield hooks.graphPasteSelection.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          position\n        } = handlerArgs;\n        const jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n        const plainObject = safeJson(jsonString, {\n          nodes: [],\n          edges: []\n        });\n        const {\n          nodes = [],\n          edges = []\n        } = plainObject;\n        const {\n          normalNodes,\n          groupNodes\n        } = this.mappingHelper.getNodesByType(nodes);\n        this.mappingHelper.addNodes(nodes);\n        // 添加普通节点\n        yield Promise.all(normalNodes.map(nodeConfig => __awaiter(this, void 0, void 0, function* () {\n          const res = yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, nodeConfig)\n          });\n          const context = res.contextProvider();\n          const cmdResult = context.getResult();\n          this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n        })));\n        // 处理group\n        yield Promise.all(groupNodes.map(group => __awaiter(this, void 0, void 0, function* () {\n          const groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n          yield commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig)\n          });\n        })));\n        // 处理连线\n        yield Promise.all(edges.map(edgeConfig => {\n          const copiedEdgeConfig = this.getEdgeCopiedConfig(edgeConfig);\n          return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n            edgeConfig: copiedEdgeConfig\n          });\n        }));\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      GraphPasteSelectionCommand_1.doing = false;\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n/** 防止多次执行 */\nGraphPasteSelectionCommand.doing = false;\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n__decorate([inject(GraphMappingHelper), __metadata(\"design:type\", GraphMappingHelper)], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphPasteSelection.command.id\n  }\n})\n/** 创建节点命令 */], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };","map":{"version":3,"names":["inject","injectable","ICommandHandler","ICommandContextProvider","XFlowGraphCommands","XFlowEdgeCommands","XFlowGroupCommands","XFlowNodeCommands","Disposable","LOCAL_STORAGE_KEY","safeJson","GraphMappingHelper","NsGraphPasteSelection","command","GRAPH_PASTE","hookKey","randomNumber","max","min","Math","floor","random","GraphPasteSelectionCommand","GraphPasteSelectionCommand_1","constructor","updateNodeCopiedProps","position","nodeConfig","dx","dy","x","y","originalId","id","label","isCollapsed","getEdgeCopiedConfig","edgeConfig","nodeMappingRecord","mappingHelper","source","target","otherEdgeConfig","__rest","Object","assign","get","cell","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","doing","result","graphPasteSelection","call","handlerArgs","commandService","jsonString","window","localStorage","getItem","plainObject","nodes","edges","normalNodes","groupNodes","getNodesByType","addNodes","Promise","all","map","res","executeCommand","ADD_NODE","context","cmdResult","getResult","buildNodeMapping","group","groupNodeConfig","buildGroupRelations","ADD_GROUP","copiedEdgeConfig","ADD_EDGE","addUndo","create","setItem","err","setResult","undo","isUndoable","redo","__decorate","token","named"],"sources":["../../../src/command-contributions/graph/graph-paste.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}