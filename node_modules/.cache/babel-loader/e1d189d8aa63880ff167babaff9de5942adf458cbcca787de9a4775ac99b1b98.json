{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { earthTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/base/base_frag.glsl' */\nconst baseFrag = \"uniform sampler2D u_texture;\\n\\nin vec2 v_texCoord;\\nin float v_lightWeight;\\nout vec4 outputColor;\\n\\nvoid main() {\\n    vec4 color = texture(SAMPLER_2D(u_texture),vec2(v_texCoord.x,v_texCoord.y));\\n    color.xyz = color.xyz * v_lightWeight;\\n    outputColor = color;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/base/base_vert.glsl' */\nconst baseVert = \"// attribute vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\\n\\n// attribute vec2 a_Extrude;\\n// attribute float a_Size;\\n// attribute float a_Shape;\\n\\nlayout(std140) uniform commonUniforms {\\n\\tvec4 u_sunLight: [1.0, -10.5, 12.0,0.0];\\n\\tfloat u_ambientRatio : 0.5;\\n\\tfloat u_diffuseRatio : 0.3;\\n\\tfloat u_specularRatio : 0.2;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nout float v_lightWeight;\\n\\nfloat calc_lighting(vec4 pos) {\\n\\n\\tvec3 worldPos = vec3(pos * u_ModelMatrix);\\n\\n\\tvec3 worldNormal = a_Normal;\\n\\n\\t// cal light weight\\n\\tvec3 viewDir = normalize(u_CameraPosition - worldPos);\\n\\n\\tvec3 lightDir = normalize(u_sunLight.xyz);\\n\\n\\tvec3 halfDir = normalize(viewDir+lightDir);\\n\\t// lambert\\n\\tfloat lambert = dot(worldNormal, lightDir);\\n\\t// specular\\n\\tfloat specular = pow(max(0.0, dot(worldNormal, halfDir)), 32.0);\\n\\t//sum to light weight\\n\\tfloat lightWeight = u_ambientRatio + u_diffuseRatio * lambert + u_specularRatio * specular;\\n\\n\\treturn lightWeight;\\n}\\n\\nvoid main() {\\n\\n\\tv_texCoord = a_Uv;\\n\\n\\tfloat lightWeight = calc_lighting(vec4(a_Position, 1.0));\\n\\tv_lightWeight = lightWeight;\\n\\n\\tgl_Position = u_ViewProjectionMatrix * u_ModelMatrix * vec4(a_Position, 1.0);\\n}\\n\";\nexport default class BaseEarthModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    // T: 当前的地球时间 - 控制太阳的方位\n    _defineProperty(this, \"earthTime\", 3.4);\n    _defineProperty(this, \"sunX\", 1000);\n    _defineProperty(this, \"sunY\", 1000);\n    _defineProperty(this, \"sunZ\", 1000);\n    _defineProperty(this, \"sunRadius\", Math.sqrt(this.sunX * this.sunX + this.sunY * this.sunY + this.sunZ * this.sunZ));\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      NORMAL: 9,\n      UV: 10\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      animateOption,\n      globalOptions\n    } = this.layer.getLayerConfig();\n    if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {\n      // @ts-ignore\n      // T: rotateY 方法只有在地球模式下存在\n      this.mapService.rotateY({\n        reg: 0.002\n      });\n      this.earthTime += 0.02;\n      this.sunY = 10;\n      this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);\n      this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);\n    }\n    const commonOptions = {\n      u_sunLight: [this.sunX, this.sunY, this.sunZ, 0.0],\n      u_ambientRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.ambientRatio) || 0.6,\n      // 环境光\n      u_diffuseRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.diffuseRatio) || 0.4,\n      // 漫反射\n      u_specularRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.specularRatio) || 0.1 // 高光反射\n      // u_texture: this.texture,\n    };\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  setEarthTime(time) {\n    this.earthTime = time;\n    this.sunY = 10;\n    this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);\n    this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);\n    this.layerService.throttleRenderLayers();\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        globalOptions\n      } = _this.layer.getLayerConfig();\n      if ((globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.earthTime) !== undefined) {\n        _this.setEarthTime(globalOptions.earthTime);\n      }\n      const source = _this.layer.getSource();\n      const {\n        createTexture2D\n      } = _this.rendererService;\n      _this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      source.data.images.then(imageData => {\n        _this.texture = createTexture2D({\n          data: imageData[0],\n          width: imageData[0].width,\n          height: imageData[0].height\n        });\n        _this.textures = [_this.texture];\n        _this.layerService.reRender();\n      });\n      _this.initUniformsBuffer();\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    return '';\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Tip: 调整图层的绘制顺序 地球大气层\n      _this2.layer.zIndex = -998;\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'earthBase',\n        vertexShader: baseVert,\n        fragmentShader: baseFrag,\n        defines: _this2.getDefines(),\n        triangulation: earthTriangulation,\n        depth: {\n          enable: true\n        },\n        blend: _this2.getBlend()\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    // this.styleAttributeService.registerStyleAttribute({\n    //   name: 'size',\n    //   type: AttributeType.Attribute,\n    //   descriptor: {\n    //     name: 'a_Size',\n    //     shaderLocation: this.attributeLocation.SIZE,\n    //     buffer: {\n    //       usage: gl.DYNAMIC_DRAW,\n    //       data: [],\n    //       type: gl.FLOAT,\n    //     },\n    //     size: 1,\n    //     update: (feature: IEncodeFeature) => {\n    //       const { size = 1 } = feature;\n    //       return Array.isArray(size) ? [size[0]] : [size as number];\n    //     },\n    //   },\n    // });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        shaderLocation: this.attributeLocation.NORMAL,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 3,\n        update: (feature, featureIdx, vertex, attributeIdx, normal) => {\n          return normal;\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4]];\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","AttributeType","gl","BaseModel","earthTriangulation","baseFrag","baseVert","BaseEarthModel","constructor","args","Math","sqrt","sunX","sunY","sunZ","attributeLocation","Object","assign","MAX","NORMAL","UV","getCommonUniformsInfo","animateOption","globalOptions","layer","getLayerConfig","enable","mapService","rotateY","reg","earthTime","cos","sunRadius","sin","commonOptions","u_sunLight","u_ambientRatio","ambientRatio","u_diffuseRatio","diffuseRatio","u_specularRatio","specularRatio","textures","texture","commonBufferInfo","getUniformsBufferInfo","setEarthTime","time","layerService","throttleRenderLayers","initModels","_this","undefined","source","getSource","createTexture2D","rendererService","height","width","data","images","then","imageData","reRender","initUniformsBuffer","buildModels","clearModels","_this2","zIndex","model","buildLayerModel","moduleName","vertexShader","fragmentShader","defines","getDefines","triangulation","depth","blend","getBlend","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","usage","STATIC_DRAW","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","normal","DYNAMIC_DRAW"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/earth/models/base.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { earthTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/base/base_frag.glsl' */\nconst baseFrag = \"uniform sampler2D u_texture;\\n\\nin vec2 v_texCoord;\\nin float v_lightWeight;\\nout vec4 outputColor;\\n\\nvoid main() {\\n    vec4 color = texture(SAMPLER_2D(u_texture),vec2(v_texCoord.x,v_texCoord.y));\\n    color.xyz = color.xyz * v_lightWeight;\\n    outputColor = color;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/base/base_vert.glsl' */\nconst baseVert = \"// attribute vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\\n\\n// attribute vec2 a_Extrude;\\n// attribute float a_Size;\\n// attribute float a_Shape;\\n\\nlayout(std140) uniform commonUniforms {\\n\\tvec4 u_sunLight: [1.0, -10.5, 12.0,0.0];\\n\\tfloat u_ambientRatio : 0.5;\\n\\tfloat u_diffuseRatio : 0.3;\\n\\tfloat u_specularRatio : 0.2;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nout float v_lightWeight;\\n\\nfloat calc_lighting(vec4 pos) {\\n\\n\\tvec3 worldPos = vec3(pos * u_ModelMatrix);\\n\\n\\tvec3 worldNormal = a_Normal;\\n\\n\\t// cal light weight\\n\\tvec3 viewDir = normalize(u_CameraPosition - worldPos);\\n\\n\\tvec3 lightDir = normalize(u_sunLight.xyz);\\n\\n\\tvec3 halfDir = normalize(viewDir+lightDir);\\n\\t// lambert\\n\\tfloat lambert = dot(worldNormal, lightDir);\\n\\t// specular\\n\\tfloat specular = pow(max(0.0, dot(worldNormal, halfDir)), 32.0);\\n\\t//sum to light weight\\n\\tfloat lightWeight = u_ambientRatio + u_diffuseRatio * lambert + u_specularRatio * specular;\\n\\n\\treturn lightWeight;\\n}\\n\\nvoid main() {\\n\\n\\tv_texCoord = a_Uv;\\n\\n\\tfloat lightWeight = calc_lighting(vec4(a_Position, 1.0));\\n\\tv_lightWeight = lightWeight;\\n\\n\\tgl_Position = u_ViewProjectionMatrix * u_ModelMatrix * vec4(a_Position, 1.0);\\n}\\n\";\nexport default class BaseEarthModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    // T: 当前的地球时间 - 控制太阳的方位\n    _defineProperty(this, \"earthTime\", 3.4);\n    _defineProperty(this, \"sunX\", 1000);\n    _defineProperty(this, \"sunY\", 1000);\n    _defineProperty(this, \"sunZ\", 1000);\n    _defineProperty(this, \"sunRadius\", Math.sqrt(this.sunX * this.sunX + this.sunY * this.sunY + this.sunZ * this.sunZ));\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      NORMAL: 9,\n      UV: 10\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      animateOption,\n      globalOptions\n    } = this.layer.getLayerConfig();\n    if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {\n      // @ts-ignore\n      // T: rotateY 方法只有在地球模式下存在\n      this.mapService.rotateY({\n        reg: 0.002\n      });\n      this.earthTime += 0.02;\n      this.sunY = 10;\n      this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);\n      this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);\n    }\n    const commonOptions = {\n      u_sunLight: [this.sunX, this.sunY, this.sunZ, 0.0],\n      u_ambientRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.ambientRatio) || 0.6,\n      // 环境光\n      u_diffuseRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.diffuseRatio) || 0.4,\n      // 漫反射\n      u_specularRatio: (globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.specularRatio) || 0.1 // 高光反射\n      // u_texture: this.texture,\n    };\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  setEarthTime(time) {\n    this.earthTime = time;\n    this.sunY = 10;\n    this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);\n    this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);\n    this.layerService.throttleRenderLayers();\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        globalOptions\n      } = _this.layer.getLayerConfig();\n      if ((globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.earthTime) !== undefined) {\n        _this.setEarthTime(globalOptions.earthTime);\n      }\n      const source = _this.layer.getSource();\n      const {\n        createTexture2D\n      } = _this.rendererService;\n      _this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      source.data.images.then(imageData => {\n        _this.texture = createTexture2D({\n          data: imageData[0],\n          width: imageData[0].width,\n          height: imageData[0].height\n        });\n        _this.textures = [_this.texture];\n        _this.layerService.reRender();\n      });\n      _this.initUniformsBuffer();\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    return '';\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Tip: 调整图层的绘制顺序 地球大气层\n      _this2.layer.zIndex = -998;\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'earthBase',\n        vertexShader: baseVert,\n        fragmentShader: baseFrag,\n        defines: _this2.getDefines(),\n        triangulation: earthTriangulation,\n        depth: {\n          enable: true\n        },\n        blend: _this2.getBlend()\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    // this.styleAttributeService.registerStyleAttribute({\n    //   name: 'size',\n    //   type: AttributeType.Attribute,\n    //   descriptor: {\n    //     name: 'a_Size',\n    //     shaderLocation: this.attributeLocation.SIZE,\n    //     buffer: {\n    //       usage: gl.DYNAMIC_DRAW,\n    //       data: [],\n    //       type: gl.FLOAT,\n    //     },\n    //     size: 1,\n    //     update: (feature: IEncodeFeature) => {\n    //       const { size = 1 } = feature;\n    //       return Array.isArray(size) ? [size[0]] : [size as number];\n    //     },\n    //   },\n    // });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        shaderLocation: this.attributeLocation.NORMAL,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 3,\n        update: (feature, featureIdx, vertex, attributeIdx, normal) => {\n          return normal;\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4]];\n        }\n      }\n    });\n  }\n}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,SAASC,aAAa,EAAEC,EAAE,QAAQ,eAAe;AACjD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D;AACA,MAAMC,QAAQ,GAAG,mRAAmR;AACpS;AACA,MAAMC,QAAQ,GAAG,+2CAA+2C;AACh4C,eAAe,MAAMC,cAAc,SAASJ,SAAS,CAAC;EACpDK,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACdT,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxC;IACAA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,GAAG,CAAC;IACvCA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC;IACnCA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC;IACnCA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC;IACnCA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAEU,IAAI,CAACC,IAAI,CAAC,IAAI,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,GAAG,IAAI,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,GAAG,IAAI,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;EACtH;EACA,IAAIC,iBAAiBA,CAAA,EAAG;IACtB,OAAOC,MAAM,CAACC,MAAM,CAAC,KAAK,CAACF,iBAAiB,EAAE;MAC5CG,GAAG,EAAE,KAAK,CAACH,iBAAiB,CAACG,GAAG;MAChCC,MAAM,EAAE,CAAC;MACTC,EAAE,EAAE;IACN,CAAC,CAAC;EACJ;EACAC,qBAAqBA,CAAA,EAAG;IACtB,MAAM;MACJC,aAAa;MACbC;IACF,CAAC,GAAG,IAAI,CAACC,KAAK,CAACC,cAAc,CAAC,CAAC;IAC/B,IAAIH,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAACI,MAAM,EAAE;MAC9E;MACA;MACA,IAAI,CAACC,UAAU,CAACC,OAAO,CAAC;QACtBC,GAAG,EAAE;MACP,CAAC,CAAC;MACF,IAAI,CAACC,SAAS,IAAI,IAAI;MACtB,IAAI,CAACjB,IAAI,GAAG,EAAE;MACd,IAAI,CAACD,IAAI,GAAGF,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACD,SAAS,CAAC,IAAI,IAAI,CAACE,SAAS,GAAG,IAAI,CAACnB,IAAI,CAAC;MACnE,IAAI,CAACC,IAAI,GAAGJ,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACH,SAAS,CAAC,IAAI,IAAI,CAACE,SAAS,GAAG,IAAI,CAACnB,IAAI,CAAC;IACrE;IACA,MAAMqB,aAAa,GAAG;MACpBC,UAAU,EAAE,CAAC,IAAI,CAACvB,IAAI,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,IAAI,EAAE,GAAG,CAAC;MAClDsB,cAAc,EAAE,CAACb,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACc,YAAY,KAAK,GAAG;MACjH;MACAC,cAAc,EAAE,CAACf,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACgB,YAAY,KAAK,GAAG;MACjH;MACAC,eAAe,EAAE,CAACjB,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACkB,aAAa,KAAK,GAAG,CAAC;MACpH;IACF,CAAC;IACD,IAAI,CAACC,QAAQ,GAAG,CAAC,IAAI,CAACC,OAAO,CAAC;IAC9B,MAAMC,gBAAgB,GAAG,IAAI,CAACC,qBAAqB,CAACX,aAAa,CAAC;IAClE,OAAOU,gBAAgB;EACzB;EACAE,YAAYA,CAACC,IAAI,EAAE;IACjB,IAAI,CAACjB,SAAS,GAAGiB,IAAI;IACrB,IAAI,CAAClC,IAAI,GAAG,EAAE;IACd,IAAI,CAACD,IAAI,GAAGF,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACD,SAAS,CAAC,IAAI,IAAI,CAACE,SAAS,GAAG,IAAI,CAACnB,IAAI,CAAC;IACnE,IAAI,CAACC,IAAI,GAAGJ,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACH,SAAS,CAAC,IAAI,IAAI,CAACE,SAAS,GAAG,IAAI,CAACnB,IAAI,CAAC;IACnE,IAAI,CAACmC,YAAY,CAACC,oBAAoB,CAAC,CAAC;EAC1C;EACAC,UAAUA,CAAA,EAAG;IACX,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAOpD,iBAAiB,CAAC,aAAa;MACpC,MAAM;QACJwB;MACF,CAAC,GAAG4B,KAAK,CAAC3B,KAAK,CAACC,cAAc,CAAC,CAAC;MAChC,IAAI,CAACF,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACO,SAAS,MAAMsB,SAAS,EAAE;QACzGD,KAAK,CAACL,YAAY,CAACvB,aAAa,CAACO,SAAS,CAAC;MAC7C;MACA,MAAMuB,MAAM,GAAGF,KAAK,CAAC3B,KAAK,CAAC8B,SAAS,CAAC,CAAC;MACtC,MAAM;QACJC;MACF,CAAC,GAAGJ,KAAK,CAACK,eAAe;MACzBL,KAAK,CAACR,OAAO,GAAGY,eAAe,CAAC;QAC9BE,MAAM,EAAE,CAAC;QACTC,KAAK,EAAE;MACT,CAAC,CAAC;MACFL,MAAM,CAACM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,SAAS,IAAI;QACnCX,KAAK,CAACR,OAAO,GAAGY,eAAe,CAAC;UAC9BI,IAAI,EAAEG,SAAS,CAAC,CAAC,CAAC;UAClBJ,KAAK,EAAEI,SAAS,CAAC,CAAC,CAAC,CAACJ,KAAK;UACzBD,MAAM,EAAEK,SAAS,CAAC,CAAC,CAAC,CAACL;QACvB,CAAC,CAAC;QACFN,KAAK,CAACT,QAAQ,GAAG,CAACS,KAAK,CAACR,OAAO,CAAC;QAChCQ,KAAK,CAACH,YAAY,CAACe,QAAQ,CAAC,CAAC;MAC/B,CAAC,CAAC;MACFZ,KAAK,CAACa,kBAAkB,CAAC,CAAC;MAC1B,OAAOb,KAAK,CAACc,WAAW,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,WAAWA,CAAA,EAAG;IACZ,OAAO,EAAE;EACX;EACAD,WAAWA,CAAA,EAAG;IACZ,IAAIE,MAAM,GAAG,IAAI;IACjB,OAAOpE,iBAAiB,CAAC,aAAa;MACpC;MACAoE,MAAM,CAAC3C,KAAK,CAAC4C,MAAM,GAAG,CAAC,GAAG;MAC1B,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAAC3C,KAAK,CAAC8C,eAAe,CAAC;QAC/CC,UAAU,EAAE,WAAW;QACvBC,YAAY,EAAElE,QAAQ;QACtBmE,cAAc,EAAEpE,QAAQ;QACxBqE,OAAO,EAAEP,MAAM,CAACQ,UAAU,CAAC,CAAC;QAC5BC,aAAa,EAAExE,kBAAkB;QACjCyE,KAAK,EAAE;UACLnD,MAAM,EAAE;QACV,CAAC;QACDoD,KAAK,EAAEX,MAAM,CAACY,QAAQ,CAAC;MACzB,CAAC,CAAC;MACF,OAAO,CAACV,KAAK,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;EACN;EACAW,yBAAyBA,CAAA,EAAG;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI,CAACC,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAEnF,aAAa,CAACoF,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,UAAU;QAChBI,cAAc,EAAE,IAAI,CAACxE,iBAAiB,CAACI,MAAM;QAC7CqE,MAAM,EAAE;UACNC,KAAK,EAAEvF,EAAE,CAACwF,WAAW;UACrB/B,IAAI,EAAE,EAAE;UACRyB,IAAI,EAAElF,EAAE,CAACyF;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPC,MAAM,EAAEA,CAACC,OAAO,EAAEC,UAAU,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,KAAK;UAC7D,OAAOA,MAAM;QACf;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAACjB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAEnF,aAAa,CAACoF,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,MAAM;QACZI,cAAc,EAAE,IAAI,CAACxE,iBAAiB,CAACK,EAAE;QACzCoE,MAAM,EAAE;UACN;UACAC,KAAK,EAAEvF,EAAE,CAACiG,YAAY;UACtBxC,IAAI,EAAE,EAAE;UACRyB,IAAI,EAAElF,EAAE,CAACyF;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPC,MAAM,EAAEA,CAACC,OAAO,EAAEC,UAAU,EAAEC,MAAM,KAAK;UACvC,OAAO,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B;MACF;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}