{"ast":null,"code":"import { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nconst contentSelector = '.text-block-content';\nconst registryName = getName('text-block');\nexport class TextBlock extends Node {\n  get content() {\n    return this.getContent();\n  }\n  set content(val) {\n    this.setContent(val);\n  }\n  getContent() {\n    return this.store.get('content', '');\n  }\n  setContent(content, options = {}) {\n    this.store.set('content', content, options);\n  }\n  setup() {\n    super.setup();\n    this.store.on('change:*', metadata => {\n      const key = metadata.key;\n      if (key === 'content') {\n        this.updateContent(this.getContent());\n      } else if (key === 'size') {\n        this.updateSize(this.getSize());\n      }\n    });\n    this.updateSize(this.getSize());\n    this.updateContent(this.getContent());\n  }\n  updateSize(size) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        foreignObject: Object.assign({}, size),\n        [contentSelector]: {\n          style: Object.assign({}, size)\n        }\n      });\n    }\n  }\n  updateContent(content) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        [contentSelector]: {\n          html: content ? StringExt.sanitizeHTML(content) : ''\n        }\n      });\n    } else {\n      this.setAttrs({\n        [contentSelector]: {\n          text: content\n        }\n      });\n    }\n  }\n}\n(function (TextBlock) {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', Platform.SUPPORT_FOREIGNOBJECT ? [`<foreignObject>`, `<body xmlns=\"http://www.w3.org/1999/xhtml\">`, `<div class=\"${contentSelector.substr(1)}\" />`, `</body>`, `</foreignObject>`].join('') : `<text class=\"${contentSelector.substr(1)}\"/>`, '</g>'].join(''),\n    attrs: {\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif'\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0\n        }\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden'\n        }\n      },\n      [contentSelector]: {\n        refX: 0.5,\n        refY: 0.5,\n        yAlign: 'middle',\n        xAlign: 'middle',\n        style: {\n          textAlign: 'center',\n          verticalAlign: 'middle',\n          display: 'table-cell',\n          padding: '0 5px',\n          margin: 0\n        }\n      }\n    }\n  });\n  Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n(function (TextBlock) {\n  const contentAction = 'content';\n  class View extends NodeView {\n    confirmUpdate(flag, options = {}) {\n      let ret = super.confirmUpdate(flag, options);\n      if (this.hasAction(ret, contentAction)) {\n        this.updateContent();\n        ret = this.removeAction(ret, contentAction);\n      }\n      return ret;\n    }\n    update(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const attrs = Object.assign({}, partialAttrs || node.getAttrs());\n        delete attrs[contentSelector];\n        super.update(attrs);\n        if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n          this.updateContent(partialAttrs);\n        }\n      }\n    }\n    updateContent(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const textAttrs = (partialAttrs || node.getAttrs())[contentSelector];\n        // Break the text to fit the node size taking into\n        // account the attributes set on the node.\n        const text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n          svgDocument: this.graph.view.svg\n        });\n        const attrs = {\n          [contentSelector]: ObjectExt.merge({}, textAttrs, {\n            text\n          })\n        };\n        super.update(attrs);\n      }\n    }\n  }\n  TextBlock.View = View;\n  (function (View) {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT ? {} : {\n        size: contentAction,\n        content: contentAction\n      }\n    });\n    NodeView.registry.register(registryName, View);\n  })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));","map":{"version":3,"names":["Platform","StringExt","ObjectExt","Dom","Node","NodeView","getName","contentSelector","registryName","TextBlock","content","getContent","val","setContent","store","get","options","set","setup","on","metadata","key","updateContent","updateSize","getSize","size","SUPPORT_FOREIGNOBJECT","setAttrs","foreignObject","Object","assign","style","html","sanitizeHTML","text","config","type","view","markup","substr","join","attrs","fill","stroke","rect","width","height","fontSize","fontFamily","body","background","position","margin","padding","overflow","refX","refY","yAlign","xAlign","textAlign","verticalAlign","display","registry","register","contentAction","View","confirmUpdate","flag","ret","hasAction","removeAction","update","partialAttrs","node","cell","getAttrs","has","textAttrs","breakText","svgDocument","graph","svg","merge","bootstrap","actions"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/shape/basic/text-block.ts"],"sourcesContent":["import { Platform, StringExt, ObjectExt, Dom } from '../../util'\nimport { Size } from '../../types'\nimport { Attr } from '../../registry'\nimport { Node } from '../../model'\nimport { Store } from '../../model/store'\nimport { NodeView } from '../../view'\nimport { getName } from './util'\n\nconst contentSelector = '.text-block-content'\nconst registryName = getName('text-block')\n\nexport class TextBlock<\n  Properties extends TextBlock.Properties = TextBlock.Properties,\n> extends Node<Properties> {\n  public readonly store: Store<TextBlock.Properties>\n\n  get content() {\n    return this.getContent()\n  }\n\n  set content(val: string) {\n    this.setContent(val)\n  }\n\n  getContent() {\n    return this.store.get('content', '')\n  }\n\n  setContent(content?: string, options: Node.SetOptions = {}) {\n    this.store.set('content', content, options)\n  }\n\n  protected setup() {\n    super.setup()\n    this.store.on('change:*', (metadata) => {\n      const key = metadata.key\n      if (key === 'content') {\n        this.updateContent(this.getContent())\n      } else if (key === 'size') {\n        this.updateSize(this.getSize())\n      }\n    })\n\n    this.updateSize(this.getSize())\n    this.updateContent(this.getContent())\n  }\n\n  protected updateSize(size: Size) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        foreignObject: { ...size },\n        [contentSelector]: {\n          style: { ...size },\n        },\n      })\n    }\n  }\n\n  protected updateContent(content?: string) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        [contentSelector]: {\n          html: content ? StringExt.sanitizeHTML(content) : '',\n        },\n      })\n    } else {\n      this.setAttrs({\n        [contentSelector]: {\n          text: content,\n        },\n      })\n    }\n  }\n}\n\nexport namespace TextBlock {\n  export interface Properties extends Node.Properties {\n    content?: string\n  }\n}\n\nexport namespace TextBlock {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: [\n      '<g class=\"rotatable\">',\n      '<g class=\"scalable\"><rect/></g>',\n      Platform.SUPPORT_FOREIGNOBJECT\n        ? [\n            `<foreignObject>`,\n            `<body xmlns=\"http://www.w3.org/1999/xhtml\">`,\n            `<div class=\"${contentSelector.substr(1)}\" />`,\n            `</body>`,\n            `</foreignObject>`,\n          ].join('')\n        : `<text class=\"${contentSelector.substr(1)}\"/>`,\n      '</g>',\n    ].join(''),\n    attrs: {\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none',\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100,\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif',\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0,\n        },\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden',\n        },\n      },\n      [contentSelector]: {\n        refX: 0.5,\n        refY: 0.5,\n        yAlign: 'middle',\n        xAlign: 'middle',\n        style: {\n          textAlign: 'center',\n          verticalAlign: 'middle',\n          display: 'table-cell',\n          padding: '0 5px',\n          margin: 0,\n        },\n      },\n    },\n  })\n\n  Node.registry.register(registryName, TextBlock)\n}\n\nexport namespace TextBlock {\n  const contentAction = 'content' as any\n\n  export class View extends NodeView<TextBlock> {\n    confirmUpdate(flag: number, options: any = {}) {\n      let ret = super.confirmUpdate(flag, options)\n      if (this.hasAction(ret, contentAction)) {\n        this.updateContent()\n        ret = this.removeAction(ret, contentAction)\n      }\n      return ret\n    }\n\n    update(partialAttrs?: Attr.CellAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs)\n      } else {\n        const node = this.cell\n        const attrs = { ...(partialAttrs || node.getAttrs()) }\n        delete attrs[contentSelector]\n        super.update(attrs)\n        if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n          this.updateContent(partialAttrs)\n        }\n      }\n    }\n\n    updateContent(partialAttrs?: Attr.CellAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs)\n      } else {\n        const node = this.cell\n        const textAttrs = (partialAttrs || node.getAttrs())[contentSelector]\n\n        // Break the text to fit the node size taking into\n        // account the attributes set on the node.\n        const text = Dom.breakText(\n          node.getContent(),\n          node.getSize(),\n          textAttrs,\n          {\n            svgDocument: this.graph.view.svg,\n          },\n        )\n\n        const attrs = {\n          [contentSelector]: ObjectExt.merge({}, textAttrs, { text }),\n        }\n\n        super.update(attrs)\n      }\n    }\n  }\n\n  export namespace View {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT\n        ? {}\n        : {\n            size: contentAction,\n            content: contentAction,\n          },\n    })\n\n    NodeView.registry.register(registryName, View)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}