{"ast":null,"code":"// \"use strict\";\n// var rankUtil = require(\"./util\");\n// var longestPath = rankUtil.longestPathWithLayer;\n// var feasibleTree = require(\"./feasible-tree\").feasibleTreeWithLayer;\n// var networkSimplex = require(\"./network-simplex\");\nimport { longestPath, longestPathWithLayer } from './util';\nimport { feasibleTreeWithLayer as feasibleTree } from './feasible-tree';\nimport networkSimplex from './network-simplex';\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nconst rank = g => {\n  switch (g.graph().ranker) {\n    case \"network-simplex\":\n      networkSimplexRanker(g);\n      break;\n    case \"tight-tree\":\n      tightTreeRanker(g);\n      break;\n    case \"longest-path\":\n      longestPathRanker(g);\n      break;\n    // default: networkSimplexRanker(g);\n    default:\n      tightTreeRanker(g);\n  }\n};\n// A fast and simple ranker, but results are far from optimal.\nconst longestPathRanker = longestPath;\nconst tightTreeRanker = g => {\n  longestPathWithLayer(g);\n  feasibleTree(g);\n};\nconst networkSimplexRanker = g => {\n  networkSimplex(g);\n};\nexport default rank;","map":{"version":3,"names":["longestPath","longestPathWithLayer","feasibleTreeWithLayer","feasibleTree","networkSimplex","rank","g","graph","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker"],"sources":["../../../../../src/layout/dagre/src/rank/index.ts"],"sourcesContent":[null],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA,SAASA,WAAW,EAAEC,oBAAoB,QAAQ,QAAQ;AAC1D,SAASC,qBAAqB,IAAIC,YAAY,QAAQ,iBAAiB;AACvE,OAAOC,cAAc,MAAM,mBAAmB;AAK9C;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,IAAI,GAAIC,CAAS,IAAI;EACzB,QAAOA,CAAC,CAACC,KAAK,EAAE,CAACC,MAAM;IACvB,KAAK,iBAAiB;MAAEC,oBAAoB,CAACH,CAAC,CAAC;MAAE;IACjD,KAAK,YAAY;MAAEI,eAAe,CAACJ,CAAC,CAAC;MAAE;IACvC,KAAK,cAAc;MAAEK,iBAAiB,CAACL,CAAC,CAAC;MAAE;IAC3C;IACA;MAASI,eAAe,CAACJ,CAAC,CAAC;;AAE7B,CAAC;AAED;AACA,MAAMK,iBAAiB,GAAGX,WAAW;AAErC,MAAMU,eAAe,GAAIJ,CAAS,IAAI;EACpCL,oBAAoB,CAACK,CAAC,CAAC;EACvBH,YAAY,CAACG,CAAC,CAAC;AACjB,CAAC;AAED,MAAMG,oBAAoB,GAAIH,CAAS,IAAI;EACzCF,cAAc,CAACE,CAAC,CAAC;AACnB,CAAC;AAED,eAAeD,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}