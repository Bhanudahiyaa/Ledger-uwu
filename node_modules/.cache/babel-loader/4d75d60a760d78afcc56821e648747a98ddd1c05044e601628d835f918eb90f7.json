{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/** Service interfaces */\n\n/** Service implements */\nimport FontService from \"./services/asset/FontService\";\nimport IconService from \"./services/asset/IconService\";\nimport CameraService from \"./services/camera/CameraService\";\nimport ControlService from \"./services/component/ControlService\";\nimport MarkerService from \"./services/component/MarkerService\";\nimport PopupService from \"./services/component/PopupService\";\nimport GlobalConfigService from \"./services/config/ConfigService\";\nimport CoordinateSystemService from \"./services/coordinate/CoordinateSystemService\";\nimport DebugService from \"./services/debug/DebugService\";\nimport InteractionService from \"./services/interaction/InteractionService\";\nimport PickingService from \"./services/interaction/PickingService\";\nimport LayerService from \"./services/layer/LayerService\";\nimport StyleAttributeService from \"./services/layer/StyleAttributeService\";\nimport SceneService from \"./services/scene/SceneService\";\nimport ShaderModuleService from \"./services/shader/ShaderModuleService\";\n\n/** PostProcessing passes */\n\nimport ClearPass from \"./services/renderer/passes/ClearPass\";\nimport MultiPassRenderer from \"./services/renderer/passes/MultiPassRenderer\";\nimport PixelPickingPass from \"./services/renderer/passes/PixelPickingPass\";\nimport PostProcessor from \"./services/renderer/passes/PostProcessor\";\nimport RenderPass from \"./services/renderer/passes/RenderPass\";\nimport BloomPass from \"./services/renderer/passes/post-processing/BloomPass\";\nimport BlurHPass from \"./services/renderer/passes/post-processing/BlurHPass\";\nimport BlurVPass from \"./services/renderer/passes/post-processing/BlurVPass\";\nimport ColorHalfTonePass from \"./services/renderer/passes/post-processing/ColorHalfTonePass\";\nimport CopyPass from \"./services/renderer/passes/post-processing/CopyPass\";\nimport HexagonalPixelatePass from \"./services/renderer/passes/post-processing/HexagonalPixelatePass\";\nimport InkPass from \"./services/renderer/passes/post-processing/InkPass\";\nimport NoisePass from \"./services/renderer/passes/post-processing/NoisePass\";\nimport SepiaPass from \"./services/renderer/passes/post-processing/SepiaPass\";\nexport const globalConfigService = new GlobalConfigService();\nlet sceneIdCounter = 0;\nexport function createSceneContainer() {\n  const shaderModuleService = new ShaderModuleService();\n  const debugService = new DebugService();\n  const cameraService = new CameraService();\n  const coordinateSystemService = new CoordinateSystemService(cameraService);\n  const fontService = new FontService();\n  const iconService = new IconService();\n  const markerService = new MarkerService();\n  const popupService = new PopupService();\n  const controlService = new ControlService();\n\n  // @ts-ignore\n  const container = {\n    id: `${sceneIdCounter++}`,\n    globalConfigService,\n    shaderModuleService,\n    debugService,\n    cameraService,\n    coordinateSystemService,\n    fontService,\n    iconService,\n    markerService,\n    popupService,\n    controlService,\n    customRenderService: {}\n  };\n\n  // lazy binding\n  const layerService = new LayerService(container);\n  container.layerService = layerService;\n  const sceneService = new SceneService(container);\n  container.sceneService = sceneService;\n  const interactionService = new InteractionService(container);\n  container.interactionService = interactionService;\n  const pickingService = new PickingService(container);\n  container.pickingService = pickingService;\n  const normalPass = {\n    clear: new ClearPass(),\n    pixelPicking: new PixelPickingPass(),\n    render: new RenderPass()\n  };\n  container.normalPassFactory = named => {\n    return normalPass[named];\n  };\n  const postProcessingPass = {\n    copy: new CopyPass(),\n    bloom: new BloomPass(),\n    blurH: new BlurHPass(),\n    blurV: new BlurVPass(),\n    noise: new NoisePass(),\n    sepia: new SepiaPass(),\n    colorHalftone: new ColorHalfTonePass(),\n    hexagonalPixelate: new HexagonalPixelatePass(),\n    ink: new InkPass()\n  };\n  container.postProcessingPass = postProcessingPass;\n  container.postProcessingPassFactory = named => {\n    return postProcessingPass[named];\n  };\n  return container;\n}\nexport function createLayerContainer(sceneContainer) {\n  const layerContainer = _objectSpread({}, sceneContainer);\n  layerContainer.postProcessor = new PostProcessor(layerContainer.rendererService);\n  layerContainer.multiPassRenderer = new MultiPassRenderer(layerContainer.postProcessor);\n  layerContainer.styleAttributeService = new StyleAttributeService(layerContainer.rendererService);\n  return layerContainer;\n}","map":{"version":3,"names":["_objectSpread","FontService","IconService","CameraService","ControlService","MarkerService","PopupService","GlobalConfigService","CoordinateSystemService","DebugService","InteractionService","PickingService","LayerService","StyleAttributeService","SceneService","ShaderModuleService","ClearPass","MultiPassRenderer","PixelPickingPass","PostProcessor","RenderPass","BloomPass","BlurHPass","BlurVPass","ColorHalfTonePass","CopyPass","HexagonalPixelatePass","InkPass","NoisePass","SepiaPass","globalConfigService","sceneIdCounter","createSceneContainer","shaderModuleService","debugService","cameraService","coordinateSystemService","fontService","iconService","markerService","popupService","controlService","container","id","customRenderService","layerService","sceneService","interactionService","pickingService","normalPass","clear","pixelPicking","render","normalPassFactory","named","postProcessingPass","copy","bloom","blurH","blurV","noise","sepia","colorHalftone","hexagonalPixelate","ink","postProcessingPassFactory","createLayerContainer","sceneContainer","layerContainer","postProcessor","rendererService","multiPassRenderer","styleAttributeService"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/inversify.config.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/** Service interfaces */\n\n/** Service implements */\nimport FontService from \"./services/asset/FontService\";\nimport IconService from \"./services/asset/IconService\";\nimport CameraService from \"./services/camera/CameraService\";\nimport ControlService from \"./services/component/ControlService\";\nimport MarkerService from \"./services/component/MarkerService\";\nimport PopupService from \"./services/component/PopupService\";\nimport GlobalConfigService from \"./services/config/ConfigService\";\nimport CoordinateSystemService from \"./services/coordinate/CoordinateSystemService\";\nimport DebugService from \"./services/debug/DebugService\";\nimport InteractionService from \"./services/interaction/InteractionService\";\nimport PickingService from \"./services/interaction/PickingService\";\nimport LayerService from \"./services/layer/LayerService\";\nimport StyleAttributeService from \"./services/layer/StyleAttributeService\";\nimport SceneService from \"./services/scene/SceneService\";\nimport ShaderModuleService from \"./services/shader/ShaderModuleService\";\n\n/** PostProcessing passes */\n\nimport ClearPass from \"./services/renderer/passes/ClearPass\";\nimport MultiPassRenderer from \"./services/renderer/passes/MultiPassRenderer\";\nimport PixelPickingPass from \"./services/renderer/passes/PixelPickingPass\";\nimport PostProcessor from \"./services/renderer/passes/PostProcessor\";\nimport RenderPass from \"./services/renderer/passes/RenderPass\";\nimport BloomPass from \"./services/renderer/passes/post-processing/BloomPass\";\nimport BlurHPass from \"./services/renderer/passes/post-processing/BlurHPass\";\nimport BlurVPass from \"./services/renderer/passes/post-processing/BlurVPass\";\nimport ColorHalfTonePass from \"./services/renderer/passes/post-processing/ColorHalfTonePass\";\nimport CopyPass from \"./services/renderer/passes/post-processing/CopyPass\";\nimport HexagonalPixelatePass from \"./services/renderer/passes/post-processing/HexagonalPixelatePass\";\nimport InkPass from \"./services/renderer/passes/post-processing/InkPass\";\nimport NoisePass from \"./services/renderer/passes/post-processing/NoisePass\";\nimport SepiaPass from \"./services/renderer/passes/post-processing/SepiaPass\";\nexport const globalConfigService = new GlobalConfigService();\nlet sceneIdCounter = 0;\nexport function createSceneContainer() {\n  const shaderModuleService = new ShaderModuleService();\n  const debugService = new DebugService();\n  const cameraService = new CameraService();\n  const coordinateSystemService = new CoordinateSystemService(cameraService);\n  const fontService = new FontService();\n  const iconService = new IconService();\n  const markerService = new MarkerService();\n  const popupService = new PopupService();\n  const controlService = new ControlService();\n\n  // @ts-ignore\n  const container = {\n    id: `${sceneIdCounter++}`,\n    globalConfigService,\n    shaderModuleService,\n    debugService,\n    cameraService,\n    coordinateSystemService,\n    fontService,\n    iconService,\n    markerService,\n    popupService,\n    controlService,\n    customRenderService: {}\n  };\n\n  // lazy binding\n  const layerService = new LayerService(container);\n  container.layerService = layerService;\n  const sceneService = new SceneService(container);\n  container.sceneService = sceneService;\n  const interactionService = new InteractionService(container);\n  container.interactionService = interactionService;\n  const pickingService = new PickingService(container);\n  container.pickingService = pickingService;\n  const normalPass = {\n    clear: new ClearPass(),\n    pixelPicking: new PixelPickingPass(),\n    render: new RenderPass()\n  };\n  container.normalPassFactory = named => {\n    return normalPass[named];\n  };\n  const postProcessingPass = {\n    copy: new CopyPass(),\n    bloom: new BloomPass(),\n    blurH: new BlurHPass(),\n    blurV: new BlurVPass(),\n    noise: new NoisePass(),\n    sepia: new SepiaPass(),\n    colorHalftone: new ColorHalfTonePass(),\n    hexagonalPixelate: new HexagonalPixelatePass(),\n    ink: new InkPass()\n  };\n  container.postProcessingPass = postProcessingPass;\n  container.postProcessingPassFactory = named => {\n    return postProcessingPass[named];\n  };\n  return container;\n}\nexport function createLayerContainer(sceneContainer) {\n  const layerContainer = _objectSpread({}, sceneContainer);\n  layerContainer.postProcessor = new PostProcessor(layerContainer.rendererService);\n  layerContainer.multiPassRenderer = new MultiPassRenderer(layerContainer.postProcessor);\n  layerContainer.styleAttributeService = new StyleAttributeService(layerContainer.rendererService);\n  return layerContainer;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}