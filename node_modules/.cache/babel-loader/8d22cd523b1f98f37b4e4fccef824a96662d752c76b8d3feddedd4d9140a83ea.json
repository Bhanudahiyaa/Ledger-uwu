{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { TextureUsage } from \"../ITexture2D\";\nimport { gl } from \"../gl\";\n\n/**\n * ported from Three.js EffectComposer\n * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕\n */\nexport default class PostProcessor {\n  constructor(rendererService) {\n    _defineProperty(this, \"passes\", []);\n    _defineProperty(this, \"readFBO\", void 0);\n    _defineProperty(this, \"writeFBO\", void 0);\n    this.rendererService = rendererService;\n    this.init();\n  }\n  getReadFBO() {\n    return this.readFBO;\n  }\n  getWriteFBO() {\n    return this.writeFBO;\n  }\n\n  /**\n   * 从当前的 framebuffer 中获取贴图\n   * @returns\n   */\n  getCurrentFBOTex() {\n    const {\n      getViewportSize,\n      createTexture2D\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    return createTexture2D({\n      x: 0,\n      y: 0,\n      width,\n      height,\n      copy: true\n    });\n  }\n\n  /**\n   * 从 readFBO 中获取贴图\n   * @returns\n   */\n  getReadFBOTex() {\n    var _this = this;\n    const {\n      useFramebuffer\n    } = this.rendererService;\n    return new Promise(resolve => {\n      useFramebuffer(this.readFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        resolve(_this.getCurrentFBOTex());\n      }));\n    });\n  }\n  renderBloomPass(layer, pass) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const tex = yield _this2.getReadFBOTex();\n      // count 定义 bloom 交替绘制的次数\n      let count = 0;\n      while (count < 4) {\n        yield pass.render(layer, tex);\n        _this2.swap();\n        count++;\n      }\n    })();\n  }\n  render(layer) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this3.passes.length; i++) {\n        const pass = _this3.passes[i];\n        // last pass should render to screen\n        pass.setRenderToScreen(_this3.isLastEnabledPass(i));\n\n        // await pass.render(layer);\n        // // pingpong\n        // if (i !== this.passes.length - 1) {\n        //   this.swap();\n        // }\n        if (pass.getName() === 'bloom') {\n          yield _this3.renderBloomPass(layer, pass);\n        } else {\n          yield pass.render(layer);\n          // pingpong\n          if (i !== _this3.passes.length - 1) {\n            _this3.swap();\n          }\n        }\n      }\n    })();\n  }\n  resize(width, height) {\n    this.readFBO.resize({\n      width,\n      height\n    });\n    this.writeFBO.resize({\n      width,\n      height\n    });\n  }\n  add(pass, layer, config) {\n    pass.init(layer, config);\n    this.passes.push(pass);\n  }\n  insert(pass, index, layer, config) {\n    pass.init(layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n  getPostProcessingPassByName(name) {\n    return this.passes.find(p => p.getName() === name);\n  }\n  init() {\n    const {\n      createFramebuffer,\n      createTexture2D\n    } = this.rendererService;\n    this.readFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    });\n    this.writeFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    });\n  }\n  isLastEnabledPass(index) {\n    for (let i = index + 1; i < this.passes.length; i++) {\n      if (this.passes[i].isEnabled()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  swap() {\n    const tmp = this.readFBO;\n    this.readFBO = this.writeFBO;\n    this.writeFBO = tmp;\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","TextureUsage","gl","PostProcessor","constructor","rendererService","init","getReadFBO","readFBO","getWriteFBO","writeFBO","getCurrentFBOTex","getViewportSize","createTexture2D","width","height","x","y","copy","getReadFBOTex","_this","useFramebuffer","Promise","resolve","renderBloomPass","layer","pass","_this2","tex","count","render","swap","_this3","i","passes","length","setRenderToScreen","isLastEnabledPass","getName","resize","add","config","push","insert","index","splice","getPostProcessingPassByName","name","find","p","createFramebuffer","color","wrapS","CLAMP_TO_EDGE","wrapT","usage","RENDER_TARGET","isEnabled","tmp"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/PostProcessor.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { TextureUsage } from \"../ITexture2D\";\nimport { gl } from \"../gl\";\n\n/**\n * ported from Three.js EffectComposer\n * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕\n */\nexport default class PostProcessor {\n  constructor(rendererService) {\n    _defineProperty(this, \"passes\", []);\n    _defineProperty(this, \"readFBO\", void 0);\n    _defineProperty(this, \"writeFBO\", void 0);\n    this.rendererService = rendererService;\n    this.init();\n  }\n  getReadFBO() {\n    return this.readFBO;\n  }\n  getWriteFBO() {\n    return this.writeFBO;\n  }\n\n  /**\n   * 从当前的 framebuffer 中获取贴图\n   * @returns\n   */\n  getCurrentFBOTex() {\n    const {\n      getViewportSize,\n      createTexture2D\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    return createTexture2D({\n      x: 0,\n      y: 0,\n      width,\n      height,\n      copy: true\n    });\n  }\n\n  /**\n   * 从 readFBO 中获取贴图\n   * @returns\n   */\n  getReadFBOTex() {\n    var _this = this;\n    const {\n      useFramebuffer\n    } = this.rendererService;\n    return new Promise(resolve => {\n      useFramebuffer(this.readFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        resolve(_this.getCurrentFBOTex());\n      }));\n    });\n  }\n  renderBloomPass(layer, pass) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const tex = yield _this2.getReadFBOTex();\n      // count 定义 bloom 交替绘制的次数\n      let count = 0;\n      while (count < 4) {\n        yield pass.render(layer, tex);\n        _this2.swap();\n        count++;\n      }\n    })();\n  }\n  render(layer) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this3.passes.length; i++) {\n        const pass = _this3.passes[i];\n        // last pass should render to screen\n        pass.setRenderToScreen(_this3.isLastEnabledPass(i));\n\n        // await pass.render(layer);\n        // // pingpong\n        // if (i !== this.passes.length - 1) {\n        //   this.swap();\n        // }\n        if (pass.getName() === 'bloom') {\n          yield _this3.renderBloomPass(layer, pass);\n        } else {\n          yield pass.render(layer);\n          // pingpong\n          if (i !== _this3.passes.length - 1) {\n            _this3.swap();\n          }\n        }\n      }\n    })();\n  }\n  resize(width, height) {\n    this.readFBO.resize({\n      width,\n      height\n    });\n    this.writeFBO.resize({\n      width,\n      height\n    });\n  }\n  add(pass, layer, config) {\n    pass.init(layer, config);\n    this.passes.push(pass);\n  }\n  insert(pass, index, layer, config) {\n    pass.init(layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n  getPostProcessingPassByName(name) {\n    return this.passes.find(p => p.getName() === name);\n  }\n  init() {\n    const {\n      createFramebuffer,\n      createTexture2D\n    } = this.rendererService;\n    this.readFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    });\n    this.writeFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    });\n  }\n  isLastEnabledPass(index) {\n    for (let i = index + 1; i < this.passes.length; i++) {\n      if (this.passes[i].isEnabled()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  swap() {\n    const tmp = this.readFBO;\n    this.readFBO = this.writeFBO;\n    this.writeFBO = tmp;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}