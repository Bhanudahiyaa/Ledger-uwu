{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nvar tmpVecA = vec3.create();\nvar tmpVecB = vec3.create();\nvar tmpVecC = vec3.create();\nvar tmpVecD = vec3.create();\nvar tmpVecE = vec3.create();\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\n\nexport var Ray = /*#__PURE__*/function () {\n  function Ray(origin, direction) {\n    _classCallCheck(this, Ray);\n    this.origin = void 0;\n    this.direction = void 0;\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n  _createClass(Ray, [{\n    key: \"intersectsAABB\",\n    value: function intersectsAABB(aabb, intersection) {\n      return intersection ? this.intersectAABBWithIntersection(aabb, intersection) : this.intersectsAABBWithoutIntersection(aabb);\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere, intersection) {\n      var m = vec3.sub(tmpVecA, this.origin, sphere.center);\n      vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n      var b = vec3.dot(m, tmpVecB);\n      var c = vec3.dot(m, m) - sphere.radius * sphere.radius; // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n\n      if (c > 0 && b > 0) {\n        return null;\n      }\n      var discr = b * b - c; // a negative discriminant corresponds to ray missing sphere\n\n      if (discr < 0) {\n        return false;\n      } // ray intersects sphere, compute smallest t value of intersection\n\n      var t = Math.abs(-b - Math.sqrt(discr)); // if t is negative, ray started inside sphere so clamp t to zero\n\n      if (intersection) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n      }\n      return true;\n    }\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane, intersection) {\n      var t = (plane.distance - vec3.dot(plane.normal, this.origin)) / vec3.dot(plane.normal, this.direction);\n      var intersects = t >= 0;\n      if (intersects && intersection) {\n        vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n      }\n      return intersects;\n    }\n    /**\n     * faster than implements like Three.js\n     * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n     */\n  }, {\n    key: \"intersectsAABBWithoutIntersection\",\n    value: function intersectsAABBWithoutIntersection(aabb) {\n      var diff = tmpVecA;\n      var cross = tmpVecB;\n      var prod = tmpVecC;\n      var absDiff = tmpVecD;\n      var absDir = tmpVecE;\n      var rayDir = this.direction;\n      vec3.sub(diff, this.origin, aabb.center);\n      vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n      vec3.mul(prod, diff, rayDir);\n      if (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0 || absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0 || absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0) {\n        return false;\n      }\n      vec3.set(absDir, Math.abs(rayDir[0]), Math.abs(rayDir[1]), Math.abs(rayDir[2]));\n      vec3.cross(cross, rayDir, diff);\n      vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n      return !(cross[0] > aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] || cross[1] > aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] || cross[2] > aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]);\n    }\n  }, {\n    key: \"intersectAABBWithIntersection\",\n    value: function intersectAABBWithIntersection(aabb, intersection) {\n      var tMin = vec3.copy(vec3.create(), aabb.getMin());\n      vec3.sub(tMin, tMin, this.origin);\n      var tMax = vec3.copy(vec3.create(), aabb.getMax());\n      vec3.sub(tMax, tMax, this.origin);\n      var dir = this.direction; // Ensure that we are not dividing it by zero\n\n      if (dir[0] === 0) {\n        tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[0] /= dir[0];\n        tMax[0] /= dir[0];\n      }\n      if (dir[1] === 0) {\n        tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[1] /= dir[1];\n        tMax[1] /= dir[1];\n      }\n      if (dir[2] === 0) {\n        tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[2] /= dir[2];\n        tMax[2] /= dir[2];\n      }\n      var realMin = vec3.set(tmpVecC, Math.min(tMin[0], tMax[0]), Math.min(tMin[1], tMax[1]), Math.min(tMin[2], tMax[2]));\n      var realMax = vec3.set(tmpVecD, Math.max(tMin[0], tMax[0]), Math.max(tMin[1], tMax[1]), Math.max(tMin[2], tMax[2]));\n      var minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n      var maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n      var intersects = minMax >= maxMin && maxMin >= 0;\n      if (intersects) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n      }\n      return intersects;\n    }\n  }]);\n  return Ray;\n}();","map":{"version":3,"names":["vec3","tmpVecA","create","tmpVecB","tmpVecC","tmpVecD","tmpVecE","Ray","origin","direction","_classCallCheck","fromValues","_createClass","key","value","intersectsAABB","aabb","intersection","intersectAABBWithIntersection","intersectsAABBWithoutIntersection","intersectsSphere","sphere","m","sub","center","normalize","copy","b","dot","c","radius","discr","t","Math","abs","sqrt","scaleAndAdd","intersectsPlane","plane","distance","normal","intersects","diff","cross","prod","absDiff","absDir","rayDir","set","mul","halfExtents","tMin","getMin","tMax","getMax","dir","Number","MAX_VALUE","realMin","min","realMax","max","minMax","maxMin"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/shape/Ray.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { BoundingSphere } from './BoundingSphere';\nimport { Plane } from './Plane';\n\nconst tmpVecA = vec3.create();\nconst tmpVecB = vec3.create();\nconst tmpVecC = vec3.create();\nconst tmpVecD = vec3.create();\nconst tmpVecE = vec3.create();\n\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\nexport class Ray {\n  public origin: vec3;\n  public direction: vec3;\n\n  constructor(origin: vec3, direction: vec3) {\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  public intersectsAABB(aabb: AABB, intersection?: vec3) {\n    return intersection\n      ? this.intersectAABBWithIntersection(aabb, intersection)\n      : this.intersectsAABBWithoutIntersection(aabb);\n  }\n\n  public intersectsSphere(sphere: BoundingSphere, intersection?: vec3) {\n    const m = vec3.sub(tmpVecA, this.origin, sphere.center);\n    vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n    const b = vec3.dot(m, tmpVecB);\n    const c = vec3.dot(m, m) - sphere.radius * sphere.radius;\n\n    // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n    if (c > 0 && b > 0) {\n      return null;\n    }\n\n    const discr = b * b - c;\n    // a negative discriminant corresponds to ray missing sphere\n    if (discr < 0) {\n      return false;\n    }\n\n    // ray intersects sphere, compute smallest t value of intersection\n    const t = Math.abs(-b - Math.sqrt(discr));\n\n    // if t is negative, ray started inside sphere so clamp t to zero\n    if (intersection) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n    }\n\n    return true;\n  }\n\n  public intersectsPlane(plane: Plane, intersection?: vec3) {\n    const t =\n      (plane.distance - vec3.dot(plane.normal, this.origin)) /\n      vec3.dot(plane.normal, this.direction);\n    const intersects = t >= 0;\n    if (intersects && intersection) {\n      vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n    }\n\n    return intersects;\n  }\n\n  /**\n   * faster than implements like Three.js\n   * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n   */\n  private intersectsAABBWithoutIntersection(aabb: AABB) {\n    const diff = tmpVecA;\n    const cross = tmpVecB;\n    const prod = tmpVecC;\n    const absDiff = tmpVecD;\n    const absDir = tmpVecE;\n    const rayDir = this.direction;\n\n    vec3.sub(diff, this.origin, aabb.center);\n    vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n    vec3.mul(prod, diff, rayDir);\n\n    if (\n      (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0) ||\n      (absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0) ||\n      (absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0)\n    ) {\n      return false;\n    }\n\n    vec3.set(\n      absDir,\n      Math.abs(rayDir[0]),\n      Math.abs(rayDir[1]),\n      Math.abs(rayDir[2]),\n    );\n    vec3.cross(cross, rayDir, diff);\n    vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n\n    return !(\n      cross[0] >\n        aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] ||\n      cross[1] >\n        aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] ||\n      cross[2] >\n        aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]\n    );\n  }\n\n  private intersectAABBWithIntersection(aabb: AABB, intersection: vec3) {\n    const tMin = vec3.copy(vec3.create(), aabb.getMin());\n    vec3.sub(tMin, tMin, this.origin);\n    const tMax = vec3.copy(vec3.create(), aabb.getMax());\n    vec3.sub(tMax, tMax, this.origin);\n    const dir = this.direction;\n\n    // Ensure that we are not dividing it by zero\n    if (dir[0] === 0) {\n      tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[0] /= dir[0];\n      tMax[0] /= dir[0];\n    }\n    if (dir[1] === 0) {\n      tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[1] /= dir[1];\n      tMax[1] /= dir[1];\n    }\n    if (dir[2] === 0) {\n      tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[2] /= dir[2];\n      tMax[2] /= dir[2];\n    }\n\n    const realMin = vec3.set(\n      tmpVecC,\n      Math.min(tMin[0], tMax[0]),\n      Math.min(tMin[1], tMax[1]),\n      Math.min(tMin[2], tMax[2]),\n    );\n    const realMax = vec3.set(\n      tmpVecD,\n      Math.max(tMin[0], tMax[0]),\n      Math.max(tMin[1], tMax[1]),\n      Math.max(tMin[2], tMax[2]),\n    );\n\n    const minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n    const maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n\n    const intersects = minMax >= maxMin && maxMin >= 0;\n\n    if (intersects) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n    }\n\n    return intersects;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}