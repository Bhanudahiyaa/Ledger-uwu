{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, NsGraph, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { IGraphCommandFactory, IHookContribution, IModelContribution, IGraphCommandContribution } from '@antv/xflow-core';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNode } from '../x6-extension/node';\nimport { XFlowEdge } from '../x6-extension/edge';\nimport { GRAPH_STATUS_INFO } from '../constants';\nimport { NsGraphStatusCommand } from './command';\nimport { LayoutEnum } from '../interface';\nimport { IComponentConfig } from '../interface';\nexport var NsAddEdgeEvent;\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\nexport var DAG_DEFAULT_CONIFG;\n(function (DAG_DEFAULT_CONIFG) {\n  DAG_DEFAULT_CONIFG.router = {\n    name: 'manhattan'\n  };\n  DAG_DEFAULT_CONIFG.connector = {\n    name: 'rounded',\n    args: {\n      radius: 15\n    }\n  };\n})(DAG_DEFAULT_CONIFG || (DAG_DEFAULT_CONIFG = {}));\nexport const ANT_PREFIX = 'ant';\nexport const getDagOptions = props => {\n  const {\n    layout,\n    router = DAG_DEFAULT_CONIFG.router,\n    connector = DAG_DEFAULT_CONIFG.connector\n  } = props;\n  const dagOptions = {\n    grid: false,\n    keyboard: {\n      enabled: true\n    },\n    // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n    selecting: {\n      enabled: true,\n      multiple: true,\n      selectCellOnMoved: true,\n      showNodeSelectionBox: false,\n      // 框选可以选中edge\n      rubberEdge: true,\n      // 框选可以选中node\n      rubberNode: true,\n      movable: true\n    },\n    connecting: {\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      sourceAnchor: layout ? layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right' : \"center\",\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      targetAnchor: layout ? layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'left' : \"center\",\n      connectionPoint: 'anchor',\n      snap: {\n        radius: 20\n      },\n      router: router,\n      connector: connector,\n      highlight: true,\n      dangling: false,\n      createEdge() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        const graph = this;\n        const edge = new XFlowEdge({\n          attrs: {\n            line: {\n              strokeDasharray: '5 5',\n              stroke: '#888',\n              strokeWidth: 1,\n              targetMarker: {\n                name: 'block',\n                args: {\n                  size: '6'\n                }\n              }\n            }\n          }\n        });\n        const addEdge = args => {\n          const {\n            isNew\n          } = args;\n          const edgeCell = args.edge;\n          /** 没有edge:connected时，会导致graph.once的事件没有执行 */\n          if (isNew && edgeCell.isEdge() && edgeCell === edge) {\n            const portId = edgeCell.getTargetPortId();\n            const targetNode = edgeCell.getTargetCell();\n            if (targetNode && targetNode.isNode()) {\n              targetNode.setPortProp(portId, 'connected', false);\n              edgeCell.attr({\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5'\n                }\n              });\n              const targetPortId = edgeCell.getTargetPortId();\n              const sourcePortId = edgeCell.getSourcePortId();\n              const sourceCellId = edgeCell.getSourceCellId();\n              const targetCellId = edgeCell.getTargetCellId();\n              graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                targetPortId,\n                sourcePortId,\n                source: sourceCellId,\n                target: targetCellId,\n                edge: edge\n              });\n            }\n          }\n        };\n        graph.once('edge:connected', addEdge);\n        return edge;\n      },\n      validateEdge: args => {\n        var _a;\n        const {\n          edge\n        } = args;\n        return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n      },\n      // 是否触发交互事件\n      validateMagnet({\n        magnet,\n        cell\n      }) {\n        const inputPortInfo = cell.getData().ports.filter(portItem => portItem.type === NsGraph.AnchorType.INPUT);\n        if (inputPortInfo.length > 0) {\n          return magnet.getAttribute('port-group') !== inputPortInfo[0].group;\n        }\n        return false;\n      },\n      // 显示可用的链接桩\n      validateConnection({\n        sourceView,\n        targetView,\n        sourceMagnet,\n        targetMagnet\n      }) {\n        // 不允许连接到自己\n        if (sourceView === targetView) {\n          return false;\n        }\n        if (!sourceMagnet || !targetMagnet) {\n          return false;\n        }\n        // 非自定义布局\n        if (layout) {\n          const targetPortType = layout === LayoutEnum.TOP_BOTTOM ? NsGraph.AnchorGroup.TOP : NsGraph.AnchorGroup.LEFT;\n          // 只能从上游节点的输出链接桩创建连接\n          if (sourceMagnet.getAttribute('port-group') === targetPortType) {\n            return false;\n          }\n          // 只能连接到下游节点的输入桩\n          if (targetMagnet.getAttribute('port-group') !== targetPortType) {\n            return false;\n          }\n        }\n        // 判断源链接桩是否可连接\n        const sourceNode = sourceView.cell;\n        const sourcePortId = sourceMagnet.getAttribute('port');\n        if (!sourcePortId) {\n          return false;\n        }\n        const sourcePort = sourceNode.getPort(sourcePortId);\n        if (sourcePort.type !== NsGraph.AnchorType.OUTPUT) {\n          return false;\n        }\n        // 判断目标链接桩是否可连接\n        const targetNode = targetView.cell;\n        const targetPortId = targetMagnet.getAttribute('port');\n        if (!targetPortId) {\n          return false;\n        }\n        const targetPort = targetNode.getPort(targetPortId);\n        if (targetPort.type !== NsGraph.AnchorType.INPUT) {\n          return false;\n        }\n        return !(targetPort && targetPort.connected);\n      }\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n    scaling: {\n      max: 1.05,\n      min: 0.01\n    }\n  };\n  return dagOptions;\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\nlet DagHooksContribution = class DagHooksContribution {\n  constructor() {\n    /** 注册Command */\n    this.registerGraphCommands = commands => {\n      commands.registerCommand(NsGraphStatusCommand.command, {\n        createCommand: this.commandFactory\n      });\n    };\n    /** 注册Hub */\n    this.toDispose = new DisposableCollection();\n    /** 注册Hook */\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'dag-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'dag-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            layout = LayoutEnum.TOP_BOTTOM\n          } = yield this.propConfig.getConfig();\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            const cell = new XFlowEdge(Object.assign(Object.assign({}, edgeConfig), {\n              id: edgeConfig.id,\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId,\n                anchor: {\n                  name: layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right'\n                }\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId,\n                anchor: {\n                  name: layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'right'\n                }\n              },\n              attrs: {\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5',\n                  strokeWidth: 1\n                }\n              },\n              data: Object.assign({}, edgeConfig)\n            }));\n            return cell;\n          });\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'after add edge, set target port props',\n        handler: (handlerArgs, handler) => __awaiter(this, void 0, void 0, function* () {\n          const main = args => __awaiter(this, void 0, void 0, function* () {\n            const res = yield handler(args);\n            if (res && res.edgeCell) {\n              const targetNode = res.edgeCell.getTargetCell();\n              const portId = res.edgeCell.getTargetPortId();\n              targetNode.setPortProp(portId, 'connected', true);\n            }\n            return res;\n          });\n          return main;\n        })\n      }), hooks.delEdge.registerHook({\n        name: 'afetr del edge, reset target node port props',\n        handler: (args, handler) => __awaiter(this, void 0, void 0, function* () {\n          const newHandler = handlerArgs => __awaiter(this, void 0, void 0, function* () {\n            const result = yield handler(handlerArgs);\n            const {\n              targetCell,\n              targetPortId\n            } = result;\n            if (targetCell && targetCell.isNode() && targetPortId) {\n              targetCell.setPortProp(targetPortId, 'connected', false);\n            }\n            return result;\n          });\n          return newHandler;\n        })\n      }), hooks.afterGraphInit.registerHook({\n        name: 'call add edge to replace temp edge',\n        handler: handlerArgs => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            graph\n          } = handlerArgs;\n          graph.on(NsAddEdgeEvent.EVENT_NAME, args => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: args\n            });\n            args.edge.remove();\n          });\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'dag-extension-x6-options',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const props = yield this.propConfig.getConfig();\n          const dagOptions = getDagOptions(props);\n          Object.assign(args, dagOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n    /** 注册Hub */\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      return registry.registerHookHub(NsGraphStatusCommand.hookKey, new HookHub());\n    });\n  }\n  /** 扩展Model */\n  registerModel(registry) {\n    /** node status map */\n    registry.registerModel({\n      id: GRAPH_STATUS_INFO.id,\n      getInitialValue: () => ({\n        statusMap: new Map(),\n        subscription: new DisposableCollection(),\n        graphStatus: GRAPH_STATUS_INFO.StatusEnum.DEFAULT\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          subscription\n        } = yield self.getValidValue();\n        return subscription;\n      })\n    });\n  }\n};\n__decorate([ManaSyringe.inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], DagHooksContribution.prototype, \"commandFactory\", void 0);\n__decorate([ManaSyringe.inject(IComponentConfig), __metadata(\"design:type\", Object)], DagHooksContribution.prototype, \"propConfig\", void 0);\nDagHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution, IGraphCommandContribution]\n})], DagHooksContribution);\nexport { DagHooksContribution };","map":{"version":3,"names":["ManaSyringe","DisposableCollection","NsGraph","Disposable","XFlowEdgeCommands","IGraphCommandFactory","IHookContribution","IModelContribution","IGraphCommandContribution","HookHub","XFlowNode","XFlowEdge","GRAPH_STATUS_INFO","NsGraphStatusCommand","LayoutEnum","IComponentConfig","NsAddEdgeEvent","EVENT_NAME","DAG_DEFAULT_CONIFG","router","name","connector","args","radius","ANT_PREFIX","getDagOptions","props","layout","dagOptions","grid","keyboard","enabled","selecting","multiple","selectCellOnMoved","showNodeSelectionBox","rubberEdge","rubberNode","movable","connecting","sourceAnchor","TOP_BOTTOM","targetAnchor","connectionPoint","snap","highlight","dangling","createEdge","graph","edge","attrs","line","strokeDasharray","stroke","strokeWidth","targetMarker","size","addEdge","isNew","edgeCell","isEdge","portId","getTargetPortId","targetNode","getTargetCell","isNode","setPortProp","attr","targetPortId","sourcePortId","getSourcePortId","sourceCellId","getSourceCellId","targetCellId","getTargetCellId","trigger","source","target","once","validateEdge","_a","port","validateMagnet","magnet","cell","inputPortInfo","getData","ports","filter","portItem","type","AnchorType","INPUT","length","getAttribute","group","validateConnection","sourceView","targetView","sourceMagnet","targetMagnet","targetPortType","AnchorGroup","TOP","LEFT","sourceNode","sourcePort","getPort","OUTPUT","targetPort","connected","highlighting","nodeAvailable","className","magnetAvailable","magnetAdsorbed","scaling","max","min","DagHooksContribution","constructor","registerGraphCommands","commands","registerCommand","command","createCommand","commandFactory","toDispose","registerHook","hooks","__awaiter","disposables","addNode","handler","cellFactory","nodeConfig","node","Object","assign","propConfig","getConfig","edgeConfig","id","anchor","data","handlerArgs","main","res","delEdge","newHandler","result","targetCell","afterGraphInit","commandService","on","executeCommand","ADD_EDGE","remove","graphOptions","pushAll","create","registerHookHub","registry","hookKey","registerModel","getInitialValue","statusMap","Map","subscription","graphStatus","StatusEnum","DEFAULT","watchChange","self","getValidValue","__decorate","inject","singleton","contrib"],"sources":["../../../src/canvas-dag-extension/contributions/dag.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}