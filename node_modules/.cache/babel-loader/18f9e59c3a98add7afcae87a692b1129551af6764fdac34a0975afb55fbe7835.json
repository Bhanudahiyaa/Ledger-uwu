{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\nexport const movedNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n  if (!node) {\n    return;\n  }\n  const {\n    data\n  } = node;\n  // 更新组内元素，边信息无需更新\n  if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n    const x6Graph = getGraphInstance();\n    data === null || data === void 0 ? void 0 : data.groupChildren.forEach(id => __awaiter(void 0, void 0, void 0, function* () {\n      var _a, _b;\n      const currentNode = x6Graph.getCellById(id);\n      if (currentNode && currentNode.isNode()) {\n        yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), (_a = currentNode.getSize) === null || _a === void 0 ? void 0 : _a.call(currentNode)), (_b = currentNode.getPosition) === null || _b === void 0 ? void 0 : _b.call(currentNode))\n        });\n      }\n    }));\n  }\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'move:node',\n    config: nodeConfig\n  });\n});\n/** 修改节点大小 */\nexport const resizeNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n  if (!node) {\n    return;\n  }\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'resize:node',\n    config: nodeConfig\n  });\n});\nconst getContainer = e => {\n  var _a;\n  let currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n  if (!currentNode) {\n    return document.getElementsByClassName('xflow-canvas-root');\n  }\n  let containter = null;\n  while (!containter) {\n    const current = currentNode.getElementsByClassName('xflow-canvas-root');\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return containter;\n};\n// 获取选中节点的 ports\nexport const getSelectedCellPorts = eleId => {\n  const selectedPorts = document.getElementsByClassName('x6-node-selected');\n  if (!selectedPorts) {\n    return;\n  }\n  let matchPort = selectedPorts[0];\n  Array.from(selectedPorts).forEach(ele => {\n    if (ele.getAttribute('data-cell-id') === eleId) {\n      matchPort = ele;\n    }\n  });\n  return matchPort.getElementsByClassName('x6-port');\n};\nconst setTransformData = (ele, scale) => {\n  const currentTransform = ele.getAttribute('transform');\n  const transforms = currentTransform.split(',');\n  transforms[0] = `matrix(${Number(transforms[0].split('(')[1]) * scale}`;\n  transforms[3] = Number(transforms[3]) * scale;\n  ele.setAttribute('transform', transforms.join(','));\n};\n// 节点 ports 放大2被\nexport const setTransform = elements => {\n  if (!(elements === null || elements === void 0 ? void 0 : elements.length)) return;\n  const scale = 2;\n  elements.forEach(ele => {\n    if (ele.getAttribute('data-scale')) return;\n    setTransformData(ele, scale);\n    ele.setAttribute('data-scale', `${scale}`);\n  });\n};\n// 重置节点 scale\nexport const resetTransform = () => {\n  const ports = document.getElementsByClassName('x6-port');\n  if (!ports) {\n    return;\n  }\n  Array.from(ports).forEach(ele => {\n    const eleScale = ele.getAttribute('data-scale');\n    if (eleScale) {\n      setTransformData(ele, 1 / Number(eleScale));\n      ele.removeAttribute('data-scale');\n    }\n  });\n};\n/** 设置 ports visible */\nexport const changePortsVisible = (visible, e, showPortsOnNodeSelected) => {\n  var _a;\n  if (!visible) {\n    resetTransform();\n  }\n  const containers = getContainer(e);\n  const graph = getGraphInstance();\n  const selectedCell = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0];\n  // 节点选中并移入时，port transfrom scale * 2\n  if ((selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.isNode()) && showPortsOnNodeSelected) {\n    setTransform(getSelectedCellPorts(selectedCell.id));\n  }\n  Array.from(containers).forEach(container => {\n    const ports = container.querySelectorAll('.x6-port-body');\n    // 选中中节点时不展示链接桩\n    const isSelectedNode = selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.isNode();\n    for (let i = 0, len = ports.length; i < len; i = i + 1) {\n      ports[i].style.visibility = (!isSelectedNode || showPortsOnNodeSelected) && visible ? 'visible' : 'hidden';\n    }\n  });\n};\n/** 添加辅助工具 */\nexport const addTools = e => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n  if (!edge) {\n    return;\n  }\n  edge.addTools('vertices', 'ondbclick');\n});\n/** 移除辅助工具 */\nexport const removeTools = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n  if (!edge) {\n    return;\n  }\n  if (edge.hasTools('ondbclick')) {\n    cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n      edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), {\n        vertices: edge.getVertices()\n      })\n    });\n    edge.removeTools();\n  }\n});","map":{"version":3,"names":["XFlowNodeCommands","XFlowEdgeCommands","get","onConfigChange","getGraphInstance","movedNode","e","cmds","__awaiter","node","data","groupChildren","x6Graph","forEach","id","currentNode","getCellById","isNode","executeCommand","UPDATE_NODE","nodeConfig","Object","assign","_a","getSize","call","_b","getPosition","type","config","resizeNode","size","getContainer","currentTarget","document","getElementsByClassName","containter","current","length","parentNode","getSelectedCellPorts","eleId","selectedPorts","matchPort","Array","from","ele","getAttribute","setTransformData","scale","currentTransform","transforms","split","Number","setAttribute","join","setTransform","elements","resetTransform","ports","eleScale","removeAttribute","changePortsVisible","visible","showPortsOnNodeSelected","containers","graph","selectedCell","getSelectedCells","container","querySelectorAll","isSelectedNode","i","len","style","visibility","addTools","edge","removeTools","hasTools","UPDATE_EDGE","edgeConfig","vertices","getVertices"],"sources":["../../../src/flowchart-canvas/utils/events.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}