{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { injectable } from 'mana-syringe';\nlet GraphMappingHelper = class GraphMappingHelper {\n  constructor() {\n    this.groupNodeMap = new Map();\n    // node 的 mapping\n    this.nodeMap = new Map();\n    this.nodeMappingRecord = new Map();\n    // port 的 mapping\n    this.portMap = new Map();\n    this.portMappingRecord = new Map();\n    // edge 的 mapping\n    this.edgeMap = new Map();\n    this.edgeMappingRecord = new Map();\n    // 区分类型\n    this.getNodesByType = nodes => {\n      return nodes.reduce((acc, node) => {\n        if (node.isGroup) {\n          acc.groupNodes.push(node);\n        } else {\n          acc.normalNodes.push(node);\n        }\n        return acc;\n      }, {\n        normalNodes: [],\n        groupNodes: []\n      });\n    };\n    // 增加已有节点\n    this.getNodePorts = node => {\n      if (Array.isArray(node.ports)) {\n        return node.ports;\n      }\n      if (node.ports && Array.isArray(node.ports.items)) {\n        return node.ports.items;\n      }\n      return [];\n    };\n    // 增加已有节点\n    this.addNodes = nodes => {\n      nodes.forEach(node => {\n        if (node.isGroup) {\n          this.groupNodeMap.set(node.id, node);\n        } else {\n          const ports = this.getNodePorts(node);\n          this.nodeMap.set(node.id, node);\n          ports.forEach(port => {\n            this.portMap.set(port.id, port);\n          });\n        }\n      });\n    };\n    // 增加已有edge\n    this.addEdge = edges => {\n      edges.forEach(edge => {\n        this.edgeMap.set(edge.id, edge);\n      });\n    };\n    // 添加node的映射关系\n    this.buildNodeMapping = (currentNode, nextNode) => {\n      const currentNodeId = currentNode.id || currentNode.originalId;\n      const nextNodeId = nextNode.id;\n      this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n      const ports = this.getNodePorts(currentNode);\n      ports.forEach((oldPort, index) => {\n        const newPort = nextNode.ports[index];\n        if (newPort) {\n          this.portMap.set(newPort.id, newPort);\n          this.portMappingRecord.set(oldPort.id, newPort.id);\n        }\n      });\n    };\n    // 更新Edge的NodeId和PortId\n    this.createEdgeBetweenNodes = edgeConfig => {\n      const {\n        source,\n        sourcePortId,\n        target,\n        targetPortId\n      } = edgeConfig;\n      return Object.assign(Object.assign({}, edgeConfig), {\n        source: this.nodeMappingRecord.get(source),\n        target: this.nodeMappingRecord.get(target),\n        sourcePortId: this.portMappingRecord.get(sourcePortId),\n        targetPortId: this.portMappingRecord.get(targetPortId),\n        sourcePort: this.portMappingRecord.get(sourcePortId),\n        targetPort: this.portMappingRecord.get(targetPortId)\n      });\n    };\n    // 更新GroupNode的NodeId\n    this.buildGroupRelations = groupNode => {\n      const {\n        groupChildren\n      } = groupNode;\n      const newGroupChildren = groupChildren.map(id => {\n        return this.nodeMappingRecord.get(id);\n      });\n      return Object.assign(Object.assign({}, groupNode), {\n        groupChildren: newGroupChildren\n      });\n    };\n  }\n};\nGraphMappingHelper = __decorate([injectable()], GraphMappingHelper);\nexport { GraphMappingHelper };","map":{"version":3,"names":["injectable","GraphMappingHelper","constructor","groupNodeMap","Map","nodeMap","nodeMappingRecord","portMap","portMappingRecord","edgeMap","edgeMappingRecord","getNodesByType","nodes","reduce","acc","node","isGroup","groupNodes","push","normalNodes","getNodePorts","Array","isArray","ports","items","addNodes","forEach","set","id","port","addEdge","edges","edge","buildNodeMapping","currentNode","nextNode","currentNodeId","originalId","nextNodeId","oldPort","index","newPort","createEdgeBetweenNodes","edgeConfig","source","sourcePortId","target","targetPortId","Object","assign","get","sourcePort","targetPort","buildGroupRelations","groupNode","groupChildren","newGroupChildren","map","__decorate"],"sources":["../../src/command-contributions/mapping-service.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,UAAU,QAAQ,cAAc;AAIlC,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAAxBC,YAAA;IACL,KAAAC,YAAY,GAAG,IAAIC,GAAG,EAA+B;IACrD;IACA,KAAAC,OAAO,GAAG,IAAID,GAAG,EAA+B;IAChD,KAAAE,iBAAiB,GAAG,IAAIF,GAAG,EAAkB;IAC7C;IACA,KAAAG,OAAO,GAAG,IAAIH,GAAG,EAA+B;IAChD,KAAAI,iBAAiB,GAAG,IAAIJ,GAAG,EAAkB;IAC7C;IACA,KAAAK,OAAO,GAAG,IAAIL,GAAG,EAA+B;IAChD,KAAAM,iBAAiB,GAAG,IAAIN,GAAG,EAAkB;IAE7C;IACA,KAAAO,cAAc,GAAIC,KAA4B,IAAI;MAChD,OAAOA,KAAK,CAACC,MAAM,CACjB,CAACC,GAAG,EAAEC,IAAI,KAAI;QACZ,IAAIA,IAAI,CAACC,OAAO,EAAE;UAChBF,GAAG,CAACG,UAAU,CAACC,IAAI,CAACH,IAAI,CAAC;SAC1B,MAAM;UACLD,GAAG,CAACK,WAAW,CAACD,IAAI,CAACH,IAAI,CAAC;;QAE5B,OAAOD,GAAG;MACZ,CAAC,EACD;QAAEK,WAAW,EAAE,EAA2B;QAAEF,UAAU,EAAE;MAA2B,CAAE,CACtF;IACH,CAAC;IACD;IACA,KAAAG,YAAY,GAAIL,IAAyB,IAAI;MAC3C,IAAIM,KAAK,CAACC,OAAO,CAACP,IAAI,CAACQ,KAAK,CAAC,EAAE;QAC7B,OAAOR,IAAI,CAACQ,KAAK;;MAEnB,IAAIR,IAAI,CAACQ,KAAK,IAAIF,KAAK,CAACC,OAAO,CAACP,IAAI,CAACQ,KAAK,CAACC,KAAK,CAAC,EAAE;QACjD,OAAOT,IAAI,CAACQ,KAAK,CAACC,KAAK;;MAEzB,OAAO,EAAE;IACX,CAAC;IACD;IACA,KAAAC,QAAQ,GAAIb,KAA4B,IAAI;MAC1CA,KAAK,CAACc,OAAO,CAACX,IAAI,IAAG;QACnB,IAAIA,IAAI,CAACC,OAAO,EAAE;UAChB,IAAI,CAACb,YAAY,CAACwB,GAAG,CAACZ,IAAI,CAACa,EAAE,EAAEb,IAAI,CAAC;SACrC,MAAM;UACL,MAAMQ,KAAK,GAAG,IAAI,CAACH,YAAY,CAACL,IAAI,CAAC;UACrC,IAAI,CAACV,OAAO,CAACsB,GAAG,CAACZ,IAAI,CAACa,EAAE,EAAEb,IAAI,CAAC;UAC/BQ,KAAK,CAACG,OAAO,CAACG,IAAI,IAAG;YACnB,IAAI,CAACtB,OAAO,CAACoB,GAAG,CAACE,IAAI,CAACD,EAAE,EAAEC,IAA2B,CAAC;UACxD,CAAC,CAAC;;MAEN,CAAC,CAAC;IACJ,CAAC;IACD;IACA,KAAAC,OAAO,GAAIC,KAA4B,IAAI;MACzCA,KAAK,CAACL,OAAO,CAACM,IAAI,IAAG;QACnB,IAAI,CAACvB,OAAO,CAACkB,GAAG,CAACK,IAAI,CAACJ,EAAE,EAAEI,IAAI,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC;IACD;IACA,KAAAC,gBAAgB,GAAG,CAACC,WAAgC,EAAEC,QAA6B,KAAI;MACrF,MAAMC,aAAa,GAAGF,WAAW,CAACN,EAAE,IAAIM,WAAW,CAACG,UAAU;MAC9D,MAAMC,UAAU,GAAGH,QAAQ,CAACP,EAAE;MAC9B,IAAI,CAACtB,iBAAiB,CAACqB,GAAG,CAACS,aAAa,EAAEE,UAAU,CAAC;MACrD,MAAMf,KAAK,GAAG,IAAI,CAACH,YAAY,CAACc,WAAW,CAAC;MAC5CX,KAAK,CAACG,OAAO,CAAC,CAACa,OAAO,EAAEC,KAAK,KAAI;QAC/B,MAAMC,OAAO,GAAGN,QAAQ,CAACZ,KAAK,CAACiB,KAAK,CAAC;QACrC,IAAIC,OAAO,EAAE;UACX,IAAI,CAAClC,OAAO,CAACoB,GAAG,CAACc,OAAO,CAACb,EAAE,EAAEa,OAA8B,CAAC;UAC5D,IAAI,CAACjC,iBAAiB,CAACmB,GAAG,CAACY,OAAO,CAACX,EAAE,EAAEa,OAAO,CAACb,EAAE,CAAC;;MAEtD,CAAC,CAAC;IACJ,CAAC;IACD;IACA,KAAAc,sBAAsB,GAAIC,UAA+B,IAAI;MAC3D,MAAM;QAAEC,MAAM;QAAEC,YAAY;QAAEC,MAAM;QAAEC;MAAY,CAAE,GAAGJ,UAAU;MACjE,OAAOK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACFN,UAAU;QACbC,MAAM,EAAE,IAAI,CAACtC,iBAAiB,CAAC4C,GAAG,CAACN,MAAa,CAAC;QACjDE,MAAM,EAAE,IAAI,CAACxC,iBAAiB,CAAC4C,GAAG,CAACJ,MAAa,CAAC;QACjDD,YAAY,EAAE,IAAI,CAACrC,iBAAiB,CAAC0C,GAAG,CAACL,YAAY,CAAW;QAChEE,YAAY,EAAE,IAAI,CAACvC,iBAAiB,CAAC0C,GAAG,CAACH,YAAY,CAAC;QACtDI,UAAU,EAAE,IAAI,CAAC3C,iBAAiB,CAAC0C,GAAG,CAACL,YAAY,CAAC;QACpDO,UAAU,EAAE,IAAI,CAAC5C,iBAAiB,CAAC0C,GAAG,CAACH,YAAY;MAAC,EACnB;IACrC,CAAC;IACD;IACA,KAAAM,mBAAmB,GAAIC,SAA8B,IAAI;MACvD,MAAM;QAAEC;MAAa,CAAE,GAAGD,SAAS;MACnC,MAAME,gBAAgB,GAAGD,aAAa,CAACE,GAAG,CAAC7B,EAAE,IAAG;QAC9C,OAAO,IAAI,CAACtB,iBAAiB,CAAC4C,GAAG,CAACtB,EAAE,CAAC;MACvC,CAAC,CAAC;MAEF,OAAOoB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACFK,SAAS;QACZC,aAAa,EAAEC;MAAgB,EACT;IAC1B,CAAC;EACH;CAAC;AA/FYvD,kBAAkB,GAAAyD,UAAA,EAD9B1D,UAAU,EAAE,C,EACAC,kBAAkB,CA+F9B;SA/FYA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}