{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst _excluded = [\"buffer\", \"update\", \"name\"],\n  _excluded2 = [\"buffer\", \"update\", \"name\"];\nimport { gl } from \"../renderer/gl\";\nimport StyleAttribute from \"./StyleAttribute\";\nconst bytesPerElementMap = {\n  [gl.FLOAT]: 4,\n  [gl.UNSIGNED_BYTE]: 1,\n  [gl.UNSIGNED_SHORT]: 2\n};\n\n/**\n * 每个 Layer 都拥有一个，用于管理样式属性的注册和更新\n */\nexport default class StyleAttributeService {\n  constructor(rendererService) {\n    _defineProperty(this, \"attributesAndIndices\", void 0);\n    _defineProperty(this, \"attributes\", []);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"featureLayout\", {\n      sizePerElement: 0,\n      elements: []\n    });\n    this.rendererService = rendererService;\n  }\n  registerStyleAttribute(options) {\n    let attributeToUpdate = this.getLayerStyleAttribute(options.name || '');\n    if (attributeToUpdate) {\n      attributeToUpdate.setProps(options);\n    } else {\n      attributeToUpdate = new StyleAttribute(options);\n      this.attributes.push(attributeToUpdate);\n    }\n    return attributeToUpdate;\n  }\n  unRegisterStyleAttribute(name) {\n    const attributeIndex = this.attributes.findIndex(attribute => attribute.name === name);\n    if (attributeIndex > -1) {\n      this.attributes.splice(attributeIndex, 1);\n    }\n  }\n  updateScaleAttribute(scaleOption) {\n    this.attributes.forEach(attr => {\n      var _attr$scale;\n      const name = attr.name;\n      const field = (_attr$scale = attr.scale) === null || _attr$scale === void 0 ? void 0 : _attr$scale.field;\n      if (scaleOption[name] || field && scaleOption[field]) {\n        // 字段类型和映射类型\n        attr.needRescale = true;\n        attr.needRemapping = true;\n        attr.needRegenerateVertices = true;\n      }\n    });\n  }\n  updateStyleAttribute(attributeName, options, updateOptions) {\n    let attributeToUpdate = this.getLayerStyleAttribute(attributeName);\n    if (!attributeToUpdate) {\n      attributeToUpdate = this.registerStyleAttribute(_objectSpread(_objectSpread({}, options), {}, {\n        name: attributeName\n      }));\n    }\n    const {\n      scale\n    } = options;\n    if (scale && attributeToUpdate) {\n      // TODO: 需要比较新旧值确定是否需要 rescale\n      // 需要重新 scale，肯定也需要重新进行数据映射\n      attributeToUpdate.scale = scale;\n      attributeToUpdate.needRescale = true;\n      attributeToUpdate.needRemapping = true;\n      attributeToUpdate.needRegenerateVertices = true;\n      if (updateOptions && updateOptions.featureRange) {\n        attributeToUpdate.featureRange = updateOptions.featureRange;\n      }\n    }\n  }\n  getLayerStyleAttributes() {\n    return this.attributes;\n  }\n  getLayerStyleAttribute(attributeName) {\n    return this.attributes.find(attribute => attribute.name === attributeName);\n  }\n  getLayerAttributeScale(name) {\n    var _attribute$scale;\n    const attribute = this.getLayerStyleAttribute(name);\n    const scale = attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers;\n    if (scale && scale[0]) {\n      return scale[0].func;\n    }\n    return null;\n  }\n  updateAttributeByFeatureRange(attributeName, features, startFeatureIdx = 0, endFeatureIdx, layer) {\n    const attributeToUpdate = this.attributes.find(attribute => attribute.name === attributeName);\n    if (attributeToUpdate && attributeToUpdate.descriptor) {\n      const {\n        descriptor\n      } = attributeToUpdate;\n      const {\n        update,\n        buffer,\n        size = 0\n      } = descriptor;\n      const bytesPerElement = bytesPerElementMap[buffer.type || gl.FLOAT];\n      if (update) {\n        const {\n          elements,\n          sizePerElement\n        } = this.featureLayout;\n        // 截取待更新的 feature 范围\n        const featuresToUpdate = elements.slice(startFeatureIdx, endFeatureIdx);\n        // [n, n] 中断更新\n        if (!featuresToUpdate.length) {\n          return;\n        }\n        const {\n          offset\n        } = featuresToUpdate[0];\n        // 以 byte 为单位计算 buffer 中的偏移\n        const bufferOffsetInBytes = offset * size * bytesPerElement;\n        const updatedBufferData = featuresToUpdate.map(({\n          featureIdx,\n          vertices,\n          normals\n        }, attributeIdx) => {\n          const verticesNumForCurrentFeature = vertices.length / sizePerElement;\n          const featureData = [];\n          for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n            const normal = normals ?\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            normals.slice(vertexIdx * 3, vertexIdx * 3 + 3) : [];\n            featureData.push(...update(features[featureIdx], featureIdx, vertices.slice(vertexIdx * sizePerElement, vertexIdx * sizePerElement + sizePerElement), attributeIdx, normal));\n          }\n          return featureData;\n        }).flat();\n\n        // 更新底层 IAttribute 中包含的 IBuffer，使用 subdata\n        attributeToUpdate.vertexAttribute.updateBuffer({\n          data: updatedBufferData,\n          offset: bufferOffsetInBytes\n        });\n        // size color 触发更新事件\n        layer === null || layer === void 0 || layer.emit(`legend:${attributeName}`, layer.getLegend(attributeName));\n      }\n    }\n  }\n  createAttributesAndIndices(features, triangulation, styleOption, layer) {\n    // 每次创建的初始化化 LayerOut\n    this.featureLayout = {\n      sizePerElement: 0,\n      elements: []\n    };\n    if (triangulation) {\n      this.triangulation = triangulation;\n    }\n    const descriptors = this.attributes.map(attr => {\n      attr.resetDescriptor();\n      return attr.descriptor;\n    });\n    let verticesNum = 0;\n    let vecticesCount = 0; // 在不使用 element 的时候记录顶点、图层所有顶点的总数\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const indices = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let size = 3;\n    features.forEach((feature, featureIdx) => {\n      // 逐 feature 进行三角化\n      const {\n        indices: indicesForCurrentFeature,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        size: vertexSize,\n        indexes,\n        count\n      } = this.triangulation(feature, styleOption);\n      if (typeof count === 'number') {\n        // 顶点数\n        vecticesCount += count;\n      }\n      indicesForCurrentFeature.forEach(i => {\n        indices.push(i + verticesNum);\n      });\n      size = vertexSize;\n      const verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n      // 记录三角化结果，用于后续精确更新指定 feature\n      this.featureLayout.sizePerElement = size;\n      this.featureLayout.elements.push({\n        featureIdx,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        offset: verticesNum\n      });\n      verticesNum += verticesNumForCurrentFeature;\n      // 根据 position 顶点生成其他顶点数据 // color/size/ui\n      for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n        const normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n        const vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n        let vertexIndex = 0;\n        if (indexes && indexes[vertexIdx] !== undefined) {\n          vertexIndex = indexes[vertexIdx];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        descriptors.forEach((descriptor, attributeIdx) => {\n          if (descriptor && descriptor.update) {\n            descriptor.buffer.data.push(...descriptor.update(feature, featureIdx, vertice, vertexIdx,\n            // 当前顶点所在feature索引\n            normal, vertexIndex\n            // 传入顶点索引 vertexIdx\n            ));\n          } // end if\n        }); // end for each\n      } // end for\n    }); // end features for Each\n    const {\n      createAttribute,\n      createBuffer,\n      createElements\n    } = this.rendererService;\n    const attributes = {};\n    descriptors.forEach((descriptor, attributeIdx) => {\n      if (descriptor) {\n        // IAttribute 参数透传\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n            buffer,\n            update,\n            name\n          } = descriptor,\n          rest = _objectWithoutProperties(descriptor, _excluded);\n        const vertexAttribute = createAttribute(_objectSpread({\n          // IBuffer 参数透传\n          buffer: createBuffer(buffer)\n        }, rest));\n        attributes[descriptor.name || ''] = vertexAttribute;\n\n        // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n        this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n      }\n    });\n    const elements = createElements({\n      data: indices,\n      type: gl.UNSIGNED_INT,\n      count: indices.length\n    });\n    this.attributesAndIndices = {\n      attributes,\n      elements,\n      count: vecticesCount\n    };\n    Object.values(this.attributes).filter(attribute => attribute.scale).forEach(attribute => {\n      const attributeName = attribute.name;\n      // size color 触发更新事件\n      layer === null || layer === void 0 || layer.emit(`legend:${attributeName}`, layer.getLegend(attributeName));\n    });\n    return this.attributesAndIndices;\n  }\n  createAttributes(features, triangulation) {\n    // 每次创建的初始化化 LayerOut\n    this.featureLayout = {\n      sizePerElement: 0,\n      elements: []\n    };\n    if (triangulation) {\n      this.triangulation = triangulation;\n    }\n    const descriptors = this.attributes.map(attr => {\n      attr.resetDescriptor();\n      return attr.descriptor;\n    });\n    let verticesNum = 0;\n    const indices = [];\n    let size = 3;\n    features.forEach((feature, featureIdx) => {\n      // 逐 feature 进行三角化\n      const {\n        indices: indicesForCurrentFeature,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        size: vertexSize,\n        indexes\n      } = this.triangulation(feature);\n      indicesForCurrentFeature.forEach(i => {\n        indices.push(i + verticesNum);\n      });\n      size = vertexSize;\n      const verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n      // 记录三角化结果，用于后续精确更新指定 feature\n      this.featureLayout.sizePerElement = size;\n      this.featureLayout.elements.push({\n        featureIdx,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        offset: verticesNum\n      });\n      verticesNum += verticesNumForCurrentFeature;\n      // 根据 position 顶点生成其他顶点数据\n      for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n        const normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n        const vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n        let vertexIndex = 0;\n        if (indexes && indexes[vertexIdx] !== undefined) {\n          vertexIndex = indexes[vertexIdx];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        descriptors.forEach((descriptor, attributeIdx) => {\n          if (descriptor && descriptor.update) {\n            descriptor.buffer.data.push(...descriptor.update(feature, featureIdx, vertice, vertexIdx,\n            // 当前顶点所在feature索引\n            normal, vertexIndex\n            // 传入顶点索引 vertexIdx\n            ));\n          } // end if\n        }); // end for each\n      } // end for\n    }); // end features for Each\n    const {\n      createAttribute,\n      createBuffer\n    } = this.rendererService;\n    const attributes = {};\n    descriptors.forEach((descriptor, attributeIdx) => {\n      if (descriptor) {\n        // IAttribute 参数透传\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n            buffer,\n            update,\n            name\n          } = descriptor,\n          rest = _objectWithoutProperties(descriptor, _excluded2);\n        const vertexAttribute = createAttribute(_objectSpread({\n          // IBuffer 参数透传\n          buffer: createBuffer(buffer)\n        }, rest));\n        attributes[descriptor.name || ''] = vertexAttribute;\n\n        // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n        this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n      }\n    });\n    return {\n      attributes\n    };\n  }\n  clearAllAttributes() {\n    var _this$attributesAndIn;\n    // 销毁关联的 vertex attribute buffer objects\n    this.attributes.forEach(attribute => {\n      if (attribute.vertexAttribute) {\n        attribute.vertexAttribute.destroy();\n      }\n    });\n    (_this$attributesAndIn = this.attributesAndIndices) === null || _this$attributesAndIn === void 0 || _this$attributesAndIn.elements.destroy();\n    this.attributes = [];\n  }\n}","map":{"version":3,"names":["_objectWithoutProperties","_objectSpread","_defineProperty","_excluded","_excluded2","gl","StyleAttribute","bytesPerElementMap","FLOAT","UNSIGNED_BYTE","UNSIGNED_SHORT","StyleAttributeService","constructor","rendererService","sizePerElement","elements","registerStyleAttribute","options","attributeToUpdate","getLayerStyleAttribute","name","setProps","attributes","push","unRegisterStyleAttribute","attributeIndex","findIndex","attribute","splice","updateScaleAttribute","scaleOption","forEach","attr","_attr$scale","field","scale","needRescale","needRemapping","needRegenerateVertices","updateStyleAttribute","attributeName","updateOptions","featureRange","getLayerStyleAttributes","find","getLayerAttributeScale","_attribute$scale","scalers","func","updateAttributeByFeatureRange","features","startFeatureIdx","endFeatureIdx","layer","descriptor","update","buffer","size","bytesPerElement","type","featureLayout","featuresToUpdate","slice","length","offset","bufferOffsetInBytes","updatedBufferData","map","featureIdx","vertices","normals","attributeIdx","verticesNumForCurrentFeature","featureData","vertexIdx","normal","flat","vertexAttribute","updateBuffer","data","emit","getLegend","createAttributesAndIndices","triangulation","styleOption","descriptors","resetDescriptor","verticesNum","vecticesCount","indices","feature","indicesForCurrentFeature","verticesForCurrentFeature","normalsForCurrentFeature","vertexSize","indexes","count","i","vertice","vertexIndex","undefined","createAttribute","createBuffer","createElements","rest","UNSIGNED_INT","attributesAndIndices","Object","values","filter","createAttributes","clearAllAttributes","_this$attributesAndIn","destroy"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/layer/StyleAttributeService.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst _excluded = [\"buffer\", \"update\", \"name\"],\n  _excluded2 = [\"buffer\", \"update\", \"name\"];\nimport { gl } from \"../renderer/gl\";\nimport StyleAttribute from \"./StyleAttribute\";\nconst bytesPerElementMap = {\n  [gl.FLOAT]: 4,\n  [gl.UNSIGNED_BYTE]: 1,\n  [gl.UNSIGNED_SHORT]: 2\n};\n\n/**\n * 每个 Layer 都拥有一个，用于管理样式属性的注册和更新\n */\nexport default class StyleAttributeService {\n  constructor(rendererService) {\n    _defineProperty(this, \"attributesAndIndices\", void 0);\n    _defineProperty(this, \"attributes\", []);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"featureLayout\", {\n      sizePerElement: 0,\n      elements: []\n    });\n    this.rendererService = rendererService;\n  }\n  registerStyleAttribute(options) {\n    let attributeToUpdate = this.getLayerStyleAttribute(options.name || '');\n    if (attributeToUpdate) {\n      attributeToUpdate.setProps(options);\n    } else {\n      attributeToUpdate = new StyleAttribute(options);\n      this.attributes.push(attributeToUpdate);\n    }\n    return attributeToUpdate;\n  }\n  unRegisterStyleAttribute(name) {\n    const attributeIndex = this.attributes.findIndex(attribute => attribute.name === name);\n    if (attributeIndex > -1) {\n      this.attributes.splice(attributeIndex, 1);\n    }\n  }\n  updateScaleAttribute(scaleOption) {\n    this.attributes.forEach(attr => {\n      var _attr$scale;\n      const name = attr.name;\n      const field = (_attr$scale = attr.scale) === null || _attr$scale === void 0 ? void 0 : _attr$scale.field;\n      if (scaleOption[name] || field && scaleOption[field]) {\n        // 字段类型和映射类型\n        attr.needRescale = true;\n        attr.needRemapping = true;\n        attr.needRegenerateVertices = true;\n      }\n    });\n  }\n  updateStyleAttribute(attributeName, options, updateOptions) {\n    let attributeToUpdate = this.getLayerStyleAttribute(attributeName);\n    if (!attributeToUpdate) {\n      attributeToUpdate = this.registerStyleAttribute(_objectSpread(_objectSpread({}, options), {}, {\n        name: attributeName\n      }));\n    }\n    const {\n      scale\n    } = options;\n    if (scale && attributeToUpdate) {\n      // TODO: 需要比较新旧值确定是否需要 rescale\n      // 需要重新 scale，肯定也需要重新进行数据映射\n      attributeToUpdate.scale = scale;\n      attributeToUpdate.needRescale = true;\n      attributeToUpdate.needRemapping = true;\n      attributeToUpdate.needRegenerateVertices = true;\n      if (updateOptions && updateOptions.featureRange) {\n        attributeToUpdate.featureRange = updateOptions.featureRange;\n      }\n    }\n  }\n  getLayerStyleAttributes() {\n    return this.attributes;\n  }\n  getLayerStyleAttribute(attributeName) {\n    return this.attributes.find(attribute => attribute.name === attributeName);\n  }\n  getLayerAttributeScale(name) {\n    var _attribute$scale;\n    const attribute = this.getLayerStyleAttribute(name);\n    const scale = attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers;\n    if (scale && scale[0]) {\n      return scale[0].func;\n    }\n    return null;\n  }\n  updateAttributeByFeatureRange(attributeName, features, startFeatureIdx = 0, endFeatureIdx, layer) {\n    const attributeToUpdate = this.attributes.find(attribute => attribute.name === attributeName);\n    if (attributeToUpdate && attributeToUpdate.descriptor) {\n      const {\n        descriptor\n      } = attributeToUpdate;\n      const {\n        update,\n        buffer,\n        size = 0\n      } = descriptor;\n      const bytesPerElement = bytesPerElementMap[buffer.type || gl.FLOAT];\n      if (update) {\n        const {\n          elements,\n          sizePerElement\n        } = this.featureLayout;\n        // 截取待更新的 feature 范围\n        const featuresToUpdate = elements.slice(startFeatureIdx, endFeatureIdx);\n        // [n, n] 中断更新\n        if (!featuresToUpdate.length) {\n          return;\n        }\n        const {\n          offset\n        } = featuresToUpdate[0];\n        // 以 byte 为单位计算 buffer 中的偏移\n        const bufferOffsetInBytes = offset * size * bytesPerElement;\n        const updatedBufferData = featuresToUpdate.map(({\n          featureIdx,\n          vertices,\n          normals\n        }, attributeIdx) => {\n          const verticesNumForCurrentFeature = vertices.length / sizePerElement;\n          const featureData = [];\n          for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n            const normal = normals ?\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            normals.slice(vertexIdx * 3, vertexIdx * 3 + 3) : [];\n            featureData.push(...update(features[featureIdx], featureIdx, vertices.slice(vertexIdx * sizePerElement, vertexIdx * sizePerElement + sizePerElement), attributeIdx, normal));\n          }\n          return featureData;\n        }).flat();\n\n        // 更新底层 IAttribute 中包含的 IBuffer，使用 subdata\n        attributeToUpdate.vertexAttribute.updateBuffer({\n          data: updatedBufferData,\n          offset: bufferOffsetInBytes\n        });\n        // size color 触发更新事件\n        layer === null || layer === void 0 || layer.emit(`legend:${attributeName}`, layer.getLegend(attributeName));\n      }\n    }\n  }\n  createAttributesAndIndices(features, triangulation, styleOption, layer) {\n    // 每次创建的初始化化 LayerOut\n    this.featureLayout = {\n      sizePerElement: 0,\n      elements: []\n    };\n    if (triangulation) {\n      this.triangulation = triangulation;\n    }\n    const descriptors = this.attributes.map(attr => {\n      attr.resetDescriptor();\n      return attr.descriptor;\n    });\n    let verticesNum = 0;\n    let vecticesCount = 0; // 在不使用 element 的时候记录顶点、图层所有顶点的总数\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const indices = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let size = 3;\n    features.forEach((feature, featureIdx) => {\n      // 逐 feature 进行三角化\n      const {\n        indices: indicesForCurrentFeature,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        size: vertexSize,\n        indexes,\n        count\n      } = this.triangulation(feature, styleOption);\n      if (typeof count === 'number') {\n        // 顶点数\n        vecticesCount += count;\n      }\n      indicesForCurrentFeature.forEach(i => {\n        indices.push(i + verticesNum);\n      });\n      size = vertexSize;\n      const verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n      // 记录三角化结果，用于后续精确更新指定 feature\n      this.featureLayout.sizePerElement = size;\n      this.featureLayout.elements.push({\n        featureIdx,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        offset: verticesNum\n      });\n      verticesNum += verticesNumForCurrentFeature;\n      // 根据 position 顶点生成其他顶点数据 // color/size/ui\n      for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n        const normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n        const vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n        let vertexIndex = 0;\n        if (indexes && indexes[vertexIdx] !== undefined) {\n          vertexIndex = indexes[vertexIdx];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        descriptors.forEach((descriptor, attributeIdx) => {\n          if (descriptor && descriptor.update) {\n            descriptor.buffer.data.push(...descriptor.update(feature, featureIdx, vertice, vertexIdx,\n            // 当前顶点所在feature索引\n            normal, vertexIndex\n            // 传入顶点索引 vertexIdx\n            ));\n          } // end if\n        }); // end for each\n      } // end for\n    }); // end features for Each\n    const {\n      createAttribute,\n      createBuffer,\n      createElements\n    } = this.rendererService;\n    const attributes = {};\n    descriptors.forEach((descriptor, attributeIdx) => {\n      if (descriptor) {\n        // IAttribute 参数透传\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n            buffer,\n            update,\n            name\n          } = descriptor,\n          rest = _objectWithoutProperties(descriptor, _excluded);\n        const vertexAttribute = createAttribute(_objectSpread({\n          // IBuffer 参数透传\n          buffer: createBuffer(buffer)\n        }, rest));\n        attributes[descriptor.name || ''] = vertexAttribute;\n\n        // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n        this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n      }\n    });\n    const elements = createElements({\n      data: indices,\n      type: gl.UNSIGNED_INT,\n      count: indices.length\n    });\n    this.attributesAndIndices = {\n      attributes,\n      elements,\n      count: vecticesCount\n    };\n    Object.values(this.attributes).filter(attribute => attribute.scale).forEach(attribute => {\n      const attributeName = attribute.name;\n      // size color 触发更新事件\n      layer === null || layer === void 0 || layer.emit(`legend:${attributeName}`, layer.getLegend(attributeName));\n    });\n    return this.attributesAndIndices;\n  }\n  createAttributes(features, triangulation) {\n    // 每次创建的初始化化 LayerOut\n    this.featureLayout = {\n      sizePerElement: 0,\n      elements: []\n    };\n    if (triangulation) {\n      this.triangulation = triangulation;\n    }\n    const descriptors = this.attributes.map(attr => {\n      attr.resetDescriptor();\n      return attr.descriptor;\n    });\n    let verticesNum = 0;\n    const indices = [];\n    let size = 3;\n    features.forEach((feature, featureIdx) => {\n      // 逐 feature 进行三角化\n      const {\n        indices: indicesForCurrentFeature,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        size: vertexSize,\n        indexes\n      } = this.triangulation(feature);\n      indicesForCurrentFeature.forEach(i => {\n        indices.push(i + verticesNum);\n      });\n      size = vertexSize;\n      const verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n      // 记录三角化结果，用于后续精确更新指定 feature\n      this.featureLayout.sizePerElement = size;\n      this.featureLayout.elements.push({\n        featureIdx,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        offset: verticesNum\n      });\n      verticesNum += verticesNumForCurrentFeature;\n      // 根据 position 顶点生成其他顶点数据\n      for (let vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n        const normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n        const vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n        let vertexIndex = 0;\n        if (indexes && indexes[vertexIdx] !== undefined) {\n          vertexIndex = indexes[vertexIdx];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        descriptors.forEach((descriptor, attributeIdx) => {\n          if (descriptor && descriptor.update) {\n            descriptor.buffer.data.push(...descriptor.update(feature, featureIdx, vertice, vertexIdx,\n            // 当前顶点所在feature索引\n            normal, vertexIndex\n            // 传入顶点索引 vertexIdx\n            ));\n          } // end if\n        }); // end for each\n      } // end for\n    }); // end features for Each\n    const {\n      createAttribute,\n      createBuffer\n    } = this.rendererService;\n    const attributes = {};\n    descriptors.forEach((descriptor, attributeIdx) => {\n      if (descriptor) {\n        // IAttribute 参数透传\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n            buffer,\n            update,\n            name\n          } = descriptor,\n          rest = _objectWithoutProperties(descriptor, _excluded2);\n        const vertexAttribute = createAttribute(_objectSpread({\n          // IBuffer 参数透传\n          buffer: createBuffer(buffer)\n        }, rest));\n        attributes[descriptor.name || ''] = vertexAttribute;\n\n        // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n        this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n      }\n    });\n    return {\n      attributes\n    };\n  }\n  clearAllAttributes() {\n    var _this$attributesAndIn;\n    // 销毁关联的 vertex attribute buffer objects\n    this.attributes.forEach(attribute => {\n      if (attribute.vertexAttribute) {\n        attribute.vertexAttribute.destroy();\n      }\n    });\n    (_this$attributesAndIn = this.attributesAndIndices) === null || _this$attributesAndIn === void 0 || _this$attributesAndIn.elements.destroy();\n    this.attributes = [];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}