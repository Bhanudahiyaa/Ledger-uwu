{"ast":null,"code":"import { isNumber } from './';\nimport { getEdgeTerminal } from './math';\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\nexport const proccessToFunc = (value, defaultV) => {\n  let func;\n  if (!value) {\n    func = () => {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = () => {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n  return func;\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\nexport const buildTextureData = (nodes, edges) => {\n  const dataArray = [];\n  const nodeDict = [];\n  const mapIdPos = {};\n  let i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n  }\n  let maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const offset = dataArray.length;\n    const dests = nodeDict[i];\n    const len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = dests.length;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\nexport const buildTextureDataWithTwoEdgeAttr = (nodes, edges, attrs1, attrs2) => {\n  const dataArray = [];\n  const nodeDict = [];\n  const mapIdPos = {};\n  let i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[source]].push(attrs1(e));\n    nodeDict[mapIdPos[source]].push(attrs2(e));\n    nodeDict[mapIdPos[source]].push(0);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    nodeDict[mapIdPos[target]].push(attrs1(e));\n    nodeDict[mapIdPos[target]].push(attrs2(e));\n    nodeDict[mapIdPos[target]].push(0);\n  }\n  let maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const offset = dataArray.length;\n    const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n    const len = dests.length;\n    // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n  // 不是 4 的倍数，填充 0\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const attributesToTextureData = (attributeNames, items) => {\n  const dataArray = [];\n  const attributeNum = attributeNames.length;\n  const attributteStringMap = {};\n  items.forEach(item => {\n    attributeNames.forEach((name, i) => {\n      if (attributteStringMap[item[name]] === undefined) {\n        attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n      }\n      dataArray.push(attributteStringMap[item[name]]);\n      // insure each node's attributes take inter number of grids\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  });\n  return {\n    array: new Float32Array(dataArray),\n    count: Object.keys(attributteStringMap).length\n  };\n};\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const arrayToTextureData = valueArrays => {\n  const dataArray = [];\n  const attributeNum = valueArrays.length;\n  const itemNum = valueArrays[0].length;\n  for (let j = 0; j < itemNum; j++) {\n    valueArrays.forEach((valueArray, i) => {\n      dataArray.push(valueArray[j]);\n      // insure each node's attributes take inter number of grids\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  }\n  return new Float32Array(dataArray);\n};","map":{"version":3,"names":["isNumber","getEdgeTerminal","proccessToFunc","value","defaultV","func","buildTextureData","nodes","edges","dataArray","nodeDict","mapIdPos","i","length","n","id","push","x","y","e","source","target","maxEdgePerVetex","offset","dests","len","Math","max","j","dest","array","Float32Array","buildTextureDataWithTwoEdgeAttr","attrs1","attrs2","attributesToTextureData","attributeNames","items","attributeNum","attributteStringMap","forEach","item","name","undefined","Object","keys","count","arrayToTextureData","valueArrays","itemNum","valueArray"],"sources":["../../src/util/gpu.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}