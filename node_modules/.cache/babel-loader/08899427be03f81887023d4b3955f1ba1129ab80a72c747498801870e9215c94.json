{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { fp64LowPart, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/greatCircle/line_arc_great_circle_frag.glsl' */\nconst line_arc_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0;\\n};\\n\\nin vec4 v_dash_array;\\nin vec4 v_color;\\nin vec2 v_iconMapUV;\\nin vec4 v_line_data;\\nin float v_distance_ratio;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"projection\\\"\\n\\nvoid main() {\\n\\n  float animateSpeed = 0.0;\\n  float d_segmentIndex = v_line_data.g;\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u5E95\\u8272\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    outputColor = mix(u_sourceColor, u_targetColor, d_segmentIndex/segmentNumber);\\n    outputColor.a *= v_color.a;\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n    outputColor = v_color;\\n  }\\n\\n  // float blur = 1.- smoothstep(u_blur, 1., length(v_normal.xy));\\n  // float blur = smoothstep(1.0, u_blur, length(v_normal.xy));\\n  if(u_line_type == LineTypeDash) {\\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      // \\u5B9E\\u7EBF\\u90E8\\u5206\\n    } else {\\n      // \\u865A\\u7EBF\\u90E8\\u5206\\n      discard;\\n    };\\n  }\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u52A8\\u753B\\u6A21\\u5F0F\\n  if(u_animate.x == Animate) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- v_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      outputColor.a *= alpha;\\n  }\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u8D34\\u56FE\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) {\\n    float arcRadio = smoothstep( 0.0, 1.0, (d_segmentIndex / (segmentNumber - 1.0)));\\n    // float arcRadio = d_segmentIndex / (segmentNumber - 1.0);\\n    float count = v_line_data.b; // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n    float u = fract(arcRadio * count - animateSpeed * count);\\n    // float u = fract(arcRadio * count - animateSpeed);\\n    if(u_animate.x == Animate) {\\n      u = outputColor.a/v_color.a;\\n    }\\n\\n    float v = v_line_data.a; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    // \\u8BBE\\u7F6E\\u8D34\\u56FE\\u548C\\u5E95\\u8272\\u7684\\u53E0\\u52A0\\u6A21\\u5F0F\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n  } else {\\n    outputColor = filterColor(outputColor);\\n  }\\n\\n  // gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/greatCircle/line_arc_great_circle_vert.glsl' */\nconst line_arc2d_vert = \"#define LineTypeSolid (0.0)\\n#define LineTypeDash (1.0)\\n#define Animate (0.0)\\n#define LineTexture (1.0)\\n\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE) in vec4 a_Instance;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE_64LOW) in vec4 a_Instance64Low;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_iconMapUV;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0;\\n};\\n\\nout vec4 v_dash_array;\\nout vec4 v_color;\\nout vec2 v_iconMapUV;\\nout vec4 v_line_data;\\nout float v_distance_ratio;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps(float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return index / (segmentNumber - 1.0);\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(mix(source, target, segmentRatio), sqrt(max(0.0, vertex_height)));\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return dir_screenspace.xy * sign(offset_direction);\\n}\\nfloat getAngularDist(vec2 source, vec2 target) {\\n  vec2 delta = source - target;\\n  vec2 sin_half_delta = sin(delta / 2.0);\\n  float a =\\n    sin_half_delta.y * sin_half_delta.y +\\n    cos(source.y) * cos(target.y) * sin_half_delta.x * sin_half_delta.x;\\n  return 2.0 * atan(sqrt(a), sqrt(1.0 - a));\\n}\\n\\nvec2 midPoint(vec2 source, vec2 target) {\\n  vec2 center = target - source;\\n  float r = length(center);\\n  float theta = atan(center.y, center.x);\\n  float thetaOffset = 0.314;\\n  float r2 = r / 2.0 / cos(thetaOffset);\\n  float theta2 = theta + thetaOffset;\\n  vec2 mid = vec2(r2 * cos(theta2) + source.x, r2 * sin(theta2) + source.y);\\n  return mid;\\n}\\nfloat bezier3(vec3 arr, float t) {\\n  float ut = 1.0 - t;\\n  return (arr.x * ut + arr.y * t) * ut + (arr.y * ut + arr.z * t) * t;\\n}\\n\\nvec2 interpolate(vec2 source, vec2 target, float angularDist, float t) {\\n  if (abs(angularDist - PI) < 0.001) {\\n    return (1.0 - t) * source + t * target;\\n  }\\n  float a = sin((1.0 - t) * angularDist) / sin(angularDist);\\n  float b = sin(t * angularDist) / sin(angularDist);\\n  vec2 sin_source = sin(source);\\n  vec2 cos_source = cos(source);\\n  vec2 sin_target = sin(target);\\n  vec2 cos_target = cos(target);\\n  float x = a * cos_source.y * cos_source.x + b * cos_target.y * cos_target.x;\\n  float y = a * cos_source.y * sin_source.x + b * cos_target.y * sin_target.x;\\n  float z = a * sin_source.y + b * sin_target.y;\\n  return vec2(atan(y, x), atan(z, sqrt(x * x + y * y)));\\n\\n}\\n\\nvoid main() {\\n  v_color = a_Color;\\n  v_color.a = v_color.a * opacity;\\n  vec2 source = radians(a_Instance.rg);\\n  vec2 target = radians(a_Instance.ba);\\n  float angularDist = getAngularDist(source, target);\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  if (u_line_type == LineTypeDash) {\\n    v_distance_ratio = segmentIndex / segmentNumber;\\n    float total_Distance = pixelDistance(source, target) / 2.0 * PI;\\n    total_Distance = total_Distance * 16.0; // total_Distance*16.0 \\u8C03\\u6574\\u9ED8\\u8BA4\\u7684\\u6548\\u679C\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / total_Distance;\\n  }\\n\\n  if (u_animate.x == Animate) {\\n    v_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  v_distance_ratio = segmentIndex / segmentNumber;\\n\\n  vec4 curr = project_position(vec4(degrees(interpolate(source, target, angularDist, segmentRatio)), 0.0, 1.0), a_Instance64Low.xy);\\n  vec4 next = project_position(vec4(degrees(interpolate(source, target, angularDist, nextSegmentRatio)), 0.0, 1.0), a_Instance64Low.zw);\\n\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n  vec2 offset = project_pixel(getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y));\\n  //  vec4 project_pos = project_position(vec4(curr.xy, 0, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, curr.z, 1.0));\\n\\n  v_line_data.g = a_Position.x; // \\u8BE5\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E0A\\u7684\\u5206\\u6BB5\\u6392\\u5E8F\\n  if (LineTexture == u_line_texture) {\\n    float d_arcDistrance = length(source - target);\\n    d_arcDistrance = project_pixel(d_arcDistrance);\\n\\n    float d_pixelLen = project_pixel(u_icon_step) / 8.0;\\n    v_line_data.b = floor(d_arcDistrance / d_pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float lineOffsetWidth = length(offset + offset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size); // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    v_line_data.a = lineOffsetWidth / linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, 0, 1.0));\\n  setPickingColor(a_PickingColor);\\n}\\n\\n\";\nconst lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nexport default class GreatCircleModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"updateTexture\", () => {\n      const {\n        createTexture2D\n      } = this.rendererService;\n      if (this.texture) {\n        this.texture.update({\n          data: this.iconService.getCanvas()\n        });\n        this.layer.render();\n        return;\n      }\n      this.texture = createTexture2D({\n        data: this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: this.iconService.canvasHeight || 128\n      });\n      this.textures = [this.texture];\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      INSTANCE: 10,\n      INSTANCE_64LOW: 11,\n      UV: 12\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5],\n      lineTexture = false,\n      iconStep = 100,\n      segmentNumber = 30\n    } = this.layer.getLayerConfig();\n    const {\n      animateOption\n    } = this.layer.getLayerConfig();\n    if (dashArray.length === 2) {\n      dashArray.push(0, 0);\n    }\n    if (this.rendererService.getDirty()) {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.bind();\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n    let u_time = this.layer.getLayerAnimateTime();\n    if (isNaN(u_time)) {\n      u_time = 0.0;\n    }\n    const commonOptions = {\n      u_animate: this.animateOption2Array(animateOption),\n      u_dash_array: dashArray,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      segmentNumber,\n      u_line_type: lineStyleObj[lineType] || 0.0,\n      u_icon_step: iconStep,\n      u_line_texture: lineTexture ? 1.0 : 0.0,\n      // 传入线的标识\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      u_time,\n      // 纹理支持参数\n      // u_texture: this.texture, // 贴图\n      // 渐变色支持参数\n      u_linearColor: useLinearColor\n    };\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  // public getAnimateUniforms(): IModelUniform {\n  //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n  //   return {\n  //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n  //     u_time: this.layer.getLayerAnimateTime(),\n  //   };\n  // }\n\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.initUniformsBuffer();\n      _this.updateTexture();\n      _this.iconService.on('imageUpdate', _this.updateTexture);\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    var _this$texture2;\n    (_this$texture2 = this.texture) === null || _this$texture2 === void 0 || _this$texture2.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        segmentNumber = 30\n      } = _this2.layer.getLayerConfig();\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'lineGreatCircle',\n        vertexShader: line_arc2d_vert,\n        fragmentShader: line_arc_frag,\n        triangulation: LineArcTriangulation,\n        styleOption: {\n          segmentNumber\n        },\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        depth: {\n          enable: false\n        }\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return Array.isArray(size) ? [size[0]] : [size];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance',\n      // 弧线起始点信息\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance',\n        shaderLocation: this.attributeLocation.INSTANCE,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4], vertex[5], vertex[6]];\n        }\n      }\n    });\n\n    // save low part for enabled double precision INSTANCE attribute\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance64Low',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance64Low',\n        shaderLocation: this.attributeLocation.INSTANCE_64LOW,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [fp64LowPart(vertex[3]), fp64LowPart(vertex[4]), fp64LowPart(vertex[5]), fp64LowPart(vertex[6])];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: feature => {\n          const iconMap = this.iconService.getIconMap();\n          const {\n            texture\n          } = feature;\n          const {\n            x,\n            y\n          } = iconMap[texture] || {\n            x: 0,\n            y: 0\n          };\n          return [x, y];\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","AttributeType","gl","fp64LowPart","rgb2arr","BaseModel","LineArcTriangulation","line_arc_frag","line_arc2d_vert","lineStyleObj","solid","dash","GreatCircleModel","constructor","args","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","layer","render","mag","NEAREST","min","premultiplyAlpha","width","height","canvasHeight","textures","attributeLocation","Object","assign","MAX","SIZE","INSTANCE","INSTANCE_64LOW","UV","getCommonUniformsInfo","sourceColor","targetColor","textureBlend","lineType","dashArray","lineTexture","iconStep","segmentNumber","getLayerConfig","animateOption","length","push","getDirty","_this$texture","bind","useLinearColor","sourceColorArr","targetColorArr","u_time","getLayerAnimateTime","isNaN","commonOptions","u_animate","animateOption2Array","u_dash_array","u_sourceColor","u_targetColor","u_textSize","u_line_type","u_icon_step","u_line_texture","u_textureBlend","u_linearColor","commonBufferInfo","getUniformsBufferInfo","initModels","_this","initUniformsBuffer","updateTexture","on","buildModels","clearModels","_this$texture2","destroy","off","_this2","model","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","styleOption","defines","getDefines","inject","getInject","depth","enable","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","usage","DYNAMIC_DRAW","FLOAT","size","feature","Array","isArray","STATIC_DRAW","featureIdx","vertex","iconMap","getIconMap","x","y"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/line/models/great_circle.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { fp64LowPart, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/greatCircle/line_arc_great_circle_frag.glsl' */\nconst line_arc_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0;\\n};\\n\\nin vec4 v_dash_array;\\nin vec4 v_color;\\nin vec2 v_iconMapUV;\\nin vec4 v_line_data;\\nin float v_distance_ratio;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"projection\\\"\\n\\nvoid main() {\\n\\n  float animateSpeed = 0.0;\\n  float d_segmentIndex = v_line_data.g;\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u5E95\\u8272\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    outputColor = mix(u_sourceColor, u_targetColor, d_segmentIndex/segmentNumber);\\n    outputColor.a *= v_color.a;\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n    outputColor = v_color;\\n  }\\n\\n  // float blur = 1.- smoothstep(u_blur, 1., length(v_normal.xy));\\n  // float blur = smoothstep(1.0, u_blur, length(v_normal.xy));\\n  if(u_line_type == LineTypeDash) {\\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      // \\u5B9E\\u7EBF\\u90E8\\u5206\\n    } else {\\n      // \\u865A\\u7EBF\\u90E8\\u5206\\n      discard;\\n    };\\n  }\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u52A8\\u753B\\u6A21\\u5F0F\\n  if(u_animate.x == Animate) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- v_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      outputColor.a *= alpha;\\n  }\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u8D34\\u56FE\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) {\\n    float arcRadio = smoothstep( 0.0, 1.0, (d_segmentIndex / (segmentNumber - 1.0)));\\n    // float arcRadio = d_segmentIndex / (segmentNumber - 1.0);\\n    float count = v_line_data.b; // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n    float u = fract(arcRadio * count - animateSpeed * count);\\n    // float u = fract(arcRadio * count - animateSpeed);\\n    if(u_animate.x == Animate) {\\n      u = outputColor.a/v_color.a;\\n    }\\n\\n    float v = v_line_data.a; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    // \\u8BBE\\u7F6E\\u8D34\\u56FE\\u548C\\u5E95\\u8272\\u7684\\u53E0\\u52A0\\u6A21\\u5F0F\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n  } else {\\n    outputColor = filterColor(outputColor);\\n  }\\n\\n  // gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/greatCircle/line_arc_great_circle_vert.glsl' */\nconst line_arc2d_vert = \"#define LineTypeSolid (0.0)\\n#define LineTypeDash (1.0)\\n#define Animate (0.0)\\n#define LineTexture (1.0)\\n\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE) in vec4 a_Instance;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE_64LOW) in vec4 a_Instance64Low;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_iconMapUV;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0;\\n};\\n\\nout vec4 v_dash_array;\\nout vec4 v_color;\\nout vec2 v_iconMapUV;\\nout vec4 v_line_data;\\nout float v_distance_ratio;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps(float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return index / (segmentNumber - 1.0);\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(mix(source, target, segmentRatio), sqrt(max(0.0, vertex_height)));\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return dir_screenspace.xy * sign(offset_direction);\\n}\\nfloat getAngularDist(vec2 source, vec2 target) {\\n  vec2 delta = source - target;\\n  vec2 sin_half_delta = sin(delta / 2.0);\\n  float a =\\n    sin_half_delta.y * sin_half_delta.y +\\n    cos(source.y) * cos(target.y) * sin_half_delta.x * sin_half_delta.x;\\n  return 2.0 * atan(sqrt(a), sqrt(1.0 - a));\\n}\\n\\nvec2 midPoint(vec2 source, vec2 target) {\\n  vec2 center = target - source;\\n  float r = length(center);\\n  float theta = atan(center.y, center.x);\\n  float thetaOffset = 0.314;\\n  float r2 = r / 2.0 / cos(thetaOffset);\\n  float theta2 = theta + thetaOffset;\\n  vec2 mid = vec2(r2 * cos(theta2) + source.x, r2 * sin(theta2) + source.y);\\n  return mid;\\n}\\nfloat bezier3(vec3 arr, float t) {\\n  float ut = 1.0 - t;\\n  return (arr.x * ut + arr.y * t) * ut + (arr.y * ut + arr.z * t) * t;\\n}\\n\\nvec2 interpolate(vec2 source, vec2 target, float angularDist, float t) {\\n  if (abs(angularDist - PI) < 0.001) {\\n    return (1.0 - t) * source + t * target;\\n  }\\n  float a = sin((1.0 - t) * angularDist) / sin(angularDist);\\n  float b = sin(t * angularDist) / sin(angularDist);\\n  vec2 sin_source = sin(source);\\n  vec2 cos_source = cos(source);\\n  vec2 sin_target = sin(target);\\n  vec2 cos_target = cos(target);\\n  float x = a * cos_source.y * cos_source.x + b * cos_target.y * cos_target.x;\\n  float y = a * cos_source.y * sin_source.x + b * cos_target.y * sin_target.x;\\n  float z = a * sin_source.y + b * sin_target.y;\\n  return vec2(atan(y, x), atan(z, sqrt(x * x + y * y)));\\n\\n}\\n\\nvoid main() {\\n  v_color = a_Color;\\n  v_color.a = v_color.a * opacity;\\n  vec2 source = radians(a_Instance.rg);\\n  vec2 target = radians(a_Instance.ba);\\n  float angularDist = getAngularDist(source, target);\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  if (u_line_type == LineTypeDash) {\\n    v_distance_ratio = segmentIndex / segmentNumber;\\n    float total_Distance = pixelDistance(source, target) / 2.0 * PI;\\n    total_Distance = total_Distance * 16.0; // total_Distance*16.0 \\u8C03\\u6574\\u9ED8\\u8BA4\\u7684\\u6548\\u679C\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / total_Distance;\\n  }\\n\\n  if (u_animate.x == Animate) {\\n    v_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  v_distance_ratio = segmentIndex / segmentNumber;\\n\\n  vec4 curr = project_position(vec4(degrees(interpolate(source, target, angularDist, segmentRatio)), 0.0, 1.0), a_Instance64Low.xy);\\n  vec4 next = project_position(vec4(degrees(interpolate(source, target, angularDist, nextSegmentRatio)), 0.0, 1.0), a_Instance64Low.zw);\\n\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n  vec2 offset = project_pixel(getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y));\\n  //  vec4 project_pos = project_position(vec4(curr.xy, 0, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, curr.z, 1.0));\\n\\n  v_line_data.g = a_Position.x; // \\u8BE5\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E0A\\u7684\\u5206\\u6BB5\\u6392\\u5E8F\\n  if (LineTexture == u_line_texture) {\\n    float d_arcDistrance = length(source - target);\\n    d_arcDistrance = project_pixel(d_arcDistrance);\\n\\n    float d_pixelLen = project_pixel(u_icon_step) / 8.0;\\n    v_line_data.b = floor(d_arcDistrance / d_pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float lineOffsetWidth = length(offset + offset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size); // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    v_line_data.a = lineOffsetWidth / linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, 0, 1.0));\\n  setPickingColor(a_PickingColor);\\n}\\n\\n\";\nconst lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nexport default class GreatCircleModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"updateTexture\", () => {\n      const {\n        createTexture2D\n      } = this.rendererService;\n      if (this.texture) {\n        this.texture.update({\n          data: this.iconService.getCanvas()\n        });\n        this.layer.render();\n        return;\n      }\n      this.texture = createTexture2D({\n        data: this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: this.iconService.canvasHeight || 128\n      });\n      this.textures = [this.texture];\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      INSTANCE: 10,\n      INSTANCE_64LOW: 11,\n      UV: 12\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5],\n      lineTexture = false,\n      iconStep = 100,\n      segmentNumber = 30\n    } = this.layer.getLayerConfig();\n    const {\n      animateOption\n    } = this.layer.getLayerConfig();\n    if (dashArray.length === 2) {\n      dashArray.push(0, 0);\n    }\n    if (this.rendererService.getDirty()) {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.bind();\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n    let u_time = this.layer.getLayerAnimateTime();\n    if (isNaN(u_time)) {\n      u_time = 0.0;\n    }\n    const commonOptions = {\n      u_animate: this.animateOption2Array(animateOption),\n      u_dash_array: dashArray,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      segmentNumber,\n      u_line_type: lineStyleObj[lineType] || 0.0,\n      u_icon_step: iconStep,\n      u_line_texture: lineTexture ? 1.0 : 0.0,\n      // 传入线的标识\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      u_time,\n      // 纹理支持参数\n      // u_texture: this.texture, // 贴图\n      // 渐变色支持参数\n      u_linearColor: useLinearColor\n    };\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  // public getAnimateUniforms(): IModelUniform {\n  //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n  //   return {\n  //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n  //     u_time: this.layer.getLayerAnimateTime(),\n  //   };\n  // }\n\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.initUniformsBuffer();\n      _this.updateTexture();\n      _this.iconService.on('imageUpdate', _this.updateTexture);\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    var _this$texture2;\n    (_this$texture2 = this.texture) === null || _this$texture2 === void 0 || _this$texture2.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        segmentNumber = 30\n      } = _this2.layer.getLayerConfig();\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'lineGreatCircle',\n        vertexShader: line_arc2d_vert,\n        fragmentShader: line_arc_frag,\n        triangulation: LineArcTriangulation,\n        styleOption: {\n          segmentNumber\n        },\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        depth: {\n          enable: false\n        }\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return Array.isArray(size) ? [size[0]] : [size];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance',\n      // 弧线起始点信息\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance',\n        shaderLocation: this.attributeLocation.INSTANCE,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4], vertex[5], vertex[6]];\n        }\n      }\n    });\n\n    // save low part for enabled double precision INSTANCE attribute\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance64Low',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance64Low',\n        shaderLocation: this.attributeLocation.INSTANCE_64LOW,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [fp64LowPart(vertex[3]), fp64LowPart(vertex[4]), fp64LowPart(vertex[5]), fp64LowPart(vertex[6])];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: feature => {\n          const iconMap = this.iconService.getIconMap();\n          const {\n            texture\n          } = feature;\n          const {\n            x,\n            y\n          } = iconMap[texture] || {\n            x: 0,\n            y: 0\n          };\n          return [x, y];\n        }\n      }\n    });\n  }\n}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,SAASC,aAAa,EAAEC,EAAE,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AACrD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA,MAAMC,aAAa,GAAG,w2GAAw2G;AAC93G;AACA,MAAMC,eAAe,GAAG,y8MAAy8M;AACj+M,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE;AACR,CAAC;AACD,eAAe,MAAMC,gBAAgB,SAASP,SAAS,CAAC;EACtDQ,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACdd,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxCA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,MAAM;MAC3C,MAAM;QACJe;MACF,CAAC,GAAG,IAAI,CAACC,eAAe;MACxB,IAAI,IAAI,CAACC,OAAO,EAAE;QAChB,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC;UAClBC,IAAI,EAAE,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC;QACnC,CAAC,CAAC;QACF,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC;QACnB;MACF;MACA,IAAI,CAACN,OAAO,GAAGF,eAAe,CAAC;QAC7BI,IAAI,EAAE,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC,CAAC;QAClCG,GAAG,EAAEtB,EAAE,CAACuB,OAAO;QACfC,GAAG,EAAExB,EAAE,CAACuB,OAAO;QACfE,gBAAgB,EAAE,KAAK;QACvBC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,IAAI,CAACT,WAAW,CAACU,YAAY,IAAI;MAC3C,CAAC,CAAC;MACF,IAAI,CAACC,QAAQ,GAAG,CAAC,IAAI,CAACd,OAAO,CAAC;IAChC,CAAC,CAAC;EACJ;EACA,IAAIe,iBAAiBA,CAAA,EAAG;IACtB,OAAOC,MAAM,CAACC,MAAM,CAAC,KAAK,CAACF,iBAAiB,EAAE;MAC5CG,GAAG,EAAE,KAAK,CAACH,iBAAiB,CAACG,GAAG;MAChCC,IAAI,EAAE,CAAC;MACPC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,EAAE;MAClBC,EAAE,EAAE;IACN,CAAC,CAAC;EACJ;EACAC,qBAAqBA,CAAA,EAAG;IACtB,MAAM;MACJC,WAAW;MACXC,WAAW;MACXC,YAAY,GAAG,QAAQ;MACvBC,QAAQ,GAAG,OAAO;MAClBC,SAAS,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;MACnBC,WAAW,GAAG,KAAK;MACnBC,QAAQ,GAAG,GAAG;MACdC,aAAa,GAAG;IAClB,CAAC,GAAG,IAAI,CAAC1B,KAAK,CAAC2B,cAAc,CAAC,CAAC;IAC/B,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,cAAc,CAAC,CAAC;IAC/B,IAAIJ,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;MAC1BN,SAAS,CAACO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB;IACA,IAAI,IAAI,CAACpC,eAAe,CAACqC,QAAQ,CAAC,CAAC,EAAE;MACnC,IAAIC,aAAa;MACjB,CAACA,aAAa,GAAG,IAAI,CAACrC,OAAO,MAAM,IAAI,IAAIqC,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAACC,IAAI,CAAC,CAAC;IAC7F;;IAEA;IACA,IAAIC,cAAc,GAAG,CAAC,CAAC,CAAC;IACxB,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,IAAIjB,WAAW,IAAIC,WAAW,EAAE;MAC9Be,cAAc,GAAGrD,OAAO,CAACqC,WAAW,CAAC;MACrCiB,cAAc,GAAGtD,OAAO,CAACsC,WAAW,CAAC;MACrCc,cAAc,GAAG,CAAC;IACpB;IACA,IAAIG,MAAM,GAAG,IAAI,CAACrC,KAAK,CAACsC,mBAAmB,CAAC,CAAC;IAC7C,IAAIC,KAAK,CAACF,MAAM,CAAC,EAAE;MACjBA,MAAM,GAAG,GAAG;IACd;IACA,MAAMG,aAAa,GAAG;MACpBC,SAAS,EAAE,IAAI,CAACC,mBAAmB,CAACd,aAAa,CAAC;MAClDe,YAAY,EAAEpB,SAAS;MACvBqB,aAAa,EAAET,cAAc;MAC7BU,aAAa,EAAET,cAAc;MAC7BU,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,CAAChD,WAAW,CAACU,YAAY,IAAI,GAAG,CAAC;MACxDkB,aAAa;MACbqB,WAAW,EAAE5D,YAAY,CAACmC,QAAQ,CAAC,IAAI,GAAG;MAC1C0B,WAAW,EAAEvB,QAAQ;MACrBwB,cAAc,EAAEzB,WAAW,GAAG,GAAG,GAAG,GAAG;MACvC;MACA0B,cAAc,EAAE7B,YAAY,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG;MACrDgB,MAAM;MACN;MACA;MACA;MACAc,aAAa,EAAEjB;IACjB,CAAC;IACD,MAAMkB,gBAAgB,GAAG,IAAI,CAACC,qBAAqB,CAACb,aAAa,CAAC;IAClE,OAAOY,gBAAgB;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAE,UAAUA,CAAA,EAAG;IACX,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAO9E,iBAAiB,CAAC,aAAa;MACpC8E,KAAK,CAACC,kBAAkB,CAAC,CAAC;MAC1BD,KAAK,CAACE,aAAa,CAAC,CAAC;MACrBF,KAAK,CAACzD,WAAW,CAAC4D,EAAE,CAAC,aAAa,EAAEH,KAAK,CAACE,aAAa,CAAC;MACxD,OAAOF,KAAK,CAACI,WAAW,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,WAAWA,CAAA,EAAG;IACZ,IAAIC,cAAc;IAClB,CAACA,cAAc,GAAG,IAAI,CAAClE,OAAO,MAAM,IAAI,IAAIkE,cAAc,KAAK,KAAK,CAAC,IAAIA,cAAc,CAACC,OAAO,CAAC,CAAC;IACjG,IAAI,CAAChE,WAAW,CAACiE,GAAG,CAAC,aAAa,EAAE,IAAI,CAACN,aAAa,CAAC;EACzD;EACAE,WAAWA,CAAA,EAAG;IACZ,IAAIK,MAAM,GAAG,IAAI;IACjB,OAAOvF,iBAAiB,CAAC,aAAa;MACpC,MAAM;QACJiD,aAAa,GAAG;MAClB,CAAC,GAAGsC,MAAM,CAAChE,KAAK,CAAC2B,cAAc,CAAC,CAAC;MACjC,MAAMsC,KAAK,GAAG,MAAMD,MAAM,CAAChE,KAAK,CAACkE,eAAe,CAAC;QAC/CC,UAAU,EAAE,iBAAiB;QAC7BC,YAAY,EAAElF,eAAe;QAC7BmF,cAAc,EAAEpF,aAAa;QAC7BqF,aAAa,EAAEtF,oBAAoB;QACnCuF,WAAW,EAAE;UACX7C;QACF,CAAC;QACD8C,OAAO,EAAER,MAAM,CAACS,UAAU,CAAC,CAAC;QAC5BC,MAAM,EAAEV,MAAM,CAACW,SAAS,CAAC,CAAC;QAC1BC,KAAK,EAAE;UACLC,MAAM,EAAE;QACV;MACF,CAAC,CAAC;MACF,OAAO,CAACZ,KAAK,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;EACN;EACAa,yBAAyBA,CAAA,EAAG;IAC1B,IAAI,CAACC,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAEvG,aAAa,CAACwG,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,QAAQ;QACdI,cAAc,EAAE,IAAI,CAAC3E,iBAAiB,CAACI,IAAI;QAC3CwE,MAAM,EAAE;UACN;UACAC,KAAK,EAAE3G,EAAE,CAAC4G,YAAY;UACtB3F,IAAI,EAAE,EAAE;UACRqF,IAAI,EAAEtG,EAAE,CAAC6G;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACP9F,MAAM,EAAE+F,OAAO,IAAI;UACjB,MAAM;YACJD,IAAI,GAAG;UACT,CAAC,GAAGC,OAAO;UACX,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,IAAI,CAAC;QACjD;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAACX,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,UAAU;MAChB;MACAC,IAAI,EAAEvG,aAAa,CAACwG,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,YAAY;QAClBI,cAAc,EAAE,IAAI,CAAC3E,iBAAiB,CAACK,QAAQ;QAC/CuE,MAAM,EAAE;UACNC,KAAK,EAAE3G,EAAE,CAACkH,WAAW;UACrBjG,IAAI,EAAE,EAAE;UACRqF,IAAI,EAAEtG,EAAE,CAAC6G;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACP9F,MAAM,EAAEA,CAAC+F,OAAO,EAAEI,UAAU,EAAEC,MAAM,KAAK;UACvC,OAAO,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;QACrD;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACjB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAEvG,aAAa,CAACwG,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,iBAAiB;QACvBI,cAAc,EAAE,IAAI,CAAC3E,iBAAiB,CAACM,cAAc;QACrDsE,MAAM,EAAE;UACNC,KAAK,EAAE3G,EAAE,CAACkH,WAAW;UACrBjG,IAAI,EAAE,EAAE;UACRqF,IAAI,EAAEtG,EAAE,CAAC6G;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACP9F,MAAM,EAAEA,CAAC+F,OAAO,EAAEI,UAAU,EAAEC,MAAM,KAAK;UACvC,OAAO,CAACnH,WAAW,CAACmH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEnH,WAAW,CAACmH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEnH,WAAW,CAACmH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEnH,WAAW,CAACmH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzG;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAACjB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAEvG,aAAa,CAACwG,SAAS;MAC7BC,UAAU,EAAE;QACVH,IAAI,EAAE,aAAa;QACnBI,cAAc,EAAE,IAAI,CAAC3E,iBAAiB,CAACO,EAAE;QACzCqE,MAAM,EAAE;UACN;UACAC,KAAK,EAAE3G,EAAE,CAAC4G,YAAY;UACtB3F,IAAI,EAAE,EAAE;UACRqF,IAAI,EAAEtG,EAAE,CAAC6G;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACP9F,MAAM,EAAE+F,OAAO,IAAI;UACjB,MAAMM,OAAO,GAAG,IAAI,CAACnG,WAAW,CAACoG,UAAU,CAAC,CAAC;UAC7C,MAAM;YACJvG;UACF,CAAC,GAAGgG,OAAO;UACX,MAAM;YACJQ,CAAC;YACDC;UACF,CAAC,GAAGH,OAAO,CAACtG,OAAO,CAAC,IAAI;YACtBwG,CAAC,EAAE,CAAC;YACJC,CAAC,EAAE;UACL,CAAC;UACD,OAAO,CAACD,CAAC,EAAEC,CAAC,CAAC;QACf;MACF;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}