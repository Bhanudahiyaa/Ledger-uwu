{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { inject, injectable } from 'inversify';\nimport { createEntity } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nexport var MaterialSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MaterialComponentManager), _dec3 = inject(IDENTIFIER.RenderEngine), _dec4 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MaterialSystem() {\n    _classCallCheck(this, MaterialSystem);\n    _initializerDefineProperty(this, \"material\", _descriptor, this);\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n    _initializerDefineProperty(this, \"shaderModule\", _descriptor3, this);\n  }\n  _createClass(MaterialSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.material.clear();\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n     */\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var entity = createEntity();\n      var vertexShaderGLSL = params.vertexShader;\n      var fragmentShaderGLSL = params.fragmentShader;\n      var uniforms = [];\n      if (!this.engine.supportWebGPU) {\n        var moduleName = \"material-\".concat(entity);\n        this.shaderModule.registerModule(moduleName, {\n          vs: params.vertexShader,\n          fs: params.fragmentShader\n        });\n        var materialModule = this.shaderModule.getModule(moduleName);\n        vertexShaderGLSL = materialModule.vs;\n        fragmentShaderGLSL = materialModule.fs;\n        if (materialModule.uniforms) {\n          // @ts-ignore\n          uniforms = Object.keys(materialModule.uniforms).map(function (uniformName) {\n            return {\n              dirty: true,\n              name: uniformName,\n              // @ts-ignore\n              data: materialModule.uniforms[uniformName]\n            };\n          });\n        }\n      }\n      return this.material.create(entity, _objectSpread(_objectSpread({\n        vertexShaderGLSL: vertexShaderGLSL,\n        fragmentShaderGLSL: fragmentShaderGLSL\n      }, params), {}, {\n        uniforms: uniforms\n      }));\n    }\n  }]);\n  return MaterialSystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModule\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["inject","injectable","createEntity","IDENTIFIER","MaterialSystem","_dec","_dec2","MaterialComponentManager","_dec3","RenderEngine","_dec4","ShaderModuleService","_class","_class2","_temp","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","execute","apply","arguments","tearDown","material","clear","createShaderMaterial","params","entity","vertexShaderGLSL","vertexShader","fragmentShaderGLSL","fragmentShader","uniforms","engine","supportWebGPU","moduleName","concat","shaderModule","registerModule","vs","fs","materialModule","getModule","Object","keys","map","uniformName","dirty","name","data","create","_objectSpread","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/material/System.ts"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, Entity, ISystem, IUniformBinding } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { IShaderModuleService } from '../../services';\nimport { getLengthFromFormat } from '../../utils/shader';\nimport { IModelInitializationOptions } from '../renderer/IModel';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { MaterialComponent } from './MaterialComponent';\n\n@injectable()\nexport class MaterialSystem implements ISystem {\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModule: IShaderModuleService;\n\n  public async execute() {\n    // await Promise.all(\n    //   this.material.map(async (entity, component) => {\n    //     // if (component.dirty) {\n    //     // TODO: 使用 cache 避免同类材质的重复编译\n    //     // component.stageDescriptor = await this.engine.compilePipelineStageDescriptor(\n    //     //   component.vertexShaderGLSL,\n    //     //   component.fragmentShaderGLSL,\n    //     //   null,\n    //     // );\n    //     // this.generateUniforms(component);\n    //     //   component.dirty = false;\n    //     // }\n    //   }),\n    // );\n  }\n\n  public tearDown() {\n    this.material.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n   */\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n    cull?: IModelInitializationOptions['cull'];\n    depth?: IModelInitializationOptions['depth'];\n    blend?: IModelInitializationOptions['blend'];\n  }) {\n    const entity = createEntity();\n\n    let vertexShaderGLSL = params.vertexShader;\n    let fragmentShaderGLSL = params.fragmentShader;\n    let uniforms: IUniformBinding[] = [];\n\n    if (!this.engine.supportWebGPU) {\n      const moduleName = `material-${entity}`;\n      this.shaderModule.registerModule(moduleName, {\n        vs: params.vertexShader,\n        fs: params.fragmentShader,\n      });\n\n      const materialModule = this.shaderModule.getModule(moduleName);\n      vertexShaderGLSL = materialModule.vs!;\n      fragmentShaderGLSL = materialModule.fs!;\n      if (materialModule.uniforms) {\n        // @ts-ignore\n        uniforms = Object.keys(materialModule.uniforms).map((uniformName) => ({\n          dirty: true,\n          name: uniformName,\n          // @ts-ignore\n          data: materialModule.uniforms[uniformName],\n        }));\n      }\n    }\n\n    return this.material.create(entity, {\n      vertexShaderGLSL,\n      fragmentShaderGLSL,\n      ...params,\n      uniforms,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}