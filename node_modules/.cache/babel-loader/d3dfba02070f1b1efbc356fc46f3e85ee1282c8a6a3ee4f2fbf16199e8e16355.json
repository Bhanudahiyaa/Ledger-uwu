{"ast":null,"code":"import { lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\nexport function MultipleOfFourNumber(num) {\n  return Math.max(Math.ceil(num / 4) * 4, 4);\n}\n\n/**\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\nexport function getPolygonSurfaceIndices(positions, holeIndices, positionSize, preproject = true) {\n  const is3d = positionSize === 3;\n  if (preproject) {\n    positions = positions.slice();\n    const p = [];\n    for (let i = 0; i < positions.length; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      // earcut is a 2D triangulation algorithm, and handles 3D data as if it was projected onto the XY plane\n      const xy = lngLatToMeters(p, true, {\n        enable: false,\n        decimal: 1\n      });\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n  const indices = earcut(positions, holeIndices, positionSize);\n  return indices;\n}","map":{"version":3,"names":["lngLatToMeters","earcut","MultipleOfFourNumber","num","Math","max","ceil","getPolygonSurfaceIndices","positions","holeIndices","positionSize","preproject","is3d","slice","p","i","length","xy","enable","decimal","indices"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/core/utils.js"],"sourcesContent":["import { lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\nexport function MultipleOfFourNumber(num) {\n  return Math.max(Math.ceil(num / 4) * 4, 4);\n}\n\n/**\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\nexport function getPolygonSurfaceIndices(positions, holeIndices, positionSize, preproject = true) {\n  const is3d = positionSize === 3;\n  if (preproject) {\n    positions = positions.slice();\n    const p = [];\n    for (let i = 0; i < positions.length; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      // earcut is a 2D triangulation algorithm, and handles 3D data as if it was projected onto the XY plane\n      const xy = lngLatToMeters(p, true, {\n        enable: false,\n        decimal: 1\n      });\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n  const indices = earcut(positions, holeIndices, positionSize);\n  return indices;\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;AAC/C,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,SAASC,oBAAoBA,CAACC,GAAG,EAAE;EACxC,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,IAAI,CAACH,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA,OAAO,SAASI,wBAAwBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAEC,UAAU,GAAG,IAAI,EAAE;EAChG,MAAMC,IAAI,GAAGF,YAAY,KAAK,CAAC;EAC/B,IAAIC,UAAU,EAAE;IACdH,SAAS,GAAGA,SAAS,CAACK,KAAK,CAAC,CAAC;IAC7B,MAAMC,CAAC,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,CAACQ,MAAM,EAAED,CAAC,IAAIL,YAAY,EAAE;MACvDI,CAAC,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACO,CAAC,CAAC;MACnBD,CAAC,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACO,CAAC,GAAG,CAAC,CAAC;MACvB,IAAIH,IAAI,EAAE;QACRE,CAAC,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACO,CAAC,GAAG,CAAC,CAAC;MACzB;;MAEA;MACA,MAAME,EAAE,GAAGjB,cAAc,CAACc,CAAC,EAAE,IAAI,EAAE;QACjCI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;MACFX,SAAS,CAACO,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC;MACpBT,SAAS,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC;MACxB,IAAIL,IAAI,EAAE;QACRJ,SAAS,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC;MAC1B;IACF;EACF;EACA,MAAMG,OAAO,GAAGnB,MAAM,CAACO,SAAS,EAAEC,WAAW,EAAEC,YAAY,CAAC;EAC5D,OAAOU,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}