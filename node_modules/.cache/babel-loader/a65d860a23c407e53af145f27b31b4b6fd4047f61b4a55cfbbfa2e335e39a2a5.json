{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/tileset-manager/tileset-manager.ts\nimport EventEmitter from \"eventemitter3\";\nimport { lodashUtil } from \"../lodash-adapter\";\nimport { BOUNDS_BUFFER_SCALE, DEFAULT_CACHE_SCALE, DEFAULT_EXTENT, NOOP, UPDATE_TILE_STRATEGIES } from \"./const\";\nimport { SourceTile } from \"./tile\";\nimport { UpdateTileStrategy } from \"./types\";\nimport { getLatLonBoundsBuffer, isLatLonBoundsContains } from \"./utils/bound-buffer\";\nimport { getTileIndices, osmLonLat2TileXY } from \"./utils/lonlat-tile\";\nvar {\n  throttle\n} = lodashUtil;\nvar TileEventType = /* @__PURE__ */(TileEventType2 => {\n  TileEventType2[\"TilesLoadStart\"] = \"tiles-load-start\";\n  TileEventType2[\"TileLoaded\"] = \"tile-loaded\";\n  TileEventType2[\"TileError\"] = \"tile-error\";\n  TileEventType2[\"TileUnload\"] = \"tile-unload\";\n  TileEventType2[\"TileUpdate\"] = \"tile-update\";\n  TileEventType2[\"TilesLoadFinished\"] = \"tiles-load-finished\";\n  return TileEventType2;\n})(TileEventType || {});\nvar TilesetManager = class extends EventEmitter {\n  constructor(options) {\n    super();\n    // 当前层级的瓦片\n    this.currentTiles = [];\n    // 缓存的瓦片，key 为 {z}-{x}-{y}\n    this.cacheTiles = /* @__PURE__ */new Map();\n    this.throttleUpdate = throttle((zoom, latLonBounds) => {\n      this.update(zoom, latLonBounds);\n    }, 16);\n    // 瓦片加载成功回调\n    this.onTileLoad = tile => {\n      this.emit(\"tile-loaded\" /* TileLoaded */, tile);\n      this.updateTileVisible();\n      this.loadFinished();\n    };\n    // 瓦片加载失败回调\n    this.onTileError = (error, tile) => {\n      this.emit(\"tile-error\" /* TileError */, {\n        error,\n        tile\n      });\n      this.updateTileVisible();\n      this.loadFinished();\n    };\n    // 瓦片被删除回调\n    this.onTileUnload = tile => {\n      this.emit(\"tile-unload\" /* TileUnload */, tile);\n      this.loadFinished();\n    };\n    this.options = {\n      tileSize: 256,\n      minZoom: 0,\n      maxZoom: Infinity,\n      zoomOffset: 0,\n      extent: DEFAULT_EXTENT,\n      getTileData: NOOP,\n      warp: true,\n      // TODO 更新策略\n      updateStrategy: UpdateTileStrategy.Replace\n    };\n    this.updateOptions(options);\n  }\n  get isLoaded() {\n    return this.currentTiles.every(tile => tile.isDone);\n  }\n  // 缓存的瓦片数组\n  get tiles() {\n    const tiles = Array.from(this.cacheTiles.values()).sort((t1, t2) => t1.z - t2.z);\n    return tiles;\n  }\n  // 更新配置项\n  updateOptions(options) {\n    const minZoom = options.minZoom === void 0 ? this.options.minZoom : Math.ceil(options.minZoom);\n    const maxZoom = options.maxZoom === void 0 ? this.options.maxZoom : Math.floor(options.maxZoom);\n    this.options = __spreadProps(__spreadValues(__spreadValues({}, this.options), options), {\n      minZoom,\n      maxZoom\n    });\n  }\n  // 更新\n  // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制\n  update(zoom, latLonBounds) {\n    const verifyZoom = Math.max(0, Math.ceil(zoom));\n    if (this.lastViewStates && this.lastViewStates.zoom === verifyZoom && isLatLonBoundsContains(this.lastViewStates.latLonBoundsBuffer, latLonBounds)) {\n      return;\n    }\n    const latLonBoundsBuffer = getLatLonBoundsBuffer(latLonBounds, BOUNDS_BUFFER_SCALE);\n    this.lastViewStates = {\n      zoom: verifyZoom,\n      latLonBounds,\n      latLonBoundsBuffer\n    };\n    this.currentZoom = verifyZoom;\n    let isAddTile = false;\n    const tileIndices = this.getTileIndices(verifyZoom, latLonBoundsBuffer).filter(tile => {\n      return this.options.warp || tile.x >= 0 && tile.x < Math.pow(2, verifyZoom);\n    });\n    this.emit(\"tiles-load-start\" /* TilesLoadStart */);\n    this.currentTiles = tileIndices.map(({\n      x,\n      y,\n      z\n    }) => {\n      let tile = this.getTile(x, y, z);\n      if (tile) {\n        const needsReload = (tile == null ? void 0 : tile.isFailure) || (tile == null ? void 0 : tile.isCancelled);\n        if (needsReload) {\n          tile.loadData({\n            getData: this.options.getTileData,\n            onLoad: this.onTileLoad,\n            onError: this.onTileError\n          });\n        }\n        return tile;\n      }\n      tile = this.createTile(x, y, z);\n      isAddTile = true;\n      return tile;\n    });\n    if (isAddTile) {\n      this.resizeCacheTiles();\n    }\n    this.updateTileVisible();\n    this.pruneRequests();\n  }\n  // 重新加载瓦片\n  reloadAll() {\n    for (const [tileId, tile] of this.cacheTiles) {\n      if (!this.currentTiles.includes(tile)) {\n        this.cacheTiles.delete(tileId);\n        this.onTileUnload(tile);\n        return;\n      }\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError\n      });\n    }\n  }\n  reloadTileById(z, x, y) {\n    const tile = this.cacheTiles.get(`${x},${y},${z}`);\n    if (tile) {\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError\n      });\n    }\n  }\n  reloadTileByLnglat(lng, lat, z) {\n    const tile = this.getTileByLngLat(lng, lat, z);\n    if (tile) {\n      this.reloadTileById(tile.z, tile.x, tile.y);\n    }\n  }\n  reloadTileByExtent(extent, z) {\n    const tiles = this.getTileIndices(z, extent);\n    tiles.forEach(tile => {\n      this.reloadTileById(tile.z, tile.x, tile.y);\n    });\n  }\n  // 取消滞留请求中的瓦片\n  pruneRequests() {\n    const abortCandidates = [];\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        if (!tile.isCurrent && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n    while (abortCandidates.length > 0) {\n      const tile = abortCandidates.shift();\n      tile.abortLoad();\n    }\n  }\n  getTileByLngLat(lng, lat, zoom) {\n    const {\n      zoomOffset\n    } = this.options;\n    const z = Math.ceil(zoom) + zoomOffset;\n    const xy = osmLonLat2TileXY(lng, lat, z);\n    const tiles = this.tiles.filter(t => t.key === `${xy[0]}_${xy[1]}_${z}`);\n    return tiles[0];\n  }\n  getTileExtent(extent, zoom) {\n    return this.getTileIndices(zoom, extent);\n  }\n  getTileByZXY(z, x, y) {\n    const tile = this.tiles.filter(t => t.key === `${x}_${y}_${z}`);\n    return tile[0];\n  }\n  // 摧毁\n  clear() {\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        tile.abortLoad();\n      } else {\n        this.onTileUnload(tile);\n      }\n    }\n    this.lastViewStates = void 0;\n    this.cacheTiles.clear();\n    this.currentTiles = [];\n  }\n  // 摧毁\n  destroy() {\n    this.clear();\n    this.removeAllListeners();\n  }\n  // 更新瓦片显隐状态\n  updateTileVisible() {\n    const updateStrategy = this.options.updateStrategy;\n    const beforeVisible = /* @__PURE__ */new Map();\n    for (const tile of this.cacheTiles.values()) {\n      beforeVisible.set(tile.key, tile.isVisible);\n      tile.isCurrent = false;\n      tile.isVisible = false;\n    }\n    for (const tile of this.currentTiles) {\n      tile.isCurrent = true;\n      tile.isVisible = true;\n    }\n    const tiles = Array.from(this.cacheTiles.values());\n    if (typeof updateStrategy === \"function\") {\n      updateStrategy(tiles);\n    } else {\n      UPDATE_TILE_STRATEGIES[updateStrategy](tiles);\n    }\n    let isVisibleChange = false;\n    Array.from(this.cacheTiles.values()).forEach(tile => {\n      if (tile.isVisible !== beforeVisible.get(tile.key)) {\n        tile.isVisibleChange = true;\n        isVisibleChange = true;\n      } else {\n        tile.isVisibleChange = false;\n      }\n    });\n    if (isVisibleChange) {\n      this.emit(\"tile-update\" /* TileUpdate */);\n    }\n  }\n  // 获取当前视野层级瓦片的所有索引\n  getTileIndices(zoom, latLonBounds) {\n    const {\n      tileSize,\n      extent,\n      zoomOffset\n    } = this.options;\n    const maxZoom = Math.floor(this.options.maxZoom);\n    const minZoom = Math.ceil(this.options.minZoom);\n    const indices = getTileIndices({\n      maxZoom,\n      minZoom,\n      zoomOffset,\n      tileSize,\n      zoom,\n      latLonBounds,\n      extent\n    });\n    return indices;\n  }\n  // 获取瓦片 ID\n  getTileId(x, y, z) {\n    const tileId = `${x},${y},${z}`;\n    return tileId;\n  }\n  loadFinished() {\n    const finish = !this.currentTiles.some(t => !t.isDone);\n    if (finish) {\n      this.emit(\"tiles-load-finished\" /* TilesLoadFinished */);\n    }\n    return finish;\n  }\n  // 获取瓦片\n  getTile(x, y, z) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = this.cacheTiles.get(tileId);\n    return tile;\n  }\n  // 创建瓦片\n  createTile(x, y, z) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = new SourceTile({\n      x,\n      y,\n      z,\n      tileSize: this.options.tileSize,\n      warp: this.options.warp\n    });\n    this.cacheTiles.set(tileId, tile);\n    tile.loadData({\n      getData: this.options.getTileData,\n      onLoad: this.onTileLoad,\n      onError: this.onTileError\n    });\n    return tile;\n  }\n  // 当缓存超过最大值时，清除不可见的瓦片\n  resizeCacheTiles() {\n    const maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;\n    const overflown = this.cacheTiles.size > maxCacheSize;\n    if (overflown) {\n      for (const [tileId, tile] of this.cacheTiles) {\n        if (!tile.isVisible && !this.currentTiles.includes(tile)) {\n          this.cacheTiles.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (this.cacheTiles.size <= maxCacheSize) {\n          break;\n        }\n      }\n    }\n    this.rebuildTileTree();\n  }\n  // 重新计算瓦片树\n  rebuildTileTree() {\n    for (const tile of this.cacheTiles.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n    for (const tile of this.cacheTiles.values()) {\n      const parent = this.getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent == null ? void 0 : parent.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n  // 获取瓦片的最近上级的瓦片\n  getNearestAncestor(x, y, z) {\n    while (z > this.options.minZoom) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      z = z - 1;\n      const parent = this.getTile(x, y, z);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n};\nexport { TileEventType, TilesetManager };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","EventEmitter","lodashUtil","BOUNDS_BUFFER_SCALE","DEFAULT_CACHE_SCALE","DEFAULT_EXTENT","NOOP","UPDATE_TILE_STRATEGIES","SourceTile","UpdateTileStrategy","getLatLonBoundsBuffer","isLatLonBoundsContains","getTileIndices","osmLonLat2TileXY","throttle","TileEventType","TileEventType2","TilesetManager","constructor","options","currentTiles","cacheTiles","Map","throttleUpdate","zoom","latLonBounds","update","onTileLoad","tile","emit","updateTileVisible","loadFinished","onTileError","error","onTileUnload","tileSize","minZoom","maxZoom","Infinity","zoomOffset","extent","getTileData","warp","updateStrategy","Replace","updateOptions","isLoaded","every","isDone","tiles","Array","from","values","sort","t1","t2","z","Math","ceil","floor","verifyZoom","max","lastViewStates","latLonBoundsBuffer","currentZoom","isAddTile","tileIndices","filter","x","pow","map","y","getTile","needsReload","isFailure","isCancelled","loadData","getData","onLoad","onError","createTile","resizeCacheTiles","pruneRequests","reloadAll","tileId","includes","delete","reloadTileById","get","reloadTileByLnglat","lng","lat","getTileByLngLat","reloadTileByExtent","forEach","abortCandidates","isLoading","isCurrent","isVisible","push","length","shift","abortLoad","xy","t","getTileExtent","getTileByZXY","clear","destroy","removeAllListeners","beforeVisible","set","isVisibleChange","indices","getTileId","finish","some","maxCacheSize","overflown","size","rebuildTileTree","parent","children","getNearestAncestor"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-utils/es/tileset-manager/tileset-manager.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/tileset-manager/tileset-manager.ts\nimport EventEmitter from \"eventemitter3\";\nimport { lodashUtil } from \"../lodash-adapter\";\nimport {\n  BOUNDS_BUFFER_SCALE,\n  DEFAULT_CACHE_SCALE,\n  DEFAULT_EXTENT,\n  NOOP,\n  UPDATE_TILE_STRATEGIES\n} from \"./const\";\nimport { SourceTile } from \"./tile\";\nimport { UpdateTileStrategy } from \"./types\";\nimport { getLatLonBoundsBuffer, isLatLonBoundsContains } from \"./utils/bound-buffer\";\nimport { getTileIndices, osmLonLat2TileXY } from \"./utils/lonlat-tile\";\nvar { throttle } = lodashUtil;\nvar TileEventType = /* @__PURE__ */ ((TileEventType2) => {\n  TileEventType2[\"TilesLoadStart\"] = \"tiles-load-start\";\n  TileEventType2[\"TileLoaded\"] = \"tile-loaded\";\n  TileEventType2[\"TileError\"] = \"tile-error\";\n  TileEventType2[\"TileUnload\"] = \"tile-unload\";\n  TileEventType2[\"TileUpdate\"] = \"tile-update\";\n  TileEventType2[\"TilesLoadFinished\"] = \"tiles-load-finished\";\n  return TileEventType2;\n})(TileEventType || {});\nvar TilesetManager = class extends EventEmitter {\n  constructor(options) {\n    super();\n    // 当前层级的瓦片\n    this.currentTiles = [];\n    // 缓存的瓦片，key 为 {z}-{x}-{y}\n    this.cacheTiles = /* @__PURE__ */ new Map();\n    this.throttleUpdate = throttle((zoom, latLonBounds) => {\n      this.update(zoom, latLonBounds);\n    }, 16);\n    // 瓦片加载成功回调\n    this.onTileLoad = (tile) => {\n      this.emit(\"tile-loaded\" /* TileLoaded */, tile);\n      this.updateTileVisible();\n      this.loadFinished();\n    };\n    // 瓦片加载失败回调\n    this.onTileError = (error, tile) => {\n      this.emit(\"tile-error\" /* TileError */, { error, tile });\n      this.updateTileVisible();\n      this.loadFinished();\n    };\n    // 瓦片被删除回调\n    this.onTileUnload = (tile) => {\n      this.emit(\"tile-unload\" /* TileUnload */, tile);\n      this.loadFinished();\n    };\n    this.options = {\n      tileSize: 256,\n      minZoom: 0,\n      maxZoom: Infinity,\n      zoomOffset: 0,\n      extent: DEFAULT_EXTENT,\n      getTileData: NOOP,\n      warp: true,\n      // TODO 更新策略\n      updateStrategy: UpdateTileStrategy.Replace\n    };\n    this.updateOptions(options);\n  }\n  get isLoaded() {\n    return this.currentTiles.every((tile) => tile.isDone);\n  }\n  // 缓存的瓦片数组\n  get tiles() {\n    const tiles = Array.from(this.cacheTiles.values()).sort((t1, t2) => t1.z - t2.z);\n    return tiles;\n  }\n  // 更新配置项\n  updateOptions(options) {\n    const minZoom = options.minZoom === void 0 ? this.options.minZoom : Math.ceil(options.minZoom);\n    const maxZoom = options.maxZoom === void 0 ? this.options.maxZoom : Math.floor(options.maxZoom);\n    this.options = __spreadProps(__spreadValues(__spreadValues({}, this.options), options), { minZoom, maxZoom });\n  }\n  // 更新\n  // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制\n  update(zoom, latLonBounds) {\n    const verifyZoom = Math.max(0, Math.ceil(zoom));\n    if (this.lastViewStates && this.lastViewStates.zoom === verifyZoom && isLatLonBoundsContains(this.lastViewStates.latLonBoundsBuffer, latLonBounds)) {\n      return;\n    }\n    const latLonBoundsBuffer = getLatLonBoundsBuffer(latLonBounds, BOUNDS_BUFFER_SCALE);\n    this.lastViewStates = {\n      zoom: verifyZoom,\n      latLonBounds,\n      latLonBoundsBuffer\n    };\n    this.currentZoom = verifyZoom;\n    let isAddTile = false;\n    const tileIndices = this.getTileIndices(verifyZoom, latLonBoundsBuffer).filter((tile) => {\n      return this.options.warp || tile.x >= 0 && tile.x < Math.pow(2, verifyZoom);\n    });\n    this.emit(\"tiles-load-start\" /* TilesLoadStart */);\n    this.currentTiles = tileIndices.map(({ x, y, z }) => {\n      let tile = this.getTile(x, y, z);\n      if (tile) {\n        const needsReload = (tile == null ? void 0 : tile.isFailure) || (tile == null ? void 0 : tile.isCancelled);\n        if (needsReload) {\n          tile.loadData({\n            getData: this.options.getTileData,\n            onLoad: this.onTileLoad,\n            onError: this.onTileError\n          });\n        }\n        return tile;\n      }\n      tile = this.createTile(x, y, z);\n      isAddTile = true;\n      return tile;\n    });\n    if (isAddTile) {\n      this.resizeCacheTiles();\n    }\n    this.updateTileVisible();\n    this.pruneRequests();\n  }\n  // 重新加载瓦片\n  reloadAll() {\n    for (const [tileId, tile] of this.cacheTiles) {\n      if (!this.currentTiles.includes(tile)) {\n        this.cacheTiles.delete(tileId);\n        this.onTileUnload(tile);\n        return;\n      }\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError\n      });\n    }\n  }\n  reloadTileById(z, x, y) {\n    const tile = this.cacheTiles.get(`${x},${y},${z}`);\n    if (tile) {\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError\n      });\n    }\n  }\n  reloadTileByLnglat(lng, lat, z) {\n    const tile = this.getTileByLngLat(lng, lat, z);\n    if (tile) {\n      this.reloadTileById(tile.z, tile.x, tile.y);\n    }\n  }\n  reloadTileByExtent(extent, z) {\n    const tiles = this.getTileIndices(z, extent);\n    tiles.forEach((tile) => {\n      this.reloadTileById(tile.z, tile.x, tile.y);\n    });\n  }\n  // 取消滞留请求中的瓦片\n  pruneRequests() {\n    const abortCandidates = [];\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        if (!tile.isCurrent && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n    while (abortCandidates.length > 0) {\n      const tile = abortCandidates.shift();\n      tile.abortLoad();\n    }\n  }\n  getTileByLngLat(lng, lat, zoom) {\n    const { zoomOffset } = this.options;\n    const z = Math.ceil(zoom) + zoomOffset;\n    const xy = osmLonLat2TileXY(lng, lat, z);\n    const tiles = this.tiles.filter((t) => t.key === `${xy[0]}_${xy[1]}_${z}`);\n    return tiles[0];\n  }\n  getTileExtent(extent, zoom) {\n    return this.getTileIndices(zoom, extent);\n  }\n  getTileByZXY(z, x, y) {\n    const tile = this.tiles.filter((t) => t.key === `${x}_${y}_${z}`);\n    return tile[0];\n  }\n  // 摧毁\n  clear() {\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        tile.abortLoad();\n      } else {\n        this.onTileUnload(tile);\n      }\n    }\n    this.lastViewStates = void 0;\n    this.cacheTiles.clear();\n    this.currentTiles = [];\n  }\n  // 摧毁\n  destroy() {\n    this.clear();\n    this.removeAllListeners();\n  }\n  // 更新瓦片显隐状态\n  updateTileVisible() {\n    const updateStrategy = this.options.updateStrategy;\n    const beforeVisible = /* @__PURE__ */ new Map();\n    for (const tile of this.cacheTiles.values()) {\n      beforeVisible.set(tile.key, tile.isVisible);\n      tile.isCurrent = false;\n      tile.isVisible = false;\n    }\n    for (const tile of this.currentTiles) {\n      tile.isCurrent = true;\n      tile.isVisible = true;\n    }\n    const tiles = Array.from(this.cacheTiles.values());\n    if (typeof updateStrategy === \"function\") {\n      updateStrategy(tiles);\n    } else {\n      UPDATE_TILE_STRATEGIES[updateStrategy](tiles);\n    }\n    let isVisibleChange = false;\n    Array.from(this.cacheTiles.values()).forEach((tile) => {\n      if (tile.isVisible !== beforeVisible.get(tile.key)) {\n        tile.isVisibleChange = true;\n        isVisibleChange = true;\n      } else {\n        tile.isVisibleChange = false;\n      }\n    });\n    if (isVisibleChange) {\n      this.emit(\"tile-update\" /* TileUpdate */);\n    }\n  }\n  // 获取当前视野层级瓦片的所有索引\n  getTileIndices(zoom, latLonBounds) {\n    const { tileSize, extent, zoomOffset } = this.options;\n    const maxZoom = Math.floor(this.options.maxZoom);\n    const minZoom = Math.ceil(this.options.minZoom);\n    const indices = getTileIndices({\n      maxZoom,\n      minZoom,\n      zoomOffset,\n      tileSize,\n      zoom,\n      latLonBounds,\n      extent\n    });\n    return indices;\n  }\n  // 获取瓦片 ID\n  getTileId(x, y, z) {\n    const tileId = `${x},${y},${z}`;\n    return tileId;\n  }\n  loadFinished() {\n    const finish = !this.currentTiles.some((t) => !t.isDone);\n    if (finish) {\n      this.emit(\"tiles-load-finished\" /* TilesLoadFinished */);\n    }\n    return finish;\n  }\n  // 获取瓦片\n  getTile(x, y, z) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = this.cacheTiles.get(tileId);\n    return tile;\n  }\n  // 创建瓦片\n  createTile(x, y, z) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = new SourceTile({\n      x,\n      y,\n      z,\n      tileSize: this.options.tileSize,\n      warp: this.options.warp\n    });\n    this.cacheTiles.set(tileId, tile);\n    tile.loadData({\n      getData: this.options.getTileData,\n      onLoad: this.onTileLoad,\n      onError: this.onTileError\n    });\n    return tile;\n  }\n  // 当缓存超过最大值时，清除不可见的瓦片\n  resizeCacheTiles() {\n    const maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;\n    const overflown = this.cacheTiles.size > maxCacheSize;\n    if (overflown) {\n      for (const [tileId, tile] of this.cacheTiles) {\n        if (!tile.isVisible && !this.currentTiles.includes(tile)) {\n          this.cacheTiles.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (this.cacheTiles.size <= maxCacheSize) {\n          break;\n        }\n      }\n    }\n    this.rebuildTileTree();\n  }\n  // 重新计算瓦片树\n  rebuildTileTree() {\n    for (const tile of this.cacheTiles.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n    for (const tile of this.cacheTiles.values()) {\n      const parent = this.getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent == null ? void 0 : parent.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n  // 获取瓦片的最近上级的瓦片\n  getNearestAncestor(x, y, z) {\n    while (z > this.options.minZoom) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      z = z - 1;\n      const parent = this.getTile(x, y, z);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n};\nexport {\n  TileEventType,\n  TilesetManager\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}