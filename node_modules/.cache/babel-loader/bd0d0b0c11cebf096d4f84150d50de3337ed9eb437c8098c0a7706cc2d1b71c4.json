{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Util } from '../../global';\nimport { FunctionExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nexport class Dnd extends View {\n  constructor(options) {\n    super();\n    this.options = Object.assign(Object.assign({}, Dnd.defaults), options);\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container).addClass(this.prefixClassName('widget-dnd'));\n    this.draggingGraph = new Graph(Object.assign(Object.assign({}, this.options.delegateGraphOptions), {\n      container: document.createElement('div'),\n      width: 1,\n      height: 1\n    }));\n    this.$container.append(this.draggingGraph.container);\n  }\n  get targetScroller() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target.scroller.widget : target;\n  }\n  get targetGraph() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target : target.graph;\n  }\n  get targetModel() {\n    return this.targetGraph.model;\n  }\n  get snapline() {\n    return this.targetGraph.snapline.widget;\n  }\n  start(node, evt) {\n    const e = evt;\n    e.preventDefault();\n    this.targetModel.startBatch('dnd');\n    this.$container.addClass('dragging').appendTo(this.options.draggingContainer || document.body);\n    this.sourceNode = node;\n    this.prepareDragging(node, e.clientX, e.clientY);\n    const local = this.updateNodePosition(e.clientX, e.clientY);\n    if (this.isSnaplineEnabled()) {\n      this.snapline.captureCursorOffset({\n        e,\n        node,\n        cell: node,\n        view: this.draggingView,\n        x: local.x,\n        y: local.y\n      });\n      this.draggingNode.on('change:position', this.snap, this);\n    }\n    this.delegateDocumentEvents(Dnd.documentEvents, e.data);\n  }\n  isSnaplineEnabled() {\n    return this.snapline && !this.snapline.disabled;\n  }\n  prepareDragging(sourceNode, clientX, clientY) {\n    const draggingGraph = this.draggingGraph;\n    const draggingModel = draggingGraph.model;\n    const draggingNode = this.options.getDragNode(sourceNode, {\n      sourceNode,\n      draggingGraph,\n      targetGraph: this.targetGraph\n    });\n    draggingNode.position(0, 0);\n    let padding = 5;\n    if (this.isSnaplineEnabled()) {\n      padding += this.snapline.options.tolerance || 0;\n    }\n    if (this.isSnaplineEnabled() || this.options.scaled) {\n      const scale = this.targetGraph.transform.getScale();\n      draggingGraph.scale(scale.sx, scale.sy);\n      padding *= Math.max(scale.sx, scale.sy);\n    } else {\n      draggingGraph.scale(1, 1);\n    }\n    this.clearDragging();\n    if (this.options.animation) {\n      this.$container.stop(true, true);\n    }\n    draggingModel.resetCells([draggingNode]);\n    const delegateView = draggingGraph.findViewByCell(draggingNode);\n    delegateView.undelegateEvents();\n    delegateView.cell.off('changed');\n    draggingGraph.fitToContent({\n      padding,\n      allowNewOrigin: 'any'\n    });\n    const bbox = delegateView.getBBox();\n    this.geometryBBox = delegateView.getBBox({\n      useCellGeometry: true\n    });\n    this.delta = this.geometryBBox.getTopLeft().diff(bbox.getTopLeft());\n    this.draggingNode = draggingNode;\n    this.draggingView = delegateView;\n    this.draggingBBox = draggingNode.getBBox();\n    this.padding = padding;\n    this.originOffset = this.updateGraphPosition(clientX, clientY);\n  }\n  updateGraphPosition(clientX, clientY) {\n    const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    const delta = this.delta;\n    const nodeBBox = this.geometryBBox;\n    const padding = this.padding || 5;\n    const offset = {\n      left: clientX - delta.x - nodeBBox.width / 2 - padding,\n      top: clientY - delta.y - nodeBBox.height / 2 - padding + scrollTop\n    };\n    if (this.draggingGraph) {\n      this.$container.offset(offset);\n    }\n    return offset;\n  }\n  updateNodePosition(x, y) {\n    const local = this.targetGraph.clientToLocal(x, y);\n    const bbox = this.draggingBBox;\n    local.x -= bbox.width / 2;\n    local.y -= bbox.height / 2;\n    this.draggingNode.position(local.x, local.y);\n    return local;\n  }\n  snap({\n    cell,\n    current,\n    options\n  }) {\n    const node = cell;\n    if (options.snapped) {\n      const bbox = this.draggingBBox;\n      node.position(bbox.x + options.tx, bbox.y + options.ty, {\n        silent: true\n      });\n      this.draggingView.translate();\n      node.position(current.x, current.y, {\n        silent: true\n      });\n      this.snapOffset = {\n        x: options.tx,\n        y: options.ty\n      };\n    } else {\n      this.snapOffset = null;\n    }\n  }\n  onDragging(evt) {\n    const draggingView = this.draggingView;\n    if (draggingView) {\n      evt.preventDefault();\n      const e = this.normalizeEvent(evt);\n      const clientX = e.clientX;\n      const clientY = e.clientY;\n      this.updateGraphPosition(clientX, clientY);\n      const local = this.updateNodePosition(clientX, clientY);\n      const embeddingMode = this.targetGraph.options.embedding.enabled;\n      const isValidArea = (embeddingMode || this.isSnaplineEnabled()) && this.isInsideValidArea({\n        x: clientX,\n        y: clientY\n      });\n      if (embeddingMode) {\n        draggingView.setEventData(e, {\n          graph: this.targetGraph,\n          candidateEmbedView: this.candidateEmbedView\n        });\n        const data = draggingView.getEventData(e);\n        if (isValidArea) {\n          draggingView.processEmbedding(e, data);\n        } else {\n          draggingView.clearEmbedding(data);\n        }\n        this.candidateEmbedView = data.candidateEmbedView;\n      }\n      // update snapline\n      if (this.isSnaplineEnabled()) {\n        if (isValidArea) {\n          this.snapline.snapOnMoving({\n            e,\n            view: draggingView,\n            x: local.x,\n            y: local.y\n          });\n        } else {\n          this.snapline.hide();\n        }\n      }\n    }\n  }\n  onDragEnd(evt) {\n    const draggingNode = this.draggingNode;\n    if (draggingNode) {\n      const e = this.normalizeEvent(evt);\n      const draggingView = this.draggingView;\n      const draggingBBox = this.draggingBBox;\n      const snapOffset = this.snapOffset;\n      let x = draggingBBox.x;\n      let y = draggingBBox.y;\n      if (snapOffset) {\n        x += snapOffset.x;\n        y += snapOffset.y;\n      }\n      draggingNode.position(x, y, {\n        silent: true\n      });\n      const ret = this.drop(draggingNode, {\n        x: e.clientX,\n        y: e.clientY\n      });\n      const callback = node => {\n        if (node) {\n          this.onDropped(draggingNode);\n          if (this.targetGraph.options.embedding.enabled && draggingView) {\n            draggingView.setEventData(e, {\n              cell: node,\n              graph: this.targetGraph,\n              candidateEmbedView: this.candidateEmbedView\n            });\n            draggingView.finalizeEmbedding(e, draggingView.getEventData(e));\n          }\n        } else {\n          this.onDropInvalid();\n        }\n        this.candidateEmbedView = null;\n        this.targetModel.stopBatch('dnd');\n      };\n      if (FunctionExt.isAsync(ret)) {\n        // stop dragging\n        this.undelegateDocumentEvents();\n        ret.then(callback); // eslint-disable-line\n      } else {\n        callback(ret);\n      }\n    }\n  }\n  clearDragging() {\n    if (this.draggingNode) {\n      this.sourceNode = null;\n      this.draggingNode.remove();\n      this.draggingNode = null;\n      this.draggingView = null;\n      this.delta = null;\n      this.padding = null;\n      this.snapOffset = null;\n      this.originOffset = null;\n      this.undelegateDocumentEvents();\n    }\n  }\n  onDropped(draggingNode) {\n    if (this.draggingNode === draggingNode) {\n      this.clearDragging();\n      this.$container.removeClass('dragging').remove();\n    }\n  }\n  onDropInvalid() {\n    const draggingNode = this.draggingNode;\n    if (draggingNode) {\n      const anim = this.options.animation;\n      if (anim) {\n        const duration = typeof anim === 'object' && anim.duration || 150;\n        const easing = typeof anim === 'object' && anim.easing || 'swing';\n        this.draggingView = null;\n        this.$container.animate(this.originOffset, duration, easing, () => this.onDropped(draggingNode));\n      } else {\n        this.onDropped(draggingNode);\n      }\n    }\n  }\n  isInsideValidArea(p) {\n    let targetRect;\n    let dndRect = null;\n    const targetGraph = this.targetGraph;\n    const targetScroller = this.targetScroller;\n    if (this.options.dndContainer) {\n      dndRect = this.getDropArea(this.options.dndContainer);\n    }\n    const isInsideDndRect = dndRect && dndRect.containsPoint(p);\n    if (targetScroller) {\n      if (targetScroller.options.autoResize) {\n        targetRect = this.getDropArea(targetScroller.container);\n      } else {\n        const outter = this.getDropArea(targetScroller.container);\n        targetRect = this.getDropArea(targetGraph.container).intersectsWithRect(outter);\n      }\n    } else {\n      targetRect = this.getDropArea(targetGraph.container);\n    }\n    return !isInsideDndRect && targetRect && targetRect.containsPoint(p);\n  }\n  getDropArea(elem) {\n    const $elem = this.$(elem);\n    const offset = $elem.offset();\n    const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    const scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft;\n    return Rectangle.create({\n      x: offset.left + parseInt($elem.css('border-left-width'), 10) - scrollLeft,\n      y: offset.top + parseInt($elem.css('border-top-width'), 10) - scrollTop,\n      width: $elem.innerWidth(),\n      height: $elem.innerHeight()\n    });\n  }\n  drop(draggingNode, pos) {\n    if (this.isInsideValidArea(pos)) {\n      const targetGraph = this.targetGraph;\n      const targetModel = targetGraph.model;\n      const local = targetGraph.clientToLocal(pos);\n      const sourceNode = this.sourceNode;\n      const droppingNode = this.options.getDropNode(draggingNode, {\n        sourceNode,\n        draggingNode,\n        targetGraph: this.targetGraph,\n        draggingGraph: this.draggingGraph\n      });\n      const bbox = droppingNode.getBBox();\n      local.x += bbox.x - bbox.width / 2;\n      local.y += bbox.y - bbox.height / 2;\n      const gridSize = this.snapOffset ? 1 : targetGraph.getGridSize();\n      droppingNode.position(Util.snapToGrid(local.x, gridSize), Util.snapToGrid(local.y, gridSize));\n      droppingNode.removeZIndex();\n      const validateNode = this.options.validateNode;\n      const ret = validateNode ? validateNode(droppingNode, {\n        sourceNode,\n        draggingNode,\n        droppingNode,\n        targetGraph,\n        draggingGraph: this.draggingGraph\n      }) : true;\n      if (typeof ret === 'boolean') {\n        if (ret) {\n          targetModel.addCell(droppingNode, {\n            stencil: this.cid\n          });\n          return droppingNode;\n        }\n        return null;\n      }\n      return FunctionExt.toDeferredBoolean(ret).then(valid => {\n        if (valid) {\n          targetModel.addCell(droppingNode, {\n            stencil: this.cid\n          });\n          return droppingNode;\n        }\n        return null;\n      });\n    }\n    return null;\n  }\n  onRemove() {\n    if (this.draggingGraph) {\n      this.draggingGraph.view.remove();\n      this.draggingGraph.dispose();\n    }\n  }\n  dispose() {\n    this.remove();\n  }\n}\n__decorate([View.dispose()], Dnd.prototype, \"dispose\", null);\n(function (Dnd) {\n  Dnd.defaults = {\n    animation: false,\n    getDragNode: sourceNode => sourceNode.clone(),\n    getDropNode: draggingNode => draggingNode.clone()\n  };\n  Dnd.documentEvents = {\n    mousemove: 'onDragging',\n    touchmove: 'onDragging',\n    mouseup: 'onDragEnd',\n    touchend: 'onDragEnd',\n    touchcancel: 'onDragEnd'\n  };\n})(Dnd || (Dnd = {}));","map":{"version":3,"names":["Util","FunctionExt","Rectangle","View","Graph","Dnd","constructor","options","Object","assign","defaults","container","document","createElement","$container","$","addClass","prefixClassName","draggingGraph","delegateGraphOptions","width","height","append","targetScroller","target","isGraph","scroller","widget","targetGraph","graph","targetModel","model","snapline","start","node","evt","e","preventDefault","startBatch","appendTo","draggingContainer","body","sourceNode","prepareDragging","clientX","clientY","local","updateNodePosition","isSnaplineEnabled","captureCursorOffset","cell","view","draggingView","x","y","draggingNode","on","snap","delegateDocumentEvents","documentEvents","data","disabled","draggingModel","getDragNode","position","padding","tolerance","scaled","scale","transform","getScale","sx","sy","Math","max","clearDragging","animation","stop","resetCells","delegateView","findViewByCell","undelegateEvents","off","fitToContent","allowNewOrigin","bbox","getBBox","geometryBBox","useCellGeometry","delta","getTopLeft","diff","draggingBBox","originOffset","updateGraphPosition","scrollTop","documentElement","nodeBBox","offset","left","top","clientToLocal","current","snapped","tx","ty","silent","translate","snapOffset","onDragging","normalizeEvent","embeddingMode","embedding","enabled","isValidArea","isInsideValidArea","setEventData","candidateEmbedView","getEventData","processEmbedding","clearEmbedding","snapOnMoving","hide","onDragEnd","ret","drop","callback","onDropped","finalizeEmbedding","onDropInvalid","stopBatch","isAsync","undelegateDocumentEvents","then","remove","removeClass","anim","duration","easing","animate","p","targetRect","dndRect","dndContainer","getDropArea","isInsideDndRect","containsPoint","autoResize","outter","intersectsWithRect","elem","$elem","scrollLeft","create","parseInt","css","innerWidth","innerHeight","pos","droppingNode","getDropNode","gridSize","getGridSize","snapToGrid","removeZIndex","validateNode","addCell","stencil","cid","toDeferredBoolean","valid","onRemove","dispose","__decorate","clone","mousemove","touchmove","mouseup","touchend","touchcancel"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/dnd/index.ts"],"sourcesContent":["import { Util } from '../../global'\nimport { FunctionExt } from '../../util'\nimport { Rectangle, Point } from '../../geometry'\nimport { Cell } from '../../model/cell'\nimport { Node } from '../../model/node'\nimport { View } from '../../view/view'\nimport { NodeView } from '../../view/node'\nimport { Graph } from '../../graph/graph'\nimport { EventArgs } from '../../graph/events'\nimport { Scroller } from '../scroller'\n\nexport class Dnd extends View {\n  public readonly options: Dnd.Options\n  public readonly draggingGraph: Graph\n  protected readonly $container: JQuery<HTMLDivElement>\n  protected sourceNode: Node | null\n  protected draggingNode: Node | null\n  protected draggingView: NodeView | null\n  protected draggingBBox: Rectangle\n  protected geometryBBox: Rectangle\n  protected candidateEmbedView: NodeView | null\n  protected delta: Point | null\n  protected padding: number | null\n  protected snapOffset: Point.PointLike | null\n  protected originOffset: null | { left: number; top: number }\n\n  protected get targetScroller() {\n    const target = this.options.target\n    return Graph.isGraph(target) ? target.scroller.widget : target\n  }\n\n  protected get targetGraph() {\n    const target = this.options.target\n    return Graph.isGraph(target) ? target : target.graph\n  }\n\n  protected get targetModel() {\n    return this.targetGraph.model\n  }\n\n  protected get snapline() {\n    return this.targetGraph.snapline.widget\n  }\n\n  constructor(options: Partial<Dnd.Options> & { target: Graph | Scroller }) {\n    super()\n\n    this.options = {\n      ...Dnd.defaults,\n      ...options,\n    } as Dnd.Options\n\n    this.container = document.createElement('div')\n    this.$container = this.$(this.container).addClass(\n      this.prefixClassName('widget-dnd'),\n    )\n\n    this.draggingGraph = new Graph({\n      ...this.options.delegateGraphOptions,\n      container: document.createElement('div'),\n      width: 1,\n      height: 1,\n    })\n\n    this.$container.append(this.draggingGraph.container)\n  }\n\n  start(node: Node, evt: JQuery.MouseDownEvent | MouseEvent) {\n    const e = evt as JQuery.MouseDownEvent\n\n    e.preventDefault()\n\n    this.targetModel.startBatch('dnd')\n    this.$container\n      .addClass('dragging')\n      .appendTo(this.options.draggingContainer || document.body)\n\n    this.sourceNode = node\n    this.prepareDragging(node, e.clientX, e.clientY)\n\n    const local = this.updateNodePosition(e.clientX, e.clientY)\n\n    if (this.isSnaplineEnabled()) {\n      this.snapline.captureCursorOffset({\n        e,\n        node,\n        cell: node,\n        view: this.draggingView!,\n        x: local.x,\n        y: local.y,\n      })\n      this.draggingNode!.on('change:position', this.snap, this)\n    }\n\n    this.delegateDocumentEvents(Dnd.documentEvents, e.data)\n  }\n\n  protected isSnaplineEnabled() {\n    return this.snapline && !this.snapline.disabled\n  }\n\n  protected prepareDragging(\n    sourceNode: Node,\n    clientX: number,\n    clientY: number,\n  ) {\n    const draggingGraph = this.draggingGraph\n    const draggingModel = draggingGraph.model\n    const draggingNode = this.options.getDragNode(sourceNode, {\n      sourceNode,\n      draggingGraph,\n      targetGraph: this.targetGraph,\n    })\n\n    draggingNode.position(0, 0)\n\n    let padding = 5\n    if (this.isSnaplineEnabled()) {\n      padding += this.snapline.options.tolerance || 0\n    }\n\n    if (this.isSnaplineEnabled() || this.options.scaled) {\n      const scale = this.targetGraph.transform.getScale()\n      draggingGraph.scale(scale.sx, scale.sy)\n      padding *= Math.max(scale.sx, scale.sy)\n    } else {\n      draggingGraph.scale(1, 1)\n    }\n\n    this.clearDragging()\n\n    if (this.options.animation) {\n      this.$container.stop(true, true)\n    }\n\n    draggingModel.resetCells([draggingNode])\n\n    const delegateView = draggingGraph.findViewByCell(draggingNode) as NodeView\n    delegateView.undelegateEvents()\n    delegateView.cell.off('changed')\n    draggingGraph.fitToContent({\n      padding,\n      allowNewOrigin: 'any',\n    })\n\n    const bbox = delegateView.getBBox()\n    this.geometryBBox = delegateView.getBBox({ useCellGeometry: true })\n    this.delta = this.geometryBBox.getTopLeft().diff(bbox.getTopLeft())\n    this.draggingNode = draggingNode\n    this.draggingView = delegateView\n    this.draggingBBox = draggingNode.getBBox()\n    this.padding = padding\n    this.originOffset = this.updateGraphPosition(clientX, clientY)\n  }\n\n  protected updateGraphPosition(clientX: number, clientY: number) {\n    const scrollTop =\n      document.body.scrollTop || document.documentElement.scrollTop\n    const delta = this.delta!\n    const nodeBBox = this.geometryBBox\n    const padding = this.padding || 5\n    const offset = {\n      left: clientX - delta.x - nodeBBox.width / 2 - padding,\n      top: clientY - delta.y - nodeBBox.height / 2 - padding + scrollTop,\n    }\n\n    if (this.draggingGraph) {\n      this.$container.offset(offset)\n    }\n\n    return offset\n  }\n\n  protected updateNodePosition(x: number, y: number) {\n    const local = this.targetGraph.clientToLocal(x, y)\n    const bbox = this.draggingBBox!\n    local.x -= bbox.width / 2\n    local.y -= bbox.height / 2\n    this.draggingNode!.position(local.x, local.y)\n    return local\n  }\n\n  protected snap({\n    cell,\n    current,\n    options,\n  }: Cell.EventArgs['change:position']) {\n    const node = cell as Node\n    if (options.snapped) {\n      const bbox = this.draggingBBox\n      node.position(bbox.x + options.tx, bbox.y + options.ty, { silent: true })\n      this.draggingView!.translate()\n      node.position(current!.x, current!.y, { silent: true })\n\n      this.snapOffset = {\n        x: options.tx,\n        y: options.ty,\n      }\n    } else {\n      this.snapOffset = null\n    }\n  }\n\n  protected onDragging(evt: JQuery.MouseMoveEvent) {\n    const draggingView = this.draggingView\n    if (draggingView) {\n      evt.preventDefault()\n      const e = this.normalizeEvent(evt)\n      const clientX = e.clientX\n      const clientY = e.clientY\n\n      this.updateGraphPosition(clientX, clientY)\n      const local = this.updateNodePosition(clientX, clientY)\n      const embeddingMode = this.targetGraph.options.embedding.enabled\n      const isValidArea =\n        (embeddingMode || this.isSnaplineEnabled()) &&\n        this.isInsideValidArea({\n          x: clientX,\n          y: clientY,\n        })\n\n      if (embeddingMode) {\n        draggingView.setEventData(e, {\n          graph: this.targetGraph,\n          candidateEmbedView: this.candidateEmbedView,\n        })\n        const data = draggingView.getEventData<any>(e)\n        if (isValidArea) {\n          draggingView.processEmbedding(e, data)\n        } else {\n          draggingView.clearEmbedding(data)\n        }\n        this.candidateEmbedView = data.candidateEmbedView\n      }\n\n      // update snapline\n      if (this.isSnaplineEnabled()) {\n        if (isValidArea) {\n          this.snapline.snapOnMoving({\n            e,\n            view: draggingView!,\n            x: local.x,\n            y: local.y,\n          } as EventArgs['node:mousemove'])\n        } else {\n          this.snapline.hide()\n        }\n      }\n    }\n  }\n\n  protected onDragEnd(evt: JQuery.MouseUpEvent) {\n    const draggingNode = this.draggingNode\n    if (draggingNode) {\n      const e = this.normalizeEvent(evt)\n      const draggingView = this.draggingView\n      const draggingBBox = this.draggingBBox\n      const snapOffset = this.snapOffset\n      let x = draggingBBox.x\n      let y = draggingBBox.y\n\n      if (snapOffset) {\n        x += snapOffset.x\n        y += snapOffset.y\n      }\n\n      draggingNode.position(x, y, { silent: true })\n\n      const ret = this.drop(draggingNode, { x: e.clientX, y: e.clientY })\n      const callback = (node: null | Node) => {\n        if (node) {\n          this.onDropped(draggingNode)\n          if (this.targetGraph.options.embedding.enabled && draggingView) {\n            draggingView.setEventData(e, {\n              cell: node,\n              graph: this.targetGraph,\n              candidateEmbedView: this.candidateEmbedView,\n            })\n            draggingView.finalizeEmbedding(e, draggingView.getEventData<any>(e))\n          }\n        } else {\n          this.onDropInvalid()\n        }\n\n        this.candidateEmbedView = null\n        this.targetModel.stopBatch('dnd')\n      }\n\n      if (FunctionExt.isAsync(ret)) {\n        // stop dragging\n        this.undelegateDocumentEvents()\n        ret.then(callback) // eslint-disable-line\n      } else {\n        callback(ret)\n      }\n    }\n  }\n\n  protected clearDragging() {\n    if (this.draggingNode) {\n      this.sourceNode = null\n      this.draggingNode.remove()\n      this.draggingNode = null\n      this.draggingView = null\n      this.delta = null\n      this.padding = null\n      this.snapOffset = null\n      this.originOffset = null\n      this.undelegateDocumentEvents()\n    }\n  }\n\n  protected onDropped(draggingNode: Node) {\n    if (this.draggingNode === draggingNode) {\n      this.clearDragging()\n      this.$container.removeClass('dragging').remove()\n    }\n  }\n\n  protected onDropInvalid() {\n    const draggingNode = this.draggingNode\n    if (draggingNode) {\n      const anim = this.options.animation\n      if (anim) {\n        const duration = (typeof anim === 'object' && anim.duration) || 150\n        const easing = (typeof anim === 'object' && anim.easing) || 'swing'\n\n        this.draggingView = null\n\n        this.$container.animate(this.originOffset!, duration, easing, () =>\n          this.onDropped(draggingNode),\n        )\n      } else {\n        this.onDropped(draggingNode)\n      }\n    }\n  }\n\n  protected isInsideValidArea(p: Point.PointLike) {\n    let targetRect: Rectangle\n    let dndRect: Rectangle | null = null\n    const targetGraph = this.targetGraph\n    const targetScroller = this.targetScroller\n\n    if (this.options.dndContainer) {\n      dndRect = this.getDropArea(this.options.dndContainer)\n    }\n    const isInsideDndRect = dndRect && dndRect.containsPoint(p)\n\n    if (targetScroller) {\n      if (targetScroller.options.autoResize) {\n        targetRect = this.getDropArea(targetScroller.container)\n      } else {\n        const outter = this.getDropArea(targetScroller.container)\n        targetRect = this.getDropArea(targetGraph.container).intersectsWithRect(\n          outter,\n        )!\n      }\n    } else {\n      targetRect = this.getDropArea(targetGraph.container)\n    }\n\n    return !isInsideDndRect && targetRect && targetRect.containsPoint(p)\n  }\n\n  protected getDropArea(elem: Element) {\n    const $elem = this.$(elem)\n    const offset = $elem.offset()!\n    const scrollTop =\n      document.body.scrollTop || document.documentElement.scrollTop\n    const scrollLeft =\n      document.body.scrollLeft || document.documentElement.scrollLeft\n\n    return Rectangle.create({\n      x:\n        offset.left + parseInt($elem.css('border-left-width'), 10) - scrollLeft,\n      y: offset.top + parseInt($elem.css('border-top-width'), 10) - scrollTop,\n      width: $elem.innerWidth()!,\n      height: $elem.innerHeight()!,\n    })\n  }\n\n  protected drop(draggingNode: Node, pos: Point.PointLike) {\n    if (this.isInsideValidArea(pos)) {\n      const targetGraph = this.targetGraph\n      const targetModel = targetGraph.model\n      const local = targetGraph.clientToLocal(pos)\n      const sourceNode = this.sourceNode!\n      const droppingNode = this.options.getDropNode(draggingNode, {\n        sourceNode,\n        draggingNode,\n        targetGraph: this.targetGraph,\n        draggingGraph: this.draggingGraph,\n      })\n      const bbox = droppingNode.getBBox()\n      local.x += bbox.x - bbox.width / 2\n      local.y += bbox.y - bbox.height / 2\n      const gridSize = this.snapOffset ? 1 : targetGraph.getGridSize()\n\n      droppingNode.position(\n        Util.snapToGrid(local.x, gridSize),\n        Util.snapToGrid(local.y, gridSize),\n      )\n\n      droppingNode.removeZIndex()\n\n      const validateNode = this.options.validateNode\n      const ret = validateNode\n        ? validateNode(droppingNode, {\n            sourceNode,\n            draggingNode,\n            droppingNode,\n            targetGraph,\n            draggingGraph: this.draggingGraph,\n          })\n        : true\n\n      if (typeof ret === 'boolean') {\n        if (ret) {\n          targetModel.addCell(droppingNode, { stencil: this.cid })\n          return droppingNode\n        }\n        return null\n      }\n\n      return FunctionExt.toDeferredBoolean(ret).then((valid) => {\n        if (valid) {\n          targetModel.addCell(droppingNode, { stencil: this.cid })\n          return droppingNode\n        }\n        return null\n      })\n    }\n\n    return null\n  }\n\n  protected onRemove() {\n    if (this.draggingGraph) {\n      this.draggingGraph.view.remove()\n      this.draggingGraph.dispose()\n    }\n  }\n\n  @View.dispose()\n  dispose() {\n    this.remove()\n  }\n}\n\nexport namespace Dnd {\n  export interface Options {\n    target: Graph | Scroller\n    /**\n     * Should scale the dragging node or not.\n     */\n    scaled?: boolean\n    delegateGraphOptions?: Graph.Options\n    animation?:\n      | boolean\n      | {\n          duration?: number\n          easing?: string\n        }\n    draggingContainer?: HTMLElement\n    /**\n     * dnd tool box container.\n     */\n    dndContainer?: HTMLElement\n    getDragNode: (sourceNode: Node, options: GetDragNodeOptions) => Node\n    getDropNode: (draggingNode: Node, options: GetDropNodeOptions) => Node\n    validateNode?: (\n      droppingNode: Node,\n      options: ValidateNodeOptions,\n    ) => boolean | Promise<boolean>\n  }\n\n  export interface GetDragNodeOptions {\n    sourceNode: Node\n    targetGraph: Graph\n    draggingGraph: Graph\n  }\n\n  export interface GetDropNodeOptions extends GetDragNodeOptions {\n    draggingNode: Node\n  }\n\n  export interface ValidateNodeOptions extends GetDropNodeOptions {\n    droppingNode: Node\n  }\n\n  export const defaults: Partial<Options> = {\n    animation: false,\n    getDragNode: (sourceNode) => sourceNode.clone(),\n    getDropNode: (draggingNode) => draggingNode.clone(),\n  }\n\n  export const documentEvents = {\n    mousemove: 'onDragging',\n    touchmove: 'onDragging',\n    mouseup: 'onDragEnd',\n    touchend: 'onDragEnd',\n    touchcancel: 'onDragEnd',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}