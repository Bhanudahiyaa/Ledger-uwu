{"ast":null,"code":"import { Registry } from '../registry';\nimport * as patterns from './main';\nexport var Background;\n(function (Background) {\n  Background.presets = Object.assign({}, patterns);\n  Background.presets['flip-x'] = patterns.flipX;\n  Background.presets['flip-y'] = patterns.flipY;\n  Background.presets['flip-xy'] = patterns.flipXY;\n  Background.registry = Registry.create({\n    type: 'background pattern'\n  });\n  Background.registry.register(Background.presets, true);\n})(Background || (Background = {}));","map":{"version":3,"names":["Registry","patterns","Background","presets","Object","assign","flipX","flipY","flipXY","registry","create","type","register"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/registry/background/index.ts"],"sourcesContent":["import { ValuesType } from 'utility-types'\nimport { KeyValue } from '../../types'\nimport { Property } from '../../types/csstype'\nimport { Registry } from '../registry'\nimport * as patterns from './main'\n\nexport namespace Background {\n  export interface Options {\n    color?: string\n    image?: string\n    position?: Property.BackgroundPosition<{\n      x: number\n      y: number\n    }>\n    size?: Property.BackgroundSize<{\n      width: number\n      height: number\n    }>\n    repeat?: Property.BackgroundRepeat\n    opacity?: number\n  }\n\n  export interface CommonOptions extends Omit<Options, 'repeat'> {\n    quality?: number\n  }\n\n  export type Definition<T extends CommonOptions = CommonOptions> = (\n    img: HTMLImageElement,\n    options: T,\n  ) => HTMLCanvasElement\n}\n\nexport namespace Background {\n  export type Presets = typeof Background['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: Parameters<Presets[K]>[1] & {\n      repeat: K\n    }\n  }\n\n  export type NativeNames = keyof Presets\n\n  export type NativeItem = ValuesType<OptionsMap>\n\n  export type ManaualItem = CommonOptions &\n    KeyValue & {\n      repeat: string\n    }\n}\n\nexport namespace Background {\n  export const presets: { [name: string]: Definition } = { ...patterns }\n\n  presets['flip-x'] = patterns.flipX\n  presets['flip-y'] = patterns.flipY\n  presets['flip-xy'] = patterns.flipXY\n\n  export const registry = Registry.create<Definition, Presets>({\n    type: 'background pattern',\n  })\n\n  registry.register(presets, true)\n}\n"],"mappings":"AAGA,SAASA,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,QAAQ,MAAM,QAAQ;AA+ClC,OAAM,IAAWC,UAAU;AAA3B,WAAiBA,UAAU;EACZA,UAAA,CAAAC,OAAO,GAAAC,MAAA,CAAAC,MAAA,KAAwCJ,QAAQ,CAAE;EAEtEC,UAAA,CAAAC,OAAO,CAAC,QAAQ,CAAC,GAAGF,QAAQ,CAACK,KAAK;EAClCJ,UAAA,CAAAC,OAAO,CAAC,QAAQ,CAAC,GAAGF,QAAQ,CAACM,KAAK;EAClCL,UAAA,CAAAC,OAAO,CAAC,SAAS,CAAC,GAAGF,QAAQ,CAACO,MAAM;EAEvBN,UAAA,CAAAO,QAAQ,GAAGT,QAAQ,CAACU,MAAM,CAAsB;IAC3DC,IAAI,EAAE;GACP,CAAC;EAEFT,UAAA,CAAAO,QAAQ,CAACG,QAAQ,CAACV,UAAA,CAAAC,OAAO,EAAE,IAAI,CAAC;AAClC,CAAC,EAZgBD,UAAU,KAAVA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}