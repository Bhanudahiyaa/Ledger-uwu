{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { gl } from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { filterMap, formatMap, wrapModeMap } from './constants';\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\n\nvar WebGPUTexture2D = /*#__PURE__*/function () {\n  function WebGPUTexture2D(engine, options) {\n    _classCallCheck(this, WebGPUTexture2D);\n    this.engine = engine;\n    this.options = options;\n    this.texture = void 0;\n    this.sampler = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.createTexture();\n  }\n  _createClass(WebGPUTexture2D, [{\n    key: \"get\",\n    value: function get() {\n      return {\n        texture: this.texture,\n        sampler: this.sampler\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update() {// TODO\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n        height = _ref.height;\n\n      // TODO: it seems that Texture doesn't support `resize`\n      if (width !== this.width || height !== this.height) {\n        this.destroy();\n        this.createTexture();\n      }\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.texture) {\n        this.texture.destroy();\n      }\n    }\n  }, {\n    key: \"createTexture\",\n    value: function createTexture() {\n      var _this$options = this.options,\n        data = _this$options.data,\n        _this$options$type = _this$options.type,\n        type = _this$options$type === void 0 ? gl.UNSIGNED_BYTE : _this$options$type,\n        width = _this$options.width,\n        height = _this$options.height,\n        _this$options$flipY = _this$options.flipY,\n        flipY = _this$options$flipY === void 0 ? false : _this$options$flipY,\n        _this$options$format = _this$options.format,\n        format = _this$options$format === void 0 ? gl.RGBA : _this$options$format,\n        _this$options$mipmap = _this$options.mipmap,\n        mipmap = _this$options$mipmap === void 0 ? false : _this$options$mipmap,\n        _this$options$wrapS = _this$options.wrapS,\n        wrapS = _this$options$wrapS === void 0 ? gl.CLAMP_TO_EDGE : _this$options$wrapS,\n        _this$options$wrapT = _this$options.wrapT,\n        wrapT = _this$options$wrapT === void 0 ? gl.CLAMP_TO_EDGE : _this$options$wrapT,\n        _this$options$aniso = _this$options.aniso,\n        aniso = _this$options$aniso === void 0 ? 0 : _this$options$aniso,\n        _this$options$alignme = _this$options.alignment,\n        alignment = _this$options$alignme === void 0 ? 1 : _this$options$alignme,\n        _this$options$premult = _this$options.premultiplyAlpha,\n        premultiplyAlpha = _this$options$premult === void 0 ? false : _this$options$premult,\n        _this$options$mag = _this$options.mag,\n        mag = _this$options$mag === void 0 ? gl.NEAREST : _this$options$mag,\n        _this$options$min = _this$options.min,\n        min = _this$options$min === void 0 ? gl.NEAREST : _this$options$min,\n        _this$options$colorSp = _this$options.colorSpace,\n        colorSpace = _this$options$colorSp === void 0 ? gl.BROWSER_DEFAULT_WEBGL : _this$options$colorSp,\n        usage = _this$options.usage;\n      this.width = width;\n      this.height = height;\n      this.texture = this.engine.device.createTexture({\n        size: [width, height, 1],\n        // TODO: arrayLayerCount is deprecated: use size.depth\n        // arrayLayerCount: 1,\n        mipLevelCount: 1,\n        // TODO: https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\n        sampleCount: 1,\n        dimension: WebGPUConstants.TextureDimension.E2d,\n        format: formatMap[format],\n        // could throw texture binding usage mismatch\n        usage: usage || WebGPUConstants.TextureUsage.Sampled | WebGPUConstants.TextureUsage.CopyDst\n      });\n      if (!usage || usage & WebGPUConstants.TextureUsage.Sampled) {\n        this.sampler = this.engine.device.createSampler({\n          addressModeU: wrapModeMap[wrapS],\n          addressModeV: wrapModeMap[wrapT],\n          addressModeW: wrapModeMap[wrapS],\n          // TODO: same as addressModeU\n          magFilter: filterMap[mag],\n          minFilter: filterMap[min],\n          maxAnisotropy: aniso // @see https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\n        });\n      }\n    }\n  }]);\n  return WebGPUTexture2D;\n}();\nexport { WebGPUTexture2D as default };","map":{"version":3,"names":["gl","WebGPUConstants","filterMap","formatMap","wrapModeMap","WebGPUTexture2D","engine","options","_classCallCheck","texture","sampler","width","height","createTexture","_ref","destroy","_this$options","data","_this$options$type","type","UNSIGNED_BYTE","_this$options$flipY","flipY","_this$options$format","format","RGBA","_this$options$mipmap","mipmap","_this$options$wrapS","wrapS","CLAMP_TO_EDGE","_this$options$wrapT","wrapT","_this$options$aniso","aniso","_this$options$alignme","alignment","_this$options$premult","premultiplyAlpha","_this$options$mag","mag","NEAREST","_this$options$min","min","_this$options$colorSp","colorSpace","BROWSER_DEFAULT_WEBGL","usage","device","size","mipLevelCount","sampleCount","dimension","TextureDimension","E2d","TextureUsage","Sampled","CopyDst","createSampler","addressModeU","addressModeV","addressModeW","magFilter","minFilter","maxAnisotropy"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-engine/src/webgpu/WebGPUTexture2D.ts"],"sourcesContent":["import {\n  gl,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n} from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { WebGPUEngine } from '.';\nimport { filterMap, formatMap, wrapModeMap } from './constants';\n\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\nexport default class WebGPUTexture2D implements ITexture2D {\n  private texture: GPUTexture;\n  private sampler: GPUSampler;\n  private width: number;\n  private height: number;\n\n  constructor(\n    private engine: WebGPUEngine,\n    private options: ITexture2DInitializationOptions,\n  ) {\n    this.createTexture();\n  }\n\n  public get() {\n    return {\n      texture: this.texture,\n      sampler: this.sampler,\n    };\n  }\n  public update() {\n    // TODO\n  }\n\n  public resize({ width, height }: { width: number; height: number }): void {\n    // TODO: it seems that Texture doesn't support `resize`\n    if (width !== this.width || height !== this.height) {\n      this.destroy();\n      this.createTexture();\n    }\n    this.width = width;\n    this.height = height;\n  }\n\n  public destroy() {\n    if (this.texture) {\n      this.texture.destroy();\n    }\n  }\n\n  private createTexture() {\n    const {\n      data,\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      mipmap = false,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso = 0,\n      alignment = 1,\n      premultiplyAlpha = false,\n      mag = gl.NEAREST,\n      min = gl.NEAREST,\n      colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n      usage,\n    } = this.options;\n    this.width = width;\n    this.height = height;\n\n    this.texture = this.engine.device.createTexture({\n      size: [width, height, 1],\n      // TODO: arrayLayerCount is deprecated: use size.depth\n      // arrayLayerCount: 1,\n      mipLevelCount: 1, // TODO: https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\n      sampleCount: 1,\n      dimension: WebGPUConstants.TextureDimension.E2d,\n      format: formatMap[format],\n      // could throw texture binding usage mismatch\n      usage:\n        usage ||\n        WebGPUConstants.TextureUsage.Sampled |\n          WebGPUConstants.TextureUsage.CopyDst,\n    });\n\n    if (!usage || usage & WebGPUConstants.TextureUsage.Sampled) {\n      this.sampler = this.engine.device.createSampler({\n        addressModeU: wrapModeMap[wrapS],\n        addressModeV: wrapModeMap[wrapT],\n        addressModeW: wrapModeMap[wrapS], // TODO: same as addressModeU\n        magFilter: filterMap[mag],\n        minFilter: filterMap[min],\n        maxAnisotropy: aniso, // @see https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\n      });\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}