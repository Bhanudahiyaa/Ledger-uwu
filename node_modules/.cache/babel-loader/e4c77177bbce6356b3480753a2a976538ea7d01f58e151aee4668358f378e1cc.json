{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsInitGroup;\n(function (NsInitGroup) {\n  /** Command: 用于注册named factory */\n  NsInitGroup.command = XFlowGroupCommands.INIT_GROUP;\n  /** hookName */\n  NsInitGroup.hookKey = 'initGroup';\n})(NsInitGroup || (NsInitGroup = {}));\nlet InitGroupCommand = class InitGroupCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.initGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graphData,\n          commandService\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        const {\n          nodes\n        } = graphData;\n        const groupMap = {};\n        nodes.forEach(node => {\n          const {\n            id,\n            group\n          } = node;\n          if (group) {\n            if (groupMap[group]) {\n              groupMap[group].push(id);\n            } else {\n              groupMap[group] = [id];\n            }\n          }\n        });\n        Object.keys(groupMap).forEach(groupId => __awaiter(this, void 0, void 0, function* () {\n          const groupNode = graph.getCellById(groupId);\n          const groupData = groupNode.getData();\n          const childrenIds = groupMap[groupId] || [];\n          // 更新props\n          groupNode.prop('isGroup', true);\n          groupNode.setData(Object.assign(Object.assign({}, groupData), {\n            isGroup: true,\n            groupChildren: childrenIds\n          }));\n          childrenIds.forEach(childId => {\n            const child = graph.getCellById(childId);\n            groupNode.embed(child);\n          });\n          // Group置于底层\n          groupNode.toBack();\n          // collapse\n          const {\n            isCollapsed,\n            groupCollapsedSize\n          } = groupData;\n          if (isCollapsed) {\n            const collapsedSize = handlerArgs.collapsedSize || groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n            yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n              collapsedSize,\n              isCollapsed: true,\n              nodeId: groupNode.id\n            });\n          }\n        }));\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], InitGroupCommand.prototype, \"contextProvider\", void 0);\nInitGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsInitGroup.command.id\n  }\n})\n/** 创建节点命令 */], InitGroupCommand);\nexport { InitGroupCommand };","map":{"version":3,"names":["inject","injectable","ICommandHandler","ICommandContextProvider","XFlowGroupCommands","XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE","NsInitGroup","command","INIT_GROUP","hookKey","InitGroupCommand","constructor","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","result","initGroup","call","handlerArgs","graphData","commandService","graph","getX6Graph","nodes","groupMap","forEach","node","id","group","push","Object","keys","groupId","groupNode","getCellById","groupData","getData","childrenIds","prop","setData","assign","isGroup","groupChildren","childId","child","embed","toBack","isCollapsed","groupCollapsedSize","collapsedSize","executeCommand","COLLAPSE_GROUP","nodeId","setResult","undo","isUndoable","redo","__decorate","token","named"],"sources":["../../../src/command-contributions/group/group-init.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}