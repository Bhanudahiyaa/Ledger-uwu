{"ast":null,"code":"import { Node, Markup, ObjectExt } from '@antv/x6';\nexport class ReactShape extends Node {\n  get component() {\n    return this.getComponent();\n  }\n  set component(val) {\n    this.setComponent(val);\n  }\n  getComponent() {\n    return this.store.get('component');\n  }\n  setComponent(component, options = {}) {\n    if (component == null) {\n      this.removeComponent(options);\n    } else {\n      this.store.set('component', component, options);\n    }\n    return this;\n  }\n  removeComponent(options = {}) {\n    this.store.remove('component', options);\n    return this;\n  }\n}\n(function (ReactShape) {\n  function getMarkup(simple, useForeignObject, primer = 'rect') {\n    const markup = [];\n    const content = useForeignObject ? Markup.getForeignObjectMarkup() : {\n      tagName: 'g',\n      selector: 'content'\n    };\n    if (simple) {\n      markup.push(content);\n    } else {\n      markup.push(...[{\n        tagName: primer,\n        selector: 'body'\n      }, content, {\n        tagName: 'text',\n        selector: 'label'\n      }]);\n    }\n    return markup;\n  }\n  ReactShape.config({\n    view: 'react-shape-view',\n    markup: getMarkup(false, true),\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      label: {\n        fontSize: 14,\n        fill: '#333',\n        refX: '50%',\n        refY: '50%',\n        textAnchor: 'middle',\n        textVerticalAnchor: 'middle'\n      }\n    },\n    propHooks(metadata) {\n      if (metadata.markup == null) {\n        const primer = metadata.primer;\n        const useForeignObject = metadata.useForeignObject !== false;\n        if (primer && primer !== 'rect') {\n          metadata.markup = getMarkup(false, useForeignObject, primer);\n          let attrs = {};\n          if (primer === 'circle') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refR: '50%'\n            };\n          } else if (primer === 'ellipse') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refRx: '50%',\n              refRy: '50%'\n            };\n          }\n          metadata.attrs = ObjectExt.merge({}, {\n            body: Object.assign({\n              refWidth: null,\n              refHeight: null\n            }, attrs)\n          }, metadata.attrs || {});\n        } else {\n          if (metadata.simple) {\n            metadata.markup = getMarkup(true, useForeignObject);\n            metadata.attrs = ObjectExt.merge({}, {\n              body: null,\n              label: null\n            }, metadata.attrs || {});\n          }\n        }\n      }\n      return metadata;\n    }\n  });\n  Node.registry.register('react-shape', ReactShape, true);\n})(ReactShape || (ReactShape = {}));","map":{"version":3,"names":["Node","Markup","ObjectExt","ReactShape","component","getComponent","val","setComponent","store","get","options","removeComponent","set","remove","getMarkup","simple","useForeignObject","primer","markup","content","getForeignObjectMarkup","tagName","selector","push","config","view","attrs","body","fill","stroke","refWidth","refHeight","fo","label","fontSize","refX","refY","textAnchor","textVerticalAnchor","propHooks","metadata","refCx","refCy","refR","refRx","refRy","merge","Object","assign","registry","register"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6-react-shape/src/node.ts"],"sourcesContent":["import { Node, Markup, ObjectExt } from '@antv/x6'\nimport { Definition } from './registry'\n\nexport class ReactShape<\n  Properties extends ReactShape.Properties = ReactShape.Properties,\n> extends Node<Properties> {\n  get component() {\n    return this.getComponent()\n  }\n\n  set component(val: ReactShape.Properties['component']) {\n    this.setComponent(val)\n  }\n\n  getComponent(): ReactShape.Properties['component'] {\n    return this.store.get('component')\n  }\n\n  setComponent(\n    component: ReactShape.Properties['component'],\n    options: Node.SetOptions = {},\n  ) {\n    if (component == null) {\n      this.removeComponent(options)\n    } else {\n      this.store.set('component', component, options)\n    }\n    return this\n  }\n\n  removeComponent(options: Node.SetOptions = {}) {\n    this.store.remove('component', options)\n    return this\n  }\n}\n\nexport namespace ReactShape {\n  export type Primer =\n    | 'rect'\n    | 'circle'\n    | 'path'\n    | 'ellipse'\n    | 'polygon'\n    | 'polyline'\n\n  export interface Properties extends Node.Properties {\n    simple?: boolean\n    primer?: Primer\n    useForeignObject?: boolean\n    component?: Definition | string\n  }\n}\n\nexport namespace ReactShape {\n  function getMarkup(\n    simple: boolean,\n    useForeignObject: boolean,\n    primer: Primer = 'rect',\n  ) {\n    const markup: Markup.JSONMarkup[] = []\n    const content = useForeignObject\n      ? Markup.getForeignObjectMarkup()\n      : {\n          tagName: 'g',\n          selector: 'content',\n        }\n\n    if (simple) {\n      markup.push(content)\n    } else {\n      markup.push(\n        ...[\n          {\n            tagName: primer,\n            selector: 'body',\n          },\n          content,\n          {\n            tagName: 'text',\n            selector: 'label',\n          },\n        ],\n      )\n    }\n\n    return markup\n  }\n\n  ReactShape.config<Properties>({\n    view: 'react-shape-view',\n    markup: getMarkup(false, true),\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n      label: {\n        fontSize: 14,\n        fill: '#333',\n        refX: '50%',\n        refY: '50%',\n        textAnchor: 'middle',\n        textVerticalAnchor: 'middle',\n      },\n    },\n    propHooks(metadata: Properties) {\n      if (metadata.markup == null) {\n        const primer = metadata.primer\n        const useForeignObject = metadata.useForeignObject !== false\n\n        if (primer && primer !== 'rect') {\n          metadata.markup = getMarkup(false, useForeignObject, primer)\n          let attrs = {}\n          if (primer === 'circle') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refR: '50%',\n            }\n          } else if (primer === 'ellipse') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refRx: '50%',\n              refRy: '50%',\n            }\n          }\n          metadata.attrs = ObjectExt.merge(\n            {},\n            {\n              body: {\n                refWidth: null,\n                refHeight: null,\n                ...attrs,\n              },\n            },\n            metadata.attrs || {},\n          )\n        } else {\n          if (metadata.simple) {\n            metadata.markup = getMarkup(true, useForeignObject)\n            metadata.attrs = ObjectExt.merge(\n              {},\n              {\n                body: null,\n                label: null,\n              },\n              metadata.attrs || {},\n            )\n          }\n        }\n      }\n      return metadata\n    },\n  })\n\n  Node.registry.register('react-shape', ReactShape, true)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}