{"ast":null,"code":"import { Dictionary } from '../common';\nimport { Dom } from '../util';\nexport class Cache {\n  constructor(view) {\n    this.view = view;\n    this.clean();\n  }\n  clean() {\n    if (this.elemCache) {\n      this.elemCache.dispose();\n    }\n    this.elemCache = new Dictionary();\n    this.pathCache = {};\n  }\n  get(elem) {\n    const cache = this.elemCache;\n    if (!cache.has(elem)) {\n      this.elemCache.set(elem, {});\n    }\n    return this.elemCache.get(elem);\n  }\n  getData(elem) {\n    const meta = this.get(elem);\n    if (!meta.data) {\n      meta.data = {};\n    }\n    return meta.data;\n  }\n  getMatrix(elem) {\n    const meta = this.get(elem);\n    if (meta.matrix == null) {\n      const target = this.view.rotatableNode || this.view.container;\n      meta.matrix = Dom.getTransformToElement(elem, target);\n    }\n    return Dom.createSVGMatrix(meta.matrix);\n  }\n  getShape(elem) {\n    const meta = this.get(elem);\n    if (meta.shape == null) {\n      meta.shape = Dom.toGeometryShape(elem);\n    }\n    return meta.shape.clone();\n  }\n  getBoundingRect(elem) {\n    const meta = this.get(elem);\n    if (meta.boundingRect == null) {\n      meta.boundingRect = Dom.getBBox(elem);\n    }\n    return meta.boundingRect.clone();\n  }\n}","map":{"version":3,"names":["Dictionary","Dom","Cache","constructor","view","clean","elemCache","dispose","pathCache","get","elem","cache","has","set","getData","meta","data","getMatrix","matrix","target","rotatableNode","container","getTransformToElement","createSVGMatrix","getShape","shape","toGeometryShape","clone","getBoundingRect","boundingRect","getBBox"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/view/cache.ts"],"sourcesContent":["import { Dictionary } from '../common'\nimport { JSONObject, Dom } from '../util'\nimport { Line, Rectangle, Ellipse, Polyline, Path, Segment } from '../geometry'\nimport { CellView } from './cell'\n\nexport class Cache {\n  protected elemCache: Dictionary<Element, Cache.Item>\n\n  public pathCache: {\n    data?: string\n    length?: number\n    segmentSubdivisions?: Segment[][]\n  }\n\n  constructor(protected view: CellView) {\n    this.clean()\n  }\n\n  clean() {\n    if (this.elemCache) {\n      this.elemCache.dispose()\n    }\n    this.elemCache = new Dictionary()\n    this.pathCache = {}\n  }\n\n  get(elem: Element) {\n    const cache = this.elemCache\n    if (!cache.has(elem)) {\n      this.elemCache.set(elem, {})\n    }\n    return this.elemCache.get(elem)!\n  }\n\n  getData(elem: Element) {\n    const meta = this.get(elem)\n    if (!meta.data) {\n      meta.data = {}\n    }\n    return meta.data\n  }\n\n  getMatrix(elem: Element) {\n    const meta = this.get(elem)\n    if (meta.matrix == null) {\n      const target = this.view.rotatableNode || this.view.container\n      meta.matrix = Dom.getTransformToElement(elem as any, target as SVGElement)\n    }\n\n    return Dom.createSVGMatrix(meta.matrix)\n  }\n\n  getShape(elem: Element) {\n    const meta = this.get(elem)\n    if (meta.shape == null) {\n      meta.shape = Dom.toGeometryShape(elem as SVGElement)\n    }\n    return meta.shape.clone()\n  }\n\n  getBoundingRect(elem: Element) {\n    const meta = this.get(elem)\n    if (meta.boundingRect == null) {\n      meta.boundingRect = Dom.getBBox(elem as SVGElement)\n    }\n    return meta.boundingRect.clone()\n  }\n}\n\nexport namespace Cache {\n  export interface Item {\n    data?: JSONObject\n    matrix?: DOMMatrix\n    boundingRect?: Rectangle\n    shape?: Rectangle | Ellipse | Polyline | Path | Line\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,WAAW;AACtC,SAAqBC,GAAG,QAAQ,SAAS;AAIzC,OAAM,MAAOC,KAAK;EAShBC,YAAsBC,IAAc;IAAd,KAAAA,IAAI,GAAJA,IAAI;IACxB,IAAI,CAACC,KAAK,EAAE;EACd;EAEAA,KAAKA,CAAA;IACH,IAAI,IAAI,CAACC,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACC,OAAO,EAAE;;IAE1B,IAAI,CAACD,SAAS,GAAG,IAAIN,UAAU,EAAE;IACjC,IAAI,CAACQ,SAAS,GAAG,EAAE;EACrB;EAEAC,GAAGA,CAACC,IAAa;IACf,MAAMC,KAAK,GAAG,IAAI,CAACL,SAAS;IAC5B,IAAI,CAACK,KAAK,CAACC,GAAG,CAACF,IAAI,CAAC,EAAE;MACpB,IAAI,CAACJ,SAAS,CAACO,GAAG,CAACH,IAAI,EAAE,EAAE,CAAC;;IAE9B,OAAO,IAAI,CAACJ,SAAS,CAACG,GAAG,CAACC,IAAI,CAAE;EAClC;EAEAI,OAAOA,CAACJ,IAAa;IACnB,MAAMK,IAAI,GAAG,IAAI,CAACN,GAAG,CAACC,IAAI,CAAC;IAC3B,IAAI,CAACK,IAAI,CAACC,IAAI,EAAE;MACdD,IAAI,CAACC,IAAI,GAAG,EAAE;;IAEhB,OAAOD,IAAI,CAACC,IAAI;EAClB;EAEAC,SAASA,CAACP,IAAa;IACrB,MAAMK,IAAI,GAAG,IAAI,CAACN,GAAG,CAACC,IAAI,CAAC;IAC3B,IAAIK,IAAI,CAACG,MAAM,IAAI,IAAI,EAAE;MACvB,MAAMC,MAAM,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,IAAI,IAAI,CAAChB,IAAI,CAACiB,SAAS;MAC7DN,IAAI,CAACG,MAAM,GAAGjB,GAAG,CAACqB,qBAAqB,CAACZ,IAAW,EAAES,MAAoB,CAAC;;IAG5E,OAAOlB,GAAG,CAACsB,eAAe,CAACR,IAAI,CAACG,MAAM,CAAC;EACzC;EAEAM,QAAQA,CAACd,IAAa;IACpB,MAAMK,IAAI,GAAG,IAAI,CAACN,GAAG,CAACC,IAAI,CAAC;IAC3B,IAAIK,IAAI,CAACU,KAAK,IAAI,IAAI,EAAE;MACtBV,IAAI,CAACU,KAAK,GAAGxB,GAAG,CAACyB,eAAe,CAAChB,IAAkB,CAAC;;IAEtD,OAAOK,IAAI,CAACU,KAAK,CAACE,KAAK,EAAE;EAC3B;EAEAC,eAAeA,CAAClB,IAAa;IAC3B,MAAMK,IAAI,GAAG,IAAI,CAACN,GAAG,CAACC,IAAI,CAAC;IAC3B,IAAIK,IAAI,CAACc,YAAY,IAAI,IAAI,EAAE;MAC7Bd,IAAI,CAACc,YAAY,GAAG5B,GAAG,CAAC6B,OAAO,CAACpB,IAAkB,CAAC;;IAErD,OAAOK,IAAI,CAACc,YAAY,CAACF,KAAK,EAAE;EAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}