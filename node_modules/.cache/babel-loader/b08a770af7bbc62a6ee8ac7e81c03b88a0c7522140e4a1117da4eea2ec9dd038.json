{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { isNaN, isArray, isFunction, isNumber, isString, floydWarshall, getAdjMatrix, isObject } from \"../../util\";\nimport { Base } from \"../base\";\nimport MDS from \"./mds\";\nimport RadialNonoverlapForce from \"./radialNonoverlapForce\";\nfunction getWeightMatrix(M) {\n  const rows = M.length;\n  const cols = M[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      if (M[i][j] !== 0) {\n        row.push(1 / (M[i][j] * M[i][j]));\n      } else {\n        row.push(0);\n      }\n    }\n    result.push(row);\n  }\n  return result;\n}\nfunction getIndexById(array, id) {\n  let index = -1;\n  array.forEach((a, i) => {\n    if (a.id === id) {\n      index = i;\n    }\n  });\n  return index;\n}\nfunction getEDistance(p1, p2) {\n  return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\nexport class RadialLayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n    this.maxIteration = 1000;\n    /** 中心点，默认为数据中第一个点 */\n    this.focusNode = null;\n    /** 每一圈半径 */\n    this.unitRadius = null;\n    /** 默认边长度 */\n    this.linkDistance = 50;\n    /** 是否防止重叠 */\n    this.preventOverlap = false;\n    /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n    this.strictRadial = true;\n    /** 防止重叠步骤的最大迭代次数 */\n    this.maxPreventOverlapIteration = 200;\n    this.sortStrength = 10;\n    this.nodes = [];\n    this.edges = [];\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      focusNode: null,\n      unitRadius: null,\n      linkDistance: 50,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      strictRadial: true,\n      maxPreventOverlapIteration: 200,\n      sortBy: undefined,\n      sortStrength: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges || [];\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    const center = self.center;\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    const linkDistance = self.linkDistance;\n    // layout\n    let focusNode = null;\n    if (isString(self.focusNode)) {\n      let found = false;\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === self.focusNode) {\n          focusNode = nodes[i];\n          self.focusNode = focusNode;\n          found = true;\n          i = nodes.length;\n        }\n      }\n      if (!found) {\n        focusNode = null;\n      }\n    } else {\n      focusNode = self.focusNode;\n    }\n    // default focus node\n    if (!focusNode) {\n      focusNode = nodes[0];\n      self.focusNode = focusNode;\n    }\n    // the index of the focusNode in data\n    const focusIndex = getIndexById(nodes, focusNode.id);\n    self.focusIndex = focusIndex;\n    // the graph-theoretic distance (shortest path distance) matrix\n    const adjMatrix = getAdjMatrix({\n      nodes,\n      edges\n    }, false);\n    const D = floydWarshall(adjMatrix);\n    const maxDistance = self.maxToFocus(D, focusIndex);\n    // replace first node in unconnected component to the circle at (maxDistance + 1)\n    self.handleInfinity(D, focusIndex, maxDistance + 1);\n    self.distances = D;\n    // the shortest path distance from each node to focusNode\n    const focusNodeD = D[focusIndex];\n    const width = self.width || 500;\n    const height = self.height || 500;\n    let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n    let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n    if (semiWidth === 0) {\n      semiWidth = width / 2;\n    }\n    if (semiHeight === 0) {\n      semiHeight = height / 2;\n    }\n    // the maxRadius of the graph\n    const maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n    const maxD = Math.max(...focusNodeD);\n    // the radius for each nodes away from focusNode\n    const radii = [];\n    focusNodeD.forEach((value, i) => {\n      if (!self.unitRadius) {\n        self.unitRadius = maxRadius / maxD;\n      }\n      radii[i] = value * self.unitRadius;\n    });\n    self.radii = radii;\n    const eIdealD = self.eIdealDisMatrix();\n    // const eIdealD = scaleMatrix(D, linkDistance);\n    self.eIdealDistances = eIdealD;\n    // the weight matrix, Wij = 1 / dij^(-2)\n    const W = getWeightMatrix(eIdealD);\n    self.weights = W;\n    // the initial positions from mds\n    const mds = new MDS({\n      linkDistance,\n      distances: eIdealD\n    });\n    let positions = mds.layout();\n    positions.forEach(p => {\n      if (isNaN(p[0])) {\n        p[0] = Math.random() * linkDistance;\n      }\n      if (isNaN(p[1])) {\n        p[1] = Math.random() * linkDistance;\n      }\n    });\n    self.positions = positions;\n    positions.forEach((p, i) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    // move the graph to origin, centered at focusNode\n    positions.forEach(p => {\n      p[0] -= positions[focusIndex][0];\n      p[1] -= positions[focusIndex][1];\n    });\n    self.run();\n    const preventOverlap = self.preventOverlap;\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n    const strictRadial = self.strictRadial;\n    // stagger the overlapped nodes\n    if (preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc;\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n      if (!nodeSize) {\n        nodeSizeFunc = d => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n              return res + nodeSpacingFunc(d);\n            }\n            if (isObject(d.size)) {\n              const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n              return res + nodeSpacingFunc(d);\n            }\n            return d.size + nodeSpacingFunc(d);\n          }\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = d => {\n          const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n          return res + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = d => nodeSize + nodeSpacingFunc(d);\n      }\n      const nonoverlapForceParams = {\n        nodes,\n        nodeSizeFunc,\n        adjMatrix,\n        positions,\n        radii,\n        height,\n        width,\n        strictRadial,\n        focusID: focusIndex,\n        iterations: self.maxPreventOverlapIteration || 200,\n        k: positions.length / 4.5\n      };\n      const nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n      positions = nonoverlapForce.layout();\n    }\n    // move the graph to center\n    positions.forEach((p, i) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes,\n      edges\n    };\n  }\n  run() {\n    const self = this;\n    const maxIteration = self.maxIteration;\n    const positions = self.positions || [];\n    const W = self.weights || [];\n    const eIdealDis = self.eIdealDistances || [];\n    const radii = self.radii || [];\n    for (let i = 0; i <= maxIteration; i++) {\n      const param = i / maxIteration;\n      self.oneIteration(param, positions, radii, eIdealDis, W);\n    }\n  }\n  oneIteration(param, positions, radii, D, W) {\n    const self = this;\n    const vparam = 1 - param;\n    const focusIndex = self.focusIndex;\n    positions.forEach((v, i) => {\n      // v\n      const originDis = getEDistance(v, [0, 0]);\n      const reciODis = originDis === 0 ? 0 : 1 / originDis;\n      if (i === focusIndex) {\n        return;\n      }\n      let xMolecule = 0;\n      let yMolecule = 0;\n      let denominator = 0;\n      positions.forEach((u, j) => {\n        // u\n        if (i === j) {\n          return;\n        }\n        // the euclidean distance between v and u\n        const edis = getEDistance(v, u);\n        const reciEdis = edis === 0 ? 0 : 1 / edis;\n        const idealDis = D[j][i];\n        // same for x and y\n        denominator += W[i][j];\n        // x\n        xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis);\n        // y\n        yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n      });\n      const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n      denominator *= vparam;\n      denominator += param * reciR * reciR;\n      // x\n      xMolecule *= vparam;\n      xMolecule += param * reciR * v[0] * reciODis;\n      v[0] = xMolecule / denominator;\n      // y\n      yMolecule *= vparam;\n      yMolecule += param * reciR * v[1] * reciODis;\n      v[1] = yMolecule / denominator;\n    });\n  }\n  eIdealDisMatrix() {\n    const self = this;\n    const nodes = self.nodes;\n    if (!nodes) return [];\n    const D = self.distances;\n    const linkDis = self.linkDistance;\n    const radii = self.radii || [];\n    const unitRadius = self.unitRadius || 50;\n    const result = [];\n    if (D) {\n      D.forEach((row, i) => {\n        const newRow = [];\n        row.forEach((v, j) => {\n          if (i === j) {\n            newRow.push(0);\n          } else if (radii[i] === radii[j]) {\n            // i and j are on the same circle\n            if (self.sortBy === \"data\") {\n              // sort the nodes on the same circle according to the ordering of the data\n              newRow.push(v * (Math.abs(i - j) * self.sortStrength) / (radii[i] / unitRadius));\n            } else if (self.sortBy) {\n              // sort the nodes on the same circle according to the attributes\n              let iValue = nodes[i][self.sortBy] || 0;\n              let jValue = nodes[j][self.sortBy] || 0;\n              if (isString(iValue)) {\n                iValue = iValue.charCodeAt(0);\n              }\n              if (isString(jValue)) {\n                jValue = jValue.charCodeAt(0);\n              }\n              newRow.push(v * (Math.abs(iValue - jValue) * self.sortStrength) / (radii[i] / unitRadius));\n            } else {\n              newRow.push(v * linkDis / (radii[i] / unitRadius));\n            }\n          } else {\n            // i and j are on different circle\n            // i and j are on different circle\n            const link = (linkDis + unitRadius) / 2;\n            newRow.push(v * link);\n          }\n        });\n        result.push(newRow);\n      });\n    }\n    return result;\n  }\n  handleInfinity(matrix, focusIndex, step) {\n    const length = matrix.length;\n    // 遍历 matrix 中遍历 focus 对应行\n    for (let i = 0; i < length; i++) {\n      // matrix 关注点对应行的 Inf 项\n      if (matrix[focusIndex][i] === Infinity) {\n        matrix[focusIndex][i] = step;\n        matrix[i][focusIndex] = step;\n        // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n        for (let j = 0; j < length; j++) {\n          if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n            matrix[focusIndex][j] = step + matrix[i][j];\n            matrix[j][focusIndex] = step + matrix[i][j];\n          }\n        }\n      }\n    }\n    // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n    for (let i = 0; i < length; i++) {\n      if (i === focusIndex) {\n        continue;\n      }\n      for (let j = 0; j < length; j++) {\n        if (matrix[i][j] === Infinity) {\n          let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n          minus = minus === 0 ? 1 : minus;\n          matrix[i][j] = minus;\n        }\n      }\n    }\n  }\n  maxToFocus(matrix, focusIndex) {\n    let max = 0;\n    for (let i = 0; i < matrix[focusIndex].length; i++) {\n      if (matrix[focusIndex][i] === Infinity) {\n        continue;\n      }\n      max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n    }\n    return max;\n  }\n  getType() {\n    return \"radial\";\n  }\n}","map":{"version":3,"names":["isNaN","isArray","isFunction","isNumber","isString","floydWarshall","getAdjMatrix","isObject","Base","MDS","RadialNonoverlapForce","getWeightMatrix","M","rows","length","cols","result","i","row","j","push","getIndexById","array","id","index","forEach","a","getEDistance","p1","p2","Math","sqrt","RadialLayout","constructor","options","maxIteration","focusNode","unitRadius","linkDistance","preventOverlap","strictRadial","maxPreventOverlapIteration","sortStrength","nodes","edges","updateCfg","getDefaultCfg","nodeSize","undefined","nodeSpacing","sortBy","execute","self","onLayoutEnd","width","window","innerWidth","height","innerHeight","center","x","y","found","focusIndex","adjMatrix","D","maxDistance","maxToFocus","handleInfinity","distances","focusNodeD","semiWidth","semiHeight","maxRadius","maxD","max","radii","value","eIdealD","eIdealDisMatrix","eIdealDistances","W","weights","mds","positions","layout","p","random","run","nodeSizeFunc","nodeSpacingFunc","d","size","res","nonoverlapForceParams","focusID","iterations","k","nonoverlapForce","eIdealDis","param","oneIteration","vparam","v","originDis","reciODis","xMolecule","yMolecule","denominator","u","edis","reciEdis","idealDis","reciR","linkDis","newRow","abs","iValue","jValue","charCodeAt","link","matrix","step","Infinity","minus","getType"],"sources":["../../../src/layout/radial/radial.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}