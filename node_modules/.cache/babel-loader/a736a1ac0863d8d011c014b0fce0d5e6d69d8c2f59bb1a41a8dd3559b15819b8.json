{"ast":null,"code":"import React from 'react';\nimport { FunctionExt } from '@antv/x6';\nexport class Wrap extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.scheduledAnimationFrame = false;\n    this.throttleUpdateFunc = () => {\n      if (this.scheduledAnimationFrame) {\n        return;\n      }\n      this.scheduledAnimationFrame = true;\n      window.requestAnimationFrame(() => {\n        this.setState(state => {\n          this.scheduledAnimationFrame = false;\n          return {\n            tick: state.tick + 1\n          };\n        });\n      });\n    };\n    this.onChange = e => {\n      if (Wrap.throttleChangeTypes.includes(e.key)) {\n        this.throttleUpdateFunc();\n        return;\n      }\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      this.setState({\n        tick: this.state.tick + 1\n      });\n    };\n    this.state = {\n      tick: 0\n    };\n  }\n  componentDidMount() {\n    this.props.node.on('change:*', this.onChange);\n  }\n  componentWillUnmount() {\n    this.props.node.off('change:*', this.onChange);\n  }\n  clone(elem) {\n    const {\n      node\n    } = this.props;\n    return typeof elem.type === 'string' ? React.cloneElement(elem) : React.cloneElement(elem, {\n      node\n    });\n  }\n  render() {\n    const {\n      graph,\n      node,\n      component\n    } = this.props;\n    if (React.isValidElement(component)) {\n      return this.clone(component);\n    }\n    if (typeof component === 'function') {\n      // Calling the component function on every change of the node.\n      const ret = FunctionExt.call(component, graph, node);\n      if (React.isValidElement(ret)) {\n        return this.clone(ret);\n      }\n    }\n    return component;\n  }\n}\nWrap.throttleChangeTypes = ['position', 'size'];","map":{"version":3,"names":["React","FunctionExt","Wrap","PureComponent","constructor","props","scheduledAnimationFrame","throttleUpdateFunc","window","requestAnimationFrame","setState","state","tick","onChange","e","throttleChangeTypes","includes","key","componentDidMount","node","on","componentWillUnmount","off","clone","elem","type","cloneElement","render","graph","component","isValidElement","ret","call"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6-react-shape/src/wrap.ts"],"sourcesContent":["import React from 'react'\nimport { Graph, FunctionExt } from '@antv/x6'\nimport { ReactShape } from './node'\nimport { Definition } from './registry'\n\nexport class Wrap extends React.PureComponent<Wrap.Props, Wrap.State> {\n  static throttleChangeTypes = ['position', 'size']\n\n  private scheduledAnimationFrame = false\n\n  constructor(props: Wrap.Props) {\n    super(props)\n    this.state = { tick: 0 }\n  }\n\n  throttleUpdateFunc = () => {\n    if (this.scheduledAnimationFrame) {\n      return\n    }\n    this.scheduledAnimationFrame = true\n    window.requestAnimationFrame(() => {\n      this.setState((state) => {\n        this.scheduledAnimationFrame = false\n        return { tick: state.tick + 1 }\n      })\n    })\n  }\n\n  onChange = (e: any) => {\n    if (Wrap.throttleChangeTypes.includes(e.key)) {\n      this.throttleUpdateFunc()\n      return\n    }\n    // eslint-disable-next-line react/no-access-state-in-setstate\n    this.setState({ tick: this.state.tick + 1 })\n  }\n\n  componentDidMount() {\n    this.props.node.on('change:*', this.onChange)\n  }\n\n  componentWillUnmount() {\n    this.props.node.off('change:*', this.onChange)\n  }\n\n  clone(elem: React.ReactElement) {\n    const { node } = this.props\n    return typeof elem.type === 'string'\n      ? React.cloneElement(elem)\n      : React.cloneElement(elem, { node })\n  }\n\n  render() {\n    const { graph, node, component } = this.props\n    if (React.isValidElement(component)) {\n      return this.clone(component)\n    }\n\n    if (typeof component === 'function') {\n      // Calling the component function on every change of the node.\n      const ret = FunctionExt.call(component, graph, node)\n      if (React.isValidElement(ret)) {\n        return this.clone(ret as React.ReactElement)\n      }\n    }\n\n    return component\n  }\n}\n\nexport namespace Wrap {\n  export interface State {\n    tick: number\n  }\n\n  export interface Props {\n    node: ReactShape\n    graph: Graph\n    component: Definition\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAgBC,WAAW,QAAQ,UAAU;AAI7C,OAAM,MAAOC,IAAK,SAAQF,KAAK,CAACG,aAAqC;EAKnEC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,CAAC;IAHN,KAAAC,uBAAuB,GAAG,KAAK;IAOvC,KAAAC,kBAAkB,GAAG,MAAK;MACxB,IAAI,IAAI,CAACD,uBAAuB,EAAE;QAChC;;MAEF,IAAI,CAACA,uBAAuB,GAAG,IAAI;MACnCE,MAAM,CAACC,qBAAqB,CAAC,MAAK;QAChC,IAAI,CAACC,QAAQ,CAAEC,KAAK,IAAI;UACtB,IAAI,CAACL,uBAAuB,GAAG,KAAK;UACpC,OAAO;YAAEM,IAAI,EAAED,KAAK,CAACC,IAAI,GAAG;UAAC,CAAE;QACjC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED,KAAAC,QAAQ,GAAIC,CAAM,IAAI;MACpB,IAAIZ,IAAI,CAACa,mBAAmB,CAACC,QAAQ,CAACF,CAAC,CAACG,GAAG,CAAC,EAAE;QAC5C,IAAI,CAACV,kBAAkB,EAAE;QACzB;;MAEF;MACA,IAAI,CAACG,QAAQ,CAAC;QAAEE,IAAI,EAAE,IAAI,CAACD,KAAK,CAACC,IAAI,GAAG;MAAC,CAAE,CAAC;IAC9C,CAAC;IAvBC,IAAI,CAACD,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAC,CAAE;EAC1B;EAwBAM,iBAAiBA,CAAA;IACf,IAAI,CAACb,KAAK,CAACc,IAAI,CAACC,EAAE,CAAC,UAAU,EAAE,IAAI,CAACP,QAAQ,CAAC;EAC/C;EAEAQ,oBAAoBA,CAAA;IAClB,IAAI,CAAChB,KAAK,CAACc,IAAI,CAACG,GAAG,CAAC,UAAU,EAAE,IAAI,CAACT,QAAQ,CAAC;EAChD;EAEAU,KAAKA,CAACC,IAAwB;IAC5B,MAAM;MAAEL;IAAI,CAAE,GAAG,IAAI,CAACd,KAAK;IAC3B,OAAO,OAAOmB,IAAI,CAACC,IAAI,KAAK,QAAQ,GAChCzB,KAAK,CAAC0B,YAAY,CAACF,IAAI,CAAC,GACxBxB,KAAK,CAAC0B,YAAY,CAACF,IAAI,EAAE;MAAEL;IAAI,CAAE,CAAC;EACxC;EAEAQ,MAAMA,CAAA;IACJ,MAAM;MAAEC,KAAK;MAAET,IAAI;MAAEU;IAAS,CAAE,GAAG,IAAI,CAACxB,KAAK;IAC7C,IAAIL,KAAK,CAAC8B,cAAc,CAACD,SAAS,CAAC,EAAE;MACnC,OAAO,IAAI,CAACN,KAAK,CAACM,SAAS,CAAC;;IAG9B,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAE;MACnC;MACA,MAAME,GAAG,GAAG9B,WAAW,CAAC+B,IAAI,CAACH,SAAS,EAAED,KAAK,EAAET,IAAI,CAAC;MACpD,IAAInB,KAAK,CAAC8B,cAAc,CAACC,GAAG,CAAC,EAAE;QAC7B,OAAO,IAAI,CAACR,KAAK,CAACQ,GAAyB,CAAC;;;IAIhD,OAAOF,SAAS;EAClB;;AA7DO3B,IAAA,CAAAa,mBAAmB,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}