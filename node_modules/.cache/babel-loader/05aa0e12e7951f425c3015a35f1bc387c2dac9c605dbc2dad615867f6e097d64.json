{"ast":null,"code":"/**\n * 'blurH' -> ['blurH', {}]\n */\nexport function normalizePasses(passes) {\n  return passes.map(pass => {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n    return pass;\n  });\n}\n\n/**\n * 默认添加 ClearPass、RenderPass\n * 以及 PostProcessing 中的最后一个 CopyPass\n */\nexport function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {\n  const multiPassRenderer = layer.multiPassRenderer;\n\n  // picking pass if enabled\n  // if (enablePicking) {\n  //   multiPassRenderer.add(normalPassFactory('pixelPicking'));\n  // }\n\n  // render all layers in this pass\n  multiPassRenderer.add(normalPassFactory('render'));\n\n  // post processing\n  normalizePasses(passes).forEach(pass => {\n    const [passName, initializationOptions] = pass;\n    multiPassRenderer.add(postProcessingPassFactory(passName), initializationOptions);\n  });\n\n  // 末尾为固定的 CopyPass\n  multiPassRenderer.add(postProcessingPassFactory('copy'));\n  return multiPassRenderer;\n}","map":{"version":3,"names":["normalizePasses","passes","map","pass","createMultiPassRenderer","layer","postProcessingPassFactory","normalPassFactory","multiPassRenderer","add","forEach","passName","initializationOptions"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/utils/multiPassRender.js"],"sourcesContent":["/**\n * 'blurH' -> ['blurH', {}]\n */\nexport function normalizePasses(passes) {\n  return passes.map(pass => {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n    return pass;\n  });\n}\n\n/**\n * 默认添加 ClearPass、RenderPass\n * 以及 PostProcessing 中的最后一个 CopyPass\n */\nexport function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {\n  const multiPassRenderer = layer.multiPassRenderer;\n\n  // picking pass if enabled\n  // if (enablePicking) {\n  //   multiPassRenderer.add(normalPassFactory('pixelPicking'));\n  // }\n\n  // render all layers in this pass\n  multiPassRenderer.add(normalPassFactory('render'));\n\n  // post processing\n  normalizePasses(passes).forEach(pass => {\n    const [passName, initializationOptions] = pass;\n    multiPassRenderer.add(postProcessingPassFactory(passName), initializationOptions);\n  });\n\n  // 末尾为固定的 CopyPass\n  multiPassRenderer.add(postProcessingPassFactory('copy'));\n  return multiPassRenderer;\n}"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,MAAM,EAAE;EACtC,OAAOA,MAAM,CAACC,GAAG,CAACC,IAAI,IAAI;IACxB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG,CAACA,IAAI,EAAE,CAAC,CAAC,CAAC;IACnB;IACA,OAAOA,IAAI;EACb,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,KAAK,EAAEJ,MAAM,EAAEK,yBAAyB,EAAEC,iBAAiB,EAAE;EACnG,MAAMC,iBAAiB,GAAGH,KAAK,CAACG,iBAAiB;;EAEjD;EACA;EACA;EACA;;EAEA;EACAA,iBAAiB,CAACC,GAAG,CAACF,iBAAiB,CAAC,QAAQ,CAAC,CAAC;;EAElD;EACAP,eAAe,CAACC,MAAM,CAAC,CAACS,OAAO,CAACP,IAAI,IAAI;IACtC,MAAM,CAACQ,QAAQ,EAAEC,qBAAqB,CAAC,GAAGT,IAAI;IAC9CK,iBAAiB,CAACC,GAAG,CAACH,yBAAyB,CAACK,QAAQ,CAAC,EAAEC,qBAAqB,CAAC;EACnF,CAAC,CAAC;;EAEF;EACAJ,iBAAiB,CAACC,GAAG,CAACH,yBAAyB,CAAC,MAAM,CAAC,CAAC;EACxD,OAAOE,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}