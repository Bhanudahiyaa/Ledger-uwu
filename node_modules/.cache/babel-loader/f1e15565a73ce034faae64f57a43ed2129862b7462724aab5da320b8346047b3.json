{"ast":null,"code":"import { feasibleTree } from './feasible-tree';\nimport { slack, longestPath as initRank } from './util';\nimport { minBy, simplify } from '../util';\nimport graphlib from '../graphlib';\nconst alg = graphlib.alg;\nconst {\n  preorder,\n  postorder\n} = alg;\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nconst networkSimplex = g => {\n  // tslint:disable-next-line\n  g = simplify(g);\n  initRank(g);\n  const t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n  let e;\n  let f;\n  while (e = leaveEdge(t)) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n};\n/*\n * Initializes cut values for all edges in the tree.\n */\nconst initCutValues = (t, g) => {\n  let vs = postorder(t, t.nodes());\n  vs = vs === null || vs === void 0 ? void 0 : vs.slice(0, (vs === null || vs === void 0 ? void 0 : vs.length) - 1);\n  vs === null || vs === void 0 ? void 0 : vs.forEach(v => {\n    assignCutValue(t, g, v);\n  });\n};\nconst assignCutValue = (t, g, child) => {\n  const childLab = t.node(child);\n  const parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n};\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nconst calcCutValue = (t, g, child) => {\n  var _a;\n  const childLab = t.node(child);\n  const parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  let childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  let graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  let cutValue = 0;\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n  cutValue = graphEdge.weight;\n  (_a = g.nodeEdges(child)) === null || _a === void 0 ? void 0 : _a.forEach(e => {\n    const isOutEdge = e.v === child;\n    const other = isOutEdge ? e.w : e.v;\n    if (other !== parent) {\n      const pointsToHead = isOutEdge === childIsTail;\n      const otherWeight = g.edge(e).weight;\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        const otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n  return cutValue;\n};\nconst initLowLimValues = (tree, root) => {\n  if (root !== undefined) {\n    // tslint:disable-next-line\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n};\nconst dfsAssignLowLim = (tree, visited, nextLim, v, parent) => {\n  var _a;\n  const low = nextLim;\n  let useNextLim = nextLim;\n  const label = tree.node(v);\n  visited[v] = true;\n  (_a = tree.neighbors(v)) === null || _a === void 0 ? void 0 : _a.forEach(w => {\n    if (!visited.hasOwnProperty(w)) {\n      useNextLim = dfsAssignLowLim(tree, visited, useNextLim, w, v);\n    }\n  });\n  label.low = low;\n  label.lim = useNextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n  return useNextLim;\n};\nconst leaveEdge = tree => {\n  return tree.edges().find(e => {\n    return tree.edge(e).cutvalue < 0;\n  });\n};\nconst enterEdge = (t, g, edge) => {\n  let v = edge.v;\n  let w = edge.w;\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n  const vLabel = t.node(v);\n  const wLabel = t.node(w);\n  let tailLabel = vLabel;\n  let flip = false;\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n  const candidates = g.edges().filter(edge => {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) && flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n  return minBy(candidates, edge => {\n    return slack(g, edge);\n  });\n};\nconst exchangeEdges = (t, g, e, f) => {\n  const v = e.v;\n  const w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n};\nconst updateRanks = (t, g) => {\n  const root = t.nodes().find(v => {\n    return !g.node(v).parent;\n  });\n  let vs = preorder(t, root);\n  vs = vs === null || vs === void 0 ? void 0 : vs.slice(1);\n  vs === null || vs === void 0 ? void 0 : vs.forEach(v => {\n    const parent = t.node(v).parent;\n    let edge = g.edge(v, parent);\n    let flipped = false;\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n};\n/*\n * Returns true if the edge is in the tree.\n */\nconst isTreeEdge = (tree, u, v) => {\n  return tree.hasEdge(u, v);\n};\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nconst isDescendant = (tree, vLabel, rootLabel) => {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n};\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\nexport default networkSimplex;","map":{"version":3,"names":["feasibleTree","slack","longestPath","initRank","minBy","simplify","graphlib","alg","preorder","postorder","networkSimplex","g","t","initLowLimValues","initCutValues","e","f","leaveEdge","enterEdge","exchangeEdges","vs","nodes","slice","length","forEach","v","assignCutValue","child","childLab","node","parent","edge","cutvalue","calcCutValue","childIsTail","graphEdge","cutValue","weight","_a","nodeEdges","isOutEdge","other","w","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","root","undefined","dfsAssignLowLim","visited","nextLim","low","useNextLim","label","neighbors","hasOwnProperty","lim","edges","find","hasEdge","vLabel","wLabel","tailLabel","flip","candidates","filter","isDescendant","removeEdge","setEdge","updateRanks","flipped","rank","minlen","u","rootLabel"],"sources":["../../../../../src/layout/dagre/src/rank/network-simplex.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}