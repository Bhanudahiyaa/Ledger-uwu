{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n(function (NsDelNode) {\n  /** Command: 用于注册named factory */\n  NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n  /** hook name */\n  NsDelNode.hookKey = 'delNode';\n  /** 创建 hook */\n  NsDelNode.createHook = () => {\n    return new HookHub();\n  };\n})(NsDelNode || (NsDelNode = {}));\nlet DelNodeCommand = class DelNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.delNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          deleteNodeService,\n          options\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        if (deleteNodeService) {\n          const canDel = yield deleteNodeService(handlerArgs);\n          if (!canDel) return {\n            err: ' service rejected'\n          };\n        }\n        const nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n        const nodeCell = graph.getCellById(nodeId);\n        if (nodeCell && nodeCell.isNode()) {\n          /** 先清理连线 */\n          const edges = [...(graph.getIncomingEdges(nodeCell) || []), ...(graph.getOutgoingEdges(nodeCell) || [])];\n          yield Promise.all(edges.map(edge => {\n            return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n              x6Edge: edge\n            });\n          }));\n          /** 再清理节点 */\n          const nodeConfig = nodeCell.getData();\n          nodeCell.remove(Object.assign(Object.assign({}, options), {\n            isCommand: true\n          }));\n          /** add undo: delete node */\n          ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n              nodeConfig\n            });\n            // TODO: 支持线和节点的undo\n            // 通过 sequence mapping 出新的port id\n            // const nodeCtx = nodeCmd.contextProvider()\n            // const { nodeCell } = nodeCtx.getResult()\n            // edgeCmds.forEach(async cmd => {\n            //   const c = cmd.contextProvider()\n            //   const { edgeConfig } = c.getResult()\n            // })\n          })));\n          return {\n            err: null,\n            nodeConfig\n          };\n        }\n        return {\n          err: 'node is not exist'\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      if (this.isUndoable()) {\n        const ctx = this.contextProvider();\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelNodeCommand.prototype, \"contextProvider\", void 0);\nDelNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelNode.command.id\n  }\n})\n/** 创建节点命令 */], DelNodeCommand);\nexport { DelNodeCommand };","map":{"version":3,"names":["inject","injectable","HookHub","ICommandHandler","ICommandContextProvider","XFlowEdgeCommands","XFlowNodeCommands","Disposable","NsDelNode","command","DEL_NODE","hookKey","createHook","DelNodeCommand","constructor","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","result","delNode","call","handlerArgs","commandService","deleteNodeService","options","graph","getX6Graph","canDel","err","nodeId","x6Node","nodeConfig","id","nodeCell","getCellById","isNode","edges","getIncomingEdges","getOutgoingEdges","Promise","all","map","edge","executeCommand","DEL_EDGE","x6Edge","getData","remove","Object","assign","isCommand","addUndo","create","ADD_NODE","setResult","undo","isUndoable","redo","__decorate","token","named"],"sources":["../../../src/command-contributions/node/node-del.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}