{"ast":null,"code":"// @ts-nocheck\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\";\n// @ts-ignore\nimport { World } from \"@antv/g-webgpu\";\nimport { proccessToFunc, buildTextureDataWithTwoEdgeAttr, arrayToTextureData } from \"../../util/gpu\";\nimport { getDegree } from \"../../util/math\";\nimport { gForceBundle, aveMovementBundle } from \"./gForceShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * graphin 中的 force 布局\n */\nexport class GForceGPULayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n    this.maxIteration = 1000;\n    /** 弹簧引力系数 */\n    this.edgeStrength = 200;\n    /** 斥力系数 */\n    this.nodeStrength = 1000;\n    /** 库伦系数 */\n    this.coulombDisScale = 0.005;\n    /** 阻尼系数 */\n    this.damping = 0.9;\n    /** 最大速度 */\n    this.maxSpeed = 1000;\n    /** 一次迭代的平均移动距离小于该值时停止迭代 */\n    this.minMovement = 0.5;\n    /** 迭代中衰减 */\n    this.interval = 0.02;\n    /** 斥力的一个系数 */\n    this.factor = 1;\n    /** 理想边长 */\n    this.linkDistance = 1;\n    /** 重力大小 */\n    this.gravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n    this.workerEnabled = false;\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.nodeMap = {};\n    this.nodeIdxMap = {};\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      maxIteration: 2000,\n      gravity: 10,\n      clustering: false,\n      clusterGravity: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const self = this;\n      const nodes = self.nodes;\n      if (!nodes || nodes.length === 0) {\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return;\n      }\n      if (!self.width && typeof window !== \"undefined\") {\n        self.width = window.innerWidth;\n      }\n      if (!self.height && typeof window !== \"undefined\") {\n        self.height = window.innerHeight;\n      }\n      if (!self.center) {\n        self.center = [self.width / 2, self.height / 2];\n      }\n      const center = self.center;\n      if (nodes.length === 1) {\n        nodes[0].x = center[0];\n        nodes[0].y = center[1];\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return;\n      }\n      const nodeMap = {};\n      const nodeIdxMap = {};\n      nodes.forEach((node, i) => {\n        if (!isNumber(node.x)) node.x = Math.random() * self.width;\n        if (!isNumber(node.y)) node.y = Math.random() * self.height;\n        nodeMap[node.id] = node;\n        nodeIdxMap[node.id] = i;\n      });\n      self.nodeMap = nodeMap;\n      self.nodeIdxMap = nodeIdxMap;\n      self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n      self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n      // layout\n      yield self.run();\n    });\n  }\n  executeWithWorker(canvas, ctx) {\n    const self = this;\n    const nodes = self.nodes;\n    const center = self.center;\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      return;\n    }\n    const nodeMap = {};\n    const nodeIdxMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * self.width;\n      if (!isNumber(node.y)) node.y = Math.random() * self.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n    self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n    self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n    // layout\n    self.run(canvas, ctx);\n  }\n  run(canvas, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const self = this;\n      const nodes = self.nodes;\n      const edges = self.edges;\n      const maxIteration = self.maxIteration;\n      if (!self.width && typeof window !== \"undefined\") {\n        self.width = window.innerWidth;\n      }\n      if (!self.height && typeof window !== \"undefined\") {\n        self.height = window.innerHeight;\n      }\n      const numParticles = nodes.length;\n      self.linkDistance = proccessToFunc(self.linkDistance);\n      self.edgeStrength = proccessToFunc(self.edgeStrength);\n      const {\n        maxEdgePerVetex,\n        array: nodesEdgesArray\n      } = buildTextureDataWithTwoEdgeAttr(nodes, edges, self.linkDistance, self.edgeStrength);\n      // init degree for mass\n      self.degrees = getDegree(nodes.length, self.nodeIdxMap, edges);\n      const masses = [];\n      const nodeStrengths = [];\n      const centerXs = [];\n      const centerYs = [];\n      const centerGravities = [];\n      const fxs = [];\n      const fys = [];\n      if (!self.getMass) {\n        self.getMass = d => {\n          return self.degrees[self.nodeIdxMap[d.id]] || 1;\n        };\n      }\n      const gravity = self.gravity;\n      const center = self.center;\n      nodes.forEach((node, i) => {\n        masses.push(self.getMass(node));\n        nodeStrengths.push(self.nodeStrength(node));\n        if (!self.degrees[i]) self.degrees[i] = 0;\n        let nodeGravity = [center[0], center[1], gravity];\n        if (self.getCenter) {\n          const customCenter = self.getCenter(node, self.degrees[i]);\n          if (customCenter && isNumber(customCenter[0]) && isNumber(customCenter[1]) && isNumber(customCenter[2])) {\n            nodeGravity = customCenter;\n          }\n        }\n        centerXs.push(nodeGravity[0]);\n        centerYs.push(nodeGravity[1]);\n        centerGravities.push(nodeGravity[2]);\n        if (isNumber(node.fx) && isNumber(node.fy)) {\n          fxs.push(node.fx || 0.001);\n          fys.push(node.fy || 0.001);\n        } else {\n          fxs.push(0);\n          fys.push(0);\n        }\n      });\n      // 每个节点的额外属性占两个数组各一格，nodeAttributeArray1 中是：mass, degree, nodeSterngth, 0\n      const nodeAttributeArray1 = arrayToTextureData([masses, self.degrees, nodeStrengths, fxs]);\n      // nodeAttributeArray2 中是：centerX, centerY, gravity, 0,\n      const nodeAttributeArray2 = arrayToTextureData([centerXs, centerYs, centerGravities, fys]);\n      const workerEnabled = self.workerEnabled;\n      let world;\n      if (workerEnabled) {\n        world = World.create({\n          canvas,\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n      } else {\n        world = World.create({\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n      }\n      // TODO: 最终的预编译代码放入到 gForceShader.ts 中直接引入，不再需要下面三行\n      // const compiler = new Compiler();\n      // const gForceBundle = compiler.compileBundle(gForceCode);\n      // console.log(gForceBundle.toString());\n      const onLayoutEnd = self.onLayoutEnd;\n      const initPreviousData = [];\n      nodesEdgesArray.forEach(value => {\n        initPreviousData.push(value);\n      });\n      for (let i = 0; i < 4; i++) {\n        initPreviousData.push(0);\n      }\n      const kernelGForce = world.createKernel(gForceBundle).setDispatch([numParticles, 1, 1]).setBinding({\n        u_Data: nodesEdgesArray,\n        u_damping: self.damping,\n        u_maxSpeed: self.maxSpeed,\n        u_minMovement: self.minMovement,\n        u_coulombDisScale: self.coulombDisScale,\n        u_factor: self.factor,\n        u_NodeAttributeArray1: nodeAttributeArray1,\n        u_NodeAttributeArray2: nodeAttributeArray2,\n        MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n        VERTEX_COUNT: numParticles,\n        u_AveMovement: initPreviousData,\n        u_interval: self.interval // 每次迭代更新，首次设置为 interval，在 onIterationCompleted 中更新\n      });\n      // const aveMovementBundle = compiler.compileBundle(aveMovementCode);\n      // console.log(aveMovementBundle.toString());\n      const kernelAveMovement = world.createKernel(aveMovementBundle).setDispatch([1, 1, 1]).setBinding({\n        u_Data: nodesEdgesArray,\n        VERTEX_COUNT: numParticles,\n        u_AveMovement: [0, 0, 0, 0]\n      });\n      // 执行迭代\n      // let midRes = nodesEdgesArray;\n      const execute = () => __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < maxIteration; i++) {\n          // TODO: 似乎都来自 kernelGForce 是一个引用\n          // 当前坐标作为下一次迭代的 PreviousData\n          // if (i > 0) {\n          //   kernelAveMovement.setBinding({\n          //     u_PreviousData: kernelGForce\n          //   });\n          // }\n          // eslint-disable-next-line no-await-in-loop\n          yield kernelGForce.execute();\n          // midRes = await kernelGForce.getOutput();\n          // 每次迭代完成后\n          // 计算平均位移，用于提前终止迭代\n          kernelAveMovement.setBinding({\n            u_Data: kernelGForce\n          });\n          // eslint-disable-next-line no-await-in-loop\n          yield kernelAveMovement.execute();\n          // 更新衰减函数\n          const stepInterval = Math.max(0.02, self.interval - i * 0.002);\n          kernelGForce.setBinding({\n            u_interval: stepInterval,\n            u_AveMovement: kernelAveMovement\n          });\n        }\n        const finalParticleData = yield kernelGForce.getOutput();\n        // 所有迭代完成后\n        if (canvas) {\n          // 传递数据给主线程\n          ctx.postMessage({\n            type: LAYOUT_MESSAGE.GPUEND,\n            vertexEdgeData: finalParticleData\n            // edgeIndexBufferData,\n          });\n        } else {\n          nodes.forEach((node, i) => {\n            const x = finalParticleData[4 * i];\n            const y = finalParticleData[4 * i + 1];\n            node.x = x;\n            node.y = y;\n          });\n        }\n        if (onLayoutEnd) onLayoutEnd();\n      });\n      yield execute();\n    });\n  }\n  getType() {\n    return \"gForce-gpu\";\n  }\n}","map":{"version":3,"names":["Base","isNumber","World","proccessToFunc","buildTextureDataWithTwoEdgeAttr","arrayToTextureData","getDegree","gForceBundle","aveMovementBundle","LAYOUT_MESSAGE","GForceGPULayout","constructor","options","maxIteration","edgeStrength","nodeStrength","coulombDisScale","damping","maxSpeed","minMovement","interval","factor","linkDistance","gravity","workerEnabled","nodes","edges","width","height","nodeMap","nodeIdxMap","updateCfg","getDefaultCfg","clustering","clusterGravity","execute","self","length","onLayoutEnd","window","innerWidth","innerHeight","center","x","y","forEach","node","i","Math","random","id","run","executeWithWorker","canvas","ctx","numParticles","maxEdgePerVetex","array","nodesEdgesArray","degrees","masses","nodeStrengths","centerXs","centerYs","centerGravities","fxs","fys","getMass","d","push","nodeGravity","getCenter","customCenter","fx","fy","nodeAttributeArray1","nodeAttributeArray2","world","create","engineOptions","supportCompute","initPreviousData","value","kernelGForce","createKernel","setDispatch","setBinding","u_Data","u_damping","u_maxSpeed","u_minMovement","u_coulombDisScale","u_factor","u_NodeAttributeArray1","u_NodeAttributeArray2","MAX_EDGE_PER_VERTEX","VERTEX_COUNT","u_AveMovement","u_interval","kernelAveMovement","__awaiter","stepInterval","max","finalParticleData","getOutput","postMessage","type","GPUEND","vertexEdgeData","getType"],"sources":["../../../src/layout/gpu/gForce.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}