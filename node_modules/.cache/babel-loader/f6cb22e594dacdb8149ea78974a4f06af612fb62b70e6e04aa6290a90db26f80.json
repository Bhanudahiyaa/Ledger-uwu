{"ast":null,"code":"'use strict';\n\nmodule.exports = UnitBezier;\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n  // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n  this.cx = 3.0 * p1x;\n  this.bx = 3.0 * (p2x - p1x) - this.cx;\n  this.ax = 1.0 - this.cx - this.bx;\n  this.cy = 3.0 * p1y;\n  this.by = 3.0 * (p2y - p1y) - this.cy;\n  this.ay = 1.0 - this.cy - this.by;\n  this.p1x = p1x;\n  this.p1y = p1y;\n  this.p2x = p2x;\n  this.p2y = p2y;\n}\nUnitBezier.prototype = {\n  sampleCurveX: function (t) {\n    // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n    return ((this.ax * t + this.bx) * t + this.cx) * t;\n  },\n  sampleCurveY: function (t) {\n    return ((this.ay * t + this.by) * t + this.cy) * t;\n  },\n  sampleCurveDerivativeX: function (t) {\n    return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n  },\n  solveCurveX: function (x, epsilon) {\n    if (epsilon === undefined) epsilon = 1e-6;\n    if (x < 0.0) return 0.0;\n    if (x > 1.0) return 1.0;\n    var t = x;\n\n    // First try a few iterations of Newton's method - normally very fast.\n    for (var i = 0; i < 8; i++) {\n      var x2 = this.sampleCurveX(t) - x;\n      if (Math.abs(x2) < epsilon) return t;\n      var d2 = this.sampleCurveDerivativeX(t);\n      if (Math.abs(d2) < 1e-6) break;\n      t = t - x2 / d2;\n    }\n\n    // Fall back to the bisection method for reliability.\n    var t0 = 0.0;\n    var t1 = 1.0;\n    t = x;\n    for (i = 0; i < 20; i++) {\n      x2 = this.sampleCurveX(t);\n      if (Math.abs(x2 - x) < epsilon) break;\n      if (x > x2) {\n        t0 = t;\n      } else {\n        t1 = t;\n      }\n      t = (t1 - t0) * 0.5 + t0;\n    }\n    return t;\n  },\n  solve: function (x, epsilon) {\n    return this.sampleCurveY(this.solveCurveX(x, epsilon));\n  }\n};","map":{"version":3,"names":["module","exports","UnitBezier","p1x","p1y","p2x","p2y","cx","bx","ax","cy","by","ay","prototype","sampleCurveX","t","sampleCurveY","sampleCurveDerivativeX","solveCurveX","x","epsilon","undefined","i","x2","Math","abs","d2","t0","t1","solve"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@mapbox/unitbezier/index.js"],"sourcesContent":["'use strict';\n\nmodule.exports = UnitBezier;\n\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n    // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n    this.cx = 3.0 * p1x;\n    this.bx = 3.0 * (p2x - p1x) - this.cx;\n    this.ax = 1.0 - this.cx - this.bx;\n\n    this.cy = 3.0 * p1y;\n    this.by = 3.0 * (p2y - p1y) - this.cy;\n    this.ay = 1.0 - this.cy - this.by;\n\n    this.p1x = p1x;\n    this.p1y = p1y;\n    this.p2x = p2x;\n    this.p2y = p2y;\n}\n\nUnitBezier.prototype = {\n    sampleCurveX: function (t) {\n        // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n        return ((this.ax * t + this.bx) * t + this.cx) * t;\n    },\n\n    sampleCurveY: function (t) {\n        return ((this.ay * t + this.by) * t + this.cy) * t;\n    },\n\n    sampleCurveDerivativeX: function (t) {\n        return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n    },\n\n    solveCurveX: function (x, epsilon) {\n        if (epsilon === undefined) epsilon = 1e-6;\n\n        if (x < 0.0) return 0.0;\n        if (x > 1.0) return 1.0;\n\n        var t = x;\n\n        // First try a few iterations of Newton's method - normally very fast.\n        for (var i = 0; i < 8; i++) {\n            var x2 = this.sampleCurveX(t) - x;\n            if (Math.abs(x2) < epsilon) return t;\n\n            var d2 = this.sampleCurveDerivativeX(t);\n            if (Math.abs(d2) < 1e-6) break;\n\n            t = t - x2 / d2;\n        }\n\n        // Fall back to the bisection method for reliability.\n        var t0 = 0.0;\n        var t1 = 1.0;\n        t = x;\n\n        for (i = 0; i < 20; i++) {\n            x2 = this.sampleCurveX(t);\n            if (Math.abs(x2 - x) < epsilon) break;\n\n            if (x > x2) {\n                t0 = t;\n            } else {\n                t1 = t;\n            }\n\n            t = (t1 - t0) * 0.5 + t0;\n        }\n\n        return t;\n    },\n\n    solve: function (x, epsilon) {\n        return this.sampleCurveY(this.solveCurveX(x, epsilon));\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}