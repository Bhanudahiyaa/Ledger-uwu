{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/**\n * tiny-sdf 中每个 glyph 的宽度（加上 buffer 24 + 3 + 3 = 30）\n */\nconst glyphSizeInSDF = 30;\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  let x = xOffset;\n  Array.from(characterSet).forEach((char, i) => {\n    if (!mapping[char]) {\n      const width = getFontWidth(char, i);\n      if (x + glyphSizeInSDF > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x,\n        y: yOffset + row * glyphSizeInSDF,\n        width: glyphSizeInSDF,\n        height: glyphSizeInSDF,\n        advance: width\n      };\n      x += glyphSizeInSDF;\n    }\n  });\n  const rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\nexport function buildIconMaping(icons, buffer, maxCanvasWidth) {\n  let xOffset = 0;\n  let yOffset = 0;\n  let rowHeight = 0;\n  let columns = [];\n  const mapping = {};\n  for (const icon of icons) {\n    if (!mapping[icon.id]) {\n      const {\n        size\n      } = icon;\n\n      // fill one row\n      if (xOffset + size + buffer > maxCanvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n      columns.push({\n        icon,\n        xOffset\n      });\n      xOffset = xOffset + size + buffer;\n      rowHeight = Math.max(rowHeight, size);\n    }\n  }\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n  const canvasHeight = nextPowOfTwo(rowHeight + yOffset + buffer);\n  return {\n    mapping,\n    canvasHeight\n  };\n}\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (const column of columns) {\n    const {\n      icon,\n      xOffset\n    } = column;\n    mapping[icon.id] = _objectSpread(_objectSpread({}, icon), {}, {\n      x: xOffset,\n      y: yOffset,\n      image: icon.image,\n      width: icon.width,\n      height: icon.height\n    });\n  }\n}\nexport function nextPowOfTwo(num) {\n  return Math.pow(2, Math.ceil(Math.log2(num)));\n}","map":{"version":3,"names":["_objectSpread","glyphSizeInSDF","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","Array","from","forEach","char","i","width","y","height","advance","rowHeight","canvasHeight","nextPowOfTwo","buildIconMaping","icons","columns","icon","id","size","buildRowMapping","push","Math","max","length","column","image","num","pow","ceil","log2"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/utils/font_util.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/**\n * tiny-sdf 中每个 glyph 的宽度（加上 buffer 24 + 3 + 3 = 30）\n */\nconst glyphSizeInSDF = 30;\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  let x = xOffset;\n  Array.from(characterSet).forEach((char, i) => {\n    if (!mapping[char]) {\n      const width = getFontWidth(char, i);\n      if (x + glyphSizeInSDF > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x,\n        y: yOffset + row * glyphSizeInSDF,\n        width: glyphSizeInSDF,\n        height: glyphSizeInSDF,\n        advance: width\n      };\n      x += glyphSizeInSDF;\n    }\n  });\n  const rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\nexport function buildIconMaping(icons, buffer, maxCanvasWidth) {\n  let xOffset = 0;\n  let yOffset = 0;\n  let rowHeight = 0;\n  let columns = [];\n  const mapping = {};\n  for (const icon of icons) {\n    if (!mapping[icon.id]) {\n      const {\n        size\n      } = icon;\n\n      // fill one row\n      if (xOffset + size + buffer > maxCanvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n      columns.push({\n        icon,\n        xOffset\n      });\n      xOffset = xOffset + size + buffer;\n      rowHeight = Math.max(rowHeight, size);\n    }\n  }\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n  const canvasHeight = nextPowOfTwo(rowHeight + yOffset + buffer);\n  return {\n    mapping,\n    canvasHeight\n  };\n}\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (const column of columns) {\n    const {\n      icon,\n      xOffset\n    } = column;\n    mapping[icon.id] = _objectSpread(_objectSpread({}, icon), {}, {\n      x: xOffset,\n      y: yOffset,\n      image: icon.image,\n      width: icon.width,\n      height: icon.height\n    });\n  }\n}\nexport function nextPowOfTwo(num) {\n  return Math.pow(2, Math.ceil(Math.log2(num)));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}