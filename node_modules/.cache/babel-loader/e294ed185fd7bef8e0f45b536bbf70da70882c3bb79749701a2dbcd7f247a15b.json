{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n(function (NsGraphUtils) {\n  function isNodeEqual(curNodeConfig, nextNodeConfig) {\n    /** XFlow默认的判断节点是否相等的逻辑 */\n    return isEqual(curNodeConfig, nextNodeConfig);\n  }\n  NsGraphUtils.isNodeEqual = isNodeEqual;\n  function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n    /** XFlow默认的判断边是否相等的逻辑 */\n    return isEqual(curEdgeConfig, nextEdgeConfig);\n  }\n  NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\nexport var NsGraphRender;\n(function (NsGraphRender) {\n  /** Command: 用于注册named factory */\n  NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n  /** hookName */\n  NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\nlet GraphRenderCommand = class GraphRenderCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.graphRender.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const graphMeta = yield this.ctx.getGraphMeta();\n        const {\n          beforeRender,\n          graphData,\n          isNodeEqual,\n          isEdgeEqual,\n          afterRender\n        } = handlerArgs;\n        /** 如果用户自定义beforeRender方法 */\n        beforeRender && beforeRender(graphMeta);\n        yield this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n        /** 如果用户自定义afterRender方法 */\n        afterRender && afterRender(graphData, graphMeta);\n        return {};\n      }), runtimeHook);\n      /** 设置结果 */\n      this.ctx.setResult(result);\n      return this;\n    });\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n      return this;\n    });\n    this.doLoadGraph = (x6Graph, graphData, isNodeEqual, isEdgeEqual) => __awaiter(this, void 0, void 0, function* () {\n      if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n      }\n      const commandService = this.ctx.getCommands();\n      const {\n        addNodeConfigs,\n        addEdgeConfigs,\n        // retainNodes,\n        // retainEdges,\n        removeNodes,\n        removeEdges,\n        updateNodes,\n        updateEdges\n      } = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n      /** 更新节点/边 */\n      for (const updateNode of updateNodes) {\n        const nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n        yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: nodeData\n        });\n      }\n      for (const updateEdge of updateEdges) {\n        const edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n      /** 新增节点/边 */\n      for (const nodeConfig of addNodeConfigs) {\n        yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n          nodeConfig,\n          options: {\n            isRenderGraph: true\n          }\n        }, {\n          name: 'remove servcie',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createNodeService;\n          })\n        });\n      }\n      yield commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n        graphData: {\n          nodes: addNodeConfigs,\n          edges: []\n        }\n      });\n      for (const edgeConfig of addEdgeConfigs) {\n        yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n          edgeConfig,\n          options: {\n            isRenderGraph: true\n          }\n        }, {\n          name: 'remove servcie',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createEdgeService;\n          })\n        });\n      }\n      /** 删除节点/边/群组 */\n      for (const removeNode of removeNodes) {\n        const nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n        if (nodeData.isGroup) {\n          yield commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n            nodeConfig: nodeData\n          });\n        } else {\n          yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        }\n      }\n      for (const removeEdge of removeEdges) {\n        const edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n      if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n      }\n    });\n  }\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n  /**\n   * 画布内容Diff\n   * @param x6Graph x6画布实例\n   * @param graphData 画布数据\n   * @param isNodeEqual 允许用户自定义判断节点是否相等\n   * @param isEdgeEqual 允许用户自定义判断边是否相等\n   */\n  graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n    const {\n      nodes: nodeConfigs,\n      edges: edgeConfigs\n    } = graphData;\n    /** 新增节点数据 */\n    const addNodeConfigs = [];\n    nodeConfigs.forEach(nodeConfig => {\n      const findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n      if (!findNode) {\n        addNodeConfigs.push(nodeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n    const retainNodes = [];\n    const updateNodes = [];\n    const removeNodes = [];\n    const allNodes = x6Graph.getNodes();\n    allNodes.forEach(x6Node => {\n      const findNodeConfig = nodeConfigs.find(nodeConfig => (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id));\n      if (!findNodeConfig) {\n        removeNodes.push(x6Node);\n      } else {\n        let judgeResult = true;\n        if (isNodeEqual) {\n          /** 如果用户自定义节点是否相等的方法 */\n          judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n        } else {\n          /** XFlow默认的判断节点是否相等的逻辑 */\n          if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n            judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n          }\n        }\n        if (!judgeResult) {\n          x6Node.setData(findNodeConfig, {\n            deep: false\n          });\n        }\n        judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n      }\n    });\n    /** 新增边数据 */\n    const addEdgeConfigs = [];\n    edgeConfigs.forEach(edgeConfig => {\n      const findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n      if (!findEdge) {\n        addEdgeConfigs.push(edgeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n    const retainEdges = [];\n    const updateEdges = [];\n    const removeEdges = [];\n    const allEdges = x6Graph.getEdges();\n    allEdges.forEach(x6Edge => {\n      const findEdgeConfig = edgeConfigs.find(edgeConfig => (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id));\n      if (!findEdgeConfig) {\n        removeEdges.push(x6Edge);\n      } else {\n        let judgeResult = true;\n        if (isEdgeEqual) {\n          /** 如果用户自定义边是否相等的方法 */\n          judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n        } else {\n          /** XFlow默认的判断边是否相等的逻辑 */\n          if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n            judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n          }\n        }\n        if (!judgeResult) {\n          x6Edge.setData(findEdgeConfig, {\n            deep: false\n          });\n        }\n        judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n      }\n    });\n    return {\n      addNodeConfigs,\n      addEdgeConfigs,\n      retainNodes,\n      retainEdges,\n      removeNodes,\n      removeEdges,\n      updateNodes,\n      updateEdges\n    };\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphRenderCommand.prototype, \"init\", null);\nGraphRenderCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphRender.command.id\n  }\n})\n/** 画布渲染命令 */], GraphRenderCommand);\nexport { GraphRenderCommand };","map":{"version":3,"names":["isEqual","inject","injectable","postConstruct","XFlowGraphCommands","XFlowNodeCommands","XFlowEdgeCommands","XFlowGroupCommands","ICommandHandler","ICommandContextProvider","NsGraphUtils","isNodeEqual","curNodeConfig","nextNodeConfig","isEdgeEqual","curEdgeConfig","nextEdgeConfig","NsGraphRender","command","GRAPH_RENDER","hookKey","GraphRenderCommand","constructor","execute","__awaiter","args","hooks","runtimeHook","ctx","getArgs","getHooks","result","graphRender","call","handlerArgs","x6Graph","getX6Graph","graphMeta","getGraphMeta","beforeRender","graphData","afterRender","doLoadGraph","setResult","undo","redo","isUndoable","isFrozen","freeze","commandService","getCommands","addNodeConfigs","addEdgeConfigs","removeNodes","removeEdges","updateNodes","updateEdges","graphDataDiff","updateNode","nodeData","getData","executeCommand","UPDATE_NODE","id","nodeConfig","updateEdge","edgeData","UPDATE_EDGE","edgeConfig","ADD_NODE","options","isRenderGraph","name","handler","createNodeService","INIT_GROUP","nodes","edges","ADD_EDGE","createEdgeService","removeNode","isGroup","DEL_GROUP","DEL_NODE","removeEdge","DEL_EDGE","unfreeze","init","contextProvider","nodeConfigs","edgeConfigs","forEach","findNode","getCellById","push","retainNodes","allNodes","getNodes","x6Node","findNodeConfig","find","judgeResult","data","setData","deep","findEdge","retainEdges","allEdges","getEdges","x6Edge","findEdgeConfig","__decorate","token","named"],"sources":["../../../src/command-contributions/graph/graph-render.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}