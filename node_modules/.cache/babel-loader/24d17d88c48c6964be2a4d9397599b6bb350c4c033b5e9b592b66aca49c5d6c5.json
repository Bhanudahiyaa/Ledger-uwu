{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { FrameGraphHandle } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n\nexport var FrameGraphSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function FrameGraphSystem() {\n    _classCallCheck(this, FrameGraphSystem);\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n  }\n  _createClass(FrameGraphSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // this.engine.beginFrame();\n                this.compile();\n                _context.next = 3;\n                return this.executePassNodes(views);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.frameGraphPasses.forEach(function (pass) {\n        if (pass.tearDown) {\n          pass.tearDown();\n        }\n      });\n      this.reset();\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(name, setup, execute, tearDown) {\n      var frameGraphPass = new FrameGraphPass();\n      frameGraphPass.execute = execute;\n      if (tearDown) {\n        frameGraphPass.tearDown = tearDown;\n      }\n      frameGraphPass.name = name;\n      var passNode = new PassNode();\n      passNode.name = name;\n      this.passNodes.push(passNode);\n      this.frameGraphPasses.push(frameGraphPass);\n      setup(this, passNode, frameGraphPass);\n      return frameGraphPass;\n    }\n  }, {\n    key: \"getPass\",\n    value: function getPass(name) {\n      return this.frameGraphPasses.find(function (p) {\n        return p.name === name;\n      });\n    }\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n      var _iterator = _createForOfIteratorHelper(this.passNodes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _pass = _step.value;\n          _pass.refCount = _pass.writes.length + (_pass.hasSideEffect ? 1 : 0);\n          _pass.reads.forEach(function (handle) {\n            _this.resourceNodes[handle.index].readerCount++;\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var stack = [];\n      var _iterator2 = _createForOfIteratorHelper(this.resourceNodes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n          if (node.readerCount === 0) {\n            stack.push(node);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      while (stack.length) {\n        var pNode = stack.pop();\n        var writer = pNode && pNode.writer;\n        if (writer) {\n          if (--writer.refCount === 0) {\n            // this pass is culled\n            // assert(!writer->hasSideEffect);\n            var _iterator3 = _createForOfIteratorHelper(writer.reads),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var resource = _step3.value;\n                var r = this.resourceNodes[resource.index];\n                if (--r.readerCount === 0) {\n                  stack.push(r);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } // update the final reference counts\n\n      this.resourceNodes.forEach(function (node) {\n        node.resource.refs += node.readerCount;\n      });\n      var _iterator4 = _createForOfIteratorHelper(this.passNodes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _pass2 = _step4.value;\n          if (!_pass2.refCount) {\n            continue;\n          }\n          var _iterator6 = _createForOfIteratorHelper(_pass2.reads),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _resource2 = _step6.value;\n              var pResource = this.resourceNodes[_resource2.index].resource;\n              pResource.first = pResource.first ? pResource.first : _pass2;\n              pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          var _iterator7 = _createForOfIteratorHelper(_pass2.writes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _resource3 = _step7.value;\n              var _pResource = this.resourceNodes[_resource3.index].resource;\n              _pResource.first = _pResource.first ? _pResource.first : _pass2;\n              _pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      for (var priority = 0; priority < 2; priority++) {\n        var _iterator5 = _createForOfIteratorHelper(this.resourceNodes),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var resoureNode = _step5.value;\n            var _resource = resoureNode.resource;\n            if (_resource.priority === priority && _resource.refs) {\n              var pFirst = _resource.first;\n              var pLast = _resource.last;\n              if (pFirst && pLast) {\n                pFirst.devirtualize.push(_resource);\n                pLast.destroy.push(_resource);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"executePassNodes\",\n    value: function () {\n      var _executePassNodes = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(views) {\n        var _iterator8, _step8, _step8$value, index, node, _iterator9, _step9, resource, _iterator10, _step10, _resource4, _iterator11, _step11, _resource5, _iterator12, _step12, _resource6;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator8 = _createForOfIteratorHelper(this.passNodes.entries());\n                _context2.prev = 1;\n                _iterator8.s();\n              case 3:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n                _step8$value = _slicedToArray(_step8.value, 2), index = _step8$value[0], node = _step8$value[1];\n                if (!node.refCount) {\n                  _context2.next = 16;\n                  break;\n                }\n                _iterator9 = _createForOfIteratorHelper(node.devirtualize);\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    resource = _step9.value;\n                    resource.preExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n                _iterator10 = _createForOfIteratorHelper(node.destroy);\n                try {\n                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                    _resource4 = _step10.value;\n                    _resource4.preExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator10.e(err);\n                } finally {\n                  _iterator10.f();\n                }\n                _context2.next = 12;\n                return this.frameGraphPasses[index].execute(this, this.frameGraphPasses[index], views);\n              case 12:\n                _iterator11 = _createForOfIteratorHelper(node.devirtualize);\n                try {\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    _resource5 = _step11.value;\n                    _resource5.postExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n                _iterator12 = _createForOfIteratorHelper(node.destroy);\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    _resource6 = _step12.value;\n                    _resource6.postExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n              case 16:\n                _context2.next = 3;\n                break;\n              case 18:\n                _context2.next = 23;\n                break;\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](1);\n                _iterator8.e(_context2.t0);\n              case 23:\n                _context2.prev = 23;\n                _iterator8.f();\n                return _context2.finish(23);\n              case 26:\n                this.reset();\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 20, 23, 26]]);\n      }));\n      function executePassNodes(_x2) {\n        return _executePassNodes.apply(this, arguments);\n      }\n      return executePassNodes;\n    }()\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.passNodes = [];\n      this.resourceNodes = [];\n      this.frameGraphPasses = [];\n    }\n  }, {\n    key: \"getResourceNode\",\n    value: function getResourceNode(r) {\n      return this.resourceNodes[r.index];\n    }\n  }, {\n    key: \"createResourceNode\",\n    value: function createResourceNode(resourceEntry) {\n      var resourceNode = new ResourceNode();\n      resourceNode.resource = resourceEntry;\n      resourceNode.version = resourceEntry.version;\n      this.resourceNodes.push(resourceNode);\n      var fgh = new FrameGraphHandle();\n      fgh.index = this.resourceNodes.length - 1;\n      return fgh;\n    }\n  }, {\n    key: \"createTexture\",\n    value: function createTexture(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"createRenderTarget\",\n    value: function createRenderTarget(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"present\",\n    value: function present(input) {\n      this.addPass('Present', function (fg, passNode) {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      }, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n  }]);\n  return FrameGraphSystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["inject","injectable","IDENTIFIER","FrameGraphHandle","FrameGraphPass","PassNode","ResourceEntry","ResourceNode","FrameGraphSystem","_dec","_dec2","RenderEngine","_class","_class2","_temp","_classCallCheck","passNodes","resourceNodes","frameGraphPasses","_initializerDefineProperty","_descriptor","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","views","wrap","_callee$","_context","prev","next","compile","executePassNodes","stop","execute","_x","apply","arguments","tearDown","forEach","pass","reset","addPass","name","setup","frameGraphPass","passNode","push","getPass","find","p","_this","_iterator","_createForOfIteratorHelper","_step","s","n","done","_pass","refCount","writes","length","hasSideEffect","reads","handle","index","readerCount","err","e","f","stack","_iterator2","_step2","node","pNode","pop","writer","_iterator3","_step3","resource","r","refs","_iterator4","_step4","_pass2","_iterator6","_step6","_resource2","pResource","first","last","_iterator7","_step7","_resource3","_pResource","priority","_iterator5","_step5","resoureNode","_resource","pFirst","pLast","devirtualize","destroy","_executePassNodes","_callee2","_iterator8","_step8","_step8$value","_iterator9","_step9","_iterator10","_step10","_resource4","_iterator11","_step11","_resource5","_iterator12","_step12","_resource6","_callee2$","_context2","entries","_slicedToArray","preExecuteDevirtualize","engine","preExecuteDestroy","postExecuteDevirtualize","postExecuteDestroy","t0","finish","_x2","getResourceNode","createResourceNode","resourceEntry","resourceNode","version","fgh","createTexture","descriptor","createRenderTarget","present","input","fg","read","_callee3","_callee3$","_context3","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/framegraph/System.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\nimport { ISystem, IView } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { FrameGraphHandle, TextureDescriptor } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n@injectable()\nexport class FrameGraphSystem implements ISystem {\n  public passNodes: PassNode[] = [];\n\n  public resourceNodes: ResourceNode[] = [];\n\n  public frameGraphPasses: Array<FrameGraphPass<any>> = [];\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute(views: IView[]) {\n    // this.engine.beginFrame();\n    this.compile();\n    await this.executePassNodes(views);\n    // this.engine.endFrame();\n  }\n\n  public tearDown() {\n    this.frameGraphPasses.forEach((pass) => {\n      if (pass.tearDown) {\n        pass.tearDown();\n      }\n    });\n    this.reset();\n  }\n\n  public addPass<PassData>(\n    name: string,\n    setup: (\n      fg: FrameGraphSystem,\n      passNode: PassNode,\n      pass: FrameGraphPass<PassData>,\n    ) => void,\n    execute: (\n      fg: FrameGraphSystem,\n      pass: FrameGraphPass<PassData>,\n      views: IView[],\n    ) => Promise<void>,\n    tearDown?: () => void,\n  ) {\n    const frameGraphPass = new FrameGraphPass<PassData>();\n    frameGraphPass.execute = execute;\n    if (tearDown) {\n      frameGraphPass.tearDown = tearDown;\n    }\n    frameGraphPass.name = name;\n\n    const passNode = new PassNode();\n    passNode.name = name;\n    this.passNodes.push(passNode);\n\n    this.frameGraphPasses.push(frameGraphPass);\n\n    setup(this, passNode, frameGraphPass);\n\n    return frameGraphPass;\n  }\n\n  public getPass<T>(name: string): FrameGraphPass<T> | undefined {\n    return this.frameGraphPasses.find((p) => p.name === name);\n  }\n\n  public compile() {\n    for (const pass of this.passNodes) {\n      pass.refCount = pass.writes.length + (pass.hasSideEffect ? 1 : 0);\n\n      pass.reads.forEach((handle) => {\n        this.resourceNodes[handle.index].readerCount++;\n      });\n    }\n\n    const stack: ResourceNode[] = [];\n    for (const node of this.resourceNodes) {\n      if (node.readerCount === 0) {\n        stack.push(node);\n      }\n    }\n    while (stack.length) {\n      const pNode = stack.pop();\n      const writer = pNode && pNode.writer;\n      if (writer) {\n        if (--writer.refCount === 0) {\n          // this pass is culled\n          // assert(!writer->hasSideEffect);\n          for (const resource of writer.reads) {\n            const r = this.resourceNodes[resource.index];\n            if (--r.readerCount === 0) {\n              stack.push(r);\n            }\n          }\n        }\n      }\n    }\n\n    // update the final reference counts\n    this.resourceNodes.forEach((node) => {\n      node.resource.refs += node.readerCount;\n    });\n\n    for (const pass of this.passNodes) {\n      if (!pass.refCount) {\n        continue;\n      }\n      for (const resource of pass.reads) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n      for (const resource of pass.writes) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n    }\n\n    for (let priority = 0; priority < 2; priority++) {\n      for (const resoureNode of this.resourceNodes) {\n        const resource = resoureNode.resource;\n        if (resource.priority === priority && resource.refs) {\n          const pFirst = resource.first;\n          const pLast = resource.last;\n          if (pFirst && pLast) {\n            pFirst.devirtualize.push(resource);\n            pLast.destroy.push(resource);\n          }\n        }\n      }\n    }\n  }\n\n  public async executePassNodes(views: IView[]) {\n    for (const [index, node] of this.passNodes.entries()) {\n      if (node.refCount) {\n        for (const resource of node.devirtualize) {\n          resource.preExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.preExecuteDestroy(this.engine);\n        }\n\n        await this.frameGraphPasses[index].execute(\n          this,\n          this.frameGraphPasses[index],\n          views,\n        );\n\n        for (const resource of node.devirtualize) {\n          resource.postExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.postExecuteDestroy(this.engine);\n        }\n      }\n    }\n    this.reset();\n  }\n\n  public reset() {\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n  }\n\n  public getResourceNode(r: FrameGraphHandle) {\n    return this.resourceNodes[r.index];\n  }\n\n  public createResourceNode(resourceEntry: ResourceEntry) {\n    const resourceNode = new ResourceNode();\n    resourceNode.resource = resourceEntry;\n    resourceNode.version = resourceEntry.version;\n\n    this.resourceNodes.push(resourceNode);\n\n    const fgh = new FrameGraphHandle();\n    fgh.index = this.resourceNodes.length - 1;\n\n    return fgh;\n  }\n\n  public createTexture(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public createRenderTarget(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public present(input: FrameGraphHandle) {\n    this.addPass<{}>(\n      'Present',\n      (fg, passNode) => {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      },\n      async () => {\n        // 不需要执行\n      },\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}