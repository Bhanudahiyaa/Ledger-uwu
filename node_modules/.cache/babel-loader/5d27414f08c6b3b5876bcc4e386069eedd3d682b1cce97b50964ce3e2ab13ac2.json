{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsUpdateNodePort;\n(function (NsUpdateNodePort) {\n  /** Command: 用于注册named factory */\n  NsUpdateNodePort.command = XFlowNodeCommands.UPDATE_NODE_PORT;\n  /** hookName */\n  NsUpdateNodePort.hookKey = 'updateNodePort';\n})(NsUpdateNodePort || (NsUpdateNodePort = {}));\nlet UpdateNodePort = class UpdateNodePort {\n  constructor() {\n    this.getCell = (graph, node) => {\n      if (typeof node === 'string') {\n        return graph.getCellById(node);\n      }\n      return node;\n    };\n    this.getNodeConfig = x6Node => {\n      const data = x6Node.getData();\n      const position = x6Node.getPosition();\n      const size = x6Node.getSize();\n      return Object.assign(Object.assign(Object.assign({}, data), position), size);\n    };\n    this.updatePortsOfNodeConfig = (cell, ports, options) => {\n      const nodeConfig = this.getNodeConfig(cell);\n      if (this.isNodeAnchors(nodeConfig.ports)) {\n        nodeConfig.ports = [...ports];\n      }\n      if (this.isPortMetaData(nodeConfig.ports)) {\n        nodeConfig.ports.items = [...ports];\n      }\n      cell.setData(nodeConfig, options);\n    };\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const graph = yield ctx.getX6Graph();\n      const result = yield hooks.updateNodePort.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          node,\n          updatePorts,\n          options,\n          commandService\n        } = handlerArgs;\n        const cell = this.getCell(graph, node);\n        if (!cell || cell.isEdge()) {\n          console.error('node_is _not_exsit', node);\n          return {\n            err: 'node_is _not_exsit'\n          };\n        }\n        const currentPorts = cell.getPorts();\n        const nextPorts = yield updatePorts([...currentPorts], cell, graph);\n        if (nextPorts === false) {\n          return {\n            err: 'service rejected'\n          };\n        }\n        cell.setPropByPath('ports/items', nextPorts, Object.assign({\n          rewrite: true\n        }, options));\n        /** update nodeConfig */\n        this.updatePortsOfNodeConfig(cell, nextPorts, options);\n        /** add undo */\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE_PORT.id, {\n            node,\n            updatePorts: () => __awaiter(this, void 0, void 0, function* () {\n              return currentPorts;\n            })\n          });\n        })));\n        return {\n          ports: nextPorts\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isNodeAnchors(ports) {\n    return Array.isArray(ports);\n  }\n  isPortMetaData(ports) {\n    return ports.items && Array.isArray(ports.items);\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateNodePort.prototype, \"contextProvider\", void 0);\nUpdateNodePort = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateNodePort.command.id\n  }\n})\n/** 创建节点命令 */], UpdateNodePort);\nexport { UpdateNodePort };","map":{"version":3,"names":["inject","injectable","XFlowNodeCommands","Disposable","ICommandHandler","ICommandContextProvider","NsUpdateNodePort","command","UPDATE_NODE_PORT","hookKey","UpdateNodePort","constructor","getCell","graph","node","getCellById","getNodeConfig","x6Node","data","getData","position","getPosition","size","getSize","Object","assign","updatePortsOfNodeConfig","cell","ports","options","nodeConfig","isNodeAnchors","isPortMetaData","items","setData","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","getX6Graph","result","updateNodePort","call","handlerArgs","updatePorts","commandService","isEdge","console","error","err","currentPorts","getPorts","nextPorts","setPropByPath","rewrite","addUndo","create","executeCommand","id","setResult","undo","isUndoable","redo","Array","isArray","__decorate","token","named"],"sources":["../../../src/command-contributions/node/node-update-port.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}