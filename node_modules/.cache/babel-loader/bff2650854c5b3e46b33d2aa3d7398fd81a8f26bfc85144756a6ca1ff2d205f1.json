{"ast":null,"code":"/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nimport { isString, isArray, isNumber, getDegree, isNaN, isObject } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * 网格布局\n */\nexport class GridLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局起始点 */\n    this.begin = [0, 0];\n    /** prevents node overlap, may overflow boundingBox if not enough space */\n    this.preventOverlap = true;\n    /** extra spacing around nodes when preventOverlap: true */\n    this.preventOverlapPadding = 10;\n    /** uses all available space on false, uses minimal space on true */\n    this.condense = false;\n    /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n    this.sortBy = \"degree\";\n    this.nodeSize = 30;\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.row = 0;\n    this.col = 0;\n    this.cellWidth = 0;\n    this.cellHeight = 0;\n    this.cellUsed = {};\n    this.id2manPos = {};\n    /** 迭代结束的回调函数 */\n    this.onLayoutEnd = () => {};\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      begin: [0, 0],\n      preventOverlap: true,\n      preventOverlapPadding: 10,\n      condense: false,\n      rows: undefined,\n      cols: undefined,\n      position: undefined,\n      sortBy: \"degree\",\n      nodeSize: 30\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    const n = nodes.length;\n    const begin = self.begin;\n    if (n === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges\n      };\n    }\n    if (n === 1) {\n      nodes[0].x = begin[0];\n      nodes[0].y = begin[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges\n      };\n    }\n    const layoutNodes = [];\n    nodes.forEach(node => {\n      layoutNodes.push(node);\n    });\n    const nodeIdxMap = {};\n    layoutNodes.forEach((node, i) => {\n      nodeIdxMap[node.id] = i;\n    });\n    if (self.sortBy === \"degree\" || !isString(self.sortBy) || layoutNodes[0][self.sortBy] === undefined) {\n      self.sortBy = \"degree\";\n      if (isNaN(nodes[0].degree)) {\n        const values = getDegree(layoutNodes.length, nodeIdxMap, edges);\n        layoutNodes.forEach((node, i) => {\n          node.degree = values[i];\n        });\n      }\n    }\n    // sort nodes by value\n    layoutNodes.sort((n1, n2) => n2[self.sortBy] - n1[self.sortBy]);\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    const oRows = self.rows;\n    const oCols = self.cols != null ? self.cols : self.columns;\n    self.cells = n;\n    // if rows or columns were set in self, use those values\n    if (oRows != null && oCols != null) {\n      self.rows = oRows;\n      self.cols = oCols;\n    } else if (oRows != null && oCols == null) {\n      self.rows = oRows;\n      self.cols = Math.ceil(self.cells / self.rows);\n    } else if (oRows == null && oCols != null) {\n      self.cols = oCols;\n      self.rows = Math.ceil(self.cells / self.cols);\n    } else {\n      // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n      // width/height * splits^2 = cells where splits is number of times to split width\n      self.splits = Math.sqrt(self.cells * self.height / self.width);\n      self.rows = Math.round(self.splits);\n      self.cols = Math.round(self.width / self.height * self.splits);\n    }\n    if (self.cols * self.rows > self.cells) {\n      // otherwise use the automatic values and adjust accordingly\n      // if rounding was up, see if we can reduce rows or columns\n      const sm = self.small();\n      const lg = self.large();\n      // reducing the small side takes away the most cells, so try it first\n      if ((sm - 1) * lg >= self.cells) {\n        self.small(sm - 1);\n      } else if ((lg - 1) * sm >= self.cells) {\n        self.large(lg - 1);\n      }\n    } else {\n      // if rounding was too low, add rows or columns\n      while (self.cols * self.rows < self.cells) {\n        const sm = self.small();\n        const lg = self.large();\n        // try to add to larger side first (adds less in multiplication)\n        if ((lg + 1) * sm >= self.cells) {\n          self.large(lg + 1);\n        } else {\n          self.small(sm + 1);\n        }\n      }\n    }\n    self.cellWidth = self.width / self.cols;\n    self.cellHeight = self.height / self.rows;\n    if (self.condense) {\n      self.cellWidth = 0;\n      self.cellHeight = 0;\n    }\n    if (self.preventOverlap) {\n      layoutNodes.forEach(node => {\n        if (!node.x || !node.y) {\n          // for bb\n          node.x = 0;\n          node.y = 0;\n        }\n        let nodew;\n        let nodeh;\n        if (isArray(node.size)) {\n          nodew = node.size[0];\n          nodeh = node.size[1];\n        } else if (isNumber(node.size)) {\n          nodew = node.size;\n          nodeh = node.size;\n        } else if (isObject(node.size)) {\n          nodew = node.size.width;\n          nodeh = node.size.height;\n        }\n        if (nodew === undefined || nodeh === undefined) {\n          if (isArray(self.nodeSize)) {\n            nodew = self.nodeSize[0];\n            nodeh = self.nodeSize[1];\n          } else if (isNumber(self.nodeSize)) {\n            nodew = self.nodeSize;\n            nodeh = self.nodeSize;\n          } else {\n            nodew = 30;\n            nodeh = 30;\n          }\n        }\n        const p = self.preventOverlapPadding;\n        const w = nodew + p;\n        const h = nodeh + p;\n        self.cellWidth = Math.max(self.cellWidth, w);\n        self.cellHeight = Math.max(self.cellHeight, h);\n      });\n    }\n    self.cellUsed = {}; // e.g. 'c-0-2' => true\n    // to keep track of current cell position\n    self.row = 0;\n    self.col = 0;\n    // get a cache of all the manual positions\n    self.id2manPos = {};\n    for (let i = 0; i < layoutNodes.length; i++) {\n      const node = layoutNodes[i];\n      let rcPos;\n      if (self.position) {\n        rcPos = self.position(node);\n      }\n      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n        // must have at least row or col def'd\n        const pos = {\n          row: rcPos.row,\n          col: rcPos.col\n        };\n        if (pos.col === undefined) {\n          // find unused col\n          pos.col = 0;\n          while (self.used(pos.row, pos.col)) {\n            pos.col++;\n          }\n        } else if (pos.row === undefined) {\n          // find unused row\n          pos.row = 0;\n          while (self.used(pos.row, pos.col)) {\n            pos.row++;\n          }\n        }\n        self.id2manPos[node.id] = pos;\n        self.use(pos.row, pos.col);\n      }\n      self.getPos(node);\n    }\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      edges,\n      nodes: layoutNodes\n    };\n  }\n  small(val) {\n    const self = this;\n    let res;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n    if (val == null) {\n      res = Math.min(rows, cols);\n    } else {\n      const min = Math.min(rows, cols);\n      if (min === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n    return res;\n  }\n  large(val) {\n    const self = this;\n    let res;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n    if (val == null) {\n      res = Math.max(rows, cols);\n    } else {\n      const max = Math.max(rows, cols);\n      if (max === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n    return res;\n  }\n  used(row, col) {\n    const self = this;\n    return self.cellUsed[`c-${row}-${col}`] || false;\n  }\n  use(row, col) {\n    const self = this;\n    self.cellUsed[`c-${row}-${col}`] = true;\n  }\n  moveToNextCell() {\n    const self = this;\n    const cols = self.cols || 5;\n    self.col++;\n    if (self.col >= cols) {\n      self.col = 0;\n      self.row++;\n    }\n  }\n  getPos(node) {\n    const self = this;\n    const begin = self.begin;\n    const cellWidth = self.cellWidth;\n    const cellHeight = self.cellHeight;\n    let x;\n    let y;\n    // see if we have a manual position set\n    const rcPos = self.id2manPos[node.id];\n    if (rcPos) {\n      x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n      y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    } else {\n      // otherwise set automatically\n      while (self.used(self.row, self.col)) {\n        self.moveToNextCell();\n      }\n      x = self.col * cellWidth + cellWidth / 2 + begin[0];\n      y = self.row * cellHeight + cellHeight / 2 + begin[1];\n      self.use(self.row, self.col);\n      self.moveToNextCell();\n    }\n    node.x = x;\n    node.y = y;\n  }\n  getType() {\n    return \"grid\";\n  }\n}","map":{"version":3,"names":["isString","isArray","isNumber","getDegree","isNaN","isObject","Base","GridLayout","constructor","options","begin","preventOverlap","preventOverlapPadding","condense","sortBy","nodeSize","nodes","edges","width","height","row","col","cellWidth","cellHeight","cellUsed","id2manPos","onLayoutEnd","updateCfg","getDefaultCfg","rows","undefined","cols","position","execute","self","n","length","x","y","layoutNodes","forEach","node","push","nodeIdxMap","i","id","degree","values","sort","n1","n2","window","innerWidth","innerHeight","oRows","oCols","columns","cells","Math","ceil","splits","sqrt","round","sm","small","lg","large","nodew","nodeh","size","p","w","h","max","rcPos","pos","used","use","getPos","val","res","min","moveToNextCell","getType"],"sources":["../../src/layout/grid.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}