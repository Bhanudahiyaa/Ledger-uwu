{"ast":null,"code":"export function diff(oldList, newList, key) {\n  const oldMap = makeKeyIndexAndFree(oldList, key);\n  const newMap = makeKeyIndexAndFree(newList, key);\n  const newFree = newMap.free;\n  const oldKeyIndex = oldMap.keyIndex;\n  const newKeyIndex = newMap.keyIndex;\n  const moves = [];\n  const children = [];\n  let i = 0;\n  let item;\n  let itemKey;\n  let freeIndex = 0;\n  while (i < oldList.length) {\n    item = oldList[i];\n    itemKey = item[key];\n    if (itemKey) {\n      // eslint-disable-next-line\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null);\n      } else {\n        const newItemIndex = newKeyIndex[itemKey];\n        children.push(newList[newItemIndex]);\n      }\n    } else {\n      freeIndex += 1;\n      const freeItem = newFree[freeIndex];\n      children.push(freeItem || null);\n    }\n    i += 1;\n  }\n  const simulateList = children.slice(0);\n  i = 0;\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i);\n      removeSimulate(i);\n    } else {\n      i += 1;\n    }\n  }\n  let j = i = 0;\n  while (i < newList.length) {\n    item = newList[i];\n    itemKey = item[key];\n    const simulateItem = simulateList[j];\n    if (simulateItem) {\n      const simulateItemKey = simulateItem[key];\n      if (itemKey === simulateItemKey) {\n        j += 1;\n      } else {\n        // eslint-disable-next-line\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n          insert(i, item);\n        } else {\n          const nextSimulateItem = simulateList[j + 1];\n          if (nextSimulateItem) {\n            const nextItemKey = nextSimulateItem[key];\n            if (nextItemKey === itemKey) {\n              remove(i);\n              removeSimulate(j);\n              j += 1;\n            } else {\n              insert(i, item);\n            }\n          }\n        }\n      }\n    } else {\n      insert(i, item);\n    }\n    i += 1;\n  }\n  let k = simulateList.length - j;\n  while ((j += 1) < simulateList.length) {\n    k -= 1;\n    remove(k + i);\n  }\n  function remove(index) {\n    const move = {\n      index,\n      type: 0,\n      item: null\n    };\n    moves.push(move);\n  }\n  function insert(index, item) {\n    const move = {\n      index,\n      item,\n      type: 1\n    };\n    moves.push(move);\n  }\n  function removeSimulate(index) {\n    simulateList.splice(index, 1);\n  }\n  return {\n    moves\n  };\n}\nfunction makeKeyIndexAndFree(list, key) {\n  const keyIndex = {};\n  const free = [];\n  for (let i = 0, len = list.length; i < len; i += 1) {\n    const item = list[i];\n    const itemKey = item[key];\n    if (itemKey) {\n      keyIndex[itemKey] = i;\n    } else {\n      free.push(item);\n    }\n  }\n  return {\n    keyIndex,\n    free\n  };\n}","map":{"version":3,"names":["diff","oldList","newList","key","oldMap","makeKeyIndexAndFree","newMap","newFree","free","oldKeyIndex","keyIndex","newKeyIndex","moves","children","i","item","itemKey","freeIndex","length","hasOwnProperty","push","newItemIndex","freeItem","simulateList","slice","remove","removeSimulate","j","simulateItem","simulateItemKey","insert","nextSimulateItem","nextItemKey","k","index","move","type","splice","list","len"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/util/array/diff.ts"],"sourcesContent":["export function diff<T extends { [key: string]: any }>(\n  oldList: T[],\n  newList: T[],\n  key: string,\n) {\n  const oldMap = makeKeyIndexAndFree(oldList, key)\n  const newMap = makeKeyIndexAndFree(newList, key)\n\n  const newFree = newMap.free\n\n  const oldKeyIndex = oldMap.keyIndex\n  const newKeyIndex = newMap.keyIndex\n\n  const moves: { index: number; type: number; item: any }[] = []\n\n  const children = []\n  let i = 0\n  let item\n  let itemKey\n  let freeIndex = 0\n\n  while (i < oldList.length) {\n    item = oldList[i]\n    itemKey = item[key]\n    if (itemKey) {\n      // eslint-disable-next-line\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null)\n      } else {\n        const newItemIndex = newKeyIndex[itemKey]\n        children.push(newList[newItemIndex])\n      }\n    } else {\n      freeIndex += 1\n      const freeItem = newFree[freeIndex]\n      children.push(freeItem || null)\n    }\n    i += 1\n  }\n\n  const simulateList = children.slice(0)\n\n  i = 0\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i)\n      removeSimulate(i)\n    } else {\n      i += 1\n    }\n  }\n\n  let j = (i = 0)\n  while (i < newList.length) {\n    item = newList[i]\n    itemKey = item[key]\n\n    const simulateItem = simulateList[j]\n    if (simulateItem) {\n      const simulateItemKey = simulateItem[key]\n      if (itemKey === simulateItemKey) {\n        j += 1\n      } else {\n        // eslint-disable-next-line\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n          insert(i, item)\n        } else {\n          const nextSimulateItem = simulateList[j + 1]\n          if (nextSimulateItem) {\n            const nextItemKey = nextSimulateItem[key]\n            if (nextItemKey === itemKey) {\n              remove(i)\n              removeSimulate(j)\n              j += 1\n            } else {\n              insert(i, item)\n            }\n          }\n        }\n      }\n    } else {\n      insert(i, item)\n    }\n\n    i += 1\n  }\n\n  let k = simulateList.length - j\n  while ((j += 1) < simulateList.length) {\n    k -= 1\n    remove(k + i)\n  }\n\n  function remove(index: number) {\n    const move = { index, type: 0, item: null }\n    moves.push(move)\n  }\n\n  function insert(index: number, item: T) {\n    const move = { index, item, type: 1 }\n    moves.push(move)\n  }\n\n  function removeSimulate(index: number) {\n    simulateList.splice(index, 1)\n  }\n\n  return {\n    moves,\n  }\n}\n\nfunction makeKeyIndexAndFree<T extends { [key: string]: any }>(\n  list: T[],\n  key: string,\n) {\n  const keyIndex: { [key: string]: number } = {}\n  const free = []\n  for (let i = 0, len = list.length; i < len; i += 1) {\n    const item = list[i]\n    const itemKey = item[key]\n    if (itemKey) {\n      keyIndex[itemKey] = i\n    } else {\n      free.push(item)\n    }\n  }\n  return {\n    keyIndex,\n    free,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}