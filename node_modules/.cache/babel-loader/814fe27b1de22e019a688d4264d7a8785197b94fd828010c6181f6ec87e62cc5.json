{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as glUtils from \"./utils\";\nimport { drawFrag, drawVert, fullScreenFrag, fullScreenVert, updateFrag, updateVert } from \"./windShader\";\nfunction getColorRamp(colors) {\n  let canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  const gradient = ctx.createLinearGradient(0, 0, 256, 0);\n  for (const stop of Object.keys(colors)) {\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n\n  // @ts-ignore dispose canvas element\n  canvas = null;\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\nfunction bindAttribute(gl, buffer, attribute, numComponents) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\nfunction bindFramebuffer(gl, framebuffer, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (texture) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n}\nexport class Wind {\n  constructor(options) {\n    _defineProperty(this, \"width\", 512);\n    _defineProperty(this, \"height\", 512);\n    _defineProperty(this, \"pixels\", void 0);\n    _defineProperty(this, \"fadeOpacity\", void 0);\n    _defineProperty(this, \"speedFactor\", void 0);\n    _defineProperty(this, \"dropRate\", void 0);\n    _defineProperty(this, \"dropRateBump\", void 0);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"drawProgram\", void 0);\n    _defineProperty(this, \"fullScreenProgram\", void 0);\n    _defineProperty(this, \"updateProgram\", void 0);\n    _defineProperty(this, \"rampColors\", void 0);\n    _defineProperty(this, \"numParticles\", 65536);\n    _defineProperty(this, \"numParticlesSize\", void 0);\n    _defineProperty(this, \"particleStateResolution\", void 0);\n    _defineProperty(this, \"quadBuffer\", void 0);\n    _defineProperty(this, \"particleIndexBuffer\", void 0);\n    _defineProperty(this, \"framebuffer\", void 0);\n    _defineProperty(this, \"colorRampTexture\", void 0);\n    _defineProperty(this, \"backgroundTexture\", void 0);\n    _defineProperty(this, \"screenTexture\", void 0);\n    _defineProperty(this, \"particleStateTexture0\", void 0);\n    _defineProperty(this, \"particleStateTexture1\", void 0);\n    _defineProperty(this, \"windTexture\", void 0);\n    _defineProperty(this, \"windData\", void 0);\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n  init() {\n    const gl = this.gl;\n    this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n    this.speedFactor = 0.25; // how fast the particles move\n    this.dropRate = 0.003; // how often the particles move to a random place\n    this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n    this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n    this.fullScreenProgram = glUtils.createProgram(gl, fullScreenVert, fullScreenFrag);\n    this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n    this.quadBuffer = glUtils.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n    this.framebuffer = gl.createFramebuffer();\n    this.colorRampTexture = glUtils.createTexture(this.gl, this.gl.LINEAR, getColorRamp(this.rampColors), 16, 16);\n    const emptyPixels = new Uint8Array(this.width * this.height * 4);\n\n    // screen textures to hold the drawn screen for the previous and the current frame\n\n    this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n    this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n\n    // we create a square texture where each pixel will hold a particle position encoded as RGBA\n    const particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n    // particleRes size\n    this.numParticlesSize = particleRes * particleRes;\n    const particleState = new Uint8Array(this.numParticlesSize * 4);\n    for (let i = 0; i < particleState.length; i++) {\n      particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n    }\n    // textures to hold the particle state for the current and the next frame\n    this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n    this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n    const particleIndices = new Float32Array(this.numParticlesSize);\n    for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n      particleIndices[i$1] = i$1;\n    }\n    this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n  }\n  setWind(windData) {\n    this.windData = windData;\n    this.windTexture = glUtils.createDataTexture(this.gl, this.gl.LINEAR, windData.image);\n  }\n\n  /**\n   * 更新风场粒子数量\n   * @param num\n   */\n  updateParticelNum(num) {\n    const gl = this.gl;\n    if (num !== this.numParticles) {\n      this.numParticles = num; // params number\n\n      // we create a square texture where each pixel will hold a particle position encoded as RGBA\n      const particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n      this.numParticlesSize = particleRes * particleRes;\n      const particleState = new Uint8Array(this.numParticlesSize * 4);\n      for (let i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n      }\n      // textures to hold the particle state for the current and the next frame\n      this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      const particleIndices = new Float32Array(this.numParticlesSize);\n      for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }\n\n  /**\n   * 更新风场风向风速\n   * @param uMin\n   * @param uMax\n   * @param vMin\n   * @param vMax\n   */\n  updateWindDir(uMin, uMax, vMin, vMax) {\n    this.windData.uMin = uMin;\n    this.windData.uMax = uMax;\n    this.windData.vMin = vMin;\n    this.windData.vMax = vMax;\n  }\n\n  /**\n   * update rampColors\n   * @param rampColors\n   */\n  updateColorRampTexture(rampColors) {\n    if (this.isColorChanged(rampColors)) {\n      this.rampColors = rampColors;\n      const gl = this.gl;\n      gl.deleteTexture(this.colorRampTexture);\n      this.colorRampTexture = glUtils.createTexture(gl, gl.LINEAR, getColorRamp(rampColors), 16, 16);\n    }\n  }\n  isColorChanged(rampColors) {\n    const keys = Object.keys(rampColors);\n    for (const item of keys) {\n      const key = Number(item);\n      // exist new key -> color need update\n      if (!this.rampColors[key]) {\n        return true;\n      }\n      // value changed -> color need update\n      if (this.rampColors[key] && this.rampColors[key] !== rampColors[key]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  reSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      const gl = this.gl;\n      gl.deleteTexture(this.backgroundTexture);\n      gl.deleteTexture(this.screenTexture);\n      this.width = width;\n      this.height = height;\n      const emptyPixels = new Uint8Array(width * height * 4);\n      // screen textures to hold the drawn screen for the previous and the current frame\n      this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n      this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n    }\n  }\n  draw() {\n    var _this$windData;\n    if ((_this$windData = this.windData) !== null && _this$windData !== void 0 && _this$windData.image) {\n      const gl = this.gl;\n      glUtils.bindTexture(gl, this.windTexture, 0);\n      glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n      this.drawScreen(); // draw Particles into framebuffer\n      this.updateParticles();\n      return {\n        d: this.pixels,\n        w: this.width,\n        h: this.height\n      };\n    } else {\n      return {\n        d: new Uint8Array([0, 0, 0, 0]),\n        w: 1,\n        h: 1\n      };\n    }\n  }\n  drawScreen() {\n    const gl = this.gl;\n\n    // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n    bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n    gl.viewport(0, 0, this.width, this.height);\n    gl.disable(gl.BLEND);\n    this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n    this.drawParticles();\n    this.pixels = new Uint8Array(4 * this.width * this.height);\n    gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);\n    bindFramebuffer(gl, null, null);\n    gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n    //   save the current screen as the background for the next frame\n    const temp = this.backgroundTexture;\n    this.backgroundTexture = this.screenTexture;\n    this.screenTexture = temp;\n  }\n  drawFullTexture(texture, opacity) {\n    const gl = this.gl;\n    const program = this.fullScreenProgram;\n    gl.useProgram(program);\n\n    // bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n    gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(program.a_pos);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    glUtils.bindTexture(gl, texture, 2);\n    gl.uniform1i(program.u_screen, 2);\n    gl.uniform1f(program.u_opacity, opacity);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    // gl.drawArrays(gl.POINTS, 0, 6);\n  }\n  drawParticles() {\n    const gl = this.gl;\n    const program = this.drawProgram;\n    gl.useProgram(program);\n    bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n    glUtils.bindTexture(gl, this.colorRampTexture, 2);\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n    gl.uniform1i(program.u_color_ramp, 2);\n    gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n    gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n  }\n  updateParticles() {\n    const gl = this.gl;\n    bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n    gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n    const program = this.updateProgram;\n    gl.useProgram(program);\n    bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n    gl.uniform1f(program.u_rand_seed, Math.random());\n    gl.uniform2f(program.u_wind_res, this.windData.image.width * 2, this.windData.image.height * 2);\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n    gl.uniform1f(program.u_speed_factor, this.speedFactor);\n    gl.uniform1f(program.u_drop_rate, this.dropRate);\n    gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // swap the particle state textures so the new one becomes the current one\n    const temp = this.particleStateTexture0;\n    this.particleStateTexture0 = this.particleStateTexture1;\n    this.particleStateTexture1 = temp;\n    bindFramebuffer(gl, null, null);\n\n    // gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n  }\n  destroy() {\n    // private drawProgram: WebGLProgram;\n    // private fullScreenProgram: WebGLProgram;\n    // private updateProgram: WebGLProgram;\n\n    // private quadBuffer: WebGLBuffer | null;\n    // private particleIndexBuffer: WebGLBuffer | null;\n\n    // private framebuffer: WebGLFramebuffer | null;\n\n    // private colorRampTexture: WebGLTexture | null;\n    // private backgroundTexture: WebGLTexture | null;\n    // private screenTexture: WebGLTexture | null;\n    // private particleStateTexture0: WebGLTexture | null;\n    // private particleStateTexture1: WebGLTexture | null;\n    // private windTexture: WebGLTexture | null;\n\n    this.gl.deleteBuffer(this.quadBuffer);\n    this.gl.deleteBuffer(this.particleIndexBuffer);\n    this.gl.deleteFramebuffer(this.framebuffer);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.fragmentShader);\n    this.gl.deleteProgram(this.drawProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n    this.gl.deleteProgram(this.fullScreenProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.fragmentShader);\n    this.gl.deleteProgram(this.updateProgram);\n    this.gl.deleteTexture(this.colorRampTexture);\n    this.gl.deleteTexture(this.backgroundTexture);\n    this.gl.deleteTexture(this.screenTexture);\n    this.gl.deleteTexture(this.particleStateTexture0);\n    this.gl.deleteTexture(this.particleStateTexture1);\n    this.gl.deleteTexture(this.windTexture);\n  }\n}","map":{"version":3,"names":["_defineProperty","glUtils","drawFrag","drawVert","fullScreenFrag","fullScreenVert","updateFrag","updateVert","getColorRamp","colors","canvas","document","createElement","ctx","getContext","width","height","gradient","createLinearGradient","stop","Object","keys","addColorStop","fillStyle","fillRect","Uint8Array","getImageData","data","bindAttribute","gl","buffer","attribute","numComponents","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindFramebuffer","framebuffer","texture","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","Wind","constructor","options","glContext","imageWidth","imageHeight","fadeOpacity","speedFactor","dropRate","dropRateBump","rampColors","init","drawProgram","createProgram","fullScreenProgram","updateProgram","quadBuffer","createBuffer","Float32Array","createFramebuffer","colorRampTexture","createTexture","LINEAR","emptyPixels","backgroundTexture","NEAREST","screenTexture","particleRes","particleStateResolution","Math","ceil","sqrt","numParticles","numParticlesSize","particleState","i","length","floor","random","particleStateTexture0","particleStateTexture1","particleIndices","i$1","particleIndexBuffer","setWind","windData","windTexture","createDataTexture","image","updateParticelNum","num","updateWindDir","uMin","uMax","vMin","vMax","updateColorRampTexture","isColorChanged","deleteTexture","item","key","Number","reSize","draw","_this$windData","bindTexture","drawScreen","updateParticles","d","pixels","w","h","viewport","disable","BLEND","drawFullTexture","drawParticles","readPixels","RGBA","UNSIGNED_BYTE","temp","opacity","program","useProgram","a_pos","uniform1i","u_screen","uniform1f","u_opacity","drawArrays","TRIANGLES","a_index","u_wind","u_particles","u_color_ramp","u_particles_res","uniform2f","u_wind_min","u_wind_max","POINTS","u_rand_seed","u_wind_res","u_speed_factor","u_drop_rate","u_drop_rate_bump","destroy","deleteBuffer","deleteFramebuffer","deleteShader","vertexShader","fragmentShader","deleteProgram"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/wind/models/windRender.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as glUtils from \"./utils\";\nimport { drawFrag, drawVert, fullScreenFrag, fullScreenVert, updateFrag, updateVert } from \"./windShader\";\nfunction getColorRamp(colors) {\n  let canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  const gradient = ctx.createLinearGradient(0, 0, 256, 0);\n  for (const stop of Object.keys(colors)) {\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n\n  // @ts-ignore dispose canvas element\n  canvas = null;\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\nfunction bindAttribute(gl, buffer, attribute, numComponents) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\nfunction bindFramebuffer(gl, framebuffer, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (texture) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n}\nexport class Wind {\n  constructor(options) {\n    _defineProperty(this, \"width\", 512);\n    _defineProperty(this, \"height\", 512);\n    _defineProperty(this, \"pixels\", void 0);\n    _defineProperty(this, \"fadeOpacity\", void 0);\n    _defineProperty(this, \"speedFactor\", void 0);\n    _defineProperty(this, \"dropRate\", void 0);\n    _defineProperty(this, \"dropRateBump\", void 0);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"drawProgram\", void 0);\n    _defineProperty(this, \"fullScreenProgram\", void 0);\n    _defineProperty(this, \"updateProgram\", void 0);\n    _defineProperty(this, \"rampColors\", void 0);\n    _defineProperty(this, \"numParticles\", 65536);\n    _defineProperty(this, \"numParticlesSize\", void 0);\n    _defineProperty(this, \"particleStateResolution\", void 0);\n    _defineProperty(this, \"quadBuffer\", void 0);\n    _defineProperty(this, \"particleIndexBuffer\", void 0);\n    _defineProperty(this, \"framebuffer\", void 0);\n    _defineProperty(this, \"colorRampTexture\", void 0);\n    _defineProperty(this, \"backgroundTexture\", void 0);\n    _defineProperty(this, \"screenTexture\", void 0);\n    _defineProperty(this, \"particleStateTexture0\", void 0);\n    _defineProperty(this, \"particleStateTexture1\", void 0);\n    _defineProperty(this, \"windTexture\", void 0);\n    _defineProperty(this, \"windData\", void 0);\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n  init() {\n    const gl = this.gl;\n    this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n    this.speedFactor = 0.25; // how fast the particles move\n    this.dropRate = 0.003; // how often the particles move to a random place\n    this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n    this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n    this.fullScreenProgram = glUtils.createProgram(gl, fullScreenVert, fullScreenFrag);\n    this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n    this.quadBuffer = glUtils.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n    this.framebuffer = gl.createFramebuffer();\n    this.colorRampTexture = glUtils.createTexture(this.gl, this.gl.LINEAR, getColorRamp(this.rampColors), 16, 16);\n    const emptyPixels = new Uint8Array(this.width * this.height * 4);\n\n    // screen textures to hold the drawn screen for the previous and the current frame\n\n    this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n    this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n\n    // we create a square texture where each pixel will hold a particle position encoded as RGBA\n    const particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n    // particleRes size\n    this.numParticlesSize = particleRes * particleRes;\n    const particleState = new Uint8Array(this.numParticlesSize * 4);\n    for (let i = 0; i < particleState.length; i++) {\n      particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n    }\n    // textures to hold the particle state for the current and the next frame\n    this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n    this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n    const particleIndices = new Float32Array(this.numParticlesSize);\n    for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n      particleIndices[i$1] = i$1;\n    }\n    this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n  }\n  setWind(windData) {\n    this.windData = windData;\n    this.windTexture = glUtils.createDataTexture(this.gl, this.gl.LINEAR, windData.image);\n  }\n\n  /**\n   * 更新风场粒子数量\n   * @param num\n   */\n  updateParticelNum(num) {\n    const gl = this.gl;\n    if (num !== this.numParticles) {\n      this.numParticles = num; // params number\n\n      // we create a square texture where each pixel will hold a particle position encoded as RGBA\n      const particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n      this.numParticlesSize = particleRes * particleRes;\n      const particleState = new Uint8Array(this.numParticlesSize * 4);\n      for (let i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n      }\n      // textures to hold the particle state for the current and the next frame\n      this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      const particleIndices = new Float32Array(this.numParticlesSize);\n      for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }\n\n  /**\n   * 更新风场风向风速\n   * @param uMin\n   * @param uMax\n   * @param vMin\n   * @param vMax\n   */\n  updateWindDir(uMin, uMax, vMin, vMax) {\n    this.windData.uMin = uMin;\n    this.windData.uMax = uMax;\n    this.windData.vMin = vMin;\n    this.windData.vMax = vMax;\n  }\n\n  /**\n   * update rampColors\n   * @param rampColors\n   */\n  updateColorRampTexture(rampColors) {\n    if (this.isColorChanged(rampColors)) {\n      this.rampColors = rampColors;\n      const gl = this.gl;\n      gl.deleteTexture(this.colorRampTexture);\n      this.colorRampTexture = glUtils.createTexture(gl, gl.LINEAR, getColorRamp(rampColors), 16, 16);\n    }\n  }\n  isColorChanged(rampColors) {\n    const keys = Object.keys(rampColors);\n    for (const item of keys) {\n      const key = Number(item);\n      // exist new key -> color need update\n      if (!this.rampColors[key]) {\n        return true;\n      }\n      // value changed -> color need update\n      if (this.rampColors[key] && this.rampColors[key] !== rampColors[key]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  reSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      const gl = this.gl;\n      gl.deleteTexture(this.backgroundTexture);\n      gl.deleteTexture(this.screenTexture);\n      this.width = width;\n      this.height = height;\n      const emptyPixels = new Uint8Array(width * height * 4);\n      // screen textures to hold the drawn screen for the previous and the current frame\n      this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n      this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n    }\n  }\n  draw() {\n    var _this$windData;\n    if ((_this$windData = this.windData) !== null && _this$windData !== void 0 && _this$windData.image) {\n      const gl = this.gl;\n      glUtils.bindTexture(gl, this.windTexture, 0);\n      glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n      this.drawScreen(); // draw Particles into framebuffer\n      this.updateParticles();\n      return {\n        d: this.pixels,\n        w: this.width,\n        h: this.height\n      };\n    } else {\n      return {\n        d: new Uint8Array([0, 0, 0, 0]),\n        w: 1,\n        h: 1\n      };\n    }\n  }\n  drawScreen() {\n    const gl = this.gl;\n\n    // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n    bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n    gl.viewport(0, 0, this.width, this.height);\n    gl.disable(gl.BLEND);\n    this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n    this.drawParticles();\n    this.pixels = new Uint8Array(4 * this.width * this.height);\n    gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);\n    bindFramebuffer(gl, null, null);\n    gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n    //   save the current screen as the background for the next frame\n    const temp = this.backgroundTexture;\n    this.backgroundTexture = this.screenTexture;\n    this.screenTexture = temp;\n  }\n  drawFullTexture(texture, opacity) {\n    const gl = this.gl;\n    const program = this.fullScreenProgram;\n    gl.useProgram(program);\n\n    // bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n    gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(program.a_pos);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    glUtils.bindTexture(gl, texture, 2);\n    gl.uniform1i(program.u_screen, 2);\n    gl.uniform1f(program.u_opacity, opacity);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    // gl.drawArrays(gl.POINTS, 0, 6);\n  }\n  drawParticles() {\n    const gl = this.gl;\n    const program = this.drawProgram;\n    gl.useProgram(program);\n    bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n    glUtils.bindTexture(gl, this.colorRampTexture, 2);\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n    gl.uniform1i(program.u_color_ramp, 2);\n    gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n    gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n  }\n  updateParticles() {\n    const gl = this.gl;\n    bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n    gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n    const program = this.updateProgram;\n    gl.useProgram(program);\n    bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n    gl.uniform1f(program.u_rand_seed, Math.random());\n    gl.uniform2f(program.u_wind_res, this.windData.image.width * 2, this.windData.image.height * 2);\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n    gl.uniform1f(program.u_speed_factor, this.speedFactor);\n    gl.uniform1f(program.u_drop_rate, this.dropRate);\n    gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // swap the particle state textures so the new one becomes the current one\n    const temp = this.particleStateTexture0;\n    this.particleStateTexture0 = this.particleStateTexture1;\n    this.particleStateTexture1 = temp;\n    bindFramebuffer(gl, null, null);\n\n    // gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n  }\n  destroy() {\n    // private drawProgram: WebGLProgram;\n    // private fullScreenProgram: WebGLProgram;\n    // private updateProgram: WebGLProgram;\n\n    // private quadBuffer: WebGLBuffer | null;\n    // private particleIndexBuffer: WebGLBuffer | null;\n\n    // private framebuffer: WebGLFramebuffer | null;\n\n    // private colorRampTexture: WebGLTexture | null;\n    // private backgroundTexture: WebGLTexture | null;\n    // private screenTexture: WebGLTexture | null;\n    // private particleStateTexture0: WebGLTexture | null;\n    // private particleStateTexture1: WebGLTexture | null;\n    // private windTexture: WebGLTexture | null;\n\n    this.gl.deleteBuffer(this.quadBuffer);\n    this.gl.deleteBuffer(this.particleIndexBuffer);\n    this.gl.deleteFramebuffer(this.framebuffer);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.fragmentShader);\n    this.gl.deleteProgram(this.drawProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n    this.gl.deleteProgram(this.fullScreenProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.fragmentShader);\n    this.gl.deleteProgram(this.updateProgram);\n    this.gl.deleteTexture(this.colorRampTexture);\n    this.gl.deleteTexture(this.backgroundTexture);\n    this.gl.deleteTexture(this.screenTexture);\n    this.gl.deleteTexture(this.particleStateTexture0);\n    this.gl.deleteTexture(this.particleStateTexture1);\n    this.gl.deleteTexture(this.windTexture);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}