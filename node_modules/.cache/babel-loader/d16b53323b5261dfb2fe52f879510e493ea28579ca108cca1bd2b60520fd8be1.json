{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LngLat } from \"./lng_lat\";\n\n/**\n * A {@link LngLatBounds} object, an array of {@link LngLatLike} objects in [sw, ne] order,\n * or an array of numbers in [west, south, east, north] order.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let v1 = new LngLatBounds(\n *   new LngLat(-73.9876, 40.7661),\n *   new LngLat(-73.9397, 40.8002)\n * );\n * let v2 = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\n * let v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n * ```\n */\n\n/**\n * A `LngLatBounds` object represents a geographical bounding box,\n * defined by its southwest and northeast points in longitude and latitude.\n *\n * If no arguments are provided to the constructor, a `null` bounding box is created.\n *\n * Note that any Mapbox GL method that accepts a `LngLatBounds` object as an argument or option\n * can also accept an `Array` of two {@link LngLatLike} constructs and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatBoundsLike}.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let sw = new LngLat(-73.9876, 40.7661);\n * let ne = new LngLat(-73.9397, 40.8002);\n * let llb = new LngLatBounds(sw, ne);\n * ```\n */\nexport class LngLatBounds {\n  /**\n   * @param sw - The southwest corner of the bounding box.\n   * OR array of 4 numbers in the order of  west, south, east, north\n   * OR array of 2 LngLatLike: [sw,ne]\n   * @param ne - The northeast corner of the bounding box.\n   * @example\n   * ```ts\n   * let sw = new LngLat(-73.9876, 40.7661);\n   * let ne = new LngLat(-73.9397, 40.8002);\n   * let llb = new LngLatBounds(sw, ne);\n   * ```\n   * OR\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661, -73.9397, 40.8002]);\n   * ```\n   * OR\n   * ```ts\n   * let llb = new LngLatBounds([sw, ne]);\n   * ```\n   */\n  constructor(sw, ne) {\n    _defineProperty(this, \"_ne\", void 0);\n    _defineProperty(this, \"_sw\", void 0);\n    if (!sw) {\n      // noop\n    } else if (ne) {\n      this.setSouthWest(sw).setNorthEast(ne);\n    } else if (Array.isArray(sw)) {\n      if (sw.length === 4) {\n        // 4 element array: west, south, east, north\n        this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);\n      } else {\n        this.setSouthWest(sw[0]).setNorthEast(sw[1]);\n      }\n    }\n  }\n\n  /**\n   * Set the northeast corner of the bounding box\n   *\n   * @param ne - a {@link LngLatLike} object describing the northeast corner of the bounding box.\n   */\n  setNorthEast(ne) {\n    this._ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);\n    return this;\n  }\n\n  /**\n   * Set the southwest corner of the bounding box\n   *\n   * @param sw - a {@link LngLatLike} object describing the southwest corner of the bounding box.\n   */\n  setSouthWest(sw) {\n    this._sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);\n    return this;\n  }\n\n  /**\n   * Extend the bounds to include a given LngLatLike or LngLatBoundsLike.\n   *\n   * @param obj - object to extend to\n   */\n  extend(obj) {\n    const sw = this._sw,\n      ne = this._ne;\n    let sw2, ne2;\n    if (obj instanceof LngLat) {\n      sw2 = obj;\n      ne2 = obj;\n    } else if (obj instanceof LngLatBounds) {\n      sw2 = obj._sw;\n      ne2 = obj._ne;\n      if (!sw2 || !ne2) return this;\n    } else {\n      if (Array.isArray(obj)) {\n        if (obj.length === 4 || obj.every(Array.isArray)) {\n          const lngLatBoundsObj = obj;\n          return this.extend(LngLatBounds.convert(lngLatBoundsObj));\n        } else {\n          const lngLatObj = obj;\n          return this.extend(LngLat.convert(lngLatObj));\n        }\n      } else if (obj && ('lng' in obj || 'lon' in obj) && 'lat' in obj) {\n        return this.extend(LngLat.convert(obj));\n      }\n      return this;\n    }\n    if (!sw && !ne) {\n      this._sw = new LngLat(sw2.lng, sw2.lat);\n      this._ne = new LngLat(ne2.lng, ne2.lat);\n    } else {\n      sw.lng = Math.min(sw2.lng, sw.lng);\n      sw.lat = Math.min(sw2.lat, sw.lat);\n      ne.lng = Math.max(ne2.lng, ne.lng);\n      ne.lat = Math.max(ne2.lat, ne.lat);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the geographical coordinate equidistant from the bounding box's corners.\n   *\n   * @returns The bounding box's center.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}\n   * ```\n   */\n  getCenter() {\n    return new LngLat((this._sw.lng + this._ne.lng) / 2, (this._sw.lat + this._ne.lat) / 2);\n  }\n\n  /**\n   * Returns the southwest corner of the bounding box.\n   *\n   * @returns The southwest corner of the bounding box.\n   */\n  getSouthWest() {\n    return this._sw;\n  }\n\n  /**\n   * Returns the northeast corner of the bounding box.\n   *\n   * @returns The northeast corner of the bounding box.\n   */\n  getNorthEast() {\n    return this._ne;\n  }\n\n  /**\n   * Returns the northwest corner of the bounding box.\n   *\n   * @returns The northwest corner of the bounding box.\n   */\n  getNorthWest() {\n    return new LngLat(this.getWest(), this.getNorth());\n  }\n\n  /**\n   * Returns the southeast corner of the bounding box.\n   *\n   * @returns The southeast corner of the bounding box.\n   */\n  getSouthEast() {\n    return new LngLat(this.getEast(), this.getSouth());\n  }\n\n  /**\n   * Returns the west edge of the bounding box.\n   *\n   * @returns The west edge of the bounding box.\n   */\n  getWest() {\n    return this._sw.lng;\n  }\n\n  /**\n   * Returns the south edge of the bounding box.\n   *\n   * @returns The south edge of the bounding box.\n   */\n  getSouth() {\n    return this._sw.lat;\n  }\n\n  /**\n   * Returns the east edge of the bounding box.\n   *\n   * @returns The east edge of the bounding box.\n   */\n  getEast() {\n    return this._ne.lng;\n  }\n\n  /**\n   * Returns the north edge of the bounding box.\n   *\n   * @returns The north edge of the bounding box.\n   */\n  getNorth() {\n    return this._ne.lat;\n  }\n\n  /**\n   * Returns the bounding box represented as an array.\n   *\n   * @returns The bounding box represented as an array, consisting of the\n   * southwest and northeast coordinates of the bounding represented as arrays of numbers.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n   * ```\n   */\n  toArray() {\n    return [this._sw.toArray(), this._ne.toArray()];\n  }\n\n  /**\n   * Return the bounding box represented as a string.\n   *\n   * @returns The bounding box represents as a string of the format\n   * `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n   * ```\n   */\n  toString() {\n    return `LngLatBounds(${this._sw.toString()}, ${this._ne.toString()})`;\n  }\n\n  /**\n   * Check if the bounding box is an empty/`null`-type box.\n   *\n   * @returns True if bounds have been defined, otherwise false.\n   */\n  isEmpty() {\n    return !(this._sw && this._ne);\n  }\n\n  /**\n   * Check if the point is within the bounding box.\n   *\n   * @param lnglat - geographic point to check against.\n   * @returns `true` if the point is within the bounding box.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds(\n   *   new LngLat(-73.9876, 40.7661),\n   *   new LngLat(-73.9397, 40.8002)\n   * );\n   *\n   * let ll = new LngLat(-73.9567, 40.7789);\n   *\n   * console.log(llb.contains(ll)); // = true\n   * ```\n   */\n  contains(lnglat) {\n    const {\n      lng,\n      lat\n    } = LngLat.convert(lnglat);\n    const containsLatitude = this._sw.lat <= lat && lat <= this._ne.lat;\n    let containsLongitude = this._sw.lng <= lng && lng <= this._ne.lng;\n    if (this._sw.lng > this._ne.lng) {\n      // wrapped coordinates\n      containsLongitude = this._sw.lng >= lng && lng >= this._ne.lng;\n    }\n    return containsLatitude && containsLongitude;\n  }\n\n  /**\n   * Converts an array to a `LngLatBounds` object.\n   *\n   * If a `LngLatBounds` object is passed in, the function returns it unchanged.\n   *\n   * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.\n   *\n   * @param input - An array of two coordinates to convert, or a `LngLatBounds` object to return.\n   * @returns A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.\n   * @example\n   * ```ts\n   * let arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n   * let llb = LngLatBounds.convert(arr); // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n   * ```\n   */\n  static convert(input) {\n    if (input instanceof LngLatBounds) return input;\n    return new LngLatBounds(input);\n  }\n\n  /**\n   * Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.\n   *\n   * @param center - center coordinates of the new bounds.\n   * @param radius - Distance in meters from the coordinates to extend the bounds.\n   * @returns A new `LngLatBounds` object representing the coordinates extended by the `radius`.\n   * @example\n   * ```ts\n   * let center = new LngLat(-73.9749, 40.7736);\n   * LngLatBounds.fromLngLat(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]\n   * ```\n   */\n  static fromLngLat(center, radius = 0) {\n    const earthCircumferenceInMetersAtEquator = 40075017;\n    const latAccuracy = 360 * radius / earthCircumferenceInMetersAtEquator,\n      lngAccuracy = latAccuracy / Math.cos(Math.PI / 180 * center.lat);\n    return new LngLatBounds(new LngLat(center.lng - lngAccuracy, center.lat - latAccuracy), new LngLat(center.lng + lngAccuracy, center.lat + latAccuracy));\n  }\n}","map":{"version":3,"names":["_defineProperty","LngLat","LngLatBounds","constructor","sw","ne","setSouthWest","setNorthEast","Array","isArray","length","_ne","lng","lat","convert","_sw","extend","obj","sw2","ne2","every","lngLatBoundsObj","lngLatObj","Math","min","max","getCenter","getSouthWest","getNorthEast","getNorthWest","getWest","getNorth","getSouthEast","getEast","getSouth","toArray","toString","isEmpty","contains","lnglat","containsLatitude","containsLongitude","input","fromLngLat","center","radius","earthCircumferenceInMetersAtEquator","latAccuracy","lngAccuracy","cos","PI"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-map/es/map/geo/lng_lat_bounds.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LngLat } from \"./lng_lat\";\n\n/**\n * A {@link LngLatBounds} object, an array of {@link LngLatLike} objects in [sw, ne] order,\n * or an array of numbers in [west, south, east, north] order.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let v1 = new LngLatBounds(\n *   new LngLat(-73.9876, 40.7661),\n *   new LngLat(-73.9397, 40.8002)\n * );\n * let v2 = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\n * let v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n * ```\n */\n\n/**\n * A `LngLatBounds` object represents a geographical bounding box,\n * defined by its southwest and northeast points in longitude and latitude.\n *\n * If no arguments are provided to the constructor, a `null` bounding box is created.\n *\n * Note that any Mapbox GL method that accepts a `LngLatBounds` object as an argument or option\n * can also accept an `Array` of two {@link LngLatLike} constructs and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatBoundsLike}.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let sw = new LngLat(-73.9876, 40.7661);\n * let ne = new LngLat(-73.9397, 40.8002);\n * let llb = new LngLatBounds(sw, ne);\n * ```\n */\nexport class LngLatBounds {\n  /**\n   * @param sw - The southwest corner of the bounding box.\n   * OR array of 4 numbers in the order of  west, south, east, north\n   * OR array of 2 LngLatLike: [sw,ne]\n   * @param ne - The northeast corner of the bounding box.\n   * @example\n   * ```ts\n   * let sw = new LngLat(-73.9876, 40.7661);\n   * let ne = new LngLat(-73.9397, 40.8002);\n   * let llb = new LngLatBounds(sw, ne);\n   * ```\n   * OR\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661, -73.9397, 40.8002]);\n   * ```\n   * OR\n   * ```ts\n   * let llb = new LngLatBounds([sw, ne]);\n   * ```\n   */\n  constructor(sw, ne) {\n    _defineProperty(this, \"_ne\", void 0);\n    _defineProperty(this, \"_sw\", void 0);\n    if (!sw) {\n      // noop\n    } else if (ne) {\n      this.setSouthWest(sw).setNorthEast(ne);\n    } else if (Array.isArray(sw)) {\n      if (sw.length === 4) {\n        // 4 element array: west, south, east, north\n        this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);\n      } else {\n        this.setSouthWest(sw[0]).setNorthEast(sw[1]);\n      }\n    }\n  }\n\n  /**\n   * Set the northeast corner of the bounding box\n   *\n   * @param ne - a {@link LngLatLike} object describing the northeast corner of the bounding box.\n   */\n  setNorthEast(ne) {\n    this._ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);\n    return this;\n  }\n\n  /**\n   * Set the southwest corner of the bounding box\n   *\n   * @param sw - a {@link LngLatLike} object describing the southwest corner of the bounding box.\n   */\n  setSouthWest(sw) {\n    this._sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);\n    return this;\n  }\n\n  /**\n   * Extend the bounds to include a given LngLatLike or LngLatBoundsLike.\n   *\n   * @param obj - object to extend to\n   */\n  extend(obj) {\n    const sw = this._sw,\n      ne = this._ne;\n    let sw2, ne2;\n    if (obj instanceof LngLat) {\n      sw2 = obj;\n      ne2 = obj;\n    } else if (obj instanceof LngLatBounds) {\n      sw2 = obj._sw;\n      ne2 = obj._ne;\n      if (!sw2 || !ne2) return this;\n    } else {\n      if (Array.isArray(obj)) {\n        if (obj.length === 4 || obj.every(Array.isArray)) {\n          const lngLatBoundsObj = obj;\n          return this.extend(LngLatBounds.convert(lngLatBoundsObj));\n        } else {\n          const lngLatObj = obj;\n          return this.extend(LngLat.convert(lngLatObj));\n        }\n      } else if (obj && ('lng' in obj || 'lon' in obj) && 'lat' in obj) {\n        return this.extend(LngLat.convert(obj));\n      }\n      return this;\n    }\n    if (!sw && !ne) {\n      this._sw = new LngLat(sw2.lng, sw2.lat);\n      this._ne = new LngLat(ne2.lng, ne2.lat);\n    } else {\n      sw.lng = Math.min(sw2.lng, sw.lng);\n      sw.lat = Math.min(sw2.lat, sw.lat);\n      ne.lng = Math.max(ne2.lng, ne.lng);\n      ne.lat = Math.max(ne2.lat, ne.lat);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the geographical coordinate equidistant from the bounding box's corners.\n   *\n   * @returns The bounding box's center.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}\n   * ```\n   */\n  getCenter() {\n    return new LngLat((this._sw.lng + this._ne.lng) / 2, (this._sw.lat + this._ne.lat) / 2);\n  }\n\n  /**\n   * Returns the southwest corner of the bounding box.\n   *\n   * @returns The southwest corner of the bounding box.\n   */\n  getSouthWest() {\n    return this._sw;\n  }\n\n  /**\n   * Returns the northeast corner of the bounding box.\n   *\n   * @returns The northeast corner of the bounding box.\n   */\n  getNorthEast() {\n    return this._ne;\n  }\n\n  /**\n   * Returns the northwest corner of the bounding box.\n   *\n   * @returns The northwest corner of the bounding box.\n   */\n  getNorthWest() {\n    return new LngLat(this.getWest(), this.getNorth());\n  }\n\n  /**\n   * Returns the southeast corner of the bounding box.\n   *\n   * @returns The southeast corner of the bounding box.\n   */\n  getSouthEast() {\n    return new LngLat(this.getEast(), this.getSouth());\n  }\n\n  /**\n   * Returns the west edge of the bounding box.\n   *\n   * @returns The west edge of the bounding box.\n   */\n  getWest() {\n    return this._sw.lng;\n  }\n\n  /**\n   * Returns the south edge of the bounding box.\n   *\n   * @returns The south edge of the bounding box.\n   */\n  getSouth() {\n    return this._sw.lat;\n  }\n\n  /**\n   * Returns the east edge of the bounding box.\n   *\n   * @returns The east edge of the bounding box.\n   */\n  getEast() {\n    return this._ne.lng;\n  }\n\n  /**\n   * Returns the north edge of the bounding box.\n   *\n   * @returns The north edge of the bounding box.\n   */\n  getNorth() {\n    return this._ne.lat;\n  }\n\n  /**\n   * Returns the bounding box represented as an array.\n   *\n   * @returns The bounding box represented as an array, consisting of the\n   * southwest and northeast coordinates of the bounding represented as arrays of numbers.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n   * ```\n   */\n  toArray() {\n    return [this._sw.toArray(), this._ne.toArray()];\n  }\n\n  /**\n   * Return the bounding box represented as a string.\n   *\n   * @returns The bounding box represents as a string of the format\n   * `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n   * ```\n   */\n  toString() {\n    return `LngLatBounds(${this._sw.toString()}, ${this._ne.toString()})`;\n  }\n\n  /**\n   * Check if the bounding box is an empty/`null`-type box.\n   *\n   * @returns True if bounds have been defined, otherwise false.\n   */\n  isEmpty() {\n    return !(this._sw && this._ne);\n  }\n\n  /**\n   * Check if the point is within the bounding box.\n   *\n   * @param lnglat - geographic point to check against.\n   * @returns `true` if the point is within the bounding box.\n   * @example\n   * ```ts\n   * let llb = new LngLatBounds(\n   *   new LngLat(-73.9876, 40.7661),\n   *   new LngLat(-73.9397, 40.8002)\n   * );\n   *\n   * let ll = new LngLat(-73.9567, 40.7789);\n   *\n   * console.log(llb.contains(ll)); // = true\n   * ```\n   */\n  contains(lnglat) {\n    const {\n      lng,\n      lat\n    } = LngLat.convert(lnglat);\n    const containsLatitude = this._sw.lat <= lat && lat <= this._ne.lat;\n    let containsLongitude = this._sw.lng <= lng && lng <= this._ne.lng;\n    if (this._sw.lng > this._ne.lng) {\n      // wrapped coordinates\n      containsLongitude = this._sw.lng >= lng && lng >= this._ne.lng;\n    }\n    return containsLatitude && containsLongitude;\n  }\n\n  /**\n   * Converts an array to a `LngLatBounds` object.\n   *\n   * If a `LngLatBounds` object is passed in, the function returns it unchanged.\n   *\n   * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.\n   *\n   * @param input - An array of two coordinates to convert, or a `LngLatBounds` object to return.\n   * @returns A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.\n   * @example\n   * ```ts\n   * let arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n   * let llb = LngLatBounds.convert(arr); // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n   * ```\n   */\n  static convert(input) {\n    if (input instanceof LngLatBounds) return input;\n    return new LngLatBounds(input);\n  }\n\n  /**\n   * Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.\n   *\n   * @param center - center coordinates of the new bounds.\n   * @param radius - Distance in meters from the coordinates to extend the bounds.\n   * @returns A new `LngLatBounds` object representing the coordinates extended by the `radius`.\n   * @example\n   * ```ts\n   * let center = new LngLat(-73.9749, 40.7736);\n   * LngLatBounds.fromLngLat(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]\n   * ```\n   */\n  static fromLngLat(center, radius = 0) {\n    const earthCircumferenceInMetersAtEquator = 40075017;\n    const latAccuracy = 360 * radius / earthCircumferenceInMetersAtEquator,\n      lngAccuracy = latAccuracy / Math.cos(Math.PI / 180 * center.lat);\n    return new LngLatBounds(new LngLat(center.lng - lngAccuracy, center.lat - latAccuracy), new LngLat(center.lng + lngAccuracy, center.lat + latAccuracy));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}