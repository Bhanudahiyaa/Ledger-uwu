{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport PointModels from \"./models/index\";\nexport default class PointLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'PointLayer');\n    _defineProperty(this, \"enableShaderEncodeStyles\", ['stroke', 'offsets', 'opacity', 'rotation']);\n    //4+2+1+1\n    _defineProperty(this, \"enableDataEncodeStyles\", ['textOffset', 'textAnchor']);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [],\n      options: {\n        parser: {\n          type: 'json',\n          x: 'lng',\n          y: 'lat'\n        }\n      }\n    });\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const modelType = _this.getModelType();\n      if (_this.layerModel) {\n        _this.layerModel.clearModels();\n      }\n      _this.layerModel = new PointModels[modelType](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  rebuildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.buildModels();\n    })();\n  }\n\n  /**\n   * 在未传入数据的时候判断点图层的 shape 类型\n   * @returns\n   */\n  getModelTypeWillEmptyData() {\n    if (this.shapeOption) {\n      const {\n        field,\n        values\n      } = this.shapeOption;\n      const {\n        shape2d\n      } = this.getLayerConfig();\n      const iconMap = this.iconService.getIconMap();\n      if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {\n        return 'fill';\n      }\n      if (values === 'text') {\n        return 'text';\n      }\n      if (values && values instanceof Array) {\n        for (const v of values) {\n          if (typeof v === 'string' && iconMap.hasOwnProperty(v)) {\n            return 'image';\n          }\n        }\n      }\n    }\n    return 'normal';\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      fillImage: {},\n      normal: {\n        blend: 'additive'\n      },\n      radar: {},\n      simplePoint: {},\n      fill: {\n        blend: 'normal'\n      },\n      extrude: {},\n      image: {},\n      text: {\n        blend: 'normal'\n      },\n      tile: {},\n      tileText: {},\n      earthFill: {},\n      earthExtrude: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const {\n      shape2d,\n      shape3d,\n      billboard = true\n    } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find(fe => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return this.getModelTypeWillEmptyData();\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'normal';\n      }\n      if (shape === 'simple') {\n        return 'simplePoint';\n      }\n      if (shape === 'radar') {\n        return 'radar';\n      }\n      if (this.layerType === 'fillImage' || billboard === false) {\n        return 'fillImage';\n      }\n      if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n        if (this.mapService.version === 'GLOBEL') {\n          return 'earthFill';\n        } else {\n          return 'fill';\n        }\n      }\n      if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n        if (this.mapService.version === 'GLOBEL') {\n          return 'earthExtrude';\n        } else {\n          return 'extrude';\n        }\n      }\n      if (iconMap.hasOwnProperty(shape)) {\n        return 'image';\n      }\n      return 'text';\n    }\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","BaseLayer","PointModels","PointLayer","constructor","args","data","options","parser","type","x","y","buildModels","_this","modelType","getModelType","layerModel","clearModels","initLayerModels","rebuildModels","_this2","getModelTypeWillEmptyData","shapeOption","field","values","shape2d","getLayerConfig","iconMap","iconService","getIconMap","indexOf","Array","v","hasOwnProperty","getDefaultConfig","defaultConfig","fillImage","normal","blend","radar","simplePoint","fill","extrude","image","text","tile","tileText","earthFill","earthExtrude","layerData","getEncodedData","shape3d","billboard","item","find","fe","shape","layerType","mapService","version"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/point/index.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport PointModels from \"./models/index\";\nexport default class PointLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'PointLayer');\n    _defineProperty(this, \"enableShaderEncodeStyles\", ['stroke', 'offsets', 'opacity', 'rotation']);\n    //4+2+1+1\n    _defineProperty(this, \"enableDataEncodeStyles\", ['textOffset', 'textAnchor']);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [],\n      options: {\n        parser: {\n          type: 'json',\n          x: 'lng',\n          y: 'lat'\n        }\n      }\n    });\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const modelType = _this.getModelType();\n      if (_this.layerModel) {\n        _this.layerModel.clearModels();\n      }\n      _this.layerModel = new PointModels[modelType](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  rebuildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.buildModels();\n    })();\n  }\n\n  /**\n   * 在未传入数据的时候判断点图层的 shape 类型\n   * @returns\n   */\n  getModelTypeWillEmptyData() {\n    if (this.shapeOption) {\n      const {\n        field,\n        values\n      } = this.shapeOption;\n      const {\n        shape2d\n      } = this.getLayerConfig();\n      const iconMap = this.iconService.getIconMap();\n      if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {\n        return 'fill';\n      }\n      if (values === 'text') {\n        return 'text';\n      }\n      if (values && values instanceof Array) {\n        for (const v of values) {\n          if (typeof v === 'string' && iconMap.hasOwnProperty(v)) {\n            return 'image';\n          }\n        }\n      }\n    }\n    return 'normal';\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      fillImage: {},\n      normal: {\n        blend: 'additive'\n      },\n      radar: {},\n      simplePoint: {},\n      fill: {\n        blend: 'normal'\n      },\n      extrude: {},\n      image: {},\n      text: {\n        blend: 'normal'\n      },\n      tile: {},\n      tileText: {},\n      earthFill: {},\n      earthExtrude: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const {\n      shape2d,\n      shape3d,\n      billboard = true\n    } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find(fe => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return this.getModelTypeWillEmptyData();\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'normal';\n      }\n      if (shape === 'simple') {\n        return 'simplePoint';\n      }\n      if (shape === 'radar') {\n        return 'radar';\n      }\n      if (this.layerType === 'fillImage' || billboard === false) {\n        return 'fillImage';\n      }\n      if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n        if (this.mapService.version === 'GLOBEL') {\n          return 'earthFill';\n        } else {\n          return 'fill';\n        }\n      }\n      if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n        if (this.mapService.version === 'GLOBEL') {\n          return 'earthExtrude';\n        } else {\n          return 'extrude';\n        }\n      }\n      if (iconMap.hasOwnProperty(shape)) {\n        return 'image';\n      }\n      return 'text';\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}