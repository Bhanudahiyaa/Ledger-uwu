{"ast":null,"code":"// src/utils/bandOperation/operationSchema.ts\nvar operationsSchema = {\n  nd: {\n    type: \"operation\",\n    expression: [\"/\", [\"-\", [\"band\", 1], [\"band\", 0]],\n    // R > NIR\n    [\"+\", [\"band\", 1], [\"band\", 0]]]\n  },\n  rgb: {\n    type: \"function\",\n    method: strethRgb2minMax\n  }\n};\nfunction strethRgb2minMax(bandsData, options) {\n  const channelR = bandsData[0].rasterData;\n  const channelG = bandsData[1].rasterData;\n  const channelB = bandsData[2].rasterData;\n  const data = [];\n  const [low, high] = (options == null ? void 0 : options.countCut) || [2, 98];\n  const minMaxR = (options == null ? void 0 : options.RMinMax) || percentile(channelR, low, high);\n  const minMaxG = (options == null ? void 0 : options.GMinMax) || percentile(channelG, low, high);\n  const minMaxB = (options == null ? void 0 : options.BMinMax) || percentile(channelB, low, high);\n  for (let i = 0; i < channelR.length; i++) {\n    data.push(Math.max(0, channelR[i] - minMaxR[0]));\n    data.push(Math.max(0, channelG[i] - minMaxG[0]));\n    data.push(Math.max(0, channelB[i] - minMaxB[0]));\n  }\n  return {\n    rasterData: data,\n    rMinMax: minMaxR,\n    gMinMax: minMaxG,\n    bMinMax: minMaxB\n  };\n}\nfunction percentile(data, minPercent, maxPercent) {\n  const sortData = data.slice().sort((a, b) => a - b);\n  const dataLength = sortData.length;\n  const min = sortData[Math.ceil(dataLength * minPercent / 100)];\n  const max = sortData[Math.ceil(dataLength * maxPercent / 100)];\n  return [min, max];\n}\nexport { operationsSchema, percentile };","map":{"version":3,"names":["operationsSchema","nd","type","expression","rgb","method","strethRgb2minMax","bandsData","options","channelR","rasterData","channelG","channelB","data","low","high","countCut","minMaxR","RMinMax","percentile","minMaxG","GMinMax","minMaxB","BMinMax","i","length","push","Math","max","rMinMax","gMinMax","bMinMax","minPercent","maxPercent","sortData","slice","sort","a","b","dataLength","min","ceil"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-source/es/utils/bandOperation/operationSchema.js"],"sourcesContent":["// src/utils/bandOperation/operationSchema.ts\nvar operationsSchema = {\n  nd: {\n    type: \"operation\",\n    expression: [\n      \"/\",\n      [\"-\", [\"band\", 1], [\"band\", 0]],\n      // R > NIR\n      [\"+\", [\"band\", 1], [\"band\", 0]]\n    ]\n  },\n  rgb: {\n    type: \"function\",\n    method: strethRgb2minMax\n  }\n};\nfunction strethRgb2minMax(bandsData, options) {\n  const channelR = bandsData[0].rasterData;\n  const channelG = bandsData[1].rasterData;\n  const channelB = bandsData[2].rasterData;\n  const data = [];\n  const [low, high] = (options == null ? void 0 : options.countCut) || [2, 98];\n  const minMaxR = (options == null ? void 0 : options.RMinMax) || percentile(channelR, low, high);\n  const minMaxG = (options == null ? void 0 : options.GMinMax) || percentile(channelG, low, high);\n  const minMaxB = (options == null ? void 0 : options.BMinMax) || percentile(channelB, low, high);\n  for (let i = 0; i < channelR.length; i++) {\n    data.push(Math.max(0, channelR[i] - minMaxR[0]));\n    data.push(Math.max(0, channelG[i] - minMaxG[0]));\n    data.push(Math.max(0, channelB[i] - minMaxB[0]));\n  }\n  return {\n    rasterData: data,\n    rMinMax: minMaxR,\n    gMinMax: minMaxG,\n    bMinMax: minMaxB\n  };\n}\nfunction percentile(data, minPercent, maxPercent) {\n  const sortData = data.slice().sort((a, b) => a - b);\n  const dataLength = sortData.length;\n  const min = sortData[Math.ceil(dataLength * minPercent / 100)];\n  const max = sortData[Math.ceil(dataLength * maxPercent / 100)];\n  return [min, max];\n}\nexport {\n  operationsSchema,\n  percentile\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}