{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n/** Used to identify `toStringTag` values of typed arrays. */\n\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\n\nfunction baseUnary(func) {\n  return function (value) {\n    return func(value);\n  };\n}\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\n\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;\n}\nfunction isObjectLike(value) {\n  return !!value && _typeof(value) === 'object';\n}\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\n\nexport var isTypedArray = baseIsTypedArray;","map":{"version":3,"names":["MAX_SAFE_INTEGER","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseUnary","func","value","objectProto","Object","prototype","objectToString","toString","baseIsTypedArray","isObjectLike","isLength","length","call","_typeof","isTypedArray"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-engine/src/utils/is-typedarray.ts"],"sourcesContent":["/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nconst argsTag = '[object Arguments]';\nconst arrayTag = '[object Array]';\nconst boolTag = '[object Boolean]';\nconst dateTag = '[object Date]';\nconst errorTag = '[object Error]';\nconst funcTag = '[object Function]';\nconst mapTag = '[object Map]';\nconst numberTag = '[object Number]';\nconst objectTag = '[object Object]';\nconst regexpTag = '[object RegExp]';\nconst setTag = '[object Set]';\nconst stringTag = '[object String]';\nconst weakMapTag = '[object WeakMap]';\n\nconst arrayBufferTag = '[object ArrayBuffer]';\nconst dataViewTag = '[object DataView]';\nconst float32Tag = '[object Float32Array]';\nconst float64Tag = '[object Float64Array]';\nconst int8Tag = '[object Int8Array]';\nconst int16Tag = '[object Int16Array]';\nconst int32Tag = '[object Int32Array]';\nconst uint8Tag = '[object Uint8Array]';\nconst uint8ClampedTag = '[object Uint8ClampedArray]';\nconst uint16Tag = '[object Uint16Array]';\nconst uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nconst typedArrayTags: Record<string, boolean> = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[\n  int8Tag\n] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[\n  uint8Tag\n] = typedArrayTags[uint8ClampedTag] = typedArrayTags[\n  uint16Tag\n] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[\n  arrayBufferTag\n] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[\n  dateTag\n] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[\n  mapTag\n] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[\n  regexpTag\n] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[\n  weakMapTag\n] = false;\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func: any) {\n  return function(value: any) {\n    return func(value);\n  };\n}\n\n/** Used for built-in method references. */\nconst objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nconst objectToString = objectProto.toString;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value: any) {\n  return (\n    isObjectLike(value) &&\n    isLength(value.length) &&\n    !!typedArrayTags[objectToString.call(value)]\n  );\n}\n\nfunction isLength(value: any) {\n  return (\n    typeof value === 'number' &&\n    value > -1 &&\n    value % 1 === 0 &&\n    value <= MAX_SAFE_INTEGER\n  );\n}\n\nfunction isObjectLike(value: any) {\n  return !!value && typeof value === 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nexport const isTypedArray = baseIsTypedArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}