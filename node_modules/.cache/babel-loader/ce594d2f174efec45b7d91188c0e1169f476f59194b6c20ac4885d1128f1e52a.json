{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { getDegree, clone, getEdgeTerminal } from \"../util\";\nfunction initHierarchy(nodes, edges, nodeMap, directed) {\n  nodes.forEach((_, i) => {\n    nodes[i].children = [];\n    nodes[i].parent = [];\n  });\n  if (directed) {\n    edges.forEach(e => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      let sourceIdx = 0;\n      if (source) {\n        sourceIdx = nodeMap[source];\n      }\n      let targetIdx = 0;\n      if (target) {\n        targetIdx = nodeMap[target];\n      }\n      const child = nodes[sourceIdx].children;\n      const parent = nodes[targetIdx].parent;\n      child.push(nodes[targetIdx].id);\n      parent.push(nodes[sourceIdx].id);\n    });\n  } else {\n    edges.forEach(e => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      let sourceIdx = 0;\n      if (source) {\n        sourceIdx = nodeMap[source];\n      }\n      let targetIdx = 0;\n      if (target) {\n        targetIdx = nodeMap[target];\n      }\n      const sourceChildren = nodes[sourceIdx].children;\n      const targetChildren = nodes[targetIdx].children;\n      sourceChildren.push(nodes[targetIdx].id);\n      targetChildren.push(nodes[sourceIdx].id);\n    });\n  }\n}\nfunction connect(a, b, edges) {\n  const m = edges.length;\n  for (let i = 0; i < m; i++) {\n    const source = getEdgeTerminal(edges[i], 'source');\n    const target = getEdgeTerminal(edges[i], 'target');\n    if (a.id === source && b.id === target || b.id === source && a.id === target) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction compareDegree(a, b) {\n  const aDegree = a.degree;\n  const bDegree = b.degree;\n  if (aDegree < bDegree) {\n    return -1;\n  }\n  if (aDegree > bDegree) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * 圆形布局\n */\nexport class CircularLayout extends Base {\n  constructor(options) {\n    super();\n    /** 固定半径，若设置了 radius，则 startRadius 与 endRadius 不起效 */\n    this.radius = null;\n    /** 起始半径 */\n    this.startRadius = null;\n    /** 终止半径 */\n    this.endRadius = null;\n    /** 起始角度 */\n    this.startAngle = 0;\n    /** 终止角度 */\n    this.endAngle = 2 * Math.PI;\n    /** 是否顺时针 */\n    this.clockwise = true;\n    /** 节点在环上分成段数（几个段将均匀分布），在 endRadius - startRadius != 0 时生效 */\n    this.divisions = 1;\n    /** 节点在环上排序的依据，可选: 'topology', 'degree', 'null' */\n    this.ordering = null;\n    /** how many 2*pi from first to last nodes */\n    this.angleRatio = 1;\n    this.nodes = [];\n    this.edges = [];\n    this.nodeMap = {};\n    this.degrees = [];\n    this.width = 300;\n    this.height = 300;\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      radius: null,\n      startRadius: null,\n      endRadius: null,\n      startAngle: 0,\n      endAngle: 2 * Math.PI,\n      clockwise: true,\n      divisions: 1,\n      ordering: null,\n      angleRatio: 1\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    const n = nodes.length;\n    if (n === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    const center = self.center;\n    if (n === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    let radius = self.radius;\n    let startRadius = self.startRadius;\n    let endRadius = self.endRadius;\n    const divisions = self.divisions;\n    const startAngle = self.startAngle;\n    const endAngle = self.endAngle;\n    const angleStep = (endAngle - startAngle) / n;\n    // layout\n    const nodeMap = {};\n    nodes.forEach((node, i) => {\n      nodeMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    const degrees = getDegree(nodes.length, nodeMap, edges);\n    self.degrees = degrees;\n    if (!radius && !startRadius && !endRadius) {\n      radius = self.height > self.width ? self.width / 2 : self.height / 2;\n    } else if (!startRadius && endRadius) {\n      startRadius = endRadius;\n    } else if (startRadius && !endRadius) {\n      endRadius = startRadius;\n    }\n    const angleRatio = self.angleRatio;\n    const astep = angleStep * angleRatio;\n    const ordering = self.ordering;\n    let layoutNodes = [];\n    if (ordering === \"topology\") {\n      // layout according to the topology\n      layoutNodes = self.topologyOrdering();\n    } else if (ordering === \"topology-directed\") {\n      // layout according to the topology\n      layoutNodes = self.topologyOrdering(true);\n    } else if (ordering === \"degree\") {\n      // layout according to the descent order of degrees\n      layoutNodes = self.degreeOrdering();\n    } else {\n      // layout according to the original order in the data.nodes\n      layoutNodes = nodes;\n    }\n    const clockwise = self.clockwise;\n    const divN = Math.ceil(n / divisions); // node number in each division\n    for (let i = 0; i < n; ++i) {\n      let r = radius;\n      if (!r && startRadius !== null && endRadius !== null) {\n        r = startRadius + i * (endRadius - startRadius) / (n - 1);\n      }\n      if (!r) {\n        r = 10 + i * 100 / (n - 1);\n      }\n      let angle = startAngle + i % divN * astep + 2 * Math.PI / divisions * Math.floor(i / divN);\n      if (!clockwise) {\n        angle = endAngle - i % divN * astep - 2 * Math.PI / divisions * Math.floor(i / divN);\n      }\n      layoutNodes[i].x = center[0] + Math.cos(angle) * r;\n      layoutNodes[i].y = center[1] + Math.sin(angle) * r;\n      layoutNodes[i].weight = degrees[i];\n    }\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes: layoutNodes,\n      edges: this.edges\n    };\n  }\n  /**\n   * 根据节点的拓扑结构排序\n   * @return {array} orderedNodes 排序后的结果\n   */\n  topologyOrdering(directed = false) {\n    const self = this;\n    const degrees = self.degrees;\n    const edges = self.edges;\n    const nodes = self.nodes;\n    const cnodes = clone(nodes);\n    const nodeMap = self.nodeMap;\n    const orderedCNodes = [cnodes[0]];\n    const resNodes = [nodes[0]];\n    const pickFlags = [];\n    const n = nodes.length;\n    pickFlags[0] = true;\n    initHierarchy(cnodes, edges, nodeMap, directed);\n    let k = 0;\n    cnodes.forEach((cnode, i) => {\n      if (i !== 0) {\n        if ((i === n - 1 || degrees[i] !== degrees[i + 1] || connect(orderedCNodes[k], cnode, edges)) && !pickFlags[i]) {\n          orderedCNodes.push(cnode);\n          resNodes.push(nodes[nodeMap[cnode.id]]);\n          pickFlags[i] = true;\n          k++;\n        } else {\n          const children = orderedCNodes[k].children;\n          let foundChild = false;\n          for (let j = 0; j < children.length; j++) {\n            const childIdx = nodeMap[children[j]];\n            if (degrees[childIdx] === degrees[i] && !pickFlags[childIdx]) {\n              orderedCNodes.push(cnodes[childIdx]);\n              resNodes.push(nodes[nodeMap[cnodes[childIdx].id]]);\n              pickFlags[childIdx] = true;\n              foundChild = true;\n              break;\n            }\n          }\n          let ii = 0;\n          while (!foundChild) {\n            if (!pickFlags[ii]) {\n              orderedCNodes.push(cnodes[ii]);\n              resNodes.push(nodes[nodeMap[cnodes[ii].id]]);\n              pickFlags[ii] = true;\n              foundChild = true;\n            }\n            ii++;\n            if (ii === n) {\n              break;\n            }\n          }\n        }\n      }\n    });\n    return resNodes;\n  }\n  /**\n   * 根据节点度数大小排序\n   * @return {array} orderedNodes 排序后的结果\n   */\n  degreeOrdering() {\n    const self = this;\n    const nodes = self.nodes;\n    const orderedNodes = [];\n    const degrees = self.degrees;\n    nodes.forEach((node, i) => {\n      node.degree = degrees[i];\n      orderedNodes.push(node);\n    });\n    orderedNodes.sort(compareDegree);\n    return orderedNodes;\n  }\n  getType() {\n    return \"circular\";\n  }\n}","map":{"version":3,"names":["Base","getDegree","clone","getEdgeTerminal","initHierarchy","nodes","edges","nodeMap","directed","forEach","_","i","children","parent","e","source","target","sourceIdx","targetIdx","child","push","id","sourceChildren","targetChildren","connect","a","b","m","length","compareDegree","aDegree","degree","bDegree","CircularLayout","constructor","options","radius","startRadius","endRadius","startAngle","endAngle","Math","PI","clockwise","divisions","ordering","angleRatio","degrees","width","height","updateCfg","getDefaultCfg","execute","self","n","onLayoutEnd","window","innerWidth","innerHeight","center","x","y","angleStep","node","astep","layoutNodes","topologyOrdering","degreeOrdering","divN","ceil","r","angle","floor","cos","sin","weight","cnodes","orderedCNodes","resNodes","pickFlags","k","cnode","foundChild","j","childIdx","ii","orderedNodes","sort","getType"],"sources":["../../src/layout/circular.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;AAYA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,SAAS,EAAEC,KAAK,EAAEC,eAAe,QAAQ,SAAS;AAU3D,SAASC,aAAaA,CACpBC,KAAc,EACdC,KAAa,EACbC,OAAiB,EACjBC,QAAiB;EAEjBH,KAAK,CAACI,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAS,KAAI;IAC7BN,KAAK,CAACM,CAAC,CAAC,CAACC,QAAQ,GAAG,EAAE;IACtBP,KAAK,CAACM,CAAC,CAAC,CAACE,MAAM,GAAG,EAAE;EACtB,CAAC,CAAC;EACF,IAAIL,QAAQ,EAAE;IACZF,KAAK,CAACG,OAAO,CAAEK,CAAC,IAAI;MAClB,MAAMC,MAAM,GAAGZ,eAAe,CAACW,CAAC,EAAE,QAAQ,CAAC;MAC3C,MAAME,MAAM,GAAGb,eAAe,CAACW,CAAC,EAAE,QAAQ,CAAC;MAC3C,IAAIG,SAAS,GAAG,CAAC;MACjB,IAAIF,MAAM,EAAE;QACVE,SAAS,GAAGV,OAAO,CAACQ,MAAM,CAAC;;MAE7B,IAAIG,SAAS,GAAG,CAAC;MACjB,IAAIF,MAAM,EAAE;QACVE,SAAS,GAAGX,OAAO,CAACS,MAAM,CAAC;;MAE7B,MAAMG,KAAK,GAAGd,KAAK,CAACY,SAAS,CAAC,CAACL,QAAS;MACxC,MAAMC,MAAM,GAAGR,KAAK,CAACa,SAAS,CAAC,CAACL,MAAO;MACvCM,KAAK,CAACC,IAAI,CAACf,KAAK,CAACa,SAAS,CAAC,CAACG,EAAE,CAAC;MAC/BR,MAAM,CAACO,IAAI,CAACf,KAAK,CAACY,SAAS,CAAC,CAACI,EAAE,CAAC;IAClC,CAAC,CAAC;GACH,MAAM;IACLf,KAAK,CAACG,OAAO,CAAEK,CAAC,IAAI;MAClB,MAAMC,MAAM,GAAGZ,eAAe,CAACW,CAAC,EAAE,QAAQ,CAAC;MAC3C,MAAME,MAAM,GAAGb,eAAe,CAACW,CAAC,EAAE,QAAQ,CAAC;MAC3C,IAAIG,SAAS,GAAG,CAAC;MACjB,IAAIF,MAAM,EAAE;QACVE,SAAS,GAAGV,OAAO,CAACQ,MAAM,CAAC;;MAE7B,IAAIG,SAAS,GAAG,CAAC;MACjB,IAAIF,MAAM,EAAE;QACVE,SAAS,GAAGX,OAAO,CAACS,MAAM,CAAC;;MAE7B,MAAMM,cAAc,GAAGjB,KAAK,CAACY,SAAS,CAAC,CAACL,QAAS;MACjD,MAAMW,cAAc,GAAGlB,KAAK,CAACa,SAAS,CAAC,CAACN,QAAS;MACjDU,cAAc,CAACF,IAAI,CAACf,KAAK,CAACa,SAAS,CAAC,CAACG,EAAE,CAAC;MACxCE,cAAc,CAACH,IAAI,CAACf,KAAK,CAACY,SAAS,CAAC,CAACI,EAAE,CAAC;IAC1C,CAAC,CAAC;;AAEN;AAEA,SAASG,OAAOA,CAACC,CAAQ,EAAEC,CAAQ,EAAEpB,KAAa;EAChD,MAAMqB,CAAC,GAAGrB,KAAK,CAACsB,MAAM;EACtB,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,CAAC,EAAEhB,CAAC,EAAE,EAAE;IAC1B,MAAMI,MAAM,GAAGZ,eAAe,CAACG,KAAK,CAACK,CAAC,CAAC,EAAE,QAAQ,CAAC;IAClD,MAAMK,MAAM,GAAGb,eAAe,CAACG,KAAK,CAACK,CAAC,CAAC,EAAE,QAAQ,CAAC;IAClD,IACGc,CAAC,CAACJ,EAAE,KAAKN,MAAM,IAAIW,CAAC,CAACL,EAAE,KAAKL,MAAM,IAClCU,CAAC,CAACL,EAAE,KAAKN,MAAM,IAAIU,CAAC,CAACJ,EAAE,KAAKL,MAAO,EACpC;MACA,OAAO,IAAI;;;EAGf,OAAO,KAAK;AACd;AAEA,SAASa,aAAaA,CAACJ,CAAQ,EAAEC,CAAQ;EACvC,MAAMI,OAAO,GAAGL,CAAC,CAACM,MAAO;EACzB,MAAMC,OAAO,GAAGN,CAAC,CAACK,MAAO;EACzB,IAAID,OAAO,GAAGE,OAAO,EAAE;IACrB,OAAO,CAAC,CAAC;;EAEX,IAAIF,OAAO,GAAGE,OAAO,EAAE;IACrB,OAAO,CAAC;;EAEV,OAAO,CAAC;AACV;AAEA;;;AAGA,OAAM,MAAOC,cAAe,SAAQjC,IAAI;EA6CtCkC,YAAYC,OAA+B;IACzC,KAAK,EAAE;IA1CT;IACO,KAAAC,MAAM,GAAkB,IAAI;IAEnC;IACO,KAAAC,WAAW,GAAkB,IAAI;IAExC;IACO,KAAAC,SAAS,GAAkB,IAAI;IAEtC;IACO,KAAAC,UAAU,GAAW,CAAC;IAE7B;IACO,KAAAC,QAAQ,GAAW,CAAC,GAAGC,IAAI,CAACC,EAAE;IAErC;IACO,KAAAC,SAAS,GAAY,IAAI;IAEhC;IACO,KAAAC,SAAS,GAAW,CAAC;IAE5B;IACO,KAAAC,QAAQ,GAAuD,IAAI;IAE1E;IACO,KAAAC,UAAU,GAAG,CAAC;IAEd,KAAAzC,KAAK,GAAY,EAAE;IAEnB,KAAAC,KAAK,GAAW,EAAE;IAEjB,KAAAC,OAAO,GAAa,EAAE;IAEtB,KAAAwC,OAAO,GAAa,EAAE;IAEvB,KAAAC,KAAK,GAAW,GAAG;IAEnB,KAAAC,MAAM,GAAW,GAAG;IAMzB,IAAI,CAACC,SAAS,CAACf,OAAO,CAAC;EACzB;EAEOgB,aAAaA,CAAA;IAClB,OAAO;MACLf,MAAM,EAAE,IAAI;MACZC,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE,IAAI;MACfC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE;MACrBC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;KACb;EACH;EAEA;;;EAGOM,OAAOA,CAAA;IACZ,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAMhD,KAAK,GAAGgD,IAAI,CAAChD,KAAK;IACxB,MAAMC,KAAK,GAAG+C,IAAI,CAAC/C,KAAK;IACxB,MAAMgD,CAAC,GAAGjD,KAAK,CAACuB,MAAM;IACtB,IAAI0B,CAAC,KAAK,CAAC,EAAE;MACX,IAAID,IAAI,CAACE,WAAW,EAAEF,IAAI,CAACE,WAAW,EAAE;MACxC;;IAGF,IAAI,CAACF,IAAI,CAACL,KAAK,IAAI,OAAOQ,MAAM,KAAK,WAAW,EAAE;MAChDH,IAAI,CAACL,KAAK,GAAGQ,MAAM,CAACC,UAAU;;IAEhC,IAAI,CAACJ,IAAI,CAACJ,MAAM,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE;MACjDH,IAAI,CAACJ,MAAM,GAAGO,MAAM,CAACE,WAAW;;IAElC,IAAI,CAACL,IAAI,CAACM,MAAM,EAAE;MAChBN,IAAI,CAACM,MAAM,GAAG,CAACN,IAAI,CAACL,KAAK,GAAG,CAAC,EAAEK,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC;;IAEjD,MAAMU,MAAM,GAAGN,IAAI,CAACM,MAAM;IAE1B,IAAIL,CAAC,KAAK,CAAC,EAAE;MACXjD,KAAK,CAAC,CAAC,CAAC,CAACuD,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;MACtBtD,KAAK,CAAC,CAAC,CAAC,CAACwD,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC;MACtB,IAAIN,IAAI,CAACE,WAAW,EAAEF,IAAI,CAACE,WAAW,EAAE;MACxC;;IAGF,IAAInB,MAAM,GAAGiB,IAAI,CAACjB,MAAM;IACxB,IAAIC,WAAW,GAAGgB,IAAI,CAAChB,WAAW;IAClC,IAAIC,SAAS,GAAGe,IAAI,CAACf,SAAS;IAC9B,MAAMM,SAAS,GAAGS,IAAI,CAACT,SAAS;IAChC,MAAML,UAAU,GAAGc,IAAI,CAACd,UAAU;IAClC,MAAMC,QAAQ,GAAGa,IAAI,CAACb,QAAQ;IAC9B,MAAMsB,SAAS,GAAG,CAACtB,QAAQ,GAAGD,UAAU,IAAIe,CAAC;IAC7C;IACA,MAAM/C,OAAO,GAAa,EAAE;IAC5BF,KAAK,CAACI,OAAO,CAAC,CAACsD,IAAI,EAAEpD,CAAC,KAAI;MACxBJ,OAAO,CAACwD,IAAI,CAAC1C,EAAE,CAAC,GAAGV,CAAC;IACtB,CAAC,CAAC;IACF0C,IAAI,CAAC9C,OAAO,GAAGA,OAAO;IACtB,MAAMwC,OAAO,GAAG9C,SAAS,CAACI,KAAK,CAACuB,MAAM,EAAErB,OAAO,EAAED,KAAK,CAAC;IACvD+C,IAAI,CAACN,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACX,MAAM,IAAI,CAACC,WAAW,IAAI,CAACC,SAAS,EAAE;MACzCF,MAAM,GAAGiB,IAAI,CAACJ,MAAM,GAAGI,IAAI,CAACL,KAAK,GAAGK,IAAI,CAACL,KAAK,GAAG,CAAC,GAAGK,IAAI,CAACJ,MAAM,GAAG,CAAC;KACrE,MAAM,IAAI,CAACZ,WAAW,IAAIC,SAAS,EAAE;MACpCD,WAAW,GAAGC,SAAS;KACxB,MAAM,IAAID,WAAW,IAAI,CAACC,SAAS,EAAE;MACpCA,SAAS,GAAGD,WAAW;;IAEzB,MAAMS,UAAU,GAAGO,IAAI,CAACP,UAAU;IAClC,MAAMkB,KAAK,GAAGF,SAAS,GAAGhB,UAAU;IAEpC,MAAMD,QAAQ,GAAGQ,IAAI,CAACR,QAAQ;IAC9B,IAAIoB,WAAW,GAAG,EAAE;IACpB,IAAIpB,QAAQ,KAAK,UAAU,EAAE;MAC3B;MACAoB,WAAW,GAAGZ,IAAI,CAACa,gBAAgB,EAAE;KACtC,MAAM,IAAIrB,QAAQ,KAAK,mBAAmB,EAAE;MAC3C;MACAoB,WAAW,GAAGZ,IAAI,CAACa,gBAAgB,CAAC,IAAI,CAAC;KAC1C,MAAM,IAAIrB,QAAQ,KAAK,QAAQ,EAAE;MAChC;MACAoB,WAAW,GAAGZ,IAAI,CAACc,cAAc,EAAE;KACpC,MAAM;MACL;MACAF,WAAW,GAAG5D,KAAK;;IAGrB,MAAMsC,SAAS,GAAGU,IAAI,CAACV,SAAS;IAChC,MAAMyB,IAAI,GAAG3B,IAAI,CAAC4B,IAAI,CAACf,CAAC,GAAGV,SAAS,CAAC,CAAC,CAAC;IACvC,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,CAAC,EAAE,EAAE3C,CAAC,EAAE;MAC1B,IAAI2D,CAAC,GAAGlC,MAAM;MACd,IAAI,CAACkC,CAAC,IAAIjC,WAAW,KAAK,IAAI,IAAIC,SAAS,KAAK,IAAI,EAAE;QACpDgC,CAAC,GAAGjC,WAAW,GAAI1B,CAAC,IAAI2B,SAAS,GAAGD,WAAW,CAAC,IAAKiB,CAAC,GAAG,CAAC,CAAC;;MAE7D,IAAI,CAACgB,CAAC,EAAE;QACNA,CAAC,GAAG,EAAE,GAAI3D,CAAC,GAAG,GAAG,IAAK2C,CAAC,GAAG,CAAC,CAAC;;MAE9B,IAAIiB,KAAK,GACPhC,UAAU,GACT5B,CAAC,GAAGyD,IAAI,GAAIJ,KAAK,GAChB,CAAC,GAAGvB,IAAI,CAACC,EAAE,GAAIE,SAAS,GAAIH,IAAI,CAAC+B,KAAK,CAAC7D,CAAC,GAAGyD,IAAI,CAAC;MACpD,IAAI,CAACzB,SAAS,EAAE;QACd4B,KAAK,GACH/B,QAAQ,GACP7B,CAAC,GAAGyD,IAAI,GAAIJ,KAAK,GAChB,CAAC,GAAGvB,IAAI,CAACC,EAAE,GAAIE,SAAS,GAAIH,IAAI,CAAC+B,KAAK,CAAC7D,CAAC,GAAGyD,IAAI,CAAC;;MAEtDH,WAAW,CAACtD,CAAC,CAAC,CAACiD,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC,GAAGlB,IAAI,CAACgC,GAAG,CAACF,KAAK,CAAC,GAAGD,CAAC;MAClDL,WAAW,CAACtD,CAAC,CAAC,CAACkD,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAGlB,IAAI,CAACiC,GAAG,CAACH,KAAK,CAAC,GAAGD,CAAC;MAClDL,WAAW,CAACtD,CAAC,CAAC,CAACgE,MAAM,GAAG5B,OAAO,CAACpC,CAAC,CAAC;;IAGpC,IAAI0C,IAAI,CAACE,WAAW,EAAEF,IAAI,CAACE,WAAW,EAAE;IAExC,OAAO;MACLlD,KAAK,EAAE4D,WAAW;MAClB3D,KAAK,EAAE,IAAI,CAACA;KACb;EACH;EAEA;;;;EAIO4D,gBAAgBA,CAAC1D,QAAA,GAAoB,KAAK;IAC/C,MAAM6C,IAAI,GAAG,IAAI;IACjB,MAAMN,OAAO,GAAGM,IAAI,CAACN,OAAO;IAC5B,MAAMzC,KAAK,GAAG+C,IAAI,CAAC/C,KAAK;IACxB,MAAMD,KAAK,GAAGgD,IAAI,CAAChD,KAAK;IACxB,MAAMuE,MAAM,GAAG1E,KAAK,CAACG,KAAK,CAAC;IAC3B,MAAME,OAAO,GAAG8C,IAAI,CAAC9C,OAAO;IAC5B,MAAMsE,aAAa,GAAG,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,MAAME,QAAQ,GAAG,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,MAAM0E,SAAS,GAAc,EAAE;IAC/B,MAAMzB,CAAC,GAAGjD,KAAK,CAACuB,MAAM;IACtBmD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACnB3E,aAAa,CAACwE,MAAM,EAAEtE,KAAK,EAAEC,OAAO,EAAEC,QAAQ,CAAC;IAC/C,IAAIwE,CAAC,GAAG,CAAC;IACTJ,MAAM,CAACnE,OAAO,CAAC,CAACwE,KAAK,EAAEtE,CAAC,KAAI;MAC1B,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX,IACE,CAACA,CAAC,KAAK2C,CAAC,GAAG,CAAC,IACVP,OAAO,CAACpC,CAAC,CAAC,KAAKoC,OAAO,CAACpC,CAAC,GAAG,CAAC,CAAC,IAC7Ba,OAAO,CACLqD,aAAa,CAACG,CAAC,CAAC,EAChBC,KAAK,EACL3E,KAAK,CACN,KACH,CAACyE,SAAS,CAACpE,CAAC,CAAC,EACb;UACAkE,aAAa,CAACzD,IAAI,CAAC6D,KAAK,CAAC;UACzBH,QAAQ,CAAC1D,IAAI,CAACf,KAAK,CAACE,OAAO,CAAC0E,KAAK,CAAC5D,EAAE,CAAC,CAAC,CAAC;UACvC0D,SAAS,CAACpE,CAAC,CAAC,GAAG,IAAI;UACnBqE,CAAC,EAAE;SACJ,MAAM;UACL,MAAMpE,QAAQ,GAAGiE,aAAa,CAACG,CAAC,CAAC,CAACpE,QAAS;UAC3C,IAAIsE,UAAU,GAAG,KAAK;UACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvE,QAAQ,CAACgB,MAAM,EAAEuD,CAAC,EAAE,EAAE;YACxC,MAAMC,QAAQ,GAAG7E,OAAO,CAACK,QAAQ,CAACuE,CAAC,CAAC,CAAC;YACrC,IAAIpC,OAAO,CAACqC,QAAQ,CAAC,KAAKrC,OAAO,CAACpC,CAAC,CAAC,IAAI,CAACoE,SAAS,CAACK,QAAQ,CAAC,EAAE;cAC5DP,aAAa,CAACzD,IAAI,CAACwD,MAAM,CAACQ,QAAQ,CAAC,CAAC;cACpCN,QAAQ,CAAC1D,IAAI,CAACf,KAAK,CAACE,OAAO,CAACqE,MAAM,CAACQ,QAAQ,CAAC,CAAC/D,EAAE,CAAC,CAAC,CAAC;cAClD0D,SAAS,CAACK,QAAQ,CAAC,GAAG,IAAI;cAC1BF,UAAU,GAAG,IAAI;cACjB;;;UAGJ,IAAIG,EAAE,GAAG,CAAC;UACV,OAAO,CAACH,UAAU,EAAE;YAClB,IAAI,CAACH,SAAS,CAACM,EAAE,CAAC,EAAE;cAClBR,aAAa,CAACzD,IAAI,CAACwD,MAAM,CAACS,EAAE,CAAC,CAAC;cAC9BP,QAAQ,CAAC1D,IAAI,CAACf,KAAK,CAACE,OAAO,CAACqE,MAAM,CAACS,EAAE,CAAC,CAAChE,EAAE,CAAC,CAAC,CAAC;cAC5C0D,SAAS,CAACM,EAAE,CAAC,GAAG,IAAI;cACpBH,UAAU,GAAG,IAAI;;YAEnBG,EAAE,EAAE;YACJ,IAAIA,EAAE,KAAK/B,CAAC,EAAE;cACZ;;;;;IAKV,CAAC,CAAC;IACF,OAAOwB,QAAQ;EACjB;EAEA;;;;EAIOX,cAAcA,CAAA;IACnB,MAAMd,IAAI,GAAG,IAAI;IACjB,MAAMhD,KAAK,GAAGgD,IAAI,CAAChD,KAAK;IACxB,MAAMiF,YAAY,GAAY,EAAE;IAChC,MAAMvC,OAAO,GAAGM,IAAI,CAACN,OAAO;IAC5B1C,KAAK,CAACI,OAAO,CAAC,CAACsD,IAAI,EAAEpD,CAAC,KAAI;MACxBoD,IAAI,CAAChC,MAAM,GAAGgB,OAAO,CAACpC,CAAC,CAAC;MACxB2E,YAAY,CAAClE,IAAI,CAAC2C,IAAI,CAAC;IACzB,CAAC,CAAC;IACFuB,YAAY,CAACC,IAAI,CAAC1D,aAAa,CAAC;IAChC,OAAOyD,YAAY;EACrB;EAEOE,OAAOA,CAAA;IACZ,OAAO,UAAU;EACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}