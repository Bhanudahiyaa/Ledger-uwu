{"ast":null,"code":"import graphlib from '../graphlib';\nconst Graph = graphlib.Graph;\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nconst buildLayerGraph = (g, rank, relationship) => {\n  const root = createRootNode(g);\n  const result = new Graph({\n    compound: true\n  }).setGraph({\n    root\n  }).setDefaultNodeLabel(v => {\n    return g.node(v);\n  });\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    const parent = g.parent(v);\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n      // This assumes we have only short edges!\n      g[relationship](v).forEach(e => {\n        const u = e.v === v ? e.w : e.v;\n        const edge = result.edge(u, v);\n        const weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        });\n      });\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n  return result;\n};\nconst createRootNode = g => {\n  let v;\n  while (g.hasNode(v = `_root${Math.random()}`));\n  return v;\n};\nexport default buildLayerGraph;","map":{"version":3,"names":["graphlib","Graph","buildLayerGraph","g","rank","relationship","root","createRootNode","result","compound","setGraph","setDefaultNodeLabel","v","node","nodes","forEach","parent","minRank","maxRank","setNode","setParent","e","u","w","edge","weight","undefined","setEdge","hasOwnProperty","borderLeft","borderRight","hasNode","Math","random"],"sources":["../../../../../src/layout/dagre/src/order/build-layer-graph.ts"],"sourcesContent":[null],"mappings":"AACA,OAAOA,QAAQ,MAAM,aAAa;AAGlC,MAAMC,KAAK,GAAID,QAAgB,CAACC,KAAK;AAErC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,MAAMC,eAAe,GAAGA,CAACC,CAAS,EAAEC,IAAY,EAAEC,YAAoB,KAAI;EACxE,MAAMC,IAAI,GAAGC,cAAc,CAACJ,CAAC,CAAC;EAC9B,MAAMK,MAAM,GAAG,IAAIP,KAAK,CAAC;IAAEQ,QAAQ,EAAE;EAAI,CAAE,CAAC,CAACC,QAAQ,CAAC;IAAEJ;EAAI,CAAE,CAAC,CAC1DK,mBAAmB,CAAEC,CAAS,IAAI;IAAG,OAAOT,CAAC,CAACU,IAAI,CAACD,CAAC,CAAC;EAAE,CAAC,CAAC;EAE9DT,CAAC,CAACW,KAAK,EAAE,CAACC,OAAO,CAAEH,CAAC,IAAI;IACtB,MAAMC,IAAI,GAAGV,CAAC,CAACU,IAAI,CAACD,CAAC,CAAC;IACtB,MAAMI,MAAM,GAAGb,CAAC,CAACa,MAAM,CAACJ,CAAC,CAAC;IAE1B,IAAIC,IAAI,CAACT,IAAI,KAAKA,IAAI,IAAKS,IAAI,CAACI,OAAkB,IAAIb,IAAI,IAAIA,IAAI,IAAKS,IAAI,CAACK,OAAkB,EAAE;MAC9FV,MAAM,CAACW,OAAO,CAACP,CAAC,CAAC;MACjBJ,MAAM,CAACY,SAAS,CAACR,CAAC,EAAEI,MAAM,IAAIV,IAAI,CAAC;MAEnC;MACCH,CAAS,CAACE,YAAY,CAAC,CAACO,CAAC,CAAC,CAACG,OAAO,CAAEM,CAAM,IAAI;QAC7C,MAAMC,CAAC,GAAGD,CAAC,CAACT,CAAC,KAAKA,CAAC,GAAGS,CAAC,CAACE,CAAC,GAAGF,CAAC,CAACT,CAAC;QAC/B,MAAMY,IAAI,GAAGhB,MAAM,CAACgB,IAAI,CAACF,CAAC,EAAEV,CAAC,CAAC;QAC9B,MAAMa,MAAM,GAAGD,IAAI,KAAKE,SAAS,GAAGF,IAAI,CAACC,MAAM,GAAG,CAAC;QACnDjB,MAAM,CAACmB,OAAO,CAACL,CAAC,EAAEV,CAAC,EAAE;UAAEa,MAAM,EAAEtB,CAAC,CAACqB,IAAI,CAACH,CAAC,CAAC,CAACI,MAAM,GAAGA;QAAM,CAAE,CAAC;MAC7D,CAAC,CAAC;MAEF,IAAIZ,IAAI,CAACe,cAAc,CAAC,SAAS,CAAC,EAAE;QAClCpB,MAAM,CAACW,OAAO,CAACP,CAAC,EAAE;UAChBiB,UAAU,EAAEhB,IAAI,CAACgB,UAAU,CAACzB,IAAI,CAAC;UACjC0B,WAAW,EAAEjB,IAAI,CAACiB,WAAW,CAAC1B,IAAI;SACnC,CAAC;;;EAGR,CAAC,CAAC;EAEF,OAAOI,MAAM;AACf,CAAC;AAED,MAAMD,cAAc,GAAIJ,CAAS,IAAI;EACnC,IAAIS,CAAC;EACL,OAAOT,CAAC,CAAC4B,OAAO,CAAEnB,CAAC,GAAG,QAAQoB,IAAI,CAACC,MAAM,EAAE,EAAG,CAAC,CAAC;EAChD,OAAOrB,CAAC;AACV,CAAC;AAED,eAAeV,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}