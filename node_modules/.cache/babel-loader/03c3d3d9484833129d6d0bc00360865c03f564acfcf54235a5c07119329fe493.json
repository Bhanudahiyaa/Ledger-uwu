{"ast":null,"code":"import { Base } from \"../base\";\nimport { getEdgeTerminal, isArray, isNumber, isObject } from \"../../util\";\nimport Body from './body';\nimport Quad from './quad';\nimport QuadTree from './quadTree';\nexport class ForceAtlas2Layout extends Base {\n  constructor(options) {\n    super();\n    /** 布局中心 */\n    this.center = [0, 0];\n    /** 宽度 */\n    this.width = 300;\n    /** 高度 */\n    this.height = 300;\n    this.nodes = [];\n    this.edges = [];\n    /**\n     * the parameter for repulsive forces,\n     * it will scale the layout but won't change the layout\n     * larger the kr, looser the layout\n     * @type  {number}\n     */\n    this.kr = 5;\n    /**\n     * the parameter for gravity forces\n     * @type  {number}\n     */\n    this.kg = 1;\n    /**\n     * modes:\n     * 'normal' for normal using\n     * 'linlog' for compact clusters.\n     * @type  {string}\n     */\n    this.mode = 'normal';\n    /**\n     * whether preventing the node overlapping\n     * @type  {boolean}\n     */\n    this.preventOverlap = false;\n    /**\n     * whether active the dissuade hub mode\n     * true: grant authorities (nodes with a high indegree)\n     * a more central position than hubs (nodes with a high outdegree)\n     * @type  {boolean}\n     */\n    this.dissuadeHubs = false;\n    /**\n     * whether active the barnes hut optimization on computing repulsive forces\n     * @type  {boolean}\n     */\n    this.barnesHut = undefined;\n    /**\n     * the max iteration number\n     * @type  {number}\n     */\n    this.maxIteration = 0;\n    /**\n     * control the global velocity\n     * defualt: 0.1(gephi)\n     * @type  {number}\n     */\n    this.ks = 0.1;\n    /**\n     * the max global velocity\n     * @type  {number}\n     */\n    this.ksmax = 10;\n    /**\n     * the tolerance for the global swinging\n     * @type  {number}\n     */\n    this.tao = 0.1;\n    /**\n     * the function of layout complete listener, display the legend and minimap after layout\n     * @type  {function}\n     */\n    this.onLayoutEnd = () => {};\n    /**\n     * activate prune or not.\n     * prune the leaves during most iterations, layout the leaves in the last 50 iteraitons.\n     * if prune === '', it will be activated when the nodes number > 100\n     * note that it will reduce the quality of the layout\n     * @type  {boolean}\n     */\n    this.prune = undefined;\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {};\n  }\n  // execute the layout\n  execute() {\n    const self = this;\n    const {\n      nodes,\n      onLayoutEnd,\n      prune\n    } = self;\n    let maxIteration = self.maxIteration;\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    // the whidth of each nodes\n    const sizes = [];\n    const nodeNum = nodes.length;\n    for (let i = 0; i < nodeNum; i += 1) {\n      const node = nodes[i];\n      let nodeWidth = 10;\n      let nodeHeight = 10;\n      if (isNumber(node.size)) {\n        nodeWidth = node.size;\n        nodeHeight = node.size;\n      }\n      if (isArray(node.size)) {\n        if (!isNaN(node.size[0])) nodeWidth = node.size[0];\n        if (!isNaN(node.size[1])) nodeHeight = node.size[1];\n      } else if (isObject(node.size)) {\n        nodeWidth = node.size.width;\n        nodeHeight = node.size.height;\n      }\n      if (self.getWidth && !isNaN(self.getWidth(node))) nodeHeight = self.getWidth(node);\n      if (self.getHeight && !isNaN(self.getHeight(node))) nodeWidth = self.getHeight(node);\n      const maxSize = Math.max(nodeWidth, nodeHeight);\n      sizes.push(maxSize);\n    }\n    if (self.barnesHut === undefined && nodeNum > 250) self.barnesHut = true;\n    if (self.prune === undefined && nodeNum > 100) self.prune = true;\n    if (this.maxIteration === 0 && !self.prune) {\n      maxIteration = 250;\n      if (nodeNum <= 200 && nodeNum > 100) maxIteration = 1000;else if (nodeNum > 200) maxIteration = 1200;\n      this.maxIteration = maxIteration;\n    } else if (this.maxIteration === 0 && prune) {\n      maxIteration = 100;\n      if (nodeNum <= 200 && nodeNum > 100) maxIteration = 500;else if (nodeNum > 200) maxIteration = 950;\n      this.maxIteration = maxIteration;\n    }\n    if (!self.kr) {\n      self.kr = 50;\n      if (nodeNum > 100 && nodeNum <= 500) self.kr = 20;else if (nodeNum > 500) self.kr = 1;\n    }\n    if (!self.kg) {\n      self.kg = 20;\n      if (nodeNum > 100 && nodeNum <= 500) self.kg = 10;else if (nodeNum > 500) self.kg = 1;\n    }\n    this.nodes = self.updateNodesByForces(sizes);\n    onLayoutEnd();\n  }\n  updateNodesByForces(sizes) {\n    const self = this;\n    const {\n      edges,\n      maxIteration\n    } = self;\n    let nodes = self.nodes;\n    const nonLoopEdges = edges.filter(edge => {\n      const source = getEdgeTerminal(edge, 'source');\n      const target = getEdgeTerminal(edge, 'target');\n      return source !== target;\n    });\n    const size = nodes.length;\n    const esize = nonLoopEdges.length;\n    const degrees = [];\n    const idMap = {};\n    const edgeEndsIdMap = {};\n    // tslint:disable-next-line\n    const Es = [];\n    for (let i = 0; i < size; i += 1) {\n      idMap[nodes[i].id] = i;\n      degrees[i] = 0;\n      if (nodes[i].x === undefined || isNaN(nodes[i].x)) {\n        nodes[i].x = Math.random() * 1000;\n      }\n      if (nodes[i].y === undefined || isNaN(nodes[i].y)) {\n        nodes[i].y = Math.random() * 1000;\n      }\n      Es.push({\n        x: nodes[i].x,\n        y: nodes[i].y\n      });\n    }\n    for (let i = 0; i < esize; i += 1) {\n      let node1;\n      let node2;\n      let sIdx = 0;\n      let tIdx = 0;\n      for (let j = 0; j < size; j += 1) {\n        const source = getEdgeTerminal(nonLoopEdges[i], 'source');\n        const target = getEdgeTerminal(nonLoopEdges[i], 'target');\n        if (nodes[j].id === source) {\n          node1 = nodes[j];\n          sIdx = j;\n        } else if (nodes[j].id === target) {\n          node2 = nodes[j];\n          tIdx = j;\n        }\n        edgeEndsIdMap[i] = {\n          sourceIdx: sIdx,\n          targetIdx: tIdx\n        };\n      }\n      if (node1) degrees[idMap[node1.id]] += 1;\n      if (node2) degrees[idMap[node2.id]] += 1;\n    }\n    let iteration = maxIteration;\n    nodes = this.iterate(iteration, idMap, edgeEndsIdMap, esize, degrees, sizes);\n    // if prune, place the leaves around their parents, and then re-layout for several iterations.\n    if (self.prune) {\n      for (let j = 0; j < esize; j += 1) {\n        if (degrees[edgeEndsIdMap[j].sourceIdx] <= 1) {\n          nodes[edgeEndsIdMap[j].sourceIdx].x = nodes[edgeEndsIdMap[j].targetIdx].x;\n          nodes[edgeEndsIdMap[j].sourceIdx].y = nodes[edgeEndsIdMap[j].targetIdx].y;\n        } else if (degrees[edgeEndsIdMap[j].targetIdx] <= 1) {\n          nodes[edgeEndsIdMap[j].targetIdx].x = nodes[edgeEndsIdMap[j].sourceIdx].x;\n          nodes[edgeEndsIdMap[j].targetIdx].y = nodes[edgeEndsIdMap[j].sourceIdx].y;\n        }\n      }\n      self.prune = false;\n      self.barnesHut = false;\n      iteration = 100;\n      nodes = this.iterate(iteration, idMap, edgeEndsIdMap, esize, degrees, sizes);\n    }\n    return nodes;\n  }\n  iterate(iteration, idMap, edgeEndsIdMap, esize, degrees, sizes) {\n    const self = this;\n    let {\n      nodes\n    } = self;\n    const {\n      kr,\n      preventOverlap\n    } = self;\n    const {\n      barnesHut\n    } = self;\n    const nodeNum = nodes.length;\n    let sg = 0;\n    const krPrime = 100;\n    let iter = iteration;\n    const prevoIter = 50;\n    let forces = [];\n    const preForces = [];\n    const bodies = [];\n    for (let i = 0; i < nodeNum; i += 1) {\n      forces[2 * i] = 0;\n      forces[2 * i + 1] = 0;\n      if (barnesHut) {\n        const params = {\n          id: i,\n          rx: nodes[i].x,\n          ry: nodes[i].y,\n          mass: 1,\n          g: kr,\n          degree: degrees[i]\n        };\n        bodies[i] = new Body(params);\n      }\n    }\n    while (iter > 0) {\n      for (let i = 0; i < nodeNum; i += 1) {\n        preForces[2 * i] = forces[2 * i];\n        preForces[2 * i + 1] = forces[2 * i + 1];\n        forces[2 * i] = 0;\n        forces[2 * i + 1] = 0;\n      }\n      // attractive forces, existing on every actual edge\n      forces = this.getAttrForces(iter, prevoIter, esize, idMap, edgeEndsIdMap, degrees, sizes, forces);\n      // repulsive forces and Gravity, existing on every node pair\n      // if preventOverlap, using the no-optimized method in the last prevoIter instead.\n      if (barnesHut && (preventOverlap && iter > prevoIter || !preventOverlap)) {\n        forces = this.getOptRepGraForces(forces, bodies, degrees);\n      } else {\n        forces = this.getRepGraForces(iter, prevoIter, forces, krPrime, sizes, degrees);\n      }\n      // update the positions\n      const res = this.updatePos(forces, preForces, sg, degrees);\n      nodes = res.nodes;\n      sg = res.sg;\n      iter--;\n      if (self.tick) self.tick();\n    }\n    return nodes;\n  }\n  getAttrForces(iter, prevoIter, esize, idMap, edgeEndsIdMap, degrees, sizes, forces) {\n    const self = this;\n    const {\n      nodes,\n      preventOverlap,\n      dissuadeHubs,\n      mode,\n      prune\n    } = self;\n    for (let i = 0; i < esize; i += 1) {\n      const sourceNode = nodes[edgeEndsIdMap[i].sourceIdx];\n      const sourceIdx = edgeEndsIdMap[i].sourceIdx;\n      const targetNode = nodes[edgeEndsIdMap[i].targetIdx];\n      const targetIdx = edgeEndsIdMap[i].targetIdx;\n      if (prune && (degrees[sourceIdx] <= 1 || degrees[targetIdx] <= 1)) continue;\n      const dir = [targetNode.x - sourceNode.x, targetNode.y - sourceNode.y];\n      let eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      if (preventOverlap && iter < prevoIter) eucliDis = eucliDis - sizes[sourceIdx] - sizes[targetIdx];\n      let Fa1 = eucliDis; // tslint:disable-line\n      let Fa2 = Fa1; // tslint:disable-line\n      if (mode === 'linlog') {\n        Fa1 = Math.log(1 + eucliDis);\n        Fa2 = Fa1;\n      }\n      if (dissuadeHubs) {\n        Fa1 = eucliDis / degrees[sourceIdx];\n        Fa2 = eucliDis / degrees[targetIdx];\n      }\n      if (preventOverlap && iter < prevoIter && eucliDis <= 0) {\n        Fa1 = 0;\n        Fa2 = 0;\n      } else if (preventOverlap && iter < prevoIter && eucliDis > 0) {\n        Fa1 = eucliDis;\n        Fa2 = eucliDis;\n      }\n      forces[2 * idMap[sourceNode.id]] += Fa1 * dir[0];\n      forces[2 * idMap[targetNode.id]] -= Fa2 * dir[0];\n      forces[2 * idMap[sourceNode.id] + 1] += Fa1 * dir[1];\n      forces[2 * idMap[targetNode.id] + 1] -= Fa2 * dir[1];\n    }\n    return forces;\n  }\n  getRepGraForces(iter, prevoIter, forces, krPrime, sizes, degrees) {\n    const self = this;\n    const {\n      nodes,\n      preventOverlap,\n      kr,\n      kg,\n      center,\n      prune\n    } = self;\n    const nodeNum = nodes.length;\n    for (let i = 0; i < nodeNum; i += 1) {\n      for (let j = i + 1; j < nodeNum; j += 1) {\n        if (prune && (degrees[i] <= 1 || degrees[j] <= 1)) continue;\n        const dir = [nodes[j].x - nodes[i].x, nodes[j].y - nodes[i].y];\n        let eucliDis = Math.hypot(dir[0], dir[1]);\n        eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n        dir[0] = dir[0] / eucliDis;\n        dir[1] = dir[1] / eucliDis;\n        if (preventOverlap && iter < prevoIter) eucliDis = eucliDis - sizes[i] - sizes[j];\n        let Fr = kr * (degrees[i] + 1) * (degrees[j] + 1) / eucliDis; // tslint:disable-line\n        if (preventOverlap && iter < prevoIter && eucliDis < 0) {\n          Fr = krPrime * (degrees[i] + 1) * (degrees[j] + 1);\n        } else if (preventOverlap && iter < prevoIter && eucliDis === 0) {\n          Fr = 0;\n        } else if (preventOverlap && iter < prevoIter && eucliDis > 0) {\n          Fr = kr * (degrees[i] + 1) * (degrees[j] + 1) / eucliDis;\n        }\n        forces[2 * i] -= Fr * dir[0];\n        forces[2 * j] += Fr * dir[0];\n        forces[2 * i + 1] -= Fr * dir[1];\n        forces[2 * j + 1] += Fr * dir[1];\n      }\n      // gravity\n      const dir = [nodes[i].x - center[0], nodes[i].y - center[1]];\n      const eucliDis = Math.hypot(dir[0], dir[1]);\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      const Fg = kg * (degrees[i] + 1); // tslint:disable-line\n      forces[2 * i] -= Fg * dir[0];\n      forces[2 * i + 1] -= Fg * dir[1];\n    }\n    return forces;\n  }\n  getOptRepGraForces(forces, bodies, degrees) {\n    const self = this;\n    const {\n      nodes,\n      kg,\n      center,\n      prune\n    } = self;\n    const nodeNum = nodes.length;\n    let minx = 9e10;\n    let maxx = -9e10;\n    let miny = 9e10;\n    let maxy = -9e10;\n    for (let i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      bodies[i].setPos(nodes[i].x, nodes[i].y);\n      if (nodes[i].x >= maxx) maxx = nodes[i].x;\n      if (nodes[i].x <= minx) minx = nodes[i].x;\n      if (nodes[i].y >= maxy) maxy = nodes[i].y;\n      if (nodes[i].y <= miny) miny = nodes[i].y;\n    }\n    const width = Math.max(maxx - minx, maxy - miny);\n    const quadParams = {\n      xmid: (maxx + minx) / 2,\n      ymid: (maxy + miny) / 2,\n      length: width,\n      massCenter: center,\n      mass: nodeNum\n    };\n    const quad = new Quad(quadParams);\n    const quadTree = new QuadTree(quad);\n    // build the tree, insert the nodes(quads) into the tree\n    for (let i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      if (bodies[i].in(quad)) quadTree.insert(bodies[i]);\n    }\n    // update the repulsive forces and the gravity.\n    for (let i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      bodies[i].resetForce();\n      quadTree.updateForce(bodies[i]);\n      forces[2 * i] -= bodies[i].fx;\n      forces[2 * i + 1] -= bodies[i].fy;\n      // gravity\n      const dir = [nodes[i].x - center[0], nodes[i].y - center[1]];\n      let eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      const Fg = kg * (degrees[i] + 1); // tslint:disable-line\n      forces[2 * i] -= Fg * dir[0];\n      forces[2 * i + 1] -= Fg * dir[1];\n    }\n    return forces;\n  }\n  updatePos(forces, preForces, sg, degrees) {\n    const self = this;\n    const {\n      nodes,\n      ks,\n      tao,\n      prune,\n      ksmax\n    } = self;\n    const nodeNum = nodes.length;\n    const swgns = [];\n    const trans = [];\n    // swg(G) and tra(G)\n    let swgG = 0;\n    let traG = 0;\n    for (let i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      const minus = [forces[2 * i] - preForces[2 * i], forces[2 * i + 1] - preForces[2 * i + 1]];\n      const minusNorm = Math.hypot(minus[0], minus[1]);\n      const add = [forces[2 * i] + preForces[2 * i], forces[2 * i + 1] + preForces[2 * i + 1]];\n      const addNorm = Math.hypot(add[0], add[1]);\n      swgns[i] = minusNorm;\n      trans[i] = addNorm / 2;\n      swgG += (degrees[i] + 1) * swgns[i];\n      traG += (degrees[i] + 1) * trans[i];\n    }\n    const preSG = sg;\n    sg = tao * traG / swgG; // tslint:disable-line\n    if (preSG !== 0) {\n      sg = sg > 1.5 * preSG ? 1.5 * preSG : sg; // tslint:disable-line\n    }\n    // update the node positions\n    for (let i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      let sn = ks * sg / (1 + sg * Math.sqrt(swgns[i]));\n      let absForce = Math.hypot(forces[2 * i], forces[2 * i + 1]);\n      absForce = absForce < 0.0001 ? 0.0001 : absForce;\n      const max = ksmax / absForce;\n      sn = sn > max ? max : sn;\n      const dnx = sn * forces[2 * i];\n      const dny = sn * forces[2 * i + 1];\n      nodes[i].x += dnx;\n      nodes[i].y += dny;\n    }\n    return {\n      nodes,\n      sg\n    };\n  }\n}","map":{"version":3,"names":["Base","getEdgeTerminal","isArray","isNumber","isObject","Body","Quad","QuadTree","ForceAtlas2Layout","constructor","options","center","width","height","nodes","edges","kr","kg","mode","preventOverlap","dissuadeHubs","barnesHut","undefined","maxIteration","ks","ksmax","tao","onLayoutEnd","prune","updateCfg","getDefaultCfg","execute","self","window","innerWidth","innerHeight","sizes","nodeNum","length","i","node","nodeWidth","nodeHeight","size","isNaN","getWidth","getHeight","maxSize","Math","max","push","updateNodesByForces","nonLoopEdges","filter","edge","source","target","esize","degrees","idMap","edgeEndsIdMap","Es","id","x","random","y","node1","node2","sIdx","tIdx","j","sourceIdx","targetIdx","iteration","iterate","sg","krPrime","iter","prevoIter","forces","preForces","bodies","params","rx","ry","mass","g","degree","getAttrForces","getOptRepGraForces","getRepGraForces","res","updatePos","tick","sourceNode","targetNode","dir","eucliDis","hypot","Fa1","Fa2","log","Fr","Fg","minx","maxx","miny","maxy","setPos","quadParams","xmid","ymid","massCenter","quad","quadTree","in","insert","resetForce","updateForce","fx","fy","swgns","trans","swgG","traG","minus","minusNorm","add","addNorm","preSG","sn","sqrt","absForce","dnx","dny"],"sources":["../../../src/layout/forceAtlas2/index.ts"],"sourcesContent":[null],"mappings":"AAKA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,eAAe,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,YAAY;AACzE,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAM,MAAOC,iBAAkB,SAAQR,IAAI;EAqGzCS,YAAYC,OAAkC;IAC5C,KAAK,EAAE;IArGT;IACO,KAAAC,MAAM,GAAe,CAAC,CAAC,EAAE,CAAC,CAAC;IAElC;IACO,KAAAC,KAAK,GAAW,GAAG;IAE1B;IACO,KAAAC,MAAM,GAAW,GAAG;IAEpB,KAAAC,KAAK,GAAc,EAAE;IAErB,KAAAC,KAAK,GAAW,EAAE;IAEzB;;;;;;IAMO,KAAAC,EAAE,GAAW,CAAC;IAErB;;;;IAIO,KAAAC,EAAE,GAAW,CAAC;IAErB;;;;;;IAMO,KAAAC,IAAI,GAAwB,QAAQ;IAE3C;;;;IAIO,KAAAC,cAAc,GAAY,KAAK;IAEtC;;;;;;IAMO,KAAAC,YAAY,GAAY,KAAK;IAEpC;;;;IAIO,KAAAC,SAAS,GAAwBC,SAAS;IAEjD;;;;IAIO,KAAAC,YAAY,GAAW,CAAC;IAE/B;;;;;IAKO,KAAAC,EAAE,GAAW,GAAG;IAEvB;;;;IAIO,KAAAC,KAAK,GAAW,EAAE;IAEzB;;;;IAIO,KAAAC,GAAG,GAAW,GAAG;IAExB;;;;IAIO,KAAAC,WAAW,GAAe,MAAK,CAAE,CAAC;IAIzC;;;;;;;IAOO,KAAAC,KAAK,GAAwBN,SAAS;IAO3C,IAAI,CAACO,SAAS,CAACnB,OAAO,CAAC;EACzB;EAEOoB,aAAaA,CAAA;IAClB,OAAO,EAAE;EACX;EAEA;EACOC,OAAOA,CAAA;IACZ,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAM;MACJlB,KAAK;MACLa,WAAW;MACXC;IAAK,CACN,GAAGI,IAAI;IACR,IAAIT,YAAY,GAAGS,IAAI,CAACT,YAAY;IAEpC,IAAI,CAACS,IAAI,CAACpB,KAAK,IAAI,OAAOqB,MAAM,KAAK,WAAW,EAAE;MAChDD,IAAI,CAACpB,KAAK,GAAGqB,MAAM,CAACC,UAAU;;IAEhC,IAAI,CAACF,IAAI,CAACnB,MAAM,IAAI,OAAOoB,MAAM,KAAK,WAAW,EAAE;MACjDD,IAAI,CAACnB,MAAM,GAAGoB,MAAM,CAACE,WAAW;;IAGlC;IACA,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,OAAO,GAAGvB,KAAK,CAACwB,MAAM;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MACnC,MAAMC,IAAI,GAAG1B,KAAK,CAACyB,CAAC,CAAQ;MAC5B,IAAIE,SAAS,GAAG,EAAE;MAClB,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAIvC,QAAQ,CAACqC,IAAI,CAACG,IAAI,CAAC,EAAE;QACvBF,SAAS,GAAGD,IAAI,CAACG,IAAI;QACrBD,UAAU,GAAGF,IAAI,CAACG,IAAI;;MAExB,IAAIzC,OAAO,CAACsC,IAAI,CAACG,IAAI,CAAC,EAAG;QACvB,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEF,SAAS,GAAGD,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;QAClD,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAED,UAAU,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;OACpD,MAAM,IAAIvC,QAAQ,CAACoC,IAAI,CAACG,IAAI,CAAC,EAAE;QAC9BF,SAAS,GAAGD,IAAI,CAACG,IAAI,CAAC/B,KAAK;QAC3B8B,UAAU,GAAGF,IAAI,CAACG,IAAI,CAAC9B,MAAM;;MAE/B,IAAImB,IAAI,CAACa,QAAQ,IAAI,CAACD,KAAK,CAACZ,IAAI,CAACa,QAAQ,CAACL,IAAI,CAAC,CAAC,EAAEE,UAAU,GAAGV,IAAI,CAACa,QAAQ,CAACL,IAAI,CAAC;MAClF,IAAIR,IAAI,CAACc,SAAS,IAAI,CAACF,KAAK,CAACZ,IAAI,CAACc,SAAS,CAACN,IAAI,CAAC,CAAC,EAAEC,SAAS,GAAGT,IAAI,CAACc,SAAS,CAACN,IAAI,CAAC;MAEpF,MAAMO,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACR,SAAS,EAAEC,UAAU,CAAC;MAC/CN,KAAK,CAACc,IAAI,CAACH,OAAO,CAAC;;IAGrB,IAAIf,IAAI,CAACX,SAAS,KAAKC,SAAS,IAAIe,OAAO,GAAG,GAAG,EAAEL,IAAI,CAACX,SAAS,GAAG,IAAI;IACxE,IAAIW,IAAI,CAACJ,KAAK,KAAKN,SAAS,IAAIe,OAAO,GAAG,GAAG,EAAEL,IAAI,CAACJ,KAAK,GAAG,IAAI;IAChE,IAAI,IAAI,CAACL,YAAY,KAAK,CAAC,IAAI,CAACS,IAAI,CAACJ,KAAK,EAAE;MAC1CL,YAAY,GAAG,GAAG;MAClB,IAAIc,OAAO,IAAI,GAAG,IAAIA,OAAO,GAAG,GAAG,EAAEd,YAAY,GAAG,IAAI,CAAC,KACpD,IAAIc,OAAO,GAAG,GAAG,EAAEd,YAAY,GAAG,IAAI;MAC3C,IAAI,CAACA,YAAY,GAAGA,YAAY;KACjC,MAAM,IAAI,IAAI,CAACA,YAAY,KAAK,CAAC,IAAIK,KAAK,EAAE;MAC3CL,YAAY,GAAG,GAAG;MAClB,IAAIc,OAAO,IAAI,GAAG,IAAIA,OAAO,GAAG,GAAG,EAAEd,YAAY,GAAG,GAAG,CAAC,KACnD,IAAIc,OAAO,GAAG,GAAG,EAAEd,YAAY,GAAG,GAAG;MAC1C,IAAI,CAACA,YAAY,GAAGA,YAAY;;IAGlC,IAAI,CAACS,IAAI,CAAChB,EAAE,EAAE;MACZgB,IAAI,CAAChB,EAAE,GAAG,EAAE;MACZ,IAAIqB,OAAO,GAAG,GAAG,IAAIA,OAAO,IAAI,GAAG,EAAEL,IAAI,CAAChB,EAAE,GAAG,EAAE,CAAC,KAC7C,IAAIqB,OAAO,GAAG,GAAG,EAAEL,IAAI,CAAChB,EAAE,GAAG,CAAC;;IAErC,IAAI,CAACgB,IAAI,CAACf,EAAE,EAAE;MACZe,IAAI,CAACf,EAAE,GAAG,EAAE;MACZ,IAAIoB,OAAO,GAAG,GAAG,IAAIA,OAAO,IAAI,GAAG,EAAEL,IAAI,CAACf,EAAE,GAAG,EAAE,CAAC,KAC7C,IAAIoB,OAAO,GAAG,GAAG,EAAEL,IAAI,CAACf,EAAE,GAAG,CAAC;;IAErC,IAAI,CAACH,KAAK,GAAGkB,IAAI,CAACmB,mBAAmB,CAACf,KAAK,CAAC;IAC5CT,WAAW,EAAE;EACf;EAGAwB,mBAAmBA,CAACf,KAAe;IACjC,MAAMJ,IAAI,GAAG,IAAI;IACjB,MAAM;MAAEjB,KAAK;MAAEQ;IAAY,CAAE,GAAGS,IAAI;IACpC,IAAIlB,KAAK,GAAGkB,IAAI,CAAClB,KAAK;IAEtB,MAAMsC,YAAY,GAAGrC,KAAK,CAACsC,MAAM,CAAEC,IAAS,IAAI;MAC9C,MAAMC,MAAM,GAAGtD,eAAe,CAACqD,IAAI,EAAE,QAAQ,CAAC;MAC9C,MAAME,MAAM,GAAGvD,eAAe,CAACqD,IAAI,EAAE,QAAQ,CAAC;MAC9C,OAAOC,MAAM,KAAKC,MAAM;IAC1B,CAAC,CAAC;IACF,MAAMb,IAAI,GAAG7B,KAAK,CAACwB,MAAM;IACzB,MAAMmB,KAAK,GAAGL,YAAY,CAACd,MAAM;IAEjC,MAAMoB,OAAO,GAAG,EAAE;IAClB,MAAMC,KAAK,GAA4B,EAAE;IACzC,MAAMC,aAAa,GAA4D,EAAE;IAEjF;IACA,MAAMC,EAAE,GAAG,EAAE;IACb,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,IAAI,EAAEJ,CAAC,IAAI,CAAC,EAAE;MAChCoB,KAAK,CAAC7C,KAAK,CAACyB,CAAC,CAAC,CAACuB,EAAE,CAAC,GAAGvB,CAAC;MACtBmB,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC;MACd,IAAIzB,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,KAAKzC,SAAS,IAAIsB,KAAK,CAAC9B,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,CAAC,EAAE;QAAEjD,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,GAAGf,IAAI,CAACgB,MAAM,EAAE,GAAG,IAAI;;MACtF,IAAIlD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,KAAK3C,SAAS,IAAIsB,KAAK,CAAC9B,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,CAAC,EAAE;QAAEnD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,GAAGjB,IAAI,CAACgB,MAAM,EAAE,GAAG,IAAI;;MACtFH,EAAE,CAACX,IAAI,CAAC;QAAEa,CAAC,EAAEjD,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC;QAAEE,CAAC,EAAEnD,KAAK,CAACyB,CAAC,CAAC,CAAC0B;MAAC,CAAE,CAAC;;IAE3C,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,KAAK,EAAElB,CAAC,IAAI,CAAC,EAAE;MACjC,IAAI2B,KAAK;MACT,IAAIC,KAAK;MACT,IAAIC,IAAI,GAAG,CAAC;MACZ,IAAIC,IAAI,GAAG,CAAC;MAEZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,IAAI,EAAE2B,CAAC,IAAI,CAAC,EAAE;QAChC,MAAMf,MAAM,GAAGtD,eAAe,CAACmD,YAAY,CAACb,CAAC,CAAC,EAAE,QAAQ,CAAC;QACzD,MAAMiB,MAAM,GAAGvD,eAAe,CAACmD,YAAY,CAACb,CAAC,CAAC,EAAE,QAAQ,CAAC;QACzD,IAAIzB,KAAK,CAACwD,CAAC,CAAC,CAACR,EAAE,KAAKP,MAAM,EAAE;UAC1BW,KAAK,GAAGpD,KAAK,CAACwD,CAAC,CAAC;UAChBF,IAAI,GAAGE,CAAC;SACT,MAAM,IAAIxD,KAAK,CAACwD,CAAC,CAAC,CAACR,EAAE,KAAKN,MAAM,EAAE;UACjCW,KAAK,GAAGrD,KAAK,CAACwD,CAAC,CAAC;UAChBD,IAAI,GAAGC,CAAC;;QAEVV,aAAa,CAACrB,CAAC,CAAC,GAAG;UAAEgC,SAAS,EAAEH,IAAI;UAAEI,SAAS,EAAEH;QAAI,CAAE;;MAEzD,IAAIH,KAAK,EAAER,OAAO,CAACC,KAAK,CAACO,KAAK,CAACJ,EAAE,CAAC,CAAC,IAAI,CAAC;MACxC,IAAIK,KAAK,EAAET,OAAO,CAACC,KAAK,CAACQ,KAAK,CAACL,EAAE,CAAC,CAAC,IAAI,CAAC;;IAG1C,IAAIW,SAAS,GAAGlD,YAAY;IAC5BT,KAAK,GAAG,IAAI,CAAC4D,OAAO,CAACD,SAAS,EAAEd,KAAK,EAAEC,aAAa,EAAEH,KAAK,EAAEC,OAAO,EAAEtB,KAAK,CAAC;IAE5E;IACA,IAAIJ,IAAI,CAACJ,KAAK,EAAE;MACd,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,EAAEa,CAAC,IAAI,CAAC,EAAE;QACjC,IAAIZ,OAAO,CAACE,aAAa,CAACU,CAAC,CAAC,CAACC,SAAS,CAAC,IAAI,CAAC,EAAE;UAC5CzD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACC,SAAS,CAAC,CAACR,CAAC,GAAGjD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACE,SAAS,CAAC,CAACT,CAAC;UACzEjD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACC,SAAS,CAAC,CAACN,CAAC,GAAGnD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACE,SAAS,CAAC,CAACP,CAAC;SAE1E,MAAM,IAAIP,OAAO,CAACE,aAAa,CAACU,CAAC,CAAC,CAACE,SAAS,CAAC,IAAI,CAAC,EAAE;UACnD1D,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACE,SAAS,CAAC,CAACT,CAAC,GAAGjD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACC,SAAS,CAAC,CAACR,CAAC;UACzEjD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACE,SAAS,CAAC,CAACP,CAAC,GAAGnD,KAAK,CAAC8C,aAAa,CAACU,CAAC,CAAC,CAACC,SAAS,CAAC,CAACN,CAAC;;;MAG7EjC,IAAI,CAACJ,KAAK,GAAG,KAAK;MAClBI,IAAI,CAACX,SAAS,GAAG,KAAK;MACtBoD,SAAS,GAAG,GAAG;MACf3D,KAAK,GAAG,IAAI,CAAC4D,OAAO,CAClBD,SAAS,EACTd,KAAK,EACLC,aAAa,EACbH,KAAK,EACLC,OAAO,EACPtB,KAAK,CACJ;;IAEL,OAAOtB,KAAK;EACd;EACA4D,OAAOA,CACLD,SAAiB,EACjBd,KAA8B,EAC9BC,aAAsE,EACtEH,KAAa,EACbC,OAAiB,EACjBtB,KAAe;IAGf,MAAMJ,IAAI,GAAG,IAAI;IACjB,IAAI;MAAElB;IAAK,CAAE,GAAGkB,IAAI;IACpB,MAAM;MAAEhB,EAAE;MAAEG;IAAc,CAAE,GAAGa,IAAI;IACnC,MAAM;MAAEX;IAAS,CAAE,GAAGW,IAAI;IAE1B,MAAMK,OAAO,GAAGvB,KAAK,CAACwB,MAAM;IAC5B,IAAIqC,EAAE,GAAG,CAAC;IACV,MAAMC,OAAO,GAAG,GAAG;IACnB,IAAIC,IAAI,GAAGJ,SAAS;IACpB,MAAMK,SAAS,GAAG,EAAE;IACpB,IAAIC,MAAM,GAAG,EAAE;IACf,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MACnCwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,GAAG,CAAC;MACjBwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAErB,IAAIlB,SAAS,EAAE;QACb,MAAM6D,MAAM,GAAG;UACbpB,EAAE,EAAEvB,CAAC;UACL4C,EAAE,EAAErE,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC;UACdqB,EAAE,EAAEtE,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC;UACdoB,IAAI,EAAE,CAAC;UACPC,CAAC,EAAEtE,EAAE;UACLuE,MAAM,EAAE7B,OAAO,CAACnB,CAAC;SAClB;QACD0C,MAAM,CAAC1C,CAAC,CAAC,GAAG,IAAIlC,IAAI,CAAC6E,MAAM,CAAC;;;IAIhC,OAAOL,IAAI,GAAG,CAAC,EAAE;MACf,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;QACnCyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,CAAC,GAAGwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC;QAChCyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,GAAG,CAAC,CAAC,GAAGwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC;QACxCwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,GAAG,CAAC;QACjBwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;;MAErB;MACFwC,MAAM,GAAG,IAAI,CAACS,aAAa,CACzBX,IAAI,EACJC,SAAS,EACTrB,KAAK,EACLE,KAAK,EACLC,aAAa,EACbF,OAAO,EACPtB,KAAK,EACL2C,MAAM,CACP;MAED;MACA;MACA,IAAI1D,SAAS,KAAMF,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAK,CAAC3D,cAAc,CAAC,EAAE;QAC1E4D,MAAM,GAAG,IAAI,CAACU,kBAAkB,CAACV,MAAM,EAAEE,MAAM,EAAEvB,OAAO,CAAC;OAC1D,MAAM;QACLqB,MAAM,GAAG,IAAI,CAACW,eAAe,CAACb,IAAI,EAAEC,SAAS,EAAEC,MAAM,EAAEH,OAAO,EAAExC,KAAK,EAAEsB,OAAO,CAAC;;MAEjF;MACA,MAAMiC,GAAG,GAAG,IAAI,CAACC,SAAS,CAACb,MAAM,EAAEC,SAAS,EAAEL,EAAE,EAAEjB,OAAO,CAAC;MAC1D5C,KAAK,GAAG6E,GAAG,CAAC7E,KAAK;MACjB6D,EAAE,GAAGgB,GAAG,CAAChB,EAAE;MACXE,IAAI,EAAG;MACP,IAAI7C,IAAI,CAAC6D,IAAI,EAAE7D,IAAI,CAAC6D,IAAI,EAAE;;IAG5B,OAAO/E,KAAK;EACd;EACA0E,aAAaA,CACXX,IAAY,EACZC,SAAiB,EACjBrB,KAAa,EACbE,KAA8B,EAC9BC,aAAsE,EACtEF,OAAiB,EACjBtB,KAAe,EACf2C,MAAgB;IAEhB,MAAM/C,IAAI,GAAG,IAAI;IACjB,MAAM;MAAElB,KAAK;MAAEK,cAAc;MAAEC,YAAY;MAAEF,IAAI;MAAEU;IAAK,CAAE,GAAGI,IAAI;IACjE,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,KAAK,EAAElB,CAAC,IAAI,CAAC,EAAE;MACjC,MAAMuD,UAAU,GAAGhF,KAAK,CAAC8C,aAAa,CAACrB,CAAC,CAAC,CAACgC,SAAS,CAAC;MACpD,MAAMA,SAAS,GAAGX,aAAa,CAACrB,CAAC,CAAC,CAACgC,SAAS;MAC5C,MAAMwB,UAAU,GAAGjF,KAAK,CAAC8C,aAAa,CAACrB,CAAC,CAAC,CAACiC,SAAS,CAAC;MACpD,MAAMA,SAAS,GAAGZ,aAAa,CAACrB,CAAC,CAAC,CAACiC,SAAS;MAE5C,IAAI5C,KAAK,KAAK8B,OAAO,CAACa,SAAS,CAAC,IAAI,CAAC,IAAIb,OAAO,CAACc,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;MAEnE,MAAMwB,GAAG,GAAG,CAAED,UAAU,CAAChC,CAAC,GAAG+B,UAAU,CAAC/B,CAAC,EAAEgC,UAAU,CAAC9B,CAAC,GAAG6B,UAAU,CAAC7B,CAAC,CAAE;MACxE,IAAIgC,QAAQ,GAAGjD,IAAI,CAACkD,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MACzCC,QAAQ,GAAGA,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAGA,QAAQ;MAChDD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAC1BD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAE1B,IAAI9E,cAAc,IAAI0D,IAAI,GAAGC,SAAS,EAAEmB,QAAQ,GAAGA,QAAQ,GAAG7D,KAAK,CAACmC,SAAS,CAAC,GAAGnC,KAAK,CAACoC,SAAS,CAAC;MACjG,IAAI2B,GAAG,GAAGF,QAAQ,EAAC;MACnB,IAAIG,GAAG,GAAGD,GAAG,EAAC;MACd,IAAIjF,IAAI,KAAK,QAAQ,EAAE;QACrBiF,GAAG,GAAGnD,IAAI,CAACqD,GAAG,CAAC,CAAC,GAAGJ,QAAQ,CAAC;QAC5BG,GAAG,GAAGD,GAAG;;MAEX,IAAI/E,YAAY,EAAE;QAChB+E,GAAG,GAAGF,QAAQ,GAAGvC,OAAO,CAACa,SAAS,CAAC;QACnC6B,GAAG,GAAGH,QAAQ,GAAGvC,OAAO,CAACc,SAAS,CAAC;;MAErC,IAAIrD,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAImB,QAAQ,IAAI,CAAC,EAAE;QACvDE,GAAG,GAAG,CAAC;QACPC,GAAG,GAAG,CAAC;OACR,MAAM,IAAIjF,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAImB,QAAQ,GAAG,CAAC,EAAE;QAC7DE,GAAG,GAAGF,QAAQ;QACdG,GAAG,GAAGH,QAAQ;;MAEhBlB,MAAM,CAAC,CAAC,GAAGpB,KAAK,CAACmC,UAAU,CAAChC,EAAE,CAAC,CAAC,IAAIqC,GAAG,GAAGH,GAAG,CAAC,CAAC,CAAC;MAChDjB,MAAM,CAAC,CAAC,GAAGpB,KAAK,CAACoC,UAAU,CAACjC,EAAE,CAAC,CAAC,IAAIsC,GAAG,GAAGJ,GAAG,CAAC,CAAC,CAAC;MAChDjB,MAAM,CAAC,CAAC,GAAGpB,KAAK,CAACmC,UAAU,CAAChC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAIqC,GAAG,GAAGH,GAAG,CAAC,CAAC,CAAC;MACpDjB,MAAM,CAAC,CAAC,GAAGpB,KAAK,CAACoC,UAAU,CAACjC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAIsC,GAAG,GAAGJ,GAAG,CAAC,CAAC,CAAC;;IAEtD,OAAOjB,MAAM;EACf;EACAW,eAAeA,CAACb,IAAY,EAAEC,SAAiB,EAAEC,MAAgB,EAAEH,OAAe,EAAExC,KAAe,EAAEsB,OAAiB;IACpH,MAAM1B,IAAI,GAAG,IAAI;IACjB,MAAM;MAAElB,KAAK;MAAEK,cAAc;MAAEH,EAAE;MAAEC,EAAE;MAAEN,MAAM;MAAEiB;IAAK,CAAE,GAAGI,IAAI;IAC7D,MAAMK,OAAO,GAAGvB,KAAK,CAACwB,MAAM;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MACnC,KAAK,IAAI+B,CAAC,GAAG/B,CAAC,GAAG,CAAC,EAAE+B,CAAC,GAAGjC,OAAO,EAAEiC,CAAC,IAAI,CAAC,EAAE;QAEvC,IAAI1C,KAAK,KAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAC,IAAImB,OAAO,CAACY,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QAEnD,MAAM0B,GAAG,GAAG,CAAElF,KAAK,CAACwD,CAAC,CAAC,CAACP,CAAC,GAAGjD,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,EAAEjD,KAAK,CAACwD,CAAC,CAAC,CAACL,CAAC,GAAGnD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,CAAE;QAChE,IAAIgC,QAAQ,GAAGjD,IAAI,CAACkD,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;QACzCC,QAAQ,GAAGA,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAGA,QAAQ;QAChDD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;QAC1BD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;QAE1B,IAAI9E,cAAc,IAAI0D,IAAI,GAAGC,SAAS,EAAEmB,QAAQ,GAAGA,QAAQ,GAAG7D,KAAK,CAACG,CAAC,CAAC,GAAGH,KAAK,CAACkC,CAAC,CAAC;QAEjF,IAAIgC,EAAE,GAAGtF,EAAE,IAAI0C,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAImB,OAAO,CAACY,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG2B,QAAQ,EAAC;QAE7D,IAAI9E,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAImB,QAAQ,GAAG,CAAC,EAAE;UACtDK,EAAE,GAAG1B,OAAO,IAAIlB,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAImB,OAAO,CAACY,CAAC,CAAC,GAAG,CAAC,CAAC;SACnD,MAAM,IAAInD,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAImB,QAAQ,KAAK,CAAC,EAAE;UAC/DK,EAAE,GAAG,CAAC;SACP,MAAM,IAAInF,cAAc,IAAI0D,IAAI,GAAGC,SAAS,IAAImB,QAAQ,GAAG,CAAC,EAAE;UAC7DK,EAAE,GAAGtF,EAAE,IAAI0C,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAImB,OAAO,CAACY,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG2B,QAAQ;;QAE1DlB,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,IAAI+D,EAAE,GAAGN,GAAG,CAAC,CAAC,CAAC;QAC5BjB,MAAM,CAAC,CAAC,GAAGT,CAAC,CAAC,IAAIgC,EAAE,GAAGN,GAAG,CAAC,CAAC,CAAC;QAC5BjB,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,IAAI+D,EAAE,GAAGN,GAAG,CAAC,CAAC,CAAC;QAChCjB,MAAM,CAAC,CAAC,GAAGT,CAAC,GAAG,CAAC,CAAC,IAAIgC,EAAE,GAAGN,GAAG,CAAC,CAAC,CAAC;;MAGpC;MACE,MAAMA,GAAG,GAAG,CAAElF,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,GAAGpD,MAAM,CAAC,CAAC,CAAC,EAAEG,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,GAAGtD,MAAM,CAAC,CAAC,CAAC,CAAE;MAC9D,MAAMsF,QAAQ,GAAGjD,IAAI,CAACkD,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3CA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAC1BD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAC1B,MAAMM,EAAE,GAAGtF,EAAE,IAAIyC,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC;MACjCwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,IAAIgE,EAAE,GAAGP,GAAG,CAAC,CAAC,CAAC;MAC5BjB,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,IAAIgE,EAAE,GAAGP,GAAG,CAAC,CAAC,CAAC;;IAElC,OAAOjB,MAAM;EACf;EAEAU,kBAAkBA,CAACV,MAAgB,EAAEE,MAAW,EAAEvB,OAAiB;IACjE,MAAM1B,IAAI,GAAG,IAAI;IACjB,MAAM;MAAElB,KAAK;MAAEG,EAAE;MAAEN,MAAM;MAAEiB;IAAK,CAAE,GAAGI,IAAI;IACzC,MAAMK,OAAO,GAAGvB,KAAK,CAACwB,MAAM;IAC5B,IAAIkE,IAAI,GAAG,IAAI;IACf,IAAIC,IAAI,GAAG,CAAC,IAAI;IAChB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIC,IAAI,GAAG,CAAC,IAAI;IAChB,KAAK,IAAIpE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MACnC,IAAIX,KAAK,IAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAE,EAAE;MAChC0C,MAAM,CAAC1C,CAAC,CAAC,CAACqE,MAAM,CAAC9F,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,EAAEjD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,CAAC;MACxC,IAAInD,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,IAAI0C,IAAI,EAAEA,IAAI,GAAG3F,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC;MACzC,IAAIjD,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,IAAIyC,IAAI,EAAEA,IAAI,GAAG1F,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC;MACzC,IAAIjD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,IAAI0C,IAAI,EAAEA,IAAI,GAAG7F,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC;MACzC,IAAInD,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,IAAIyC,IAAI,EAAEA,IAAI,GAAG5F,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC;;IAG3C,MAAMrD,KAAK,GAAGoC,IAAI,CAACC,GAAG,CAACwD,IAAI,GAAGD,IAAI,EAAEG,IAAI,GAAGD,IAAI,CAAC;IAEhD,MAAMG,UAAU,GAAG;MACjBC,IAAI,EAAE,CAACL,IAAI,GAAGD,IAAI,IAAI,CAAC;MACvBO,IAAI,EAAE,CAACJ,IAAI,GAAGD,IAAI,IAAI,CAAC;MACvBpE,MAAM,EAAE1B,KAAK;MACboG,UAAU,EAAErG,MAAM;MAClB0E,IAAI,EAAEhD;KACP;IACD,MAAM4E,IAAI,GAAG,IAAI3G,IAAI,CAACuG,UAAU,CAAC;IACjC,MAAMK,QAAQ,GAAG,IAAI3G,QAAQ,CAAC0G,IAAI,CAAC;IAErC;IACE,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MAEnC,IAAIX,KAAK,IAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAE,EAAE;MAEhC,IAAI0C,MAAM,CAAC1C,CAAC,CAAC,CAAC4E,EAAE,CAACF,IAAI,CAAC,EAAEC,QAAQ,CAACE,MAAM,CAACnC,MAAM,CAAC1C,CAAC,CAAC,CAAC;;IAEtD;IACE,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MAEnC,IAAIX,KAAK,IAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAE,EAAE;MAEhC0C,MAAM,CAAC1C,CAAC,CAAC,CAAC8E,UAAU,EAAE;MACtBH,QAAQ,CAACI,WAAW,CAACrC,MAAM,CAAC1C,CAAC,CAAC,CAAC;MAC/BwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,IAAI0C,MAAM,CAAC1C,CAAC,CAAC,CAACgF,EAAE;MAC7BxC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,IAAI0C,MAAM,CAAC1C,CAAC,CAAC,CAACiF,EAAE;MAEnC;MACE,MAAMxB,GAAG,GAAG,CAAElF,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,GAAGpD,MAAM,CAAC,CAAC,CAAC,EAAEG,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,GAAGtD,MAAM,CAAC,CAAC,CAAC,CAAE;MAC9D,IAAIsF,QAAQ,GAAGjD,IAAI,CAACkD,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MACzCC,QAAQ,GAAGA,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAGA,QAAQ;MAChDD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAC1BD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGC,QAAQ;MAC1B,MAAMM,EAAE,GAAGtF,EAAE,IAAIyC,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC;MACjCwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,IAAIgE,EAAE,GAAGP,GAAG,CAAC,CAAC,CAAC;MAC5BjB,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,IAAIgE,EAAE,GAAGP,GAAG,CAAC,CAAC,CAAC;;IAElC,OAAOjB,MAAM;EACf;EAEAa,SAASA,CACPb,MAAgB,EAChBC,SAAmB,EACnBL,EAAU,EACVjB,OAAiB;IAEjB,MAAM1B,IAAI,GAAG,IAAI;IACjB,MAAM;MAAElB,KAAK;MAAEU,EAAE;MAAEE,GAAG;MAAEE,KAAK;MAAEH;IAAK,CAAE,GAAGO,IAAI;IAC7C,MAAMK,OAAO,GAAGvB,KAAK,CAACwB,MAAM;IAC5B,MAAMmF,KAAK,GAAG,EAAE;IAChB,MAAMC,KAAK,GAAG,EAAE;IAClB;IACE,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIrF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MAEnC,IAAIX,KAAK,IAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAE,EAAE;MAEhC,MAAMsF,KAAK,GAAG,CAAE9C,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,GAAGyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,CAAC,EAC9CwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,GAAGyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,GAAG,CAAC,CAAC,CACzC;MACD,MAAMuF,SAAS,GAAG9E,IAAI,CAACkD,KAAK,CAAC2B,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;MAChD,MAAME,GAAG,GAAG,CAAEhD,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,GAAGyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,CAAC,EAC5CwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,GAAGyC,SAAS,CAAC,CAAC,GAAGzC,CAAC,GAAG,CAAC,CAAC,CACzC;MACD,MAAMyF,OAAO,GAAGhF,IAAI,CAACkD,KAAK,CAAC6B,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAE1CN,KAAK,CAAClF,CAAC,CAAC,GAAGuF,SAAS;MACpBJ,KAAK,CAACnF,CAAC,CAAC,GAAGyF,OAAO,GAAG,CAAC;MAEtBL,IAAI,IAAI,CAACjE,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,IAAIkF,KAAK,CAAClF,CAAC,CAAC;MACnCqF,IAAI,IAAI,CAAClE,OAAO,CAACnB,CAAC,CAAC,GAAG,CAAC,IAAImF,KAAK,CAACnF,CAAC,CAAC;;IAGrC,MAAM0F,KAAK,GAAGtD,EAAE;IAChBA,EAAE,GAAGjD,GAAG,GAAGkG,IAAI,GAAGD,IAAI,EAAC;IACvB,IAAIM,KAAK,KAAK,CAAC,EAAE;MACftD,EAAE,GAAGA,EAAE,GAAI,GAAG,GAAGsD,KAAM,GAAI,GAAG,GAAGA,KAAK,GAAItD,EAAE,EAAC;;IAE/C;IACA,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,IAAI,CAAC,EAAE;MAEnC,IAAIX,KAAK,IAAK8B,OAAO,CAACnB,CAAC,CAAC,IAAI,CAAE,EAAE;MAEhC,IAAI2F,EAAE,GAAG1G,EAAE,GAAGmD,EAAE,IAAI,CAAC,GAAGA,EAAE,GAAG3B,IAAI,CAACmF,IAAI,CAACV,KAAK,CAAClF,CAAC,CAAC,CAAC,CAAC;MACjD,IAAI6F,QAAQ,GAAGpF,IAAI,CAACkD,KAAK,CAACnB,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC,EAAEwC,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3D6F,QAAQ,GAAGA,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAGA,QAAQ;MAChD,MAAMnF,GAAG,GAAGxB,KAAK,GAAG2G,QAAQ;MAC5BF,EAAE,GAAGA,EAAE,GAAGjF,GAAG,GAAGA,GAAG,GAAGiF,EAAE;MACxB,MAAMG,GAAG,GAAGH,EAAE,GAAGnD,MAAM,CAAC,CAAC,GAAGxC,CAAC,CAAC;MAC9B,MAAM+F,GAAG,GAAGJ,EAAE,GAAGnD,MAAM,CAAC,CAAC,GAAGxC,CAAC,GAAG,CAAC,CAAC;MAClCzB,KAAK,CAACyB,CAAC,CAAC,CAACwB,CAAC,IAAIsE,GAAG;MACjBvH,KAAK,CAACyB,CAAC,CAAC,CAAC0B,CAAC,IAAIqE,GAAG;;IAEnB,OAAO;MAAExH,KAAK;MAAE6D;IAAE,CAAE;EACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}