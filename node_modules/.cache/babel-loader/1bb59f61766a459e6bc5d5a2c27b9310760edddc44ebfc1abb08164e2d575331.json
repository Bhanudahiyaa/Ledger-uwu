{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { wrap } from \"../util/util\";\n\n/*\n * Approximate radius of the earth in meters.\n * Uses the WGS-84 approximation. The radius at the equator is ~6378137 and at the poles is ~6356752. https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84\n * 6371008.8 is one published \"average radius\" see https://en.wikipedia.org/wiki/Earth_radius#Mean_radius, or ftp://athena.fsv.cvut.cz/ZFG/grs80-Moritz.pdf p.4\n */\nexport const earthRadius = 6371008.8;\n\n/**\n * A {@link LngLat} object, an array of two numbers representing longitude and latitude,\n * or an object with `lng` and `lat` or `lon` and `lat` properties.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let v1 = new LngLat(-122.420679, 37.772537);\n * let v2 = [-122.420679, 37.772537];\n * let v3 = {lon: -122.420679, lat: 37.772537};\n * ```\n */\n\n/**\n * A `LngLat` object represents a given longitude and latitude coordinate, measured in degrees.\n * These coordinates are based on the [WGS84 (EPSG:4326) standard](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84).\n *\n * MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the\n * [GeoJSON specification](https://tools.ietf.org/html/rfc7946).\n *\n * Note that any MapLibre GL JS method that accepts a `LngLat` object as an argument or option\n * can also accept an `Array` of two numbers and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatLike}.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let ll = new LngLat(-123.9749, 40.7736);\n * ll.lng; // = -123.9749\n * ```\n * @see [Get coordinates of the mouse pointer](https://maplibre.org/maplibre-gl-js/docs/examples/mouse-position/)\n * @see [Display a popup](https://maplibre.org/maplibre-gl-js/docs/examples/popup/)\n * @see [Create a timeline animation](https://maplibre.org/maplibre-gl-js/docs/examples/timeline-animation/)\n */\nexport class LngLat {\n  /**\n   * @param lng - Longitude, measured in degrees.\n   * @param lat - Latitude, measured in degrees.\n   */\n  constructor(lng, lat) {\n    _defineProperty(this, \"lng\", void 0);\n    _defineProperty(this, \"lat\", void 0);\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(`Invalid LngLat object: (${lng}, ${lat})`);\n    }\n    this.lng = +lng;\n    this.lat = +lat;\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error('Invalid LngLat latitude value: must be between -90 and 90');\n    }\n  }\n\n  /**\n   * Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).\n   *\n   * @returns The wrapped `LngLat` object.\n   * @example\n   * ```ts\n   * let ll = new LngLat(286.0251, 40.7736);\n   * let wrapped = ll.wrap();\n   * wrapped.lng; // = -73.9749\n   * ```\n   */\n  wrap() {\n    return new LngLat(wrap(this.lng, -180, 180), this.lat);\n  }\n\n  /**\n   * Returns the coordinates represented as an array of two numbers.\n   *\n   * @returns The coordinates represented as an array of longitude and latitude.\n   * @example\n   * ```ts\n   * let ll = new LngLat(-73.9749, 40.7736);\n   * ll.toArray(); // = [-73.9749, 40.7736]\n   * ```\n   */\n  toArray() {\n    return [this.lng, this.lat];\n  }\n\n  /**\n   * Returns the coordinates represent as a string.\n   *\n   * @returns The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n   * @example\n   * ```ts\n   * let ll = new LngLat(-73.9749, 40.7736);\n   * ll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n   * ```\n   */\n  toString() {\n    return `LngLat(${this.lng}, ${this.lat})`;\n  }\n\n  /**\n   * Returns the approximate distance between a pair of coordinates in meters\n   * Uses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)\n   *\n   * @param lngLat - coordinates to compute the distance to\n   * @returns Distance in meters between the two coordinates.\n   * @example\n   * ```ts\n   * let new_york = new LngLat(-74.0060, 40.7128);\n   * let los_angeles = new LngLat(-118.2437, 34.0522);\n   * new_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km\n   * ```\n   */\n  distanceTo(lngLat) {\n    const rad = Math.PI / 180;\n    const lat1 = this.lat * rad;\n    const lat2 = lngLat.lat * rad;\n    const a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);\n    const maxMeters = earthRadius * Math.acos(Math.min(a, 1));\n    return maxMeters;\n  }\n\n  /**\n   * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties\n   * to a `LngLat` object.\n   *\n   * If a `LngLat` object is passed in, the function returns it unchanged.\n   *\n   * @param input - An array of two numbers or object to convert, or a `LngLat` object to return.\n   * @returns A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.\n   * @example\n   * ```ts\n   * let arr = [-73.9749, 40.7736];\n   * let ll = LngLat.convert(arr);\n   * ll;   // = LngLat {lng: -73.9749, lat: 40.7736}\n   * ```\n   */\n  static convert(input) {\n    if (input instanceof LngLat) {\n      return input;\n    }\n    if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {\n      return new LngLat(Number(input[0]), Number(input[1]));\n    }\n    if (!Array.isArray(input) && typeof input === 'object' && input !== null) {\n      return new LngLat(\n      // flow can't refine this to have one of lng or lat, so we have to cast to any\n      Number('lng' in input ? input.lng : input.lon), Number(input.lat));\n    }\n    throw new Error('`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]');\n  }\n}","map":{"version":3,"names":["_defineProperty","wrap","earthRadius","LngLat","constructor","lng","lat","isNaN","Error","toArray","toString","distanceTo","lngLat","rad","Math","PI","lat1","lat2","a","sin","cos","maxMeters","acos","min","convert","input","Array","isArray","length","Number","lon"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-map/es/map/geo/lng_lat.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { wrap } from \"../util/util\";\n\n/*\n * Approximate radius of the earth in meters.\n * Uses the WGS-84 approximation. The radius at the equator is ~6378137 and at the poles is ~6356752. https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84\n * 6371008.8 is one published \"average radius\" see https://en.wikipedia.org/wiki/Earth_radius#Mean_radius, or ftp://athena.fsv.cvut.cz/ZFG/grs80-Moritz.pdf p.4\n */\nexport const earthRadius = 6371008.8;\n\n/**\n * A {@link LngLat} object, an array of two numbers representing longitude and latitude,\n * or an object with `lng` and `lat` or `lon` and `lat` properties.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let v1 = new LngLat(-122.420679, 37.772537);\n * let v2 = [-122.420679, 37.772537];\n * let v3 = {lon: -122.420679, lat: 37.772537};\n * ```\n */\n\n/**\n * A `LngLat` object represents a given longitude and latitude coordinate, measured in degrees.\n * These coordinates are based on the [WGS84 (EPSG:4326) standard](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84).\n *\n * MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the\n * [GeoJSON specification](https://tools.ietf.org/html/rfc7946).\n *\n * Note that any MapLibre GL JS method that accepts a `LngLat` object as an argument or option\n * can also accept an `Array` of two numbers and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatLike}.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let ll = new LngLat(-123.9749, 40.7736);\n * ll.lng; // = -123.9749\n * ```\n * @see [Get coordinates of the mouse pointer](https://maplibre.org/maplibre-gl-js/docs/examples/mouse-position/)\n * @see [Display a popup](https://maplibre.org/maplibre-gl-js/docs/examples/popup/)\n * @see [Create a timeline animation](https://maplibre.org/maplibre-gl-js/docs/examples/timeline-animation/)\n */\nexport class LngLat {\n  /**\n   * @param lng - Longitude, measured in degrees.\n   * @param lat - Latitude, measured in degrees.\n   */\n  constructor(lng, lat) {\n    _defineProperty(this, \"lng\", void 0);\n    _defineProperty(this, \"lat\", void 0);\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(`Invalid LngLat object: (${lng}, ${lat})`);\n    }\n    this.lng = +lng;\n    this.lat = +lat;\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error('Invalid LngLat latitude value: must be between -90 and 90');\n    }\n  }\n\n  /**\n   * Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).\n   *\n   * @returns The wrapped `LngLat` object.\n   * @example\n   * ```ts\n   * let ll = new LngLat(286.0251, 40.7736);\n   * let wrapped = ll.wrap();\n   * wrapped.lng; // = -73.9749\n   * ```\n   */\n  wrap() {\n    return new LngLat(wrap(this.lng, -180, 180), this.lat);\n  }\n\n  /**\n   * Returns the coordinates represented as an array of two numbers.\n   *\n   * @returns The coordinates represented as an array of longitude and latitude.\n   * @example\n   * ```ts\n   * let ll = new LngLat(-73.9749, 40.7736);\n   * ll.toArray(); // = [-73.9749, 40.7736]\n   * ```\n   */\n  toArray() {\n    return [this.lng, this.lat];\n  }\n\n  /**\n   * Returns the coordinates represent as a string.\n   *\n   * @returns The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n   * @example\n   * ```ts\n   * let ll = new LngLat(-73.9749, 40.7736);\n   * ll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n   * ```\n   */\n  toString() {\n    return `LngLat(${this.lng}, ${this.lat})`;\n  }\n\n  /**\n   * Returns the approximate distance between a pair of coordinates in meters\n   * Uses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)\n   *\n   * @param lngLat - coordinates to compute the distance to\n   * @returns Distance in meters between the two coordinates.\n   * @example\n   * ```ts\n   * let new_york = new LngLat(-74.0060, 40.7128);\n   * let los_angeles = new LngLat(-118.2437, 34.0522);\n   * new_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km\n   * ```\n   */\n  distanceTo(lngLat) {\n    const rad = Math.PI / 180;\n    const lat1 = this.lat * rad;\n    const lat2 = lngLat.lat * rad;\n    const a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);\n    const maxMeters = earthRadius * Math.acos(Math.min(a, 1));\n    return maxMeters;\n  }\n\n  /**\n   * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties\n   * to a `LngLat` object.\n   *\n   * If a `LngLat` object is passed in, the function returns it unchanged.\n   *\n   * @param input - An array of two numbers or object to convert, or a `LngLat` object to return.\n   * @returns A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.\n   * @example\n   * ```ts\n   * let arr = [-73.9749, 40.7736];\n   * let ll = LngLat.convert(arr);\n   * ll;   // = LngLat {lng: -73.9749, lat: 40.7736}\n   * ```\n   */\n  static convert(input) {\n    if (input instanceof LngLat) {\n      return input;\n    }\n    if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {\n      return new LngLat(Number(input[0]), Number(input[1]));\n    }\n    if (!Array.isArray(input) && typeof input === 'object' && input !== null) {\n      return new LngLat(\n      // flow can't refine this to have one of lng or lat, so we have to cast to any\n      Number('lng' in input ? input.lng : input.lon), Number(input.lat));\n    }\n    throw new Error('`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}