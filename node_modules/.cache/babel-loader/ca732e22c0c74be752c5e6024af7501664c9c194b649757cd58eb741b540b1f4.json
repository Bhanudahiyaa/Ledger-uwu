{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { FunctionExt, ObjectExt } from '../util';\nimport { Model } from '../model/model';\nimport { CellView } from '../view/cell';\nimport { NodeView } from '../view/node';\nimport { EdgeView } from '../view/edge';\nimport { Knob } from '../addon/knob';\nimport { MiniMap } from '../addon/minimap';\nimport { Snapline } from '../addon/snapline';\nimport { Scroller } from '../addon/scroller';\nimport { Selection } from '../addon/selection';\nimport { Clipboard } from '../addon/clipboard';\nimport { Transform } from '../addon/transform';\nimport { HTML } from '../shape/standard/html';\nimport { Edge as StandardEdge } from '../shape/standard/edge';\nimport { Base } from './base';\nimport { Options } from './options';\nimport { Renderer } from './renderer';\nimport { GraphView } from './view';\nimport { DefsManager } from './defs';\nimport { GridManager } from './grid';\nimport { CoordManager } from './coord';\nimport { SnaplineManager } from './snapline';\nimport { ScrollerManager } from './scroller';\nimport { ClipboardManager } from './clipboard';\nimport { HighlightManager } from './highlight';\nimport { TransformManager } from './transform';\nimport { SelectionManager } from './selection';\nimport { BackgroundManager } from './background';\nimport { HistoryManager } from './history';\nimport { MiniMapManager } from './minimap';\nimport { Keyboard } from './keyboard';\nimport { MouseWheel } from './mousewheel';\nimport { PrintManager } from './print';\nimport { FormatManager } from './format';\nimport { KnobManager } from './knob';\nimport { PanningManager } from './panning';\nimport { SizeManager } from './size';\nvar Decorator;\n(function (Decorator) {\n  function hook(nullable, hookName) {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const name = hookName || methodName;\n      descriptor.value = function (...args) {\n        const hook = this.options[name];\n        if (hook != null) {\n          this.getNativeValue = raw.bind(this, ...args);\n          const ret = FunctionExt.call(hook, this.graph, ...args);\n          this.getNativeValue = null;\n          if (ret != null || nullable === true && ret === null) {\n            return ret;\n          }\n        }\n        return raw.call(this, ...args);\n      };\n    };\n  }\n  Decorator.hook = hook;\n  function after(hookName) {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const name = hookName || methodName;\n      descriptor.value = function (...args) {\n        let ret = raw.call(this, ...args);\n        const hook = this.options[name];\n        if (hook != null) {\n          ret = FunctionExt.call(hook, this.graph, ...args) && ret;\n        }\n        return ret;\n      };\n    };\n  }\n  Decorator.after = after;\n})(Decorator || (Decorator = {}));\nexport class Hook extends Base {\n  createModel() {\n    if (this.options.model) {\n      return this.options.model;\n    }\n    const model = new Model();\n    model.graph = this.graph;\n    return model;\n  }\n  createView() {\n    return new GraphView(this.graph);\n  }\n  createRenderer() {\n    return new Renderer(this.graph);\n  }\n  createDefsManager() {\n    return new DefsManager(this.graph);\n  }\n  createGridManager() {\n    return new GridManager(this.graph);\n  }\n  createCoordManager() {\n    return new CoordManager(this.graph);\n  }\n  createKnobManager() {\n    return new KnobManager(this.graph);\n  }\n  createTransform(node, widgetOptions) {\n    const options = this.getTransformOptions(node);\n    if (options.resizable || options.rotatable) {\n      return new Transform(Object.assign(Object.assign({\n        node,\n        graph: this.graph\n      }, options), widgetOptions));\n    }\n    if (options.clearAll) {\n      Transform.removeInstances(this.graph);\n    }\n    return null;\n  }\n  createKnob(node, widgetOptions) {\n    const options = Options.parseOptionGroup(this.graph, node, this.options.knob);\n    const localOptions = Object.assign(Object.assign({}, options), widgetOptions);\n    if (localOptions.clearAll) {\n      Knob.removeInstances(this.graph);\n    }\n    localOptions.clearAll = false;\n    const knob = node.prop('knob');\n    const widgets = [];\n    const meta = Array.isArray(knob) ? knob : [knob];\n    meta.forEach((knob, index) => {\n      if (knob) {\n        if (knob.enabled === false) {\n          return;\n        }\n        if (typeof knob.enabled === 'function' && knob.enabled.call(this.graph, node) === false) {\n          return;\n        }\n      } else {\n        return;\n      }\n      if (options.enabled) {\n        widgets.push(new Knob(Object.assign({\n          node,\n          index,\n          graph: this.graph\n        }, localOptions)));\n      }\n    });\n    return widgets;\n  }\n  getTransformOptions(node) {\n    const resizing = Options.parseOptionGroup(this.graph, node, this.options.resizing);\n    const rotating = Options.parseOptionGroup(this.graph, node, this.options.rotating);\n    const transforming = Options.parseOptionGroup(this.graph, node, this.options.transforming);\n    const options = Object.assign(Object.assign({}, transforming), {\n      resizable: resizing.enabled,\n      minWidth: resizing.minWidth,\n      maxWidth: resizing.maxWidth,\n      minHeight: resizing.minHeight,\n      maxHeight: resizing.maxHeight,\n      orthogonalResizing: resizing.orthogonal,\n      restrictedResizing: resizing.restrict != null ? resizing.restrict : resizing.restricted,\n      autoScrollOnResizing: resizing.autoScroll,\n      preserveAspectRatio: resizing.preserveAspectRatio,\n      allowReverse: resizing.allowReverse,\n      rotatable: rotating.enabled,\n      rotateGrid: rotating.grid\n    });\n    return options;\n  }\n  createTransformManager() {\n    return new TransformManager(this.graph);\n  }\n  createHighlightManager() {\n    return new HighlightManager(this.graph);\n  }\n  createBackgroundManager() {\n    return new BackgroundManager(this.graph);\n  }\n  createClipboard() {\n    return new Clipboard();\n  }\n  createClipboardManager() {\n    return new ClipboardManager(this.graph);\n  }\n  createSnapline() {\n    return new Snapline(Object.assign({\n      graph: this.graph\n    }, this.options.snapline));\n  }\n  createSnaplineManager() {\n    return new SnaplineManager(this.graph);\n  }\n  createSelection() {\n    return new Selection(Object.assign({\n      graph: this.graph\n    }, this.options.selecting));\n  }\n  createSelectionManager() {\n    return new SelectionManager(this.graph);\n  }\n  // eslint-disable-next-line\n  allowRubberband(e) {\n    return true;\n  }\n  createHistoryManager() {\n    return new HistoryManager(Object.assign({\n      graph: this.graph\n    }, this.options.history));\n  }\n  createScroller() {\n    if (this.options.scroller.enabled) {\n      return new Scroller(Object.assign({\n        graph: this.graph\n      }, this.options.scroller));\n    }\n    return null;\n  }\n  createScrollerManager() {\n    return new ScrollerManager(this.graph);\n  }\n  // eslint-disable-next-line\n  allowPanning(e) {\n    return true;\n  }\n  createMiniMap() {\n    const _a = this.options.minimap,\n      {\n        enabled\n      } = _a,\n      options = __rest(_a, [\"enabled\"]);\n    if (enabled) {\n      return new MiniMap(Object.assign({\n        graph: this.graph\n      }, options));\n    }\n    return null;\n  }\n  createMiniMapManager() {\n    return new MiniMapManager(this.graph);\n  }\n  createKeyboard() {\n    return new Keyboard(Object.assign({\n      graph: this.graph\n    }, this.options.keyboard));\n  }\n  createMouseWheel() {\n    return new MouseWheel(Object.assign({\n      graph: this.graph\n    }, this.options.mousewheel));\n  }\n  createPrintManager() {\n    return new PrintManager(this.graph);\n  }\n  createFormatManager() {\n    return new FormatManager(this.graph);\n  }\n  createPanningManager() {\n    return new PanningManager(this.graph);\n  }\n  createSizeManager() {\n    return new SizeManager(this.graph);\n  }\n  allowConnectToBlank(edge) {\n    const options = this.options.connecting;\n    const allowBlank = options.allowBlank != null ? options.allowBlank : options.dangling;\n    if (typeof allowBlank !== 'function') {\n      return !!allowBlank;\n    }\n    const edgeView = this.graph.findViewByCell(edge);\n    const sourceCell = edge.getSourceCell();\n    const targetCell = edge.getTargetCell();\n    const sourceView = this.graph.findViewByCell(sourceCell);\n    const targetView = this.graph.findViewByCell(targetCell);\n    return FunctionExt.call(allowBlank, this.graph, {\n      edge,\n      edgeView,\n      sourceCell,\n      targetCell,\n      sourceView,\n      targetView,\n      sourcePort: edge.getSourcePortId(),\n      targetPort: edge.getTargetPortId(),\n      sourceMagnet: edgeView.sourceMagnet,\n      targetMagnet: edgeView.targetMagnet\n    });\n  }\n  validateEdge(edge, type, initialTerminal) {\n    if (!this.allowConnectToBlank(edge)) {\n      const sourceId = edge.getSourceCellId();\n      const targetId = edge.getTargetCellId();\n      if (!(sourceId && targetId)) {\n        return false;\n      }\n    }\n    const validate = this.options.connecting.validateEdge;\n    if (validate) {\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        type,\n        previous: initialTerminal\n      });\n    }\n    return true;\n  }\n  validateMagnet(cellView, magnet, e) {\n    if (magnet.getAttribute('magnet') !== 'passive') {\n      const validate = this.options.connecting.validateMagnet;\n      if (validate) {\n        return FunctionExt.call(validate, this.graph, {\n          e,\n          magnet,\n          view: cellView,\n          cell: cellView.cell\n        });\n      }\n      return true;\n    }\n    return false;\n  }\n  getDefaultEdge(sourceView, sourceMagnet) {\n    let edge;\n    const create = this.options.connecting.createEdge;\n    if (create) {\n      edge = FunctionExt.call(create, this.graph, {\n        sourceMagnet,\n        sourceView,\n        sourceCell: sourceView.cell\n      });\n    }\n    if (edge == null) {\n      edge = new StandardEdge();\n    }\n    return edge;\n  }\n  validateConnection(sourceView, sourceMagnet, targetView, targetMagnet, terminalType, edgeView, candidateTerminal) {\n    const options = this.options.connecting;\n    const allowLoop = options.allowLoop;\n    const allowNode = options.allowNode;\n    const allowEdge = options.allowEdge;\n    const allowPort = options.allowPort;\n    const allowMulti = options.allowMulti != null ? options.allowMulti : options.multi;\n    const validate = options.validateConnection;\n    const edge = edgeView ? edgeView.cell : null;\n    const terminalView = terminalType === 'target' ? targetView : sourceView;\n    const terminalMagnet = terminalType === 'target' ? targetMagnet : sourceMagnet;\n    let valid = true;\n    const doValidate = validate => {\n      const sourcePort = terminalType === 'source' ? candidateTerminal ? candidateTerminal.port : null : edge ? edge.getSourcePortId() : null;\n      const targetPort = terminalType === 'target' ? candidateTerminal ? candidateTerminal.port : null : edge ? edge.getTargetPortId() : null;\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        edgeView,\n        sourceView,\n        targetView,\n        sourcePort,\n        targetPort,\n        sourceMagnet,\n        targetMagnet,\n        sourceCell: sourceView ? sourceView.cell : null,\n        targetCell: targetView ? targetView.cell : null,\n        type: terminalType\n      });\n    };\n    if (allowLoop != null) {\n      if (typeof allowLoop === 'boolean') {\n        if (!allowLoop && sourceView === targetView) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowLoop);\n      }\n    }\n    if (valid && allowPort != null) {\n      if (typeof allowPort === 'boolean') {\n        if (!allowPort && terminalMagnet) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowPort);\n      }\n    }\n    if (valid && allowEdge != null) {\n      if (typeof allowEdge === 'boolean') {\n        if (!allowEdge && EdgeView.isEdgeView(terminalView)) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowEdge);\n      }\n    }\n    // When judging nodes, the influence of the ports should be excluded,\n    // because the ports and nodes have the same terminalView\n    if (valid && allowNode != null && terminalMagnet == null) {\n      if (typeof allowNode === 'boolean') {\n        if (!allowNode && NodeView.isNodeView(terminalView)) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowNode);\n      }\n    }\n    if (valid && allowMulti != null && edgeView) {\n      const edge = edgeView.cell;\n      const source = terminalType === 'source' ? candidateTerminal : edge.getSource();\n      const target = terminalType === 'target' ? candidateTerminal : edge.getTarget();\n      const terminalCell = candidateTerminal ? this.graph.getCellById(candidateTerminal.cell) : null;\n      if (source && target && source.cell && target.cell && terminalCell) {\n        if (typeof allowMulti === 'function') {\n          valid = doValidate(allowMulti);\n        } else {\n          const connectedEdges = this.model.getConnectedEdges(terminalCell, {\n            outgoing: terminalType === 'source',\n            incoming: terminalType === 'target'\n          });\n          if (connectedEdges.length) {\n            if (allowMulti === 'withPort') {\n              const exist = connectedEdges.some(link => {\n                const s = link.getSource();\n                const t = link.getTarget();\n                return s && t && s.cell === source.cell && t.cell === target.cell && s.port != null && s.port === source.port && t.port != null && t.port === target.port;\n              });\n              if (exist) {\n                valid = false;\n              }\n            } else if (!allowMulti) {\n              const exist = connectedEdges.some(link => {\n                const s = link.getSource();\n                const t = link.getTarget();\n                return s && t && s.cell === source.cell && t.cell === target.cell;\n              });\n              if (exist) {\n                valid = false;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (valid && validate != null) {\n      valid = doValidate(validate);\n    }\n    return valid;\n  }\n  getRestrictArea(view) {\n    const restrict = this.options.translating.restrict;\n    const area = typeof restrict === 'function' ? FunctionExt.call(restrict, this.graph, view) : restrict;\n    if (typeof area === 'number') {\n      return this.graph.transform.getGraphArea().inflate(area);\n    }\n    if (area === true) {\n      return this.graph.transform.getGraphArea();\n    }\n    return area || null;\n  }\n  onViewUpdated(view, flag, options) {\n    if (flag & Renderer.FLAG_INSERT || options.mounting) {\n      return;\n    }\n    this.graph.renderer.requestConnectedEdgesUpdate(view, options);\n  }\n  onViewPostponed(view, flag, options) {\n    return this.graph.renderer.forcePostponedViewUpdate(view, flag);\n  }\n  getCellView(cell) {\n    return null;\n  }\n  createCellView(cell) {\n    const options = {\n      graph: this.graph\n    };\n    const ctor = this.getCellView(cell);\n    if (ctor) {\n      return new ctor(cell, options); // eslint-disable-line new-cap\n    }\n    const view = cell.view;\n    if (view != null && typeof view === 'string') {\n      const def = CellView.registry.get(view);\n      if (def) {\n        return new def(cell, options); // eslint-disable-line new-cap\n      }\n      return CellView.registry.onNotFound(view);\n    }\n    if (cell.isNode()) {\n      return new NodeView(cell, options);\n    }\n    if (cell.isEdge()) {\n      return new EdgeView(cell, options);\n    }\n    return null;\n  }\n  getHTMLComponent(node) {\n    let ret = node.getHTML();\n    if (typeof ret === 'string') {\n      ret = HTML.componentRegistry.get(ret) || ret;\n    }\n    if (ObjectExt.isPlainObject(ret)) {\n      ret = ret.render;\n    }\n    if (typeof ret === 'function') {\n      return FunctionExt.call(ret, this.graph, node);\n    }\n    return ret;\n  }\n  shouldUpdateHTMLComponent(node) {\n    let html = node.getHTML();\n    if (typeof html === 'string') {\n      html = HTML.componentRegistry.get(html) || html;\n    }\n    if (ObjectExt.isPlainObject(html)) {\n      const shouldUpdate = html.shouldComponentUpdate;\n      if (typeof shouldUpdate === 'function') {\n        return FunctionExt.call(shouldUpdate, this.graph, node);\n      }\n      return !!shouldUpdate;\n    }\n    return false;\n  }\n  onEdgeLabelRendered(args) {} // eslint-disable-line\n  onPortRendered(args) {} // eslint-disable-line\n  onToolItemCreated(args) {} // eslint-disable-line\n}\n__decorate([Decorator.hook()], Hook.prototype, \"createModel\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createView\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createRenderer\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createDefsManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createGridManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createCoordManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createKnobManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createTransform\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createKnob\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createTransformManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createHighlightManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createBackgroundManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createClipboard\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createClipboardManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createSnapline\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createSnaplineManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createSelection\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createSelectionManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"allowRubberband\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createHistoryManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createScroller\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createScrollerManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"allowPanning\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createMiniMap\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createMiniMapManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createKeyboard\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createMouseWheel\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createPrintManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createFormatManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createPanningManager\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"createSizeManager\", null);\n__decorate([Decorator.after()], Hook.prototype, \"onViewUpdated\", null);\n__decorate([Decorator.after()], Hook.prototype, \"onViewPostponed\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"getCellView\", null);\n__decorate([Decorator.hook(true)], Hook.prototype, \"createCellView\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"getHTMLComponent\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"shouldUpdateHTMLComponent\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"onEdgeLabelRendered\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"onPortRendered\", null);\n__decorate([Decorator.hook()], Hook.prototype, \"onToolItemCreated\", null);","map":{"version":3,"names":["FunctionExt","ObjectExt","Model","CellView","NodeView","EdgeView","Knob","MiniMap","Snapline","Scroller","Selection","Clipboard","Transform","HTML","Edge","StandardEdge","Base","Options","Renderer","GraphView","DefsManager","GridManager","CoordManager","SnaplineManager","ScrollerManager","ClipboardManager","HighlightManager","TransformManager","SelectionManager","BackgroundManager","HistoryManager","MiniMapManager","Keyboard","MouseWheel","PrintManager","FormatManager","KnobManager","PanningManager","SizeManager","Decorator","hook","nullable","hookName","target","methodName","descriptor","raw","value","name","args","options","getNativeValue","bind","ret","call","graph","after","Hook","createModel","model","createView","createRenderer","createDefsManager","createGridManager","createCoordManager","createKnobManager","createTransform","node","widgetOptions","getTransformOptions","resizable","rotatable","Object","assign","clearAll","removeInstances","createKnob","parseOptionGroup","knob","localOptions","prop","widgets","meta","Array","isArray","forEach","index","enabled","push","resizing","rotating","transforming","minWidth","maxWidth","minHeight","maxHeight","orthogonalResizing","orthogonal","restrictedResizing","restrict","restricted","autoScrollOnResizing","autoScroll","preserveAspectRatio","allowReverse","rotateGrid","grid","createTransformManager","createHighlightManager","createBackgroundManager","createClipboard","createClipboardManager","createSnapline","snapline","createSnaplineManager","createSelection","selecting","createSelectionManager","allowRubberband","e","createHistoryManager","history","createScroller","scroller","createScrollerManager","allowPanning","createMiniMap","_a","minimap","__rest","createMiniMapManager","createKeyboard","keyboard","createMouseWheel","mousewheel","createPrintManager","createFormatManager","createPanningManager","createSizeManager","allowConnectToBlank","edge","connecting","allowBlank","dangling","edgeView","findViewByCell","sourceCell","getSourceCell","targetCell","getTargetCell","sourceView","targetView","sourcePort","getSourcePortId","targetPort","getTargetPortId","sourceMagnet","targetMagnet","validateEdge","type","initialTerminal","sourceId","getSourceCellId","targetId","getTargetCellId","validate","previous","validateMagnet","cellView","magnet","getAttribute","view","cell","getDefaultEdge","create","createEdge","validateConnection","terminalType","candidateTerminal","allowLoop","allowNode","allowEdge","allowPort","allowMulti","multi","terminalView","terminalMagnet","valid","doValidate","port","isEdgeView","isNodeView","source","getSource","getTarget","terminalCell","getCellById","connectedEdges","getConnectedEdges","outgoing","incoming","length","exist","some","link","s","t","getRestrictArea","translating","area","transform","getGraphArea","inflate","onViewUpdated","flag","FLAG_INSERT","mounting","renderer","requestConnectedEdgesUpdate","onViewPostponed","forcePostponedViewUpdate","getCellView","createCellView","ctor","def","registry","get","onNotFound","isNode","isEdge","getHTMLComponent","getHTML","componentRegistry","isPlainObject","render","shouldUpdateHTMLComponent","html","shouldUpdate","shouldComponentUpdate","onEdgeLabelRendered","onPortRendered","onToolItemCreated","__decorate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/graph/hook.ts"],"sourcesContent":["import { FunctionExt, ObjectExt } from '../util'\nimport { Cell } from '../model/cell'\nimport { Node } from '../model/node'\nimport { Edge } from '../model/edge'\nimport { Model } from '../model/model'\nimport { View } from '../view/view'\nimport { Markup } from '../view/markup'\nimport { CellView } from '../view/cell'\nimport { NodeView } from '../view/node'\nimport { EdgeView } from '../view/edge'\nimport { Widget } from '../addon/common'\nimport { Knob } from '../addon/knob'\nimport { MiniMap } from '../addon/minimap'\nimport { Snapline } from '../addon/snapline'\nimport { Scroller } from '../addon/scroller'\nimport { Selection } from '../addon/selection'\nimport { Clipboard } from '../addon/clipboard'\nimport { Transform } from '../addon/transform'\nimport { HTML } from '../shape/standard/html'\nimport { Edge as StandardEdge } from '../shape/standard/edge'\nimport { Base } from './base'\nimport { Graph } from './graph'\nimport { Options } from './options'\nimport { Renderer } from './renderer'\nimport { GraphView } from './view'\nimport { DefsManager } from './defs'\nimport { GridManager } from './grid'\nimport { CoordManager } from './coord'\nimport { SnaplineManager } from './snapline'\nimport { ScrollerManager } from './scroller'\nimport { ClipboardManager } from './clipboard'\nimport { HighlightManager } from './highlight'\nimport { TransformManager } from './transform'\nimport { SelectionManager } from './selection'\nimport { BackgroundManager } from './background'\nimport { HistoryManager } from './history'\nimport { MiniMapManager } from './minimap'\nimport { Keyboard } from './keyboard'\nimport { MouseWheel } from './mousewheel'\nimport { PrintManager } from './print'\nimport { FormatManager } from './format'\nimport { PortManager } from '../model/port'\nimport { Rectangle } from '../geometry'\nimport { KnobManager } from './knob'\nimport { PanningManager } from './panning'\nimport { SizeManager } from './size'\n\nnamespace Decorator {\n  export function hook(nullable?: boolean, hookName?: string | null) {\n    return (\n      target: Hook,\n      methodName: string,\n      descriptor: PropertyDescriptor,\n    ) => {\n      const raw = descriptor.value\n      const name = hookName || methodName\n\n      descriptor.value = function (this: Hook, ...args: any[]) {\n        const hook = (this.options as any)[name]\n        if (hook != null) {\n          this.getNativeValue = raw.bind(this, ...args)\n          const ret = FunctionExt.call(hook, this.graph, ...args)\n          this.getNativeValue = null\n          if (ret != null || (nullable === true && ret === null)) {\n            return ret\n          }\n        }\n\n        return raw.call(this, ...args)\n      }\n    }\n  }\n\n  export function after(hookName?: string | null) {\n    return (\n      target: Hook,\n      methodName: string,\n      descriptor: PropertyDescriptor,\n    ) => {\n      const raw = descriptor.value\n      const name = hookName || methodName\n\n      descriptor.value = function (this: Hook, ...args: any[]) {\n        let ret = raw.call(this, ...args)\n        const hook = (this.options as any)[name]\n        if (hook != null) {\n          ret = FunctionExt.call(hook, this.graph, ...args) && ret\n        }\n        return ret\n      }\n    }\n  }\n}\n\nexport class Hook extends Base implements Hook.IHook {\n  /**\n   * Get the native value of hooked method.\n   */\n  public getNativeValue: (<T>() => T | null) | null\n\n  @Decorator.hook()\n  createModel() {\n    if (this.options.model) {\n      return this.options.model\n    }\n    const model = new Model()\n    model.graph = this.graph\n    return model\n  }\n\n  @Decorator.hook()\n  createView() {\n    return new GraphView(this.graph)\n  }\n\n  @Decorator.hook()\n  createRenderer() {\n    return new Renderer(this.graph)\n  }\n\n  @Decorator.hook()\n  createDefsManager() {\n    return new DefsManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createGridManager() {\n    return new GridManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createCoordManager() {\n    return new CoordManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createKnobManager() {\n    return new KnobManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createTransform(node: Node, widgetOptions?: Widget.Options) {\n    const options = this.getTransformOptions(node)\n    if (options.resizable || options.rotatable) {\n      return new Transform({\n        node,\n        graph: this.graph,\n        ...options,\n        ...widgetOptions,\n      })\n    }\n    if (options.clearAll) {\n      Transform.removeInstances(this.graph)\n    }\n\n    return null\n  }\n\n  @Decorator.hook()\n  createKnob(node: Node, widgetOptions?: Widget.Options) {\n    const options = Options.parseOptionGroup<Options.KnobRaw>(\n      this.graph,\n      node,\n      this.options.knob,\n    )\n\n    const localOptions = {\n      ...options,\n      ...widgetOptions,\n    }\n\n    if (localOptions.clearAll) {\n      Knob.removeInstances(this.graph)\n    }\n\n    localOptions.clearAll = false\n\n    const knob = node.prop('knob') as Knob.Metadata | Knob.Metadata[]\n    const widgets: Knob[] = []\n    const meta = Array.isArray(knob) ? knob : [knob]\n\n    meta.forEach((knob, index) => {\n      if (knob) {\n        if (knob.enabled === false) {\n          return\n        }\n\n        if (\n          typeof knob.enabled === 'function' &&\n          knob.enabled.call(this.graph, node) === false\n        ) {\n          return\n        }\n      } else {\n        return\n      }\n\n      if (options.enabled) {\n        widgets.push(\n          new Knob({\n            node,\n            index,\n            graph: this.graph,\n            ...localOptions,\n          }),\n        )\n      }\n    })\n\n    return widgets\n  }\n\n  protected getTransformOptions(node: Node) {\n    const resizing = Options.parseOptionGroup<Options.ResizingRaw>(\n      this.graph,\n      node,\n      this.options.resizing,\n    )\n\n    const rotating = Options.parseOptionGroup<Options.RotatingRaw>(\n      this.graph,\n      node,\n      this.options.rotating,\n    )\n\n    const transforming = Options.parseOptionGroup<Options.TransformingRaw>(\n      this.graph,\n      node,\n      this.options.transforming,\n    )\n\n    const options: Transform.Options = {\n      ...transforming,\n\n      resizable: resizing.enabled,\n      minWidth: resizing.minWidth,\n      maxWidth: resizing.maxWidth,\n      minHeight: resizing.minHeight,\n      maxHeight: resizing.maxHeight,\n      orthogonalResizing: resizing.orthogonal,\n      restrictedResizing:\n        resizing.restrict != null ? resizing.restrict : resizing.restricted,\n      autoScrollOnResizing: resizing.autoScroll,\n      preserveAspectRatio: resizing.preserveAspectRatio,\n      allowReverse: resizing.allowReverse,\n\n      rotatable: rotating.enabled,\n      rotateGrid: rotating.grid,\n    }\n\n    return options\n  }\n\n  @Decorator.hook()\n  createTransformManager() {\n    return new TransformManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createHighlightManager() {\n    return new HighlightManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createBackgroundManager() {\n    return new BackgroundManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createClipboard() {\n    return new Clipboard()\n  }\n\n  @Decorator.hook()\n  createClipboardManager() {\n    return new ClipboardManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createSnapline() {\n    return new Snapline({ graph: this.graph, ...this.options.snapline })\n  }\n\n  @Decorator.hook()\n  createSnaplineManager() {\n    return new SnaplineManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createSelection() {\n    return new Selection({ graph: this.graph, ...this.options.selecting })\n  }\n\n  @Decorator.hook()\n  createSelectionManager() {\n    return new SelectionManager(this.graph)\n  }\n\n  @Decorator.hook()\n  // eslint-disable-next-line\n  allowRubberband(e: JQuery.MouseDownEvent) {\n    return true\n  }\n\n  @Decorator.hook()\n  createHistoryManager() {\n    return new HistoryManager({ graph: this.graph, ...this.options.history })\n  }\n\n  @Decorator.hook()\n  createScroller() {\n    if (this.options.scroller.enabled) {\n      return new Scroller({ graph: this.graph, ...this.options.scroller })\n    }\n    return null\n  }\n\n  @Decorator.hook()\n  createScrollerManager() {\n    return new ScrollerManager(this.graph)\n  }\n\n  @Decorator.hook()\n  // eslint-disable-next-line\n  allowPanning(e: JQuery.MouseDownEvent) {\n    return true\n  }\n\n  @Decorator.hook()\n  createMiniMap() {\n    const { enabled, ...options } = this.options.minimap\n    if (enabled) {\n      return new MiniMap({\n        graph: this.graph,\n        ...options,\n      })\n    }\n    return null\n  }\n\n  @Decorator.hook()\n  createMiniMapManager() {\n    return new MiniMapManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createKeyboard() {\n    return new Keyboard({ graph: this.graph, ...this.options.keyboard })\n  }\n\n  @Decorator.hook()\n  createMouseWheel() {\n    return new MouseWheel({ graph: this.graph, ...this.options.mousewheel })\n  }\n\n  @Decorator.hook()\n  createPrintManager() {\n    return new PrintManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createFormatManager() {\n    return new FormatManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createPanningManager() {\n    return new PanningManager(this.graph)\n  }\n\n  @Decorator.hook()\n  createSizeManager() {\n    return new SizeManager(this.graph)\n  }\n\n  protected allowConnectToBlank(edge: Edge) {\n    const options = this.options.connecting\n    const allowBlank =\n      options.allowBlank != null ? options.allowBlank : options.dangling\n\n    if (typeof allowBlank !== 'function') {\n      return !!allowBlank\n    }\n\n    const edgeView = this.graph.findViewByCell(edge) as EdgeView\n    const sourceCell = edge.getSourceCell()\n    const targetCell = edge.getTargetCell()\n    const sourceView = this.graph.findViewByCell(sourceCell)\n    const targetView = this.graph.findViewByCell(targetCell)\n    return FunctionExt.call(allowBlank, this.graph, {\n      edge,\n      edgeView,\n      sourceCell,\n      targetCell,\n      sourceView,\n      targetView,\n      sourcePort: edge.getSourcePortId(),\n      targetPort: edge.getTargetPortId(),\n      sourceMagnet: edgeView.sourceMagnet,\n      targetMagnet: edgeView.targetMagnet,\n    })\n  }\n\n  validateEdge(\n    edge: Edge,\n    type: Edge.TerminalType,\n    initialTerminal: Edge.TerminalData,\n  ) {\n    if (!this.allowConnectToBlank(edge)) {\n      const sourceId = edge.getSourceCellId()\n      const targetId = edge.getTargetCellId()\n      if (!(sourceId && targetId)) {\n        return false\n      }\n    }\n\n    const validate = this.options.connecting.validateEdge\n    if (validate) {\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        type,\n        previous: initialTerminal,\n      })\n    }\n\n    return true\n  }\n\n  validateMagnet(\n    cellView: CellView,\n    magnet: Element,\n    e: JQuery.MouseDownEvent | JQuery.MouseEnterEvent,\n  ) {\n    if (magnet.getAttribute('magnet') !== 'passive') {\n      const validate = this.options.connecting.validateMagnet\n      if (validate) {\n        return FunctionExt.call(validate, this.graph, {\n          e,\n          magnet,\n          view: cellView,\n          cell: cellView.cell,\n        })\n      }\n      return true\n    }\n    return false\n  }\n\n  getDefaultEdge(sourceView: CellView, sourceMagnet: Element) {\n    let edge: Edge | undefined | null | void\n\n    const create = this.options.connecting.createEdge\n    if (create) {\n      edge = FunctionExt.call(create, this.graph, {\n        sourceMagnet,\n        sourceView,\n        sourceCell: sourceView.cell,\n      })\n    }\n\n    if (edge == null) {\n      edge = new StandardEdge()\n    }\n\n    return edge as Edge\n  }\n\n  validateConnection(\n    sourceView: CellView | null | undefined,\n    sourceMagnet: Element | null | undefined,\n    targetView: CellView | null | undefined,\n    targetMagnet: Element | null | undefined,\n    terminalType: Edge.TerminalType,\n    edgeView?: EdgeView | null | undefined,\n    candidateTerminal?: Edge.TerminalCellData | null | undefined,\n  ) {\n    const options = this.options.connecting\n    const allowLoop = options.allowLoop\n    const allowNode = options.allowNode\n    const allowEdge = options.allowEdge\n    const allowPort = options.allowPort\n    const allowMulti =\n      options.allowMulti != null ? options.allowMulti : options.multi\n    const validate = options.validateConnection\n\n    const edge = edgeView ? edgeView.cell : null\n    const terminalView = terminalType === 'target' ? targetView : sourceView\n    const terminalMagnet =\n      terminalType === 'target' ? targetMagnet : sourceMagnet\n\n    let valid = true\n    const doValidate = (\n      validate: (this: Graph, args: Options.ValidateConnectionArgs) => boolean,\n    ) => {\n      const sourcePort =\n        terminalType === 'source'\n          ? candidateTerminal\n            ? candidateTerminal.port\n            : null\n          : edge\n          ? edge.getSourcePortId()\n          : null\n      const targetPort =\n        terminalType === 'target'\n          ? candidateTerminal\n            ? candidateTerminal.port\n            : null\n          : edge\n          ? edge.getTargetPortId()\n          : null\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        edgeView,\n        sourceView,\n        targetView,\n        sourcePort,\n        targetPort,\n        sourceMagnet,\n        targetMagnet,\n        sourceCell: sourceView ? sourceView.cell : null,\n        targetCell: targetView ? targetView.cell : null,\n        type: terminalType,\n      })\n    }\n\n    if (allowLoop != null) {\n      if (typeof allowLoop === 'boolean') {\n        if (!allowLoop && sourceView === targetView) {\n          valid = false\n        }\n      } else {\n        valid = doValidate(allowLoop)\n      }\n    }\n\n    if (valid && allowPort != null) {\n      if (typeof allowPort === 'boolean') {\n        if (!allowPort && terminalMagnet) {\n          valid = false\n        }\n      } else {\n        valid = doValidate(allowPort)\n      }\n    }\n\n    if (valid && allowEdge != null) {\n      if (typeof allowEdge === 'boolean') {\n        if (!allowEdge && EdgeView.isEdgeView(terminalView)) {\n          valid = false\n        }\n      } else {\n        valid = doValidate(allowEdge)\n      }\n    }\n\n    // When judging nodes, the influence of the ports should be excluded,\n    // because the ports and nodes have the same terminalView\n    if (valid && allowNode != null && terminalMagnet == null) {\n      if (typeof allowNode === 'boolean') {\n        if (!allowNode && NodeView.isNodeView(terminalView)) {\n          valid = false\n        }\n      } else {\n        valid = doValidate(allowNode)\n      }\n    }\n\n    if (valid && allowMulti != null && edgeView) {\n      const edge = edgeView.cell\n      const source =\n        terminalType === 'source'\n          ? candidateTerminal\n          : (edge.getSource() as Edge.TerminalCellData)\n      const target =\n        terminalType === 'target'\n          ? candidateTerminal\n          : (edge.getTarget() as Edge.TerminalCellData)\n      const terminalCell = candidateTerminal\n        ? this.graph.getCellById(candidateTerminal.cell)\n        : null\n\n      if (source && target && source.cell && target.cell && terminalCell) {\n        if (typeof allowMulti === 'function') {\n          valid = doValidate(allowMulti)\n        } else {\n          const connectedEdges = this.model.getConnectedEdges(terminalCell, {\n            outgoing: terminalType === 'source',\n            incoming: terminalType === 'target',\n          })\n          if (connectedEdges.length) {\n            if (allowMulti === 'withPort') {\n              const exist = connectedEdges.some((link) => {\n                const s = link.getSource() as Edge.TerminalCellData\n                const t = link.getTarget() as Edge.TerminalCellData\n                return (\n                  s &&\n                  t &&\n                  s.cell === source.cell &&\n                  t.cell === target.cell &&\n                  s.port != null &&\n                  s.port === source.port &&\n                  t.port != null &&\n                  t.port === target.port\n                )\n              })\n              if (exist) {\n                valid = false\n              }\n            } else if (!allowMulti) {\n              const exist = connectedEdges.some((link) => {\n                const s = link.getSource() as Edge.TerminalCellData\n                const t = link.getTarget() as Edge.TerminalCellData\n                return (\n                  s && t && s.cell === source.cell && t.cell === target.cell\n                )\n              })\n              if (exist) {\n                valid = false\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (valid && validate != null) {\n      valid = doValidate(validate)\n    }\n\n    return valid\n  }\n\n  getRestrictArea(view?: NodeView): Rectangle.RectangleLike | null {\n    const restrict = this.options.translating.restrict\n    const area =\n      typeof restrict === 'function'\n        ? FunctionExt.call(restrict, this.graph, view!)\n        : restrict\n\n    if (typeof area === 'number') {\n      return this.graph.transform.getGraphArea().inflate(area)\n    }\n\n    if (area === true) {\n      return this.graph.transform.getGraphArea()\n    }\n\n    return area || null\n  }\n\n  @Decorator.after()\n  onViewUpdated(\n    view: CellView,\n    flag: number,\n    options: Renderer.RequestViewUpdateOptions,\n  ) {\n    if (flag & Renderer.FLAG_INSERT || options.mounting) {\n      return\n    }\n    this.graph.renderer.requestConnectedEdgesUpdate(view, options)\n  }\n\n  @Decorator.after()\n  onViewPostponed(\n    view: CellView,\n    flag: number,\n    options: Renderer.UpdateViewOptions, // eslint-disable-line\n  ) {\n    return this.graph.renderer.forcePostponedViewUpdate(view, flag)\n  }\n\n  @Decorator.hook()\n  getCellView(\n    cell: Cell, // eslint-disable-line\n  ): null | undefined | typeof CellView | (new (...args: any[]) => CellView) {\n    return null\n  }\n\n  @Decorator.hook(true)\n  createCellView(cell: Cell) {\n    const options = { graph: this.graph }\n\n    const ctor = this.getCellView(cell)\n    if (ctor) {\n      return new ctor(cell, options) // eslint-disable-line new-cap\n    }\n\n    const view = cell.view\n    if (view != null && typeof view === 'string') {\n      const def = CellView.registry.get(view)\n      if (def) {\n        return new def(cell, options) // eslint-disable-line new-cap\n      }\n\n      return CellView.registry.onNotFound(view)\n    }\n\n    if (cell.isNode()) {\n      return new NodeView(cell, options)\n    }\n\n    if (cell.isEdge()) {\n      return new EdgeView(cell, options)\n    }\n\n    return null\n  }\n\n  @Decorator.hook()\n  getHTMLComponent(node: HTML): HTMLElement | string | null | undefined {\n    let ret = node.getHTML()\n\n    if (typeof ret === 'string') {\n      ret = HTML.componentRegistry.get(ret) || ret\n    }\n\n    if (ObjectExt.isPlainObject(ret)) {\n      ret = (ret as HTML.UpdatableComponent).render\n    }\n\n    if (typeof ret === 'function') {\n      return FunctionExt.call(ret, this.graph, node)\n    }\n\n    return ret as HTML.Elem\n  }\n\n  @Decorator.hook()\n  shouldUpdateHTMLComponent(node: HTML): boolean {\n    let html = node.getHTML()\n\n    if (typeof html === 'string') {\n      html = HTML.componentRegistry.get(html) || html\n    }\n\n    if (ObjectExt.isPlainObject(html)) {\n      const shouldUpdate = (html as HTML.UpdatableComponent)\n        .shouldComponentUpdate\n\n      if (typeof shouldUpdate === 'function') {\n        return FunctionExt.call(shouldUpdate, this.graph, node)\n      }\n\n      return !!shouldUpdate\n    }\n\n    return false\n  }\n\n  @Decorator.hook()\n  onEdgeLabelRendered(args: Hook.OnEdgeLabelRenderedArgs) {} // eslint-disable-line\n\n  @Decorator.hook()\n  onPortRendered(args: Hook.OnPortRenderedArgs) {} // eslint-disable-line\n\n  @Decorator.hook()\n  onToolItemCreated(args: Hook.OnToolItemCreatedArgs) {} // eslint-disable-line\n}\n\nexport namespace Hook {\n  type CreateManager<T> = (this: Graph) => T\n  type CreateManagerWidthNode<T> = (this: Graph, node: Node) => T\n  type CreateManagerWidthOptions<T, Options> = (\n    this: Graph,\n    options: Options,\n  ) => T\n\n  export interface OnEdgeLabelRenderedArgs {\n    edge: Edge\n    label: Edge.Label\n    container: Element\n    selectors: Markup.Selectors\n  }\n\n  export interface OnPortRenderedArgs {\n    node: Node\n    port: PortManager.Port\n    container: Element\n    selectors?: Markup.Selectors\n    labelContainer: Element\n    labelSelectors?: Markup.Selectors\n    contentContainer: Element\n    contentSelectors?: Markup.Selectors\n  }\n\n  export interface OnToolItemCreatedArgs {\n    name: string\n    cell: Cell\n    view: CellView\n    tool: View\n  }\n\n  export interface IHook {\n    createView: CreateManager<GraphView>\n    createModel: CreateManager<Model>\n    createRenderer: CreateManager<Renderer>\n    createDefsManager: CreateManager<DefsManager>\n    createGridManager: CreateManager<GridManager>\n    createCoordManager: CreateManager<CoordManager>\n    createHighlightManager: CreateManager<HighlightManager>\n    createBackgroundManager: CreateManager<BackgroundManager>\n    createSizeManager: CreateManager<SizeManager>\n\n    createTransform: CreateManagerWidthNode<Transform | null>\n    createTransformManager: CreateManager<TransformManager>\n\n    createClipboard: CreateManager<Clipboard>\n    createClipboardManager: CreateManager<ClipboardManager>\n\n    createSnapline: CreateManager<Snapline>\n    createSnaplineManager: CreateManager<SnaplineManager>\n\n    createSelection: CreateManager<Selection>\n    createSelectionManager: CreateManager<SelectionManager>\n    allowRubberband: (e: JQuery.MouseDownEvent) => boolean\n\n    createHistoryManager: CreateManagerWidthOptions<\n      HistoryManager,\n      HistoryManager.Options\n    >\n\n    createScroller: CreateManager<Scroller | null>\n    createScrollerManager: CreateManager<ScrollerManager>\n    allowPanning: (e: JQuery.MouseDownEvent) => boolean\n\n    createMiniMap: CreateManager<MiniMap | null>\n    createMiniMapManager: CreateManager<MiniMapManager>\n\n    createKeyboard: CreateManager<Keyboard>\n    createMouseWheel: CreateManager<MouseWheel>\n    createPrintManager: CreateManager<PrintManager>\n    createFormatManager: CreateManager<FormatManager>\n    createPanningManager: CreateManager<PanningManager>\n\n    createCellView(this: Graph, cell: Cell): CellView | null | undefined\n\n    getCellView(\n      this: Graph,\n      cell: Cell,\n    ): null | undefined | typeof CellView | (new (...args: any[]) => CellView)\n\n    getHTMLComponent(\n      this: Graph,\n      node: HTML,\n    ): HTMLElement | string | null | undefined\n\n    shouldUpdateHTMLComponent(this: Graph, node: HTML): boolean\n\n    onViewUpdated: (\n      this: Graph,\n      view: CellView,\n      flag: number,\n      options: Renderer.RequestViewUpdateOptions,\n    ) => void\n\n    onViewPostponed: (\n      this: Graph,\n      view: CellView,\n      flag: number,\n      options: Renderer.UpdateViewOptions,\n    ) => boolean\n\n    onEdgeLabelRendered(this: Graph, args: OnEdgeLabelRenderedArgs): void\n\n    onPortRendered(this: Graph, args: OnPortRenderedArgs): void\n\n    onToolItemCreated(this: Graph, args: OnToolItemCreatedArgs): void\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}