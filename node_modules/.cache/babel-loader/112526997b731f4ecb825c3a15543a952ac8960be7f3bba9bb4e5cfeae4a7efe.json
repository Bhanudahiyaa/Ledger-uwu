{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMultiPassRenderer } from \"../utils/multiPassRender\";\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\nexport default class MultiPassRendererPlugin {\n  constructor() {\n    _defineProperty(this, \"enabled\", void 0);\n  }\n  apply(layer, {\n    rendererService,\n    postProcessingPassFactory,\n    normalPassFactory\n  }) {\n    layer.hooks.init.tapPromise('MultiPassRendererPlugin', () => {\n      const {\n        enableMultiPassRenderer,\n        passes = []\n      } = layer.getLayerConfig();\n\n      // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n      this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n      // 根据 LayerConfig passes 配置项初始化\n      if (this.enabled) {\n        layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n        layer.multiPassRenderer.setRenderFlag(true);\n      }\n    });\n    layer.hooks.beforeRender.tap('MultiPassRendererPlugin', () => {\n      if (this.enabled) {\n        // 渲染前根据 viewport 调整 FBO size\n        const {\n          width,\n          height\n        } = rendererService.getViewportSize();\n        layer.multiPassRenderer.resize(width, height);\n      }\n    });\n  }\n}","map":{"version":3,"names":["_defineProperty","createMultiPassRenderer","MultiPassRendererPlugin","constructor","apply","layer","rendererService","postProcessingPassFactory","normalPassFactory","hooks","init","tapPromise","enableMultiPassRenderer","passes","getLayerConfig","enabled","multiPassRenderer","setRenderFlag","beforeRender","tap","width","height","getViewportSize","resize"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/plugins/MultiPassRendererPlugin.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMultiPassRenderer } from \"../utils/multiPassRender\";\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\nexport default class MultiPassRendererPlugin {\n  constructor() {\n    _defineProperty(this, \"enabled\", void 0);\n  }\n  apply(layer, {\n    rendererService,\n    postProcessingPassFactory,\n    normalPassFactory\n  }) {\n    layer.hooks.init.tapPromise('MultiPassRendererPlugin', () => {\n      const {\n        enableMultiPassRenderer,\n        passes = []\n      } = layer.getLayerConfig();\n\n      // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n      this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n      // 根据 LayerConfig passes 配置项初始化\n      if (this.enabled) {\n        layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n        layer.multiPassRenderer.setRenderFlag(true);\n      }\n    });\n    layer.hooks.beforeRender.tap('MultiPassRendererPlugin', () => {\n      if (this.enabled) {\n        // 渲染前根据 viewport 调整 FBO size\n        const {\n          width,\n          height\n        } = rendererService.getViewportSize();\n        layer.multiPassRenderer.resize(width, height);\n      }\n    });\n  }\n}"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,SAASC,uBAAuB,QAAQ,0BAA0B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,uBAAuB,CAAC;EAC3CC,WAAWA,CAAA,EAAG;IACZH,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EAC1C;EACAI,KAAKA,CAACC,KAAK,EAAE;IACXC,eAAe;IACfC,yBAAyB;IACzBC;EACF,CAAC,EAAE;IACDH,KAAK,CAACI,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,yBAAyB,EAAE,MAAM;MAC3D,MAAM;QACJC,uBAAuB;QACvBC,MAAM,GAAG;MACX,CAAC,GAAGR,KAAK,CAACS,cAAc,CAAC,CAAC;;MAE1B;MACA,IAAI,CAACC,OAAO,GAAG,CAAC,CAACH,uBAAuB,IAAIP,KAAK,CAACS,cAAc,CAAC,CAAC,CAACF,uBAAuB,KAAK,KAAK;;MAEpG;MACA,IAAI,IAAI,CAACG,OAAO,EAAE;QAChBV,KAAK,CAACW,iBAAiB,GAAGf,uBAAuB,CAACI,KAAK,EAAEQ,MAAM,EAAEN,yBAAyB,EAAEC,iBAAiB,CAAC;QAC9GH,KAAK,CAACW,iBAAiB,CAACC,aAAa,CAAC,IAAI,CAAC;MAC7C;IACF,CAAC,CAAC;IACFZ,KAAK,CAACI,KAAK,CAACS,YAAY,CAACC,GAAG,CAAC,yBAAyB,EAAE,MAAM;MAC5D,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChB;QACA,MAAM;UACJK,KAAK;UACLC;QACF,CAAC,GAAGf,eAAe,CAACgB,eAAe,CAAC,CAAC;QACrCjB,KAAK,CAACW,iBAAiB,CAACO,MAAM,CAACH,KAAK,EAAEC,MAAM,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}