{"ast":null,"code":"import { Util } from '../../global/util';\nimport { Point } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nexport class Vertices extends ToolsView.ToolItem {\n  constructor() {\n    super(...arguments);\n    this.handles = [];\n  }\n  get vertices() {\n    return this.cellView.cell.getVertices();\n  }\n  onRender() {\n    this.addClass(this.prefixClassName('edge-tool-vertices'));\n    if (this.options.addable) {\n      this.updatePath();\n    }\n    this.resetHandles();\n    this.renderHandles();\n    return this;\n  }\n  update() {\n    const vertices = this.vertices;\n    if (vertices.length === this.handles.length) {\n      this.updateHandles();\n    } else {\n      this.resetHandles();\n      this.renderHandles();\n    }\n    if (this.options.addable) {\n      this.updatePath();\n    }\n    return this;\n  }\n  resetHandles() {\n    const handles = this.handles;\n    this.handles = [];\n    if (handles) {\n      handles.forEach(handle => {\n        this.stopHandleListening(handle);\n        handle.remove();\n      });\n    }\n  }\n  renderHandles() {\n    const vertices = this.vertices;\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i];\n      const createHandle = this.options.createHandle;\n      const processHandle = this.options.processHandle;\n      const handle = createHandle({\n        index: i,\n        graph: this.graph,\n        guard: evt => this.guard(evt),\n        attrs: this.options.attrs || {}\n      });\n      if (processHandle) {\n        processHandle(handle);\n      }\n      this.graph.hook.onToolItemCreated({\n        name: 'vertices',\n        cell: this.cell,\n        view: this.cellView,\n        tool: handle\n      });\n      handle.updatePosition(vertex.x, vertex.y);\n      this.stamp(handle.container);\n      this.container.appendChild(handle.container);\n      this.handles.push(handle);\n      this.startHandleListening(handle);\n    }\n  }\n  updateHandles() {\n    const vertices = this.vertices;\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i];\n      const handle = this.handles[i];\n      if (handle) {\n        handle.updatePosition(vertex.x, vertex.y);\n      }\n    }\n  }\n  updatePath() {\n    const connection = this.childNodes.connection;\n    if (connection) {\n      connection.setAttribute('d', this.cellView.getConnectionPathData());\n    }\n  }\n  startHandleListening(handle) {\n    const edgeView = this.cellView;\n    if (edgeView.can('vertexMovable')) {\n      handle.on('change', this.onHandleChange, this);\n      handle.on('changing', this.onHandleChanging, this);\n      handle.on('changed', this.onHandleChanged, this);\n    }\n    if (edgeView.can('vertexDeletable')) {\n      handle.on('remove', this.onHandleRemove, this);\n    }\n  }\n  stopHandleListening(handle) {\n    const edgeView = this.cellView;\n    if (edgeView.can('vertexMovable')) {\n      handle.off('change', this.onHandleChange, this);\n      handle.off('changing', this.onHandleChanging, this);\n      handle.off('changed', this.onHandleChanged, this);\n    }\n    if (edgeView.can('vertexDeletable')) {\n      handle.off('remove', this.onHandleRemove, this);\n    }\n  }\n  getNeighborPoints(index) {\n    const edgeView = this.cellView;\n    const vertices = this.vertices;\n    const prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor;\n    const next = index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor;\n    return {\n      prev: Point.create(prev),\n      next: Point.create(next)\n    };\n  }\n  getMouseEventArgs(evt) {\n    const e = this.normalizeEvent(evt);\n    const {\n      x,\n      y\n    } = this.graph.snapToGrid(e.clientX, e.clientY);\n    return {\n      e,\n      x,\n      y\n    };\n  }\n  onHandleChange({\n    e\n  }) {\n    this.focus();\n    const edgeView = this.cellView;\n    edgeView.cell.startBatch('move-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n    if (!this.options.stopPropagation) {\n      const {\n        e: evt,\n        x,\n        y\n      } = this.getMouseEventArgs(e);\n      edgeView.notifyMouseDown(evt, x, y);\n    }\n  }\n  onHandleChanging({\n    handle,\n    e\n  }) {\n    const edgeView = this.cellView;\n    const index = handle.options.index;\n    const {\n      e: evt,\n      x,\n      y\n    } = this.getMouseEventArgs(e);\n    const vertex = {\n      x,\n      y\n    };\n    this.snapVertex(vertex, index);\n    edgeView.cell.setVertexAt(index, vertex, {\n      ui: true,\n      toolId: this.cid\n    });\n    handle.updatePosition(vertex.x, vertex.y);\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseMove(evt, x, y);\n    }\n  }\n  onHandleChanged({\n    e\n  }) {\n    const options = this.options;\n    const edgeView = this.cellView;\n    if (options.addable) {\n      this.updatePath();\n    }\n    if (!options.removeRedundancies) {\n      return;\n    }\n    const verticesRemoved = edgeView.removeRedundantLinearVertices({\n      ui: true,\n      toolId: this.cid\n    });\n    if (verticesRemoved) {\n      this.render();\n    }\n    this.blur();\n    edgeView.cell.stopBatch('move-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n    if (this.eventData(e).vertexAdded) {\n      edgeView.cell.stopBatch('add-vertex', {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n    const {\n      e: evt,\n      x,\n      y\n    } = this.getMouseEventArgs(e);\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseUp(evt, x, y);\n    }\n    edgeView.checkMouseleave(evt);\n    options.onChanged && options.onChanged({\n      edge: edgeView.cell,\n      edgeView\n    });\n  }\n  snapVertex(vertex, index) {\n    const snapRadius = this.options.snapRadius || 0;\n    if (snapRadius > 0) {\n      const neighbors = this.getNeighborPoints(index);\n      const prev = neighbors.prev;\n      const next = neighbors.next;\n      if (Math.abs(vertex.x - prev.x) < snapRadius) {\n        vertex.x = prev.x;\n      } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n        vertex.x = next.x;\n      }\n      if (Math.abs(vertex.y - prev.y) < snapRadius) {\n        vertex.y = neighbors.prev.y;\n      } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n        vertex.y = next.y;\n      }\n    }\n  }\n  onHandleRemove({\n    handle,\n    e\n  }) {\n    if (this.options.removable) {\n      const index = handle.options.index;\n      const edgeView = this.cellView;\n      edgeView.cell.removeVertexAt(index, {\n        ui: true\n      });\n      if (this.options.addable) {\n        this.updatePath();\n      }\n      edgeView.checkMouseleave(this.normalizeEvent(e));\n    }\n  }\n  onPathMouseDown(evt) {\n    const edgeView = this.cellView;\n    if (this.guard(evt) || !this.options.addable || !edgeView.can('vertexAddable')) {\n      return;\n    }\n    evt.stopPropagation();\n    evt.preventDefault();\n    const e = this.normalizeEvent(evt);\n    const vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON();\n    edgeView.cell.startBatch('add-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n    const index = edgeView.getVertexIndex(vertex.x, vertex.y);\n    this.snapVertex(vertex, index);\n    edgeView.cell.insertVertex(vertex, index, {\n      ui: true,\n      toolId: this.cid\n    });\n    this.render();\n    const handle = this.handles[index];\n    this.eventData(e, {\n      vertexAdded: true\n    });\n    handle.onMouseDown(e);\n  }\n  onRemove() {\n    this.resetHandles();\n  }\n}\n(function (Vertices) {\n  class Handle extends View {\n    constructor(options) {\n      super();\n      this.options = options;\n      this.render();\n      this.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown',\n        dblclick: 'onDoubleClick'\n      });\n    }\n    get graph() {\n      return this.options.graph;\n    }\n    render() {\n      this.container = View.createElement('circle', true);\n      const attrs = this.options.attrs;\n      if (typeof attrs === 'function') {\n        const defaults = Vertices.getDefaults();\n        this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n      } else {\n        this.setAttrs(attrs);\n      }\n      this.addClass(this.prefixClassName('edge-tool-vertex'));\n    }\n    updatePosition(x, y) {\n      this.setAttrs({\n        cx: x,\n        cy: y\n      });\n    }\n    onMouseDown(evt) {\n      if (this.options.guard(evt)) {\n        return;\n      }\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.graph.view.undelegateEvents();\n      this.delegateDocumentEvents({\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n        touchcancel: 'onMouseUp'\n      }, evt.data);\n      this.emit('change', {\n        e: evt,\n        handle: this\n      });\n    }\n    onMouseMove(evt) {\n      this.emit('changing', {\n        e: evt,\n        handle: this\n      });\n    }\n    onMouseUp(evt) {\n      this.emit('changed', {\n        e: evt,\n        handle: this\n      });\n      this.undelegateDocumentEvents();\n      this.graph.view.delegateEvents();\n    }\n    onDoubleClick(evt) {\n      this.emit('remove', {\n        e: evt,\n        handle: this\n      });\n    }\n  }\n  Vertices.Handle = Handle;\n})(Vertices || (Vertices = {}));\n(function (Vertices) {\n  const pathClassName = Util.prefix('edge-tool-vertex-path');\n  Vertices.config({\n    name: 'vertices',\n    snapRadius: 20,\n    addable: true,\n    removable: true,\n    removeRedundancies: true,\n    stopPropagation: true,\n    attrs: {\n      r: 6,\n      fill: '#333',\n      stroke: '#fff',\n      cursor: 'move',\n      'stroke-width': 2\n    },\n    createHandle: options => new Vertices.Handle(options),\n    markup: [{\n      tagName: 'path',\n      selector: 'connection',\n      className: pathClassName,\n      attrs: {\n        fill: 'none',\n        stroke: 'transparent',\n        'stroke-width': 10,\n        cursor: 'pointer'\n      }\n    }],\n    events: {\n      [`mousedown .${pathClassName}`]: 'onPathMouseDown',\n      [`touchstart .${pathClassName}`]: 'onPathMouseDown'\n    }\n  });\n})(Vertices || (Vertices = {}));","map":{"version":3,"names":["Util","Point","View","ToolsView","Vertices","ToolItem","constructor","handles","vertices","cellView","cell","getVertices","onRender","addClass","prefixClassName","options","addable","updatePath","resetHandles","renderHandles","update","length","updateHandles","forEach","handle","stopHandleListening","remove","i","l","vertex","createHandle","processHandle","index","graph","guard","evt","attrs","hook","onToolItemCreated","name","view","tool","updatePosition","x","y","stamp","container","appendChild","push","startHandleListening","connection","childNodes","setAttribute","getConnectionPathData","edgeView","can","on","onHandleChange","onHandleChanging","onHandleChanged","onHandleRemove","off","getNeighborPoints","prev","sourceAnchor","next","targetAnchor","create","getMouseEventArgs","e","normalizeEvent","snapToGrid","clientX","clientY","focus","startBatch","ui","toolId","cid","stopPropagation","notifyMouseDown","snapVertex","setVertexAt","notifyMouseMove","removeRedundancies","verticesRemoved","removeRedundantLinearVertices","render","blur","stopBatch","eventData","vertexAdded","notifyMouseUp","checkMouseleave","onChanged","edge","snapRadius","neighbors","Math","abs","removable","removeVertexAt","onPathMouseDown","preventDefault","toJSON","getVertexIndex","insertVertex","onMouseDown","onRemove","Handle","delegateEvents","mousedown","touchstart","dblclick","createElement","defaults","getDefaults","setAttrs","Object","assign","cx","cy","undelegateEvents","delegateDocumentEvents","mousemove","touchmove","mouseup","touchend","touchcancel","data","emit","onMouseMove","onMouseUp","undelegateDocumentEvents","onDoubleClick","pathClassName","prefix","config","r","fill","stroke","cursor","markup","tagName","selector","className","events"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/registry/tool/vertices.ts"],"sourcesContent":["import { Util } from '../../global/util'\nimport { Point } from '../../geometry'\nimport { Graph } from '../../graph'\nimport { View } from '../../view/view'\nimport { EdgeView } from '../../view/edge'\nimport { Edge } from '../../model/edge'\nimport { ToolsView } from '../../view/tool'\nimport { Attr } from '../attr'\n\nexport class Vertices extends ToolsView.ToolItem<EdgeView, Vertices.Options> {\n  protected handles: Vertices.Handle[] = []\n\n  protected get vertices() {\n    return this.cellView.cell.getVertices()\n  }\n\n  protected onRender() {\n    this.addClass(this.prefixClassName('edge-tool-vertices'))\n    if (this.options.addable) {\n      this.updatePath()\n    }\n    this.resetHandles()\n    this.renderHandles()\n    return this\n  }\n\n  update() {\n    const vertices = this.vertices\n    if (vertices.length === this.handles.length) {\n      this.updateHandles()\n    } else {\n      this.resetHandles()\n      this.renderHandles()\n    }\n\n    if (this.options.addable) {\n      this.updatePath()\n    }\n\n    return this\n  }\n\n  protected resetHandles() {\n    const handles = this.handles\n    this.handles = []\n    if (handles) {\n      handles.forEach((handle) => {\n        this.stopHandleListening(handle)\n        handle.remove()\n      })\n    }\n  }\n\n  protected renderHandles() {\n    const vertices = this.vertices\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i]\n      const createHandle = this.options.createHandle!\n      const processHandle = this.options.processHandle\n      const handle = createHandle({\n        index: i,\n        graph: this.graph,\n        guard: (evt: JQuery.TriggeredEvent) => this.guard(evt), // eslint-disable-line no-loop-func\n        attrs: this.options.attrs || {},\n      })\n\n      if (processHandle) {\n        processHandle(handle)\n      }\n\n      this.graph.hook.onToolItemCreated({\n        name: 'vertices',\n        cell: this.cell,\n        view: this.cellView,\n        tool: handle,\n      })\n\n      handle.updatePosition(vertex.x, vertex.y)\n      this.stamp(handle.container)\n      this.container.appendChild(handle.container)\n      this.handles.push(handle)\n      this.startHandleListening(handle)\n    }\n  }\n\n  protected updateHandles() {\n    const vertices = this.vertices\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i]\n      const handle = this.handles[i]\n      if (handle) {\n        handle.updatePosition(vertex.x, vertex.y)\n      }\n    }\n  }\n\n  protected updatePath() {\n    const connection = this.childNodes.connection\n    if (connection) {\n      connection.setAttribute('d', this.cellView.getConnectionPathData())\n    }\n  }\n\n  protected startHandleListening(handle: Vertices.Handle) {\n    const edgeView = this.cellView\n    if (edgeView.can('vertexMovable')) {\n      handle.on('change', this.onHandleChange, this)\n      handle.on('changing', this.onHandleChanging, this)\n      handle.on('changed', this.onHandleChanged, this)\n    }\n\n    if (edgeView.can('vertexDeletable')) {\n      handle.on('remove', this.onHandleRemove, this)\n    }\n  }\n\n  protected stopHandleListening(handle: Vertices.Handle) {\n    const edgeView = this.cellView\n    if (edgeView.can('vertexMovable')) {\n      handle.off('change', this.onHandleChange, this)\n      handle.off('changing', this.onHandleChanging, this)\n      handle.off('changed', this.onHandleChanged, this)\n    }\n\n    if (edgeView.can('vertexDeletable')) {\n      handle.off('remove', this.onHandleRemove, this)\n    }\n  }\n\n  protected getNeighborPoints(index: number) {\n    const edgeView = this.cellView\n    const vertices = this.vertices\n    const prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor\n    const next =\n      index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor\n    return {\n      prev: Point.create(prev),\n      next: Point.create(next),\n    }\n  }\n\n  protected getMouseEventArgs<T extends JQuery.TriggeredEvent>(evt: T) {\n    const e = this.normalizeEvent(evt)\n    const { x, y } = this.graph.snapToGrid(e.clientX!, e.clientY!)\n    return { e, x, y }\n  }\n\n  protected onHandleChange({ e }: Vertices.Handle.EventArgs['change']) {\n    this.focus()\n    const edgeView = this.cellView\n    edgeView.cell.startBatch('move-vertex', { ui: true, toolId: this.cid })\n    if (!this.options.stopPropagation) {\n      const { e: evt, x, y } = this.getMouseEventArgs(e)\n      edgeView.notifyMouseDown(evt, x, y)\n    }\n  }\n\n  protected onHandleChanging({\n    handle,\n    e,\n  }: Vertices.Handle.EventArgs['changing']) {\n    const edgeView = this.cellView\n    const index = handle.options.index\n    const { e: evt, x, y } = this.getMouseEventArgs(e)\n    const vertex = { x, y }\n    this.snapVertex(vertex, index)\n    edgeView.cell.setVertexAt(index, vertex, { ui: true, toolId: this.cid })\n    handle.updatePosition(vertex.x, vertex.y)\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseMove(evt, x, y)\n    }\n  }\n\n  protected onHandleChanged({ e }: Vertices.Handle.EventArgs['changed']) {\n    const options = this.options\n    const edgeView = this.cellView\n\n    if (options.addable) {\n      this.updatePath()\n    }\n\n    if (!options.removeRedundancies) {\n      return\n    }\n\n    const verticesRemoved = edgeView.removeRedundantLinearVertices({\n      ui: true,\n      toolId: this.cid,\n    })\n\n    if (verticesRemoved) {\n      this.render()\n    }\n\n    this.blur()\n\n    edgeView.cell.stopBatch('move-vertex', { ui: true, toolId: this.cid })\n\n    if (this.eventData(e).vertexAdded) {\n      edgeView.cell.stopBatch('add-vertex', { ui: true, toolId: this.cid })\n    }\n\n    const { e: evt, x, y } = this.getMouseEventArgs(e)\n\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseUp(evt, x, y)\n    }\n\n    edgeView.checkMouseleave(evt)\n\n    options.onChanged && options.onChanged({ edge: edgeView.cell, edgeView })\n  }\n\n  protected snapVertex(vertex: Point.PointLike, index: number) {\n    const snapRadius = this.options.snapRadius || 0\n    if (snapRadius > 0) {\n      const neighbors = this.getNeighborPoints(index)\n      const prev = neighbors.prev\n      const next = neighbors.next\n      if (Math.abs(vertex.x - prev.x) < snapRadius) {\n        vertex.x = prev.x\n      } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n        vertex.x = next.x\n      }\n\n      if (Math.abs(vertex.y - prev.y) < snapRadius) {\n        vertex.y = neighbors.prev.y\n      } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n        vertex.y = next.y\n      }\n    }\n  }\n\n  protected onHandleRemove({ handle, e }: Vertices.Handle.EventArgs['remove']) {\n    if (this.options.removable) {\n      const index = handle.options.index\n      const edgeView = this.cellView\n      edgeView.cell.removeVertexAt(index, { ui: true })\n      if (this.options.addable) {\n        this.updatePath()\n      }\n      edgeView.checkMouseleave(this.normalizeEvent(e))\n    }\n  }\n\n  protected onPathMouseDown(evt: JQuery.MouseDownEvent) {\n    const edgeView = this.cellView\n\n    if (\n      this.guard(evt) ||\n      !this.options.addable ||\n      !edgeView.can('vertexAddable')\n    ) {\n      return\n    }\n\n    evt.stopPropagation()\n    evt.preventDefault()\n\n    const e = this.normalizeEvent(evt)\n    const vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON()\n    edgeView.cell.startBatch('add-vertex', { ui: true, toolId: this.cid })\n    const index = edgeView.getVertexIndex(vertex.x, vertex.y)\n    this.snapVertex(vertex, index)\n    edgeView.cell.insertVertex(vertex, index, {\n      ui: true,\n      toolId: this.cid,\n    })\n    this.render()\n    const handle = this.handles[index]\n    this.eventData(e, { vertexAdded: true })\n    handle.onMouseDown(e)\n  }\n\n  protected onRemove() {\n    this.resetHandles()\n  }\n}\n\nexport namespace Vertices {\n  export interface Options extends ToolsView.ToolItem.Options {\n    snapRadius?: number\n    addable?: boolean\n    removable?: boolean\n    removeRedundancies?: boolean\n    stopPropagation?: boolean\n    attrs?: Attr.SimpleAttrs | ((handle: Handle) => Attr.SimpleAttrs)\n    createHandle?: (options: Handle.Options) => Handle\n    processHandle?: (handle: Handle) => void\n    onChanged?: (options: { edge: Edge; edgeView: EdgeView }) => void\n  }\n}\n\nexport namespace Vertices {\n  export class Handle extends View<Handle.EventArgs> {\n    protected get graph() {\n      return this.options.graph\n    }\n\n    constructor(public readonly options: Handle.Options) {\n      super()\n      this.render()\n      this.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown',\n        dblclick: 'onDoubleClick',\n      })\n    }\n\n    render() {\n      this.container = View.createElement('circle', true)\n      const attrs = this.options.attrs\n      if (typeof attrs === 'function') {\n        const defaults = Vertices.getDefaults<Vertices.Options>()\n        this.setAttrs({\n          ...defaults.attrs,\n          ...attrs(this),\n        })\n      } else {\n        this.setAttrs(attrs)\n      }\n\n      this.addClass(this.prefixClassName('edge-tool-vertex'))\n    }\n\n    updatePosition(x: number, y: number) {\n      this.setAttrs({ cx: x, cy: y })\n    }\n\n    onMouseDown(evt: JQuery.MouseDownEvent) {\n      if (this.options.guard(evt)) {\n        return\n      }\n\n      evt.stopPropagation()\n      evt.preventDefault()\n      this.graph.view.undelegateEvents()\n\n      this.delegateDocumentEvents(\n        {\n          mousemove: 'onMouseMove',\n          touchmove: 'onMouseMove',\n          mouseup: 'onMouseUp',\n          touchend: 'onMouseUp',\n          touchcancel: 'onMouseUp',\n        },\n        evt.data,\n      )\n\n      this.emit('change', { e: evt, handle: this })\n    }\n\n    protected onMouseMove(evt: JQuery.MouseMoveEvent) {\n      this.emit('changing', { e: evt, handle: this })\n    }\n\n    protected onMouseUp(evt: JQuery.MouseUpEvent) {\n      this.emit('changed', { e: evt, handle: this })\n      this.undelegateDocumentEvents()\n      this.graph.view.delegateEvents()\n    }\n\n    protected onDoubleClick(evt: JQuery.DoubleClickEvent) {\n      this.emit('remove', { e: evt, handle: this })\n    }\n  }\n\n  export namespace Handle {\n    export interface Options {\n      graph: Graph\n      index: number\n      guard: (evt: JQuery.TriggeredEvent) => boolean\n      attrs: Attr.SimpleAttrs | ((handle: Handle) => Attr.SimpleAttrs)\n    }\n\n    export interface EventArgs {\n      change: { e: JQuery.MouseDownEvent; handle: Handle }\n      changing: { e: JQuery.MouseMoveEvent; handle: Handle }\n      changed: { e: JQuery.MouseUpEvent; handle: Handle }\n      remove: { e: JQuery.DoubleClickEvent; handle: Handle }\n    }\n  }\n}\n\nexport namespace Vertices {\n  const pathClassName = Util.prefix('edge-tool-vertex-path')\n\n  Vertices.config<Vertices.Options>({\n    name: 'vertices',\n    snapRadius: 20,\n    addable: true,\n    removable: true,\n    removeRedundancies: true,\n    stopPropagation: true,\n    attrs: {\n      r: 6,\n      fill: '#333',\n      stroke: '#fff',\n      cursor: 'move',\n      'stroke-width': 2,\n    },\n    createHandle: (options) => new Handle(options),\n    markup: [\n      {\n        tagName: 'path',\n        selector: 'connection',\n        className: pathClassName,\n        attrs: {\n          fill: 'none',\n          stroke: 'transparent',\n          'stroke-width': 10,\n          cursor: 'pointer',\n        },\n      },\n    ],\n    events: {\n      [`mousedown .${pathClassName}`]: 'onPathMouseDown',\n      [`touchstart .${pathClassName}`]: 'onPathMouseDown',\n    },\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}