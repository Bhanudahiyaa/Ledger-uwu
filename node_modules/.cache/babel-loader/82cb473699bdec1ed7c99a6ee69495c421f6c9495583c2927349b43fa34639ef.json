{"ast":null,"code":"import { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport class Clipboard {\n  constructor() {\n    this.cells = [];\n  }\n  copy(cells, graph, options = {}) {\n    this.options = Object.assign({}, options);\n    const model = Model.isModel(graph) ? graph : graph.model;\n    const cloned = model.cloneSubGraph(cells, options);\n    // sort asc by cell type\n    this.cells = ArrayExt.sortBy(Object.keys(cloned).map(key => cloned[key]), cell => cell.isEdge() ? 2 : 1);\n    this.serialize(options);\n  }\n  cut(cells, graph, options = {}) {\n    this.copy(cells, graph, options);\n    const model = Graph.isGraph(graph) ? graph.model : graph;\n    model.batchUpdate('cut', () => {\n      cells.forEach(cell => cell.remove());\n    });\n  }\n  paste(graph, options = {}) {\n    const localOptions = Object.assign(Object.assign({}, this.options), options);\n    const {\n      offset,\n      edgeProps,\n      nodeProps\n    } = localOptions;\n    let dx = 20;\n    let dy = 20;\n    if (offset) {\n      dx = typeof offset === 'number' ? offset : offset.dx;\n      dy = typeof offset === 'number' ? offset : offset.dy;\n    }\n    this.deserialize(localOptions);\n    const cells = this.cells;\n    cells.forEach(cell => {\n      cell.model = null;\n      cell.removeProp('zIndex');\n      if (dx || dy) {\n        cell.translate(dx, dy);\n      }\n      if (nodeProps && cell.isNode()) {\n        cell.prop(nodeProps);\n      }\n      if (edgeProps && cell.isEdge()) {\n        cell.prop(edgeProps);\n      }\n    });\n    const model = Graph.isGraph(graph) ? graph.model : graph;\n    model.batchUpdate('paste', () => {\n      model.addCells(this.cells);\n    });\n    this.copy(cells, graph, options);\n    return cells;\n  }\n  serialize(options) {\n    if (options.useLocalStorage !== false) {\n      Storage.save(this.cells);\n    }\n  }\n  deserialize(options) {\n    if (options.useLocalStorage) {\n      const cells = Storage.fetch();\n      if (cells) {\n        this.cells = cells;\n      }\n    }\n  }\n  isEmpty() {\n    return this.cells.length <= 0;\n  }\n  clean() {\n    this.options = {};\n    this.cells = [];\n    Storage.clean();\n  }\n}\nvar Storage;\n(function (Storage) {\n  const LOCAL_STORAGE_KEY = `${Config.prefixCls}.clipboard.cells`;\n  function save(cells) {\n    if (window.localStorage) {\n      const data = cells.map(cell => cell.toJSON());\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n    }\n  }\n  Storage.save = save;\n  function fetch() {\n    if (window.localStorage) {\n      const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n      const cells = raw ? JSON.parse(raw) : [];\n      if (cells) {\n        return Model.fromJSON(cells);\n      }\n    }\n  }\n  Storage.fetch = fetch;\n  function clean() {\n    if (window.localStorage) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n  Storage.clean = clean;\n})(Storage || (Storage = {}));","map":{"version":3,"names":["ArrayExt","Config","Graph","Model","Clipboard","constructor","cells","copy","graph","options","Object","assign","model","isModel","cloned","cloneSubGraph","sortBy","keys","map","key","cell","isEdge","serialize","cut","isGraph","batchUpdate","forEach","remove","paste","localOptions","offset","edgeProps","nodeProps","dx","dy","deserialize","removeProp","translate","isNode","prop","addCells","useLocalStorage","Storage","save","fetch","isEmpty","length","clean","LOCAL_STORAGE_KEY","prefixCls","window","localStorage","data","toJSON","setItem","JSON","stringify","raw","getItem","parse","fromJSON","removeItem"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/clipboard/index.ts"],"sourcesContent":["import { ArrayExt } from '../../util'\nimport { Config } from '../../global/config'\nimport { Graph } from '../../graph/graph'\nimport { Cell } from '../../model/cell'\nimport { Edge } from '../../model/edge'\nimport { Node } from '../../model/node'\nimport { Model } from '../../model/model'\n\nexport class Clipboard {\n  protected options: Clipboard.Options\n  public cells: Cell[] = []\n\n  copy(\n    cells: Cell[],\n    graph: Graph | Model,\n    options: Clipboard.CopyOptions = {},\n  ) {\n    this.options = { ...options }\n    const model = Model.isModel(graph) ? graph : graph.model\n    const cloned = model.cloneSubGraph(cells, options)\n\n    // sort asc by cell type\n    this.cells = ArrayExt.sortBy(\n      Object.keys(cloned).map((key) => cloned[key]),\n      (cell) => (cell.isEdge() ? 2 : 1),\n    )\n\n    this.serialize(options)\n  }\n\n  cut(\n    cells: Cell[],\n    graph: Graph | Model,\n    options: Clipboard.CopyOptions = {},\n  ) {\n    this.copy(cells, graph, options)\n    const model = Graph.isGraph(graph) ? graph.model : graph\n    model.batchUpdate('cut', () => {\n      cells.forEach((cell) => cell.remove())\n    })\n  }\n\n  paste(graph: Graph | Model, options: Clipboard.PasteOptions = {}) {\n    const localOptions = { ...this.options, ...options }\n    const { offset, edgeProps, nodeProps } = localOptions\n\n    let dx = 20\n    let dy = 20\n    if (offset) {\n      dx = typeof offset === 'number' ? offset : offset.dx\n      dy = typeof offset === 'number' ? offset : offset.dy\n    }\n\n    this.deserialize(localOptions)\n    const cells = this.cells\n\n    cells.forEach((cell) => {\n      cell.model = null\n      cell.removeProp('zIndex')\n      if (dx || dy) {\n        cell.translate(dx, dy)\n      }\n\n      if (nodeProps && cell.isNode()) {\n        cell.prop(nodeProps)\n      }\n\n      if (edgeProps && cell.isEdge()) {\n        cell.prop(edgeProps)\n      }\n    })\n\n    const model = Graph.isGraph(graph) ? graph.model : graph\n    model.batchUpdate('paste', () => {\n      model.addCells(this.cells)\n    })\n\n    this.copy(cells, graph, options)\n\n    return cells\n  }\n\n  serialize(options: Clipboard.PasteOptions) {\n    if (options.useLocalStorage !== false) {\n      Storage.save(this.cells)\n    }\n  }\n\n  deserialize(options: Clipboard.PasteOptions) {\n    if (options.useLocalStorage) {\n      const cells = Storage.fetch()\n      if (cells) {\n        this.cells = cells\n      }\n    }\n  }\n\n  isEmpty() {\n    return this.cells.length <= 0\n  }\n\n  clean() {\n    this.options = {}\n    this.cells = []\n    Storage.clean()\n  }\n}\n\nexport namespace Clipboard {\n  export interface Options {\n    useLocalStorage?: boolean\n  }\n\n  export interface CopyOptions extends Options {\n    deep?: boolean\n  }\n\n  export interface PasteOptions extends Options {\n    /**\n     * Set of properties to be set on each copied node on every `paste()` call.\n     * It is defined as an object. e.g. `{ zIndex: 1 }`.\n     */\n    nodeProps?: Node.Properties\n    /**\n     * Set of properties to be set on each copied edge on every `paste()` call.\n     * It is defined as an object. e.g. `{ zIndex: 1 }`.\n     */\n    edgeProps?: Edge.Properties\n\n    /**\n     * An increment that is added to the pasted cells position on every\n     * `paste()` call. It can be either a number or an object with `dx`\n     * and `dy` attributes. It defaults to `{ dx: 20, dy: 20 }`.\n     */\n    offset?: number | { dx: number; dy: number }\n  }\n}\n\nnamespace Storage {\n  const LOCAL_STORAGE_KEY = `${Config.prefixCls}.clipboard.cells`\n\n  export function save(cells: Cell[]) {\n    if (window.localStorage) {\n      const data = cells.map((cell) => cell.toJSON())\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data))\n    }\n  }\n\n  export function fetch() {\n    if (window.localStorage) {\n      const raw = localStorage.getItem(LOCAL_STORAGE_KEY)\n      const cells = raw ? JSON.parse(raw) : []\n      if (cells) {\n        return Model.fromJSON(cells)\n      }\n    }\n  }\n\n  export function clean() {\n    if (window.localStorage) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY)\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,KAAK,QAAQ,mBAAmB;AAIzC,SAASC,KAAK,QAAQ,mBAAmB;AAEzC,OAAM,MAAOC,SAAS;EAAtBC,YAAA;IAES,KAAAC,KAAK,GAAW,EAAE;EAgG3B;EA9FEC,IAAIA,CACFD,KAAa,EACbE,KAAoB,EACpBC,OAAA,GAAiC,EAAE;IAEnC,IAAI,CAACA,OAAO,GAAAC,MAAA,CAAAC,MAAA,KAAQF,OAAO,CAAE;IAC7B,MAAMG,KAAK,GAAGT,KAAK,CAACU,OAAO,CAACL,KAAK,CAAC,GAAGA,KAAK,GAAGA,KAAK,CAACI,KAAK;IACxD,MAAME,MAAM,GAAGF,KAAK,CAACG,aAAa,CAACT,KAAK,EAAEG,OAAO,CAAC;IAElD;IACA,IAAI,CAACH,KAAK,GAAGN,QAAQ,CAACgB,MAAM,CAC1BN,MAAM,CAACO,IAAI,CAACH,MAAM,CAAC,CAACI,GAAG,CAAEC,GAAG,IAAKL,MAAM,CAACK,GAAG,CAAC,CAAC,EAC5CC,IAAI,IAAMA,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAE,CAClC;IAED,IAAI,CAACC,SAAS,CAACb,OAAO,CAAC;EACzB;EAEAc,GAAGA,CACDjB,KAAa,EACbE,KAAoB,EACpBC,OAAA,GAAiC,EAAE;IAEnC,IAAI,CAACF,IAAI,CAACD,KAAK,EAAEE,KAAK,EAAEC,OAAO,CAAC;IAChC,MAAMG,KAAK,GAAGV,KAAK,CAACsB,OAAO,CAAChB,KAAK,CAAC,GAAGA,KAAK,CAACI,KAAK,GAAGJ,KAAK;IACxDI,KAAK,CAACa,WAAW,CAAC,KAAK,EAAE,MAAK;MAC5BnB,KAAK,CAACoB,OAAO,CAAEN,IAAI,IAAKA,IAAI,CAACO,MAAM,EAAE,CAAC;IACxC,CAAC,CAAC;EACJ;EAEAC,KAAKA,CAACpB,KAAoB,EAAEC,OAAA,GAAkC,EAAE;IAC9D,MAAMoB,YAAY,GAAAnB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACF,OAAO,GAAKA,OAAO,CAAE;IACpD,MAAM;MAAEqB,MAAM;MAAEC,SAAS;MAAEC;IAAS,CAAE,GAAGH,YAAY;IAErD,IAAII,EAAE,GAAG,EAAE;IACX,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIJ,MAAM,EAAE;MACVG,EAAE,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACG,EAAE;MACpDC,EAAE,GAAG,OAAOJ,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACI,EAAE;;IAGtD,IAAI,CAACC,WAAW,CAACN,YAAY,CAAC;IAC9B,MAAMvB,KAAK,GAAG,IAAI,CAACA,KAAK;IAExBA,KAAK,CAACoB,OAAO,CAAEN,IAAI,IAAI;MACrBA,IAAI,CAACR,KAAK,GAAG,IAAI;MACjBQ,IAAI,CAACgB,UAAU,CAAC,QAAQ,CAAC;MACzB,IAAIH,EAAE,IAAIC,EAAE,EAAE;QACZd,IAAI,CAACiB,SAAS,CAACJ,EAAE,EAAEC,EAAE,CAAC;;MAGxB,IAAIF,SAAS,IAAIZ,IAAI,CAACkB,MAAM,EAAE,EAAE;QAC9BlB,IAAI,CAACmB,IAAI,CAACP,SAAS,CAAC;;MAGtB,IAAID,SAAS,IAAIX,IAAI,CAACC,MAAM,EAAE,EAAE;QAC9BD,IAAI,CAACmB,IAAI,CAACR,SAAS,CAAC;;IAExB,CAAC,CAAC;IAEF,MAAMnB,KAAK,GAAGV,KAAK,CAACsB,OAAO,CAAChB,KAAK,CAAC,GAAGA,KAAK,CAACI,KAAK,GAAGJ,KAAK;IACxDI,KAAK,CAACa,WAAW,CAAC,OAAO,EAAE,MAAK;MAC9Bb,KAAK,CAAC4B,QAAQ,CAAC,IAAI,CAAClC,KAAK,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACC,IAAI,CAACD,KAAK,EAAEE,KAAK,EAAEC,OAAO,CAAC;IAEhC,OAAOH,KAAK;EACd;EAEAgB,SAASA,CAACb,OAA+B;IACvC,IAAIA,OAAO,CAACgC,eAAe,KAAK,KAAK,EAAE;MACrCC,OAAO,CAACC,IAAI,CAAC,IAAI,CAACrC,KAAK,CAAC;;EAE5B;EAEA6B,WAAWA,CAAC1B,OAA+B;IACzC,IAAIA,OAAO,CAACgC,eAAe,EAAE;MAC3B,MAAMnC,KAAK,GAAGoC,OAAO,CAACE,KAAK,EAAE;MAC7B,IAAItC,KAAK,EAAE;QACT,IAAI,CAACA,KAAK,GAAGA,KAAK;;;EAGxB;EAEAuC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACvC,KAAK,CAACwC,MAAM,IAAI,CAAC;EAC/B;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACtC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACH,KAAK,GAAG,EAAE;IACfoC,OAAO,CAACK,KAAK,EAAE;EACjB;;AAiCF,IAAUL,OAAO;AAAjB,WAAUA,OAAO;EACf,MAAMM,iBAAiB,GAAG,GAAG/C,MAAM,CAACgD,SAAS,kBAAkB;EAE/D,SAAgBN,IAAIA,CAACrC,KAAa;IAChC,IAAI4C,MAAM,CAACC,YAAY,EAAE;MACvB,MAAMC,IAAI,GAAG9C,KAAK,CAACY,GAAG,CAAEE,IAAI,IAAKA,IAAI,CAACiC,MAAM,EAAE,CAAC;MAC/CF,YAAY,CAACG,OAAO,CAACN,iBAAiB,EAAEO,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;;EAEjE;EALgBV,OAAA,CAAAC,IAAI,GAAAA,IAKnB;EAED,SAAgBC,KAAKA,CAAA;IACnB,IAAIM,MAAM,CAACC,YAAY,EAAE;MACvB,MAAMM,GAAG,GAAGN,YAAY,CAACO,OAAO,CAACV,iBAAiB,CAAC;MACnD,MAAM1C,KAAK,GAAGmD,GAAG,GAAGF,IAAI,CAACI,KAAK,CAACF,GAAG,CAAC,GAAG,EAAE;MACxC,IAAInD,KAAK,EAAE;QACT,OAAOH,KAAK,CAACyD,QAAQ,CAACtD,KAAK,CAAC;;;EAGlC;EARgBoC,OAAA,CAAAE,KAAK,GAAAA,KAQpB;EAED,SAAgBG,KAAKA,CAAA;IACnB,IAAIG,MAAM,CAACC,YAAY,EAAE;MACvBA,YAAY,CAACU,UAAU,CAACb,iBAAiB,CAAC;;EAE9C;EAJgBN,OAAA,CAAAK,KAAK,GAAAA,KAIpB;AACH,CAAC,EAzBSL,OAAO,KAAPA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}