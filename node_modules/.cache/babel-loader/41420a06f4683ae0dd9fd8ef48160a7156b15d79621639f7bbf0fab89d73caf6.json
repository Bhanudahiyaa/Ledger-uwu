{"ast":null,"code":"import { Angle } from '../../geometry';\nimport { resolve } from './util';\nconst orthogonal = function (view, magnet, refPoint, options) {\n  const angle = view.cell.getAngle();\n  const bbox = view.getBBoxOfElement(magnet);\n  const result = bbox.getCenter();\n  const topLeft = bbox.getTopLeft();\n  const bottomRight = bbox.getBottomRight();\n  let padding = options.padding;\n  if (!Number.isFinite(padding)) {\n    padding = 0;\n  }\n  if (topLeft.y + padding <= refPoint.y && refPoint.y <= bottomRight.y - padding) {\n    const dy = refPoint.y - result.y;\n    result.x += angle === 0 || angle === 180 ? 0 : dy * 1 / Math.tan(Angle.toRad(angle));\n    result.y += dy;\n  } else if (topLeft.x + padding <= refPoint.x && refPoint.x <= bottomRight.x - padding) {\n    const dx = refPoint.x - result.x;\n    result.y += angle === 90 || angle === 270 ? 0 : dx * Math.tan(Angle.toRad(angle));\n    result.x += dx;\n  }\n  return result;\n};\n/**\n * Tries to place the anchor of the edge inside the view bbox so that the\n * edge is made orthogonal. The anchor is placed along two line segments\n * inside the view bbox (between the centers of the top and bottom side and\n * between the centers of the left and right sides). If it is not possible\n * to place the anchor so that the edge would be orthogonal, the anchor is\n * placed at the center of the view bbox instead.\n */\nexport const orth = resolve(orthogonal);","map":{"version":3,"names":["Angle","resolve","orthogonal","view","magnet","refPoint","options","angle","cell","getAngle","bbox","getBBoxOfElement","result","getCenter","topLeft","getTopLeft","bottomRight","getBottomRight","padding","Number","isFinite","y","dy","x","Math","tan","toRad","dx","orth"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/registry/node-anchor/orth.ts"],"sourcesContent":["import { Angle } from '../../geometry'\nimport { ResolveOptions, resolve } from './util'\nimport { NodeAnchor } from './index'\n\nexport interface OrthEndpointOptions extends ResolveOptions {\n  padding: number\n}\n\nconst orthogonal: NodeAnchor.ResolvedDefinition<OrthEndpointOptions> =\n  function (view, magnet, refPoint, options) {\n    const angle = view.cell.getAngle()\n    const bbox = view.getBBoxOfElement(magnet)\n    const result = bbox.getCenter()\n    const topLeft = bbox.getTopLeft()\n    const bottomRight = bbox.getBottomRight()\n\n    let padding = options.padding\n    if (!Number.isFinite(padding)) {\n      padding = 0\n    }\n\n    if (\n      topLeft.y + padding <= refPoint.y &&\n      refPoint.y <= bottomRight.y - padding\n    ) {\n      const dy = refPoint.y - result.y\n      result.x +=\n        angle === 0 || angle === 180\n          ? 0\n          : (dy * 1) / Math.tan(Angle.toRad(angle))\n      result.y += dy\n    } else if (\n      topLeft.x + padding <= refPoint.x &&\n      refPoint.x <= bottomRight.x - padding\n    ) {\n      const dx = refPoint.x - result.x\n      result.y +=\n        angle === 90 || angle === 270 ? 0 : dx * Math.tan(Angle.toRad(angle))\n      result.x += dx\n    }\n\n    return result\n  }\n\n/**\n * Tries to place the anchor of the edge inside the view bbox so that the\n * edge is made orthogonal. The anchor is placed along two line segments\n * inside the view bbox (between the centers of the top and bottom side and\n * between the centers of the left and right sides). If it is not possible\n * to place the anchor so that the edge would be orthogonal, the anchor is\n * placed at the center of the view bbox instead.\n */\nexport const orth = resolve<\n  NodeAnchor.ResolvedDefinition<OrthEndpointOptions>,\n  NodeAnchor.Definition<OrthEndpointOptions>\n>(orthogonal)\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAAyBC,OAAO,QAAQ,QAAQ;AAOhD,MAAMC,UAAU,GACd,SAAAA,CAAUC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO;EACvC,MAAMC,KAAK,GAAGJ,IAAI,CAACK,IAAI,CAACC,QAAQ,EAAE;EAClC,MAAMC,IAAI,GAAGP,IAAI,CAACQ,gBAAgB,CAACP,MAAM,CAAC;EAC1C,MAAMQ,MAAM,GAAGF,IAAI,CAACG,SAAS,EAAE;EAC/B,MAAMC,OAAO,GAAGJ,IAAI,CAACK,UAAU,EAAE;EACjC,MAAMC,WAAW,GAAGN,IAAI,CAACO,cAAc,EAAE;EAEzC,IAAIC,OAAO,GAAGZ,OAAO,CAACY,OAAO;EAC7B,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC,EAAE;IAC7BA,OAAO,GAAG,CAAC;;EAGb,IACEJ,OAAO,CAACO,CAAC,GAAGH,OAAO,IAAIb,QAAQ,CAACgB,CAAC,IACjChB,QAAQ,CAACgB,CAAC,IAAIL,WAAW,CAACK,CAAC,GAAGH,OAAO,EACrC;IACA,MAAMI,EAAE,GAAGjB,QAAQ,CAACgB,CAAC,GAAGT,MAAM,CAACS,CAAC;IAChCT,MAAM,CAACW,CAAC,IACNhB,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,GAAG,GACxB,CAAC,GACAe,EAAE,GAAG,CAAC,GAAIE,IAAI,CAACC,GAAG,CAACzB,KAAK,CAAC0B,KAAK,CAACnB,KAAK,CAAC,CAAC;IAC7CK,MAAM,CAACS,CAAC,IAAIC,EAAE;GACf,MAAM,IACLR,OAAO,CAACS,CAAC,GAAGL,OAAO,IAAIb,QAAQ,CAACkB,CAAC,IACjClB,QAAQ,CAACkB,CAAC,IAAIP,WAAW,CAACO,CAAC,GAAGL,OAAO,EACrC;IACA,MAAMS,EAAE,GAAGtB,QAAQ,CAACkB,CAAC,GAAGX,MAAM,CAACW,CAAC;IAChCX,MAAM,CAACS,CAAC,IACNd,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,GAAG,GAAG,CAAC,GAAGoB,EAAE,GAAGH,IAAI,CAACC,GAAG,CAACzB,KAAK,CAAC0B,KAAK,CAACnB,KAAK,CAAC,CAAC;IACvEK,MAAM,CAACW,CAAC,IAAII,EAAE;;EAGhB,OAAOf,MAAM;AACf,CAAC;AAEH;;;;;;;;AAQA,OAAO,MAAMgB,IAAI,GAAG3B,OAAO,CAGzBC,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}