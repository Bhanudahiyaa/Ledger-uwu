{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n(function (NsDelEdge) {\n  /** Command: 用于注册named factory */\n  NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n  /** hookName */\n  NsDelEdge.hookKey = 'delEdge';\n  let ErrEnum;\n  (function (ErrEnum) {\n    ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n    ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n    ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n    ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n  })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\nlet DelEdgeCommand = class DelEdgeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.delEdge.call(/** 执行 hooks pipeline处理args */\n      args, /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          edgeConfig,\n          x6Edge,\n          deleteEdgeService,\n          commandService,\n          options\n        } = handlerArgs;\n        let edgeCell = x6Edge;\n        /** 没有edgeCell时查找cell */\n        if (!edgeCell) {\n          edgeCell = yield this.findEdgeById(edgeConfig);\n          if (!edgeCell) {\n            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n            return {\n              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n            };\n          }\n        }\n        const isEdge = edgeCell && edgeCell.isEdge();\n        if (!isEdge) {\n          console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n          return {\n            err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n          };\n        }\n        if (deleteEdgeService) {\n          /** 需要请求接口 */\n          const canDelete = yield deleteEdgeService(handlerArgs);\n          if (!canDelete) {\n            return {\n              err: NsDelEdge.ErrEnum.SERVICE_REJECT\n            };\n          }\n        }\n        try {\n          const targetCell = edgeCell.getTargetCell();\n          const sourceCell = edgeCell.getSourceCell();\n          const sourcePortId = edgeCell.getSourcePortId();\n          const targetPortId = edgeCell.getTargetPortId();\n          const source = sourceCell ? sourceCell.id : sourceCell.source;\n          const target = targetCell ? targetCell.id : targetCell.target;\n          /** 执行remove */\n          edgeCell.remove(Object.assign(Object.assign({}, options), {\n            isCommand: true\n          }));\n          /** 创建 undo */\n          const undo = Disposable.create(() => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: {\n                source,\n                target,\n                sourcePortId,\n                targetPortId\n              }\n            });\n          });\n          /** add undo */\n          this.ctx.addUndo(undo);\n          return {\n            err: null,\n            edgeConfig: {\n              source,\n              target,\n              sourcePortId,\n              targetPortId\n            },\n            targetCell,\n            sourceCell,\n            sourcePortId,\n            targetPortId\n          };\n        } catch (error) {\n          console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);\n          return {\n            err: NsDelEdge.ErrEnum.X6_DELETE_FAILED\n          };\n        }\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n    this.findEdgeById = edge => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.ctx.getX6Graph();\n      const cell = graph.getCellById(edge.id);\n      return cell;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DelEdgeCommand.prototype, \"init\", null);\nDelEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelEdge.command.id\n  }\n})\n/** 创建节点命令 */], DelEdgeCommand);\nexport { DelEdgeCommand };","map":{"version":3,"names":["inject","injectable","postConstruct","ICommandHandler","ICommandContextProvider","XFlowEdgeCommands","Disposable","NsDelEdge","command","DEL_EDGE","hookKey","ErrEnum","DelEdgeCommand","constructor","execute","__awaiter","args","hooks","runtimeHook","ctx","getArgs","getHooks","result","delEdge","call","handlerArgs","edgeConfig","x6Edge","deleteEdgeService","commandService","options","edgeCell","findEdgeById","console","error","EDGE_NOT_EXIST","err","isEdge","canDelete","SERVICE_REJECT","targetCell","getTargetCell","sourceCell","getSourceCell","sourcePortId","getSourcePortId","targetPortId","getTargetPortId","source","id","target","remove","Object","assign","isCommand","undo","create","executeCommand","ADD_EDGE","addUndo","X6_DELETE_FAILED","setResult","edge","graph","getX6Graph","cell","getCellById","redo","isUndoable","init","contextProvider","__decorate","token","named"],"sources":["../../../src/command-contributions/edge/edge-del.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}