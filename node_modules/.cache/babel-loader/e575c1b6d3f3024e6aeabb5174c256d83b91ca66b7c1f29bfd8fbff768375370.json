{"ast":null,"code":"const SPEED_DIVISOR = 800;\nexport default class RadialNonoverlapForce {\n  constructor(params) {\n    this.disp = [];\n    this.positions = params.positions;\n    this.adjMatrix = params.adjMatrix;\n    this.focusID = params.focusID;\n    this.radii = params.radii;\n    this.iterations = params.iterations || 10;\n    this.height = params.height || 10;\n    this.width = params.width || 10;\n    this.speed = params.speed || 100;\n    this.gravity = params.gravity || 10;\n    this.nodeSizeFunc = params.nodeSizeFunc;\n    this.k = params.k || 5;\n    this.strictRadial = params.strictRadial;\n    this.nodes = params.nodes;\n  }\n  layout() {\n    const self = this;\n    const positions = self.positions;\n    const disp = [];\n    const iterations = self.iterations;\n    const maxDisplace = self.width / 10;\n    self.maxDisplace = maxDisplace;\n    self.disp = disp;\n    for (let i = 0; i < iterations; i++) {\n      positions.forEach((_, k) => {\n        disp[k] = {\n          x: 0,\n          y: 0\n        };\n      });\n      // 给重叠的节点增加斥力\n      self.getRepulsion();\n      self.updatePositions();\n    }\n    return positions;\n  }\n  getRepulsion() {\n    const self = this;\n    const positions = self.positions;\n    const nodes = self.nodes;\n    const disp = self.disp;\n    const k = self.k;\n    const radii = self.radii || [];\n    positions.forEach((v, i) => {\n      disp[i] = {\n        x: 0,\n        y: 0\n      };\n      positions.forEach((u, j) => {\n        if (i === j) {\n          return;\n        }\n        // v and u are not on the same circle, return\n        if (radii[i] !== radii[j]) {\n          return;\n        }\n        let vecx = v[0] - u[0];\n        let vecy = v[1] - u[1];\n        let vecLength = Math.sqrt(vecx * vecx + vecy * vecy);\n        if (vecLength === 0) {\n          vecLength = 1;\n          const sign = i > j ? 1 : -1;\n          vecx = 0.01 * sign;\n          vecy = 0.01 * sign;\n        }\n        // these two nodes overlap\n        if (vecLength < self.nodeSizeFunc(nodes[i]) / 2 + self.nodeSizeFunc(nodes[j]) / 2) {\n          const common = k * k / vecLength;\n          disp[i].x += vecx / vecLength * common;\n          disp[i].y += vecy / vecLength * common;\n        }\n      });\n    });\n  }\n  updatePositions() {\n    const self = this;\n    const positions = self.positions;\n    const disp = self.disp;\n    const speed = self.speed;\n    const strictRadial = self.strictRadial;\n    const f = self.focusID;\n    const maxDisplace = self.maxDisplace || self.width / 10;\n    if (strictRadial) {\n      disp.forEach((di, i) => {\n        const vx = positions[i][0] - positions[f][0];\n        const vy = positions[i][1] - positions[f][1];\n        const vLength = Math.sqrt(vx * vx + vy * vy);\n        let vpx = vy / vLength;\n        let vpy = -vx / vLength;\n        const diLength = Math.sqrt(di.x * di.x + di.y * di.y);\n        let alpha = Math.acos((vpx * di.x + vpy * di.y) / diLength);\n        if (alpha > Math.PI / 2) {\n          alpha -= Math.PI / 2;\n          vpx *= -1;\n          vpy *= -1;\n        }\n        const tdispLength = Math.cos(alpha) * diLength;\n        di.x = vpx * tdispLength;\n        di.y = vpy * tdispLength;\n      });\n    }\n    // move\n    const radii = self.radii;\n    positions.forEach((n, i) => {\n      if (i === f) {\n        return;\n      }\n      const distLength = Math.sqrt(disp[i].x * disp[i].x + disp[i].y * disp[i].y);\n      if (distLength > 0 && i !== f) {\n        const limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n        n[0] += disp[i].x / distLength * limitedDist;\n        n[1] += disp[i].y / distLength * limitedDist;\n        if (strictRadial) {\n          let vx = n[0] - positions[f][0];\n          let vy = n[1] - positions[f][1];\n          const nfDis = Math.sqrt(vx * vx + vy * vy);\n          vx = vx / nfDis * radii[i];\n          vy = vy / nfDis * radii[i];\n          n[0] = positions[f][0] + vx;\n          n[1] = positions[f][1] + vy;\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["SPEED_DIVISOR","RadialNonoverlapForce","constructor","params","disp","positions","adjMatrix","focusID","radii","iterations","height","width","speed","gravity","nodeSizeFunc","k","strictRadial","nodes","layout","self","maxDisplace","i","forEach","_","x","y","getRepulsion","updatePositions","v","u","j","vecx","vecy","vecLength","Math","sqrt","sign","common","f","di","vx","vy","vLength","vpx","vpy","diLength","alpha","acos","PI","tdispLength","cos","n","distLength","limitedDist","min","nfDis"],"sources":["../../../src/layout/radial/radialNonoverlapForce.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}