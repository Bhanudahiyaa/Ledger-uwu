{"ast":null,"code":"import initOrder from './init-order';\nimport crossCount from './cross-count';\nimport buildLayerGraph from './build-layer-graph';\nimport addSubgraphConstraints from './add-subgraph-constraints';\nimport sortSubgraph from './sort-subgraph';\nimport graphlib from '../graphlib';\nimport util from '../util';\nimport { clone } from '../../../../util';\nconst Graph = graphlib.Graph;\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nconst order = g => {\n  const maxRank = util.maxRank(g);\n  const range1 = [];\n  const range2 = [];\n  for (let i = 1; i < maxRank + 1; i++) range1.push(i);\n  for (let i = maxRank - 1; i > -1; i--) range2.push(i);\n  const downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n  const upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n  let layering = initOrder(g);\n  assignOrder(g, layering);\n  let bestCC = Number.POSITIVE_INFINITY;\n  let best;\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n    layering = util.buildLayerMatrix(g);\n    const cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = clone(layering);\n      bestCC = cc;\n    }\n  }\n  // consider use previous result, maybe somewhat reduendant\n  layering = initOrder(g);\n  assignOrder(g, layering);\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true);\n    layering = util.buildLayerMatrix(g);\n    const cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = clone(layering);\n      bestCC = cc;\n    }\n  }\n  assignOrder(g, best);\n};\nconst buildLayerGraphs = (g, ranks, relationship) => {\n  return ranks.map(rank => {\n    return buildLayerGraph(g, rank, relationship);\n  });\n};\nconst sweepLayerGraphs = (layerGraphs, biasRight, usePrev) => {\n  const cg = new Graph();\n  layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach(lg => {\n    var _a;\n    const root = lg.graph().root;\n    const sorted = sortSubgraph(lg, root, cg, biasRight, usePrev);\n    for (let i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n      lg.node(sorted.vs[i]).order = i;\n    }\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n};\nconst assignOrder = (g, layering) => {\n  layering === null || layering === void 0 ? void 0 : layering.forEach(layer => {\n    layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n      g.node(v).order = i;\n    });\n  });\n};\nexport default order;","map":{"version":3,"names":["initOrder","crossCount","buildLayerGraph","addSubgraphConstraints","sortSubgraph","graphlib","util","clone","Graph","order","g","maxRank","range1","range2","i","push","downLayerGraphs","buildLayerGraphs","upLayerGraphs","layering","assignOrder","bestCC","Number","POSITIVE_INFINITY","best","lastBest","sweepLayerGraphs","buildLayerMatrix","cc","ranks","relationship","map","rank","layerGraphs","biasRight","usePrev","cg","forEach","lg","root","graph","sorted","_a","vs","length","node","layer","v"],"sources":["../../../../../src/layout/dagre/src/order/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}