{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { View } from '../../view';\nexport class Widget extends View {\n  constructor(options) {\n    super();\n    const _a = options,\n      {\n        view,\n        cell,\n        node,\n        edge,\n        graph\n      } = _a,\n      localOptions = __rest(_a, [\"view\", \"cell\", \"node\", \"edge\", \"graph\"]);\n    if (view) {\n      this.view = view;\n      this.cell = view.cell;\n      this.graph = view.graph;\n      this.model = this.graph.model;\n    } else if ((cell || edge || node) && graph) {\n      this.cell = node || edge || cell;\n      this.view = graph.renderer.findViewByCell(this.cell);\n      this.graph = graph;\n      this.model = this.graph.model;\n    }\n    const ctor = this.constructor;\n    if (options.clearAll !== false) {\n      ctor.removeInstances(this.graph);\n    }\n    ctor.register(this);\n    this.init(localOptions);\n  }\n  static ensureCache() {\n    if (!this.instanceCache.has(this)) {\n      this.instanceCache.set(this, {});\n    }\n    return this.instanceCache.get(this);\n  }\n  static register(instance, graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph;\n    }\n    const dic = this.ensureCache();\n    let cache = dic[graph.view.cid];\n    if (cache == null) {\n      cache = dic[graph.view.cid] = {};\n    }\n    cache[instance.cid] = instance;\n  }\n  static unregister(instance, graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph;\n    }\n    const dic = this.ensureCache();\n    if (dic[graph.view.cid]) {\n      delete dic[graph.view.cid][instance.cid];\n    }\n  }\n  static removeInstances(graph) {\n    const dic = this.ensureCache();\n    const cache = dic[graph.view.cid];\n    if (cache) {\n      Object.keys(cache).forEach(cid => {\n        const instance = cache[cid];\n        if (instance) {\n          instance.remove();\n        }\n      });\n    }\n  }\n  static getInstances(graph) {\n    const dic = this.ensureCache();\n    return dic[graph.view.cid] || {};\n  }\n  init(options) {} // eslint-disable-line\n  render() {\n    return this;\n  }\n  startListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.on('blank:mousedown', this.remove, this);\n    }\n  }\n  stopListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.off('blank:mousedown', this.remove, this);\n    }\n  }\n  remove() {\n    this.stopListening();\n    const ctor = this.constructor;\n    ctor.unregister(this);\n    return super.remove();\n  }\n  dispose() {\n    this.remove();\n  }\n}\n// #region static\nWidget.instanceCache = new WeakMap();\n__decorate([View.dispose()], Widget.prototype, \"dispose\", null);","map":{"version":3,"names":["View","Widget","constructor","options","_a","view","cell","node","edge","graph","localOptions","__rest","model","renderer","findViewByCell","ctor","clearAll","removeInstances","register","init","ensureCache","instanceCache","has","set","get","instance","dic","cache","cid","unregister","Object","keys","forEach","remove","getInstances","render","startListening","clearOnBlankMouseDown","on","stopListening","off","dispose","WeakMap","__decorate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/common/widget.ts"],"sourcesContent":["import { KeyValue } from '../../types'\nimport { View, CellView } from '../../view'\nimport { Cell, Node, Edge, Model } from '../../model'\nimport { Graph } from '../../graph'\n\nexport class Widget<\n  Options extends Widget.Options = Widget.Options,\n  EventArgs = any,\n> extends View<EventArgs> {\n  // #region static\n\n  private static readonly instanceCache: WeakMap<\n    typeof Widget,\n    KeyValue<KeyValue<Widget>>\n  > = new WeakMap()\n\n  private static ensureCache() {\n    if (!this.instanceCache.has(this)) {\n      this.instanceCache.set(this, {})\n    }\n    return this.instanceCache.get(this)!\n  }\n\n  public static register(instance: Widget, graph?: Graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph\n    }\n    const dic = this.ensureCache()\n    let cache = dic[graph.view.cid]\n    if (cache == null) {\n      cache = dic[graph.view.cid] = {}\n    }\n    cache[instance.cid] = instance\n  }\n\n  public static unregister(instance: Widget, graph?: Graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph\n    }\n    const dic = this.ensureCache()\n    if (dic[graph.view.cid]) {\n      delete dic[graph.view.cid][instance.cid]\n    }\n  }\n\n  public static removeInstances(graph: Graph) {\n    const dic = this.ensureCache()\n    const cache = dic[graph.view.cid]\n    if (cache) {\n      Object.keys(cache).forEach((cid) => {\n        const instance = cache[cid]\n        if (instance) {\n          instance.remove()\n        }\n      })\n    }\n  }\n\n  public static getInstances(graph: Graph) {\n    const dic = this.ensureCache()\n    return dic[graph.view.cid] || {}\n  }\n\n  // #endregion\n\n  public options: Options\n  public readonly cell: Cell\n  public readonly view: CellView\n  public readonly model: Model\n  public readonly graph: Graph\n\n  constructor(options: Options & (Types.ViewOptions | Types.CellOptions)) {\n    super()\n\n    const { view, cell, node, edge, graph, ...localOptions } = options as any\n    if (view) {\n      this.view = view\n      this.cell = view.cell\n      this.graph = view.graph\n      this.model = this.graph.model\n    } else if ((cell || edge || node) && graph) {\n      this.cell = node || edge || cell\n      this.view = (graph as Graph).renderer.findViewByCell(this.cell)!\n      this.graph = graph\n      this.model = this.graph.model\n    }\n\n    const ctor = this.constructor as typeof Widget\n    if (options.clearAll !== false) {\n      ctor.removeInstances(this.graph)\n    }\n\n    ctor.register(this)\n    this.init(localOptions)\n  }\n\n  protected init(options: Options) {} // eslint-disable-line\n\n  protected render() {\n    return this\n  }\n\n  protected startListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.on('blank:mousedown', this.remove, this)\n    }\n  }\n\n  protected stopListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.off('blank:mousedown', this.remove, this)\n    }\n  }\n\n  remove() {\n    this.stopListening()\n    const ctor = this.constructor as typeof Widget\n    ctor.unregister(this)\n    return super.remove()\n  }\n\n  @View.dispose()\n  dispose() {\n    this.remove()\n  }\n}\n\nexport namespace Widget {\n  export interface Options {\n    /**\n     * If set to `true` (the default value), clear all the existing widget\n     * from the page when a new widget is created. This is the most common\n     * behavior as it is assumed that there is only one widget visible on\n     * the page at a time. However, some applications might need to have more\n     * than one widget visible. In this case, set `clearAll` to `false` (and\n     * make sure to call `remove()` once you don't need a widget anymore)\n     */\n    clearAll?: boolean\n    clearOnBlankMouseDown?: boolean\n  }\n}\n\nnamespace Types {\n  export interface ViewOptions {\n    view: CellView\n  }\n\n  export interface CellOptions {\n    cell?: Cell\n    node?: Node\n    edge?: Edge\n    graph: Graph\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}