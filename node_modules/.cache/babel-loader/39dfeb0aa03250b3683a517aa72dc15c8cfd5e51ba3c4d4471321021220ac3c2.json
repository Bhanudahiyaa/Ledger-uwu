{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n// lodashUtil\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport { PassType } from \"../IMultiPassRenderer\";\nimport { gl } from \"../gl\";\nconst {\n  camelCase,\n  isNil,\n  upperFirst\n} = lodashUtil;\n\n/**\n * 后处理 Pass 基类，通过 PostProcessor 驱动。\n *\n * 约定使用 u_Texture 传递渲染纹理。\n */\nexport default class BasePostProcessingPass {\n  constructor() {\n    _defineProperty(this, \"shaderModuleService\", void 0);\n    _defineProperty(this, \"rendererService\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"quad\", quad);\n    /**\n     * 启用开关\n     */\n    _defineProperty(this, \"enabled\", true);\n    /**\n     * 是否渲染到屏幕\n     */\n    _defineProperty(this, \"renderToScreen\", false);\n    /**\n     * 渲染命令\n     */\n    _defineProperty(this, \"model\", void 0);\n    /**\n     * 效果名，便于在图层中引用\n     */\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"optionsToUpdate\", {});\n  }\n  getName() {\n    return this.name;\n  }\n  setName(name) {\n    this.name = name;\n  }\n  getType() {\n    return PassType.PostProcessing;\n  }\n  init(layer, config) {\n    this.config = config;\n    this.rendererService = layer.getContainer().rendererService;\n    this.shaderModuleService = layer.getContainer().shaderModuleService;\n    const {\n      createAttribute,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.setupShaders();\n    this.model = createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      // @ts-ignore\n      uniforms: _objectSpread(_objectSpread({\n        // @ts-ignore\n        u_Texture: null\n      }, uniforms), this.config && this.convertOptionsToUniforms(this.config)),\n      depth: {\n        enable: false\n      },\n      count: 3,\n      blend: {\n        // copy pass 需要混合\n        enable: this.getName() === 'copy'\n      }\n    });\n  }\n  render(layer, tex) {\n    const postProcessor = layer.multiPassRenderer.getPostProcessor();\n    const {\n      useFramebuffer,\n      getViewportSize,\n      clear\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    useFramebuffer(this.renderToScreen ? null : postProcessor.getWriteFBO(), () => {\n      clear({\n        framebuffer: postProcessor.getWriteFBO(),\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0\n      });\n      const uniformOptions = _objectSpread({\n        u_BloomFinal: 0.0,\n        u_Texture: postProcessor.getReadFBO(),\n        // u_Texture: tex ? tex : postProcessor.getReadFBO(),\n        u_ViewportSize: [width, height]\n      }, this.convertOptionsToUniforms(this.optionsToUpdate));\n      if (tex) {\n        uniformOptions.u_BloomFinal = 1.0;\n        uniformOptions.u_Texture2 = tex;\n      }\n      this.model.draw({\n        uniforms: uniformOptions\n      });\n    });\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  setRenderToScreen(renderToScreen) {\n    this.renderToScreen = renderToScreen;\n  }\n  updateOptions(config) {\n    this.optionsToUpdate = _objectSpread(_objectSpread({}, this.optionsToUpdate), config);\n  }\n  setupShaders() {\n    throw new Error('Method not implemented.');\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    Object.keys(options).forEach(optionName => {\n      // @ts-ignore\n      if (!isNil(options[optionName])) {\n        uniforms[`u_${upperFirst(camelCase(optionName))}`] =\n        // @ts-ignore\n        options[optionName];\n      }\n    });\n    return uniforms;\n  }\n}","map":{"version":3,"names":["_objectSpread","_defineProperty","lodashUtil","quad","PassType","gl","camelCase","isNil","upperFirst","BasePostProcessingPass","constructor","getName","name","setName","getType","PostProcessing","init","layer","config","rendererService","getContainer","shaderModuleService","createAttribute","createBuffer","createModel","vs","fs","uniforms","setupShaders","model","attributes","a_Position","buffer","data","type","FLOAT","size","u_Texture","convertOptionsToUniforms","depth","enable","count","blend","render","tex","postProcessor","multiPassRenderer","getPostProcessor","useFramebuffer","getViewportSize","clear","width","height","renderToScreen","getWriteFBO","framebuffer","color","stencil","uniformOptions","u_BloomFinal","getReadFBO","u_ViewportSize","optionsToUpdate","u_Texture2","draw","isEnabled","enabled","setEnabled","setRenderToScreen","updateOptions","Error","options","Object","keys","forEach","optionName"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/BasePostProcessingPass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n// lodashUtil\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport { PassType } from \"../IMultiPassRenderer\";\nimport { gl } from \"../gl\";\nconst {\n  camelCase,\n  isNil,\n  upperFirst\n} = lodashUtil;\n\n/**\n * 后处理 Pass 基类，通过 PostProcessor 驱动。\n *\n * 约定使用 u_Texture 传递渲染纹理。\n */\nexport default class BasePostProcessingPass {\n  constructor() {\n    _defineProperty(this, \"shaderModuleService\", void 0);\n    _defineProperty(this, \"rendererService\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"quad\", quad);\n    /**\n     * 启用开关\n     */\n    _defineProperty(this, \"enabled\", true);\n    /**\n     * 是否渲染到屏幕\n     */\n    _defineProperty(this, \"renderToScreen\", false);\n    /**\n     * 渲染命令\n     */\n    _defineProperty(this, \"model\", void 0);\n    /**\n     * 效果名，便于在图层中引用\n     */\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"optionsToUpdate\", {});\n  }\n  getName() {\n    return this.name;\n  }\n  setName(name) {\n    this.name = name;\n  }\n  getType() {\n    return PassType.PostProcessing;\n  }\n  init(layer, config) {\n    this.config = config;\n    this.rendererService = layer.getContainer().rendererService;\n    this.shaderModuleService = layer.getContainer().shaderModuleService;\n    const {\n      createAttribute,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.setupShaders();\n    this.model = createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      // @ts-ignore\n      uniforms: _objectSpread(_objectSpread({\n        // @ts-ignore\n        u_Texture: null\n      }, uniforms), this.config && this.convertOptionsToUniforms(this.config)),\n      depth: {\n        enable: false\n      },\n      count: 3,\n      blend: {\n        // copy pass 需要混合\n        enable: this.getName() === 'copy'\n      }\n    });\n  }\n  render(layer, tex) {\n    const postProcessor = layer.multiPassRenderer.getPostProcessor();\n    const {\n      useFramebuffer,\n      getViewportSize,\n      clear\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    useFramebuffer(this.renderToScreen ? null : postProcessor.getWriteFBO(), () => {\n      clear({\n        framebuffer: postProcessor.getWriteFBO(),\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0\n      });\n      const uniformOptions = _objectSpread({\n        u_BloomFinal: 0.0,\n        u_Texture: postProcessor.getReadFBO(),\n        // u_Texture: tex ? tex : postProcessor.getReadFBO(),\n        u_ViewportSize: [width, height]\n      }, this.convertOptionsToUniforms(this.optionsToUpdate));\n      if (tex) {\n        uniformOptions.u_BloomFinal = 1.0;\n        uniformOptions.u_Texture2 = tex;\n      }\n      this.model.draw({\n        uniforms: uniformOptions\n      });\n    });\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  setRenderToScreen(renderToScreen) {\n    this.renderToScreen = renderToScreen;\n  }\n  updateOptions(config) {\n    this.optionsToUpdate = _objectSpread(_objectSpread({}, this.optionsToUpdate), config);\n  }\n  setupShaders() {\n    throw new Error('Method not implemented.');\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    Object.keys(options).forEach(optionName => {\n      // @ts-ignore\n      if (!isNil(options[optionName])) {\n        uniforms[`u_${upperFirst(camelCase(optionName))}`] =\n        // @ts-ignore\n        options[optionName];\n      }\n    });\n    return uniforms;\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAOC,eAAe,MAAM,2CAA2C;AACvE;AACA,SAASC,UAAU,QAAQ,gBAAgB;AAC3C;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,EAAE,QAAQ,OAAO;AAC1B,MAAM;EACJC,SAAS;EACTC,KAAK;EACLC;AACF,CAAC,GAAGN,UAAU;;AAEd;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMO,sBAAsB,CAAC;EAC1CC,WAAWA,CAAA,EAAG;IACZT,eAAe,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,CAAC;IACpDA,eAAe,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAChDA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvCA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAEE,IAAI,CAAC;IACnC;AACJ;AACA;IACIF,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;IACtC;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC;IAC9C;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACrCA,eAAe,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;EAC9C;EACAU,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,IAAI;EAClB;EACAC,OAAOA,CAACD,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EACAE,OAAOA,CAAA,EAAG;IACR,OAAOV,QAAQ,CAACW,cAAc;EAChC;EACAC,IAAIA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,eAAe,GAAGF,KAAK,CAACG,YAAY,CAAC,CAAC,CAACD,eAAe;IAC3D,IAAI,CAACE,mBAAmB,GAAGJ,KAAK,CAACG,YAAY,CAAC,CAAC,CAACC,mBAAmB;IACnE,MAAM;MACJC,eAAe;MACfC,YAAY;MACZC;IACF,CAAC,GAAG,IAAI,CAACL,eAAe;IACxB,MAAM;MACJM,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACvB,IAAI,CAACC,KAAK,GAAGL,WAAW,CAAC;MACvBC,EAAE;MACFC,EAAE;MACFI,UAAU,EAAE;QACV;QACAC,UAAU,EAAET,eAAe,CAAC;UAC1BU,MAAM,EAAET,YAAY,CAAC;YACnBU,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3BC,IAAI,EAAE7B,EAAE,CAAC8B;UACX,CAAC,CAAC;UACFC,IAAI,EAAE;QACR,CAAC;MACH,CAAC;MACD;MACAT,QAAQ,EAAE3B,aAAa,CAACA,aAAa,CAAC;QACpC;QACAqC,SAAS,EAAE;MACb,CAAC,EAAEV,QAAQ,CAAC,EAAE,IAAI,CAACT,MAAM,IAAI,IAAI,CAACoB,wBAAwB,CAAC,IAAI,CAACpB,MAAM,CAAC,CAAC;MACxEqB,KAAK,EAAE;QACLC,MAAM,EAAE;MACV,CAAC;MACDC,KAAK,EAAE,CAAC;MACRC,KAAK,EAAE;QACL;QACAF,MAAM,EAAE,IAAI,CAAC7B,OAAO,CAAC,CAAC,KAAK;MAC7B;IACF,CAAC,CAAC;EACJ;EACAgC,MAAMA,CAAC1B,KAAK,EAAE2B,GAAG,EAAE;IACjB,MAAMC,aAAa,GAAG5B,KAAK,CAAC6B,iBAAiB,CAACC,gBAAgB,CAAC,CAAC;IAChE,MAAM;MACJC,cAAc;MACdC,eAAe;MACfC;IACF,CAAC,GAAG,IAAI,CAAC/B,eAAe;IACxB,MAAM;MACJgC,KAAK;MACLC;IACF,CAAC,GAAGH,eAAe,CAAC,CAAC;IACrBD,cAAc,CAAC,IAAI,CAACK,cAAc,GAAG,IAAI,GAAGR,aAAa,CAACS,WAAW,CAAC,CAAC,EAAE,MAAM;MAC7EJ,KAAK,CAAC;QACJK,WAAW,EAAEV,aAAa,CAACS,WAAW,CAAC,CAAC;QACxCE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACnBjB,KAAK,EAAE,CAAC;QACRkB,OAAO,EAAE;MACX,CAAC,CAAC;MACF,MAAMC,cAAc,GAAG1D,aAAa,CAAC;QACnC2D,YAAY,EAAE,GAAG;QACjBtB,SAAS,EAAEQ,aAAa,CAACe,UAAU,CAAC,CAAC;QACrC;QACAC,cAAc,EAAE,CAACV,KAAK,EAAEC,MAAM;MAChC,CAAC,EAAE,IAAI,CAACd,wBAAwB,CAAC,IAAI,CAACwB,eAAe,CAAC,CAAC;MACvD,IAAIlB,GAAG,EAAE;QACPc,cAAc,CAACC,YAAY,GAAG,GAAG;QACjCD,cAAc,CAACK,UAAU,GAAGnB,GAAG;MACjC;MACA,IAAI,CAACf,KAAK,CAACmC,IAAI,CAAC;QACdrC,QAAQ,EAAE+B;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EACAO,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,OAAO;EACrB;EACAC,UAAUA,CAACD,OAAO,EAAE;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EACAE,iBAAiBA,CAACf,cAAc,EAAE;IAChC,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC;EACAgB,aAAaA,CAACnD,MAAM,EAAE;IACpB,IAAI,CAAC4C,eAAe,GAAG9D,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC8D,eAAe,CAAC,EAAE5C,MAAM,CAAC;EACvF;EACAU,YAAYA,CAAA,EAAG;IACb,MAAM,IAAI0C,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAhC,wBAAwBA,CAACiC,OAAO,EAAE;IAChC,MAAM5C,QAAQ,GAAG,CAAC,CAAC;IACnB6C,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,OAAO,CAACC,UAAU,IAAI;MACzC;MACA,IAAI,CAACpE,KAAK,CAACgE,OAAO,CAACI,UAAU,CAAC,CAAC,EAAE;QAC/BhD,QAAQ,CAAC,KAAKnB,UAAU,CAACF,SAAS,CAACqE,UAAU,CAAC,CAAC,EAAE,CAAC;QAClD;QACAJ,OAAO,CAACI,UAAU,CAAC;MACrB;IACF,CAAC,CAAC;IACF,OAAOhD,QAAQ;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}