{"ast":null,"code":"// src/device/DeviceCache.ts\nimport { TransparentBlack, bindingsDescriptorCopy, bindingsDescriptorEquals, inputLayoutDescriptorCopy, inputLayoutDescriptorEquals, renderPipelineDescriptorCopy, renderPipelineDescriptorEquals } from \"@antv/g-device-api\";\nimport { HashMap, hashCodeNumberFinish, hashCodeNumberUpdate, nullHashFunc } from \"./utils/HashMap\";\nfunction blendStateHash(hash, a) {\n  hash = hashCodeNumberUpdate(hash, a.blendMode);\n  hash = hashCodeNumberUpdate(hash, a.blendSrcFactor);\n  hash = hashCodeNumberUpdate(hash, a.blendDstFactor);\n  return hash;\n}\nfunction attachmentStateHash(hash, a) {\n  hash = blendStateHash(hash, a.rgbBlendState);\n  hash = blendStateHash(hash, a.alphaBlendState);\n  hash = hashCodeNumberUpdate(hash, a.channelWriteMask);\n  return hash;\n}\nfunction colorHash(hash, a) {\n  hash = hashCodeNumberUpdate(hash, a.r << 24 | a.g << 16 | a.b << 8 | a.a);\n  return hash;\n}\nfunction megaStateDescriptorHash(hash, a) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  for (let i = 0; i < a.attachmentsState.length; i++) hash = attachmentStateHash(hash, a.attachmentsState[i]);\n  hash = colorHash(hash, a.blendConstant || TransparentBlack);\n  hash = hashCodeNumberUpdate(hash, a.depthCompare);\n  hash = hashCodeNumberUpdate(hash, a.depthWrite ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, (_a = a.stencilFront) == null ? void 0 : _a.compare);\n  hash = hashCodeNumberUpdate(hash, (_b = a.stencilFront) == null ? void 0 : _b.passOp);\n  hash = hashCodeNumberUpdate(hash, (_c = a.stencilFront) == null ? void 0 : _c.failOp);\n  hash = hashCodeNumberUpdate(hash, (_d = a.stencilFront) == null ? void 0 : _d.depthFailOp);\n  hash = hashCodeNumberUpdate(hash, (_e = a.stencilBack) == null ? void 0 : _e.compare);\n  hash = hashCodeNumberUpdate(hash, (_f = a.stencilBack) == null ? void 0 : _f.passOp);\n  hash = hashCodeNumberUpdate(hash, (_g = a.stencilBack) == null ? void 0 : _g.failOp);\n  hash = hashCodeNumberUpdate(hash, (_h = a.stencilBack) == null ? void 0 : _h.depthFailOp);\n  hash = hashCodeNumberUpdate(hash, a.stencilWrite ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, a.cullMode);\n  hash = hashCodeNumberUpdate(hash, a.frontFace ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, a.polygonOffset ? 1 : 0);\n  return hash;\n}\nfunction renderPipelineDescriptorHash(a) {\n  let hash = 0;\n  hash = hashCodeNumberUpdate(hash, a.program.id);\n  if (a.inputLayout !== null) hash = hashCodeNumberUpdate(hash, a.inputLayout.id);\n  hash = megaStateDescriptorHash(hash, a.megaStateDescriptor);\n  for (let i = 0; i < a.colorAttachmentFormats.length; i++) hash = hashCodeNumberUpdate(hash, a.colorAttachmentFormats[i] || 0);\n  hash = hashCodeNumberUpdate(hash, a.depthStencilAttachmentFormat || 0);\n  return hashCodeNumberFinish(hash);\n}\nfunction bindingsDescriptorHash(a) {\n  let hash = 0;\n  if (a.samplerBindings) {\n    for (let i = 0; i < a.samplerBindings.length; i++) {\n      const binding = a.samplerBindings[i];\n      if (binding !== null && binding.texture !== null) hash = hashCodeNumberUpdate(hash, binding.texture.id);\n    }\n  }\n  if (a.uniformBufferBindings) {\n    for (let i = 0; i < a.uniformBufferBindings.length; i++) {\n      const binding = a.uniformBufferBindings[i];\n      if (binding !== null && binding.buffer !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.buffer.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n        hash = hashCodeNumberUpdate(hash, binding.offset);\n        hash = hashCodeNumberUpdate(hash, binding.size);\n      }\n    }\n  }\n  if (a.storageBufferBindings) {\n    for (let i = 0; i < a.storageBufferBindings.length; i++) {\n      const binding = a.storageBufferBindings[i];\n      if (binding !== null && binding.buffer !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.buffer.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n        hash = hashCodeNumberUpdate(hash, binding.offset);\n        hash = hashCodeNumberUpdate(hash, binding.size);\n      }\n    }\n  }\n  if (a.storageTextureBindings) {\n    for (let i = 0; i < a.storageTextureBindings.length; i++) {\n      const binding = a.storageTextureBindings[i];\n      if (binding !== null && binding.texture !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.texture.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n      }\n    }\n  }\n  return hashCodeNumberFinish(hash);\n}\nfunction programDescriptorEquals(a, b) {\n  var _a, _b, _c, _d;\n  return ((_a = a.vertex) == null ? void 0 : _a.glsl) === ((_b = b.vertex) == null ? void 0 : _b.glsl) && ((_c = a.fragment) == null ? void 0 : _c.glsl) === ((_d = b.fragment) == null ? void 0 : _d.glsl);\n}\nfunction programDescriptorCopy(a) {\n  var _a, _b;\n  return {\n    vertex: {\n      glsl: (_a = a.vertex) == null ? void 0 : _a.glsl\n    },\n    fragment: {\n      glsl: (_b = a.fragment) == null ? void 0 : _b.glsl\n    }\n  };\n}\nvar RenderCache = class {\n  constructor(device) {\n    this.device = device;\n    this.bindingsCache = new HashMap(bindingsDescriptorEquals, bindingsDescriptorHash);\n    this.renderPipelinesCache = new HashMap(renderPipelineDescriptorEquals, renderPipelineDescriptorHash);\n    this.inputLayoutsCache = new HashMap(inputLayoutDescriptorEquals, nullHashFunc);\n    this.programCache = new HashMap(programDescriptorEquals, nullHashFunc);\n  }\n  createBindings(descriptor) {\n    var _a;\n    let bindings = this.bindingsCache.get(descriptor);\n    if (bindings === null) {\n      const descriptorCopy = bindingsDescriptorCopy(descriptor);\n      descriptorCopy.uniformBufferBindings = (_a = descriptorCopy.uniformBufferBindings) == null ? void 0 : _a.filter(({\n        size\n      }) => size && size > 0);\n      bindings = this.device.createBindings(descriptorCopy);\n      this.bindingsCache.add(descriptorCopy, bindings);\n    }\n    return bindings;\n  }\n  createRenderPipeline(descriptor) {\n    let renderPipeline = this.renderPipelinesCache.get(descriptor);\n    if (renderPipeline === null) {\n      const descriptorCopy = renderPipelineDescriptorCopy(descriptor);\n      descriptorCopy.colorAttachmentFormats = descriptorCopy.colorAttachmentFormats.filter(f => f);\n      renderPipeline = this.device.createRenderPipeline(descriptorCopy);\n      this.renderPipelinesCache.add(descriptorCopy, renderPipeline);\n    }\n    return renderPipeline;\n  }\n  createInputLayout(descriptor) {\n    descriptor.vertexBufferDescriptors = descriptor.vertexBufferDescriptors.filter(d => !!d);\n    let inputLayout = this.inputLayoutsCache.get(descriptor);\n    if (inputLayout === null) {\n      const descriptorCopy = inputLayoutDescriptorCopy(descriptor);\n      inputLayout = this.device.createInputLayout(descriptorCopy);\n      this.inputLayoutsCache.add(descriptorCopy, inputLayout);\n    }\n    return inputLayout;\n  }\n  createProgram(descriptor) {\n    let program = this.programCache.get(descriptor);\n    if (program === null) {\n      const descriptorCopy = programDescriptorCopy(descriptor);\n      program = this.device.createProgram(descriptor);\n      this.programCache.add(descriptorCopy, program);\n    }\n    return program;\n  }\n  destroy() {\n    for (const bindings of this.bindingsCache.values()) bindings.destroy();\n    for (const renderPipeline of this.renderPipelinesCache.values()) renderPipeline.destroy();\n    for (const inputLayout of this.inputLayoutsCache.values()) inputLayout.destroy();\n    for (const program of this.programCache.values()) program.destroy();\n    this.bindingsCache.clear();\n    this.renderPipelinesCache.clear();\n    this.inputLayoutsCache.clear();\n    this.programCache.clear();\n  }\n};\nexport { RenderCache };","map":{"version":3,"names":["TransparentBlack","bindingsDescriptorCopy","bindingsDescriptorEquals","inputLayoutDescriptorCopy","inputLayoutDescriptorEquals","renderPipelineDescriptorCopy","renderPipelineDescriptorEquals","HashMap","hashCodeNumberFinish","hashCodeNumberUpdate","nullHashFunc","blendStateHash","hash","a","blendMode","blendSrcFactor","blendDstFactor","attachmentStateHash","rgbBlendState","alphaBlendState","channelWriteMask","colorHash","r","g","b","megaStateDescriptorHash","_a","_b","_c","_d","_e","_f","_g","_h","i","attachmentsState","length","blendConstant","depthCompare","depthWrite","stencilFront","compare","passOp","failOp","depthFailOp","stencilBack","stencilWrite","cullMode","frontFace","polygonOffset","renderPipelineDescriptorHash","program","id","inputLayout","megaStateDescriptor","colorAttachmentFormats","depthStencilAttachmentFormat","bindingsDescriptorHash","samplerBindings","binding","texture","uniformBufferBindings","buffer","offset","size","storageBufferBindings","storageTextureBindings","programDescriptorEquals","vertex","glsl","fragment","programDescriptorCopy","RenderCache","constructor","device","bindingsCache","renderPipelinesCache","inputLayoutsCache","programCache","createBindings","descriptor","bindings","get","descriptorCopy","filter","add","createRenderPipeline","renderPipeline","f","createInputLayout","vertexBufferDescriptors","d","createProgram","destroy","values","clear"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-renderer/es/device/DeviceCache.js"],"sourcesContent":["// src/device/DeviceCache.ts\nimport {\n  TransparentBlack,\n  bindingsDescriptorCopy,\n  bindingsDescriptorEquals,\n  inputLayoutDescriptorCopy,\n  inputLayoutDescriptorEquals,\n  renderPipelineDescriptorCopy,\n  renderPipelineDescriptorEquals\n} from \"@antv/g-device-api\";\nimport { HashMap, hashCodeNumberFinish, hashCodeNumberUpdate, nullHashFunc } from \"./utils/HashMap\";\nfunction blendStateHash(hash, a) {\n  hash = hashCodeNumberUpdate(hash, a.blendMode);\n  hash = hashCodeNumberUpdate(hash, a.blendSrcFactor);\n  hash = hashCodeNumberUpdate(hash, a.blendDstFactor);\n  return hash;\n}\nfunction attachmentStateHash(hash, a) {\n  hash = blendStateHash(hash, a.rgbBlendState);\n  hash = blendStateHash(hash, a.alphaBlendState);\n  hash = hashCodeNumberUpdate(hash, a.channelWriteMask);\n  return hash;\n}\nfunction colorHash(hash, a) {\n  hash = hashCodeNumberUpdate(hash, a.r << 24 | a.g << 16 | a.b << 8 | a.a);\n  return hash;\n}\nfunction megaStateDescriptorHash(hash, a) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  for (let i = 0; i < a.attachmentsState.length; i++)\n    hash = attachmentStateHash(hash, a.attachmentsState[i]);\n  hash = colorHash(hash, a.blendConstant || TransparentBlack);\n  hash = hashCodeNumberUpdate(hash, a.depthCompare);\n  hash = hashCodeNumberUpdate(hash, a.depthWrite ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, (_a = a.stencilFront) == null ? void 0 : _a.compare);\n  hash = hashCodeNumberUpdate(hash, (_b = a.stencilFront) == null ? void 0 : _b.passOp);\n  hash = hashCodeNumberUpdate(hash, (_c = a.stencilFront) == null ? void 0 : _c.failOp);\n  hash = hashCodeNumberUpdate(hash, (_d = a.stencilFront) == null ? void 0 : _d.depthFailOp);\n  hash = hashCodeNumberUpdate(hash, (_e = a.stencilBack) == null ? void 0 : _e.compare);\n  hash = hashCodeNumberUpdate(hash, (_f = a.stencilBack) == null ? void 0 : _f.passOp);\n  hash = hashCodeNumberUpdate(hash, (_g = a.stencilBack) == null ? void 0 : _g.failOp);\n  hash = hashCodeNumberUpdate(hash, (_h = a.stencilBack) == null ? void 0 : _h.depthFailOp);\n  hash = hashCodeNumberUpdate(hash, a.stencilWrite ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, a.cullMode);\n  hash = hashCodeNumberUpdate(hash, a.frontFace ? 1 : 0);\n  hash = hashCodeNumberUpdate(hash, a.polygonOffset ? 1 : 0);\n  return hash;\n}\nfunction renderPipelineDescriptorHash(a) {\n  let hash = 0;\n  hash = hashCodeNumberUpdate(hash, a.program.id);\n  if (a.inputLayout !== null)\n    hash = hashCodeNumberUpdate(hash, a.inputLayout.id);\n  hash = megaStateDescriptorHash(hash, a.megaStateDescriptor);\n  for (let i = 0; i < a.colorAttachmentFormats.length; i++)\n    hash = hashCodeNumberUpdate(hash, a.colorAttachmentFormats[i] || 0);\n  hash = hashCodeNumberUpdate(hash, a.depthStencilAttachmentFormat || 0);\n  return hashCodeNumberFinish(hash);\n}\nfunction bindingsDescriptorHash(a) {\n  let hash = 0;\n  if (a.samplerBindings) {\n    for (let i = 0; i < a.samplerBindings.length; i++) {\n      const binding = a.samplerBindings[i];\n      if (binding !== null && binding.texture !== null)\n        hash = hashCodeNumberUpdate(hash, binding.texture.id);\n    }\n  }\n  if (a.uniformBufferBindings) {\n    for (let i = 0; i < a.uniformBufferBindings.length; i++) {\n      const binding = a.uniformBufferBindings[i];\n      if (binding !== null && binding.buffer !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.buffer.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n        hash = hashCodeNumberUpdate(hash, binding.offset);\n        hash = hashCodeNumberUpdate(hash, binding.size);\n      }\n    }\n  }\n  if (a.storageBufferBindings) {\n    for (let i = 0; i < a.storageBufferBindings.length; i++) {\n      const binding = a.storageBufferBindings[i];\n      if (binding !== null && binding.buffer !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.buffer.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n        hash = hashCodeNumberUpdate(hash, binding.offset);\n        hash = hashCodeNumberUpdate(hash, binding.size);\n      }\n    }\n  }\n  if (a.storageTextureBindings) {\n    for (let i = 0; i < a.storageTextureBindings.length; i++) {\n      const binding = a.storageTextureBindings[i];\n      if (binding !== null && binding.texture !== null) {\n        hash = hashCodeNumberUpdate(hash, binding.texture.id);\n        hash = hashCodeNumberUpdate(hash, binding.binding);\n      }\n    }\n  }\n  return hashCodeNumberFinish(hash);\n}\nfunction programDescriptorEquals(a, b) {\n  var _a, _b, _c, _d;\n  return ((_a = a.vertex) == null ? void 0 : _a.glsl) === ((_b = b.vertex) == null ? void 0 : _b.glsl) && ((_c = a.fragment) == null ? void 0 : _c.glsl) === ((_d = b.fragment) == null ? void 0 : _d.glsl);\n}\nfunction programDescriptorCopy(a) {\n  var _a, _b;\n  return {\n    vertex: {\n      glsl: (_a = a.vertex) == null ? void 0 : _a.glsl\n    },\n    fragment: {\n      glsl: (_b = a.fragment) == null ? void 0 : _b.glsl\n    }\n  };\n}\nvar RenderCache = class {\n  constructor(device) {\n    this.device = device;\n    this.bindingsCache = new HashMap(\n      bindingsDescriptorEquals,\n      bindingsDescriptorHash\n    );\n    this.renderPipelinesCache = new HashMap(\n      renderPipelineDescriptorEquals,\n      renderPipelineDescriptorHash\n    );\n    this.inputLayoutsCache = new HashMap(\n      inputLayoutDescriptorEquals,\n      nullHashFunc\n    );\n    this.programCache = new HashMap(\n      programDescriptorEquals,\n      nullHashFunc\n    );\n  }\n  createBindings(descriptor) {\n    var _a;\n    let bindings = this.bindingsCache.get(descriptor);\n    if (bindings === null) {\n      const descriptorCopy = bindingsDescriptorCopy(descriptor);\n      descriptorCopy.uniformBufferBindings = (_a = descriptorCopy.uniformBufferBindings) == null ? void 0 : _a.filter(\n        ({ size }) => size && size > 0\n      );\n      bindings = this.device.createBindings(descriptorCopy);\n      this.bindingsCache.add(descriptorCopy, bindings);\n    }\n    return bindings;\n  }\n  createRenderPipeline(descriptor) {\n    let renderPipeline = this.renderPipelinesCache.get(descriptor);\n    if (renderPipeline === null) {\n      const descriptorCopy = renderPipelineDescriptorCopy(descriptor);\n      descriptorCopy.colorAttachmentFormats = descriptorCopy.colorAttachmentFormats.filter(\n        (f) => f\n      );\n      renderPipeline = this.device.createRenderPipeline(descriptorCopy);\n      this.renderPipelinesCache.add(descriptorCopy, renderPipeline);\n    }\n    return renderPipeline;\n  }\n  createInputLayout(descriptor) {\n    descriptor.vertexBufferDescriptors = descriptor.vertexBufferDescriptors.filter((d) => !!d);\n    let inputLayout = this.inputLayoutsCache.get(descriptor);\n    if (inputLayout === null) {\n      const descriptorCopy = inputLayoutDescriptorCopy(descriptor);\n      inputLayout = this.device.createInputLayout(descriptorCopy);\n      this.inputLayoutsCache.add(descriptorCopy, inputLayout);\n    }\n    return inputLayout;\n  }\n  createProgram(descriptor) {\n    let program = this.programCache.get(descriptor);\n    if (program === null) {\n      const descriptorCopy = programDescriptorCopy(descriptor);\n      program = this.device.createProgram(descriptor);\n      this.programCache.add(descriptorCopy, program);\n    }\n    return program;\n  }\n  destroy() {\n    for (const bindings of this.bindingsCache.values())\n      bindings.destroy();\n    for (const renderPipeline of this.renderPipelinesCache.values())\n      renderPipeline.destroy();\n    for (const inputLayout of this.inputLayoutsCache.values())\n      inputLayout.destroy();\n    for (const program of this.programCache.values())\n      program.destroy();\n    this.bindingsCache.clear();\n    this.renderPipelinesCache.clear();\n    this.inputLayoutsCache.clear();\n    this.programCache.clear();\n  }\n};\nexport {\n  RenderCache\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}