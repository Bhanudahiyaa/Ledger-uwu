{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../../shaders/post-processing/blur.glsl' */\nconst blur = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\n\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_BlurDir: [1.0, 0.0];\\n\\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\nvoid main() {\\n  gl_FragColor = blur9(u_Texture, v_UV, u_ViewportSize, u_BlurDir);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nconst {\n  isNil\n} = lodashUtil;\nexport default class BlurVPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('blur-pass', {\n      vs: quad,\n      fs: blur\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('blur-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    if (!isNil(options.blurRadius)) {\n      uniforms.u_BlurDir = [0, options.blurRadius];\n    }\n    return uniforms;\n  }\n}","map":{"version":3,"names":["_objectSpread","lodashUtil","blur","quad","BasePostProcessingPass","isNil","BlurVPass","setupShaders","shaderModuleService","registerModule","vs","fs","uniforms","getModule","width","height","rendererService","getViewportSize","u_ViewportSize","convertOptionsToUniforms","options","blurRadius","u_BlurDir"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/BlurVPass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../../shaders/post-processing/blur.glsl' */\nconst blur = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\n\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_BlurDir: [1.0, 0.0];\\n\\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\nvoid main() {\\n  gl_FragColor = blur9(u_Texture, v_UV, u_ViewportSize, u_BlurDir);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nconst {\n  isNil\n} = lodashUtil;\nexport default class BlurVPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('blur-pass', {\n      vs: quad,\n      fs: blur\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('blur-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    if (!isNil(options.blurRadius)) {\n      uniforms.u_BlurDir = [0, options.blurRadius];\n    }\n    return uniforms;\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,SAASC,UAAU,QAAQ,gBAAgB;AAC3C;AACA,MAAMC,IAAI,GAAG,00BAA00B;AACv1B;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,MAAM;EACJC;AACF,CAAC,GAAGJ,UAAU;AACd,eAAe,MAAMK,SAAS,SAASF,sBAAsB,CAAC;EAC5DG,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,WAAW,EAAE;MACnDC,EAAE,EAAEP,IAAI;MACRQ,EAAE,EAAET;IACN,CAAC,CAAC;IACF,MAAM;MACJQ,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACJ,mBAAmB,CAACK,SAAS,CAAC,WAAW,CAAC;IACnD,MAAM;MACJC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC,CAAC;IAC1C,OAAO;MACLP,EAAE;MACFC,EAAE;MACFC,QAAQ,EAAEZ,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEY,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QACvDM,cAAc,EAAE,CAACJ,KAAK,EAAEC,MAAM;MAChC,CAAC;IACH,CAAC;EACH;EACAI,wBAAwBA,CAACC,OAAO,EAAE;IAChC,MAAMR,QAAQ,GAAG,CAAC,CAAC;IACnB,IAAI,CAACP,KAAK,CAACe,OAAO,CAACC,UAAU,CAAC,EAAE;MAC9BT,QAAQ,CAACU,SAAS,GAAG,CAAC,CAAC,EAAEF,OAAO,CAACC,UAAU,CAAC;IAC9C;IACA,OAAOT,QAAQ;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}