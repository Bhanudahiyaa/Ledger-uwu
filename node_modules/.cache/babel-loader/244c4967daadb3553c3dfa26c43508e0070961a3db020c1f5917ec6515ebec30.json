{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LngLat, earthRadius } from \"./lng_lat\";\n/*\n * The average circumference of the world in meters.\n */\nconst earthCircumfrence = 2 * Math.PI * earthRadius; // meters\n\n/*\n * The circumference at a line of latitude in meters.\n */\nfunction circumferenceAtLatitude(latitude) {\n  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);\n}\nexport function mercatorXfromLng(lng) {\n  return (180 + lng) / 360;\n}\nexport function mercatorYfromLat(lat) {\n  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;\n}\nexport function mercatorZfromAltitude(altitude, lat) {\n  return altitude / circumferenceAtLatitude(lat);\n}\nexport function lngFromMercatorX(x) {\n  return x * 360 - 180;\n}\nexport function latFromMercatorY(y) {\n  const y2 = 180 - y * 360;\n  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\nexport function altitudeFromMercatorZ(z, y) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param lat - Latitude\n * @returns scale factor\n */\nexport function mercatorScale(lat) {\n  return 1 / Math.cos(lat * Math.PI / 180);\n}\n\n/**\n * A `MercatorCoordinate` object represents a projected three dimensional position.\n *\n * `MercatorCoordinate` uses the web mercator projection ([EPSG:3857](https://epsg.io/3857)) with slightly different units:\n *\n * - the size of 1 unit is the width of the projected world instead of the \"mercator meter\"\n * - the origin of the coordinate space is at the north-west corner instead of the middle\n *\n * For example, `MercatorCoordinate(0, 0, 0)` is the north-west corner of the mercator world and\n * `MercatorCoordinate(1, 1, 0)` is the south-east corner. If you are familiar with\n * [vector tiles](https://github.com/mapbox/vector-tile-spec) it may be helpful to think\n * of the coordinate space as the `0/0/0` tile with an extent of `1`.\n *\n * The `z` dimension of `MercatorCoordinate` is conformal. A cube in the mercator coordinate space would be rendered as a cube.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let nullIsland = new MercatorCoordinate(0.5, 0.5, 0);\n * ```\n * @see [Add a custom style layer](https://maplibre.org/maplibre-gl-js/docs/examples/custom-style-layer/)\n */\nexport class MercatorCoordinate {\n  /**\n   * @param x - The x component of the position.\n   * @param y - The y component of the position.\n   * @param z - The z component of the position.\n   */\n  constructor(x, y, z = 0) {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"z\", void 0);\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  /**\n   * Project a `LngLat` to a `MercatorCoordinate`.\n   *\n   * @param lngLatLike - The location to project.\n   * @param altitude - The altitude in meters of the position.\n   * @returns The projected mercator coordinate.\n   * @example\n   * ```ts\n   * let coord = MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\n   * coord; // MercatorCoordinate(0.5, 0.5, 0)\n   * ```\n   */\n  static fromLngLat(lngLatLike, altitude = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n    return new MercatorCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));\n  }\n\n  /**\n   * Returns the `LngLat` for the coordinate.\n   *\n   * @returns The `LngLat` object.\n   * @example\n   * ```ts\n   * let coord = new MercatorCoordinate(0.5, 0.5, 0);\n   * let lngLat = coord.toLngLat(); // LngLat(0, 0)\n   * ```\n   */\n  toLngLat() {\n    return new LngLat(lngFromMercatorX(this.x), latFromMercatorY(this.y));\n  }\n\n  /**\n   * Returns the altitude in meters of the coordinate.\n   *\n   * @returns The altitude in meters.\n   * @example\n   * ```ts\n   * let coord = new MercatorCoordinate(0, 0, 0.02);\n   * coord.toAltitude(); // 6914.281956295339\n   * ```\n   */\n  toAltitude() {\n    return altitudeFromMercatorZ(this.z, this.y);\n  }\n\n  /**\n   * Returns the distance of 1 meter in `MercatorCoordinate` units at this latitude.\n   *\n   * For coordinates in real world units using meters, this naturally provides the scale\n   * to transform into `MercatorCoordinate`s.\n   *\n   * @returns Distance of 1 meter in `MercatorCoordinate` units.\n   */\n  meterInMercatorCoordinateUnits() {\n    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n    return 1 / earthCircumfrence * mercatorScale(latFromMercatorY(this.y));\n  }\n}","map":{"version":3,"names":["_defineProperty","LngLat","earthRadius","earthCircumfrence","Math","PI","circumferenceAtLatitude","latitude","cos","mercatorXfromLng","lng","mercatorYfromLat","lat","log","tan","mercatorZfromAltitude","altitude","lngFromMercatorX","x","latFromMercatorY","y","y2","atan","exp","altitudeFromMercatorZ","z","mercatorScale","MercatorCoordinate","constructor","fromLngLat","lngLatLike","lngLat","convert","toLngLat","toAltitude","meterInMercatorCoordinateUnits"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-map/es/map/geo/mercator_coordinate.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LngLat, earthRadius } from \"./lng_lat\";\n/*\n * The average circumference of the world in meters.\n */\nconst earthCircumfrence = 2 * Math.PI * earthRadius; // meters\n\n/*\n * The circumference at a line of latitude in meters.\n */\nfunction circumferenceAtLatitude(latitude) {\n  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);\n}\nexport function mercatorXfromLng(lng) {\n  return (180 + lng) / 360;\n}\nexport function mercatorYfromLat(lat) {\n  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;\n}\nexport function mercatorZfromAltitude(altitude, lat) {\n  return altitude / circumferenceAtLatitude(lat);\n}\nexport function lngFromMercatorX(x) {\n  return x * 360 - 180;\n}\nexport function latFromMercatorY(y) {\n  const y2 = 180 - y * 360;\n  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\nexport function altitudeFromMercatorZ(z, y) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param lat - Latitude\n * @returns scale factor\n */\nexport function mercatorScale(lat) {\n  return 1 / Math.cos(lat * Math.PI / 180);\n}\n\n/**\n * A `MercatorCoordinate` object represents a projected three dimensional position.\n *\n * `MercatorCoordinate` uses the web mercator projection ([EPSG:3857](https://epsg.io/3857)) with slightly different units:\n *\n * - the size of 1 unit is the width of the projected world instead of the \"mercator meter\"\n * - the origin of the coordinate space is at the north-west corner instead of the middle\n *\n * For example, `MercatorCoordinate(0, 0, 0)` is the north-west corner of the mercator world and\n * `MercatorCoordinate(1, 1, 0)` is the south-east corner. If you are familiar with\n * [vector tiles](https://github.com/mapbox/vector-tile-spec) it may be helpful to think\n * of the coordinate space as the `0/0/0` tile with an extent of `1`.\n *\n * The `z` dimension of `MercatorCoordinate` is conformal. A cube in the mercator coordinate space would be rendered as a cube.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let nullIsland = new MercatorCoordinate(0.5, 0.5, 0);\n * ```\n * @see [Add a custom style layer](https://maplibre.org/maplibre-gl-js/docs/examples/custom-style-layer/)\n */\nexport class MercatorCoordinate {\n  /**\n   * @param x - The x component of the position.\n   * @param y - The y component of the position.\n   * @param z - The z component of the position.\n   */\n  constructor(x, y, z = 0) {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"z\", void 0);\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  /**\n   * Project a `LngLat` to a `MercatorCoordinate`.\n   *\n   * @param lngLatLike - The location to project.\n   * @param altitude - The altitude in meters of the position.\n   * @returns The projected mercator coordinate.\n   * @example\n   * ```ts\n   * let coord = MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\n   * coord; // MercatorCoordinate(0.5, 0.5, 0)\n   * ```\n   */\n  static fromLngLat(lngLatLike, altitude = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n    return new MercatorCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));\n  }\n\n  /**\n   * Returns the `LngLat` for the coordinate.\n   *\n   * @returns The `LngLat` object.\n   * @example\n   * ```ts\n   * let coord = new MercatorCoordinate(0.5, 0.5, 0);\n   * let lngLat = coord.toLngLat(); // LngLat(0, 0)\n   * ```\n   */\n  toLngLat() {\n    return new LngLat(lngFromMercatorX(this.x), latFromMercatorY(this.y));\n  }\n\n  /**\n   * Returns the altitude in meters of the coordinate.\n   *\n   * @returns The altitude in meters.\n   * @example\n   * ```ts\n   * let coord = new MercatorCoordinate(0, 0, 0.02);\n   * coord.toAltitude(); // 6914.281956295339\n   * ```\n   */\n  toAltitude() {\n    return altitudeFromMercatorZ(this.z, this.y);\n  }\n\n  /**\n   * Returns the distance of 1 meter in `MercatorCoordinate` units at this latitude.\n   *\n   * For coordinates in real world units using meters, this naturally provides the scale\n   * to transform into `MercatorCoordinate`s.\n   *\n   * @returns Distance of 1 meter in `MercatorCoordinate` units.\n   */\n  meterInMercatorCoordinateUnits() {\n    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n    return 1 / earthCircumfrence * mercatorScale(latFromMercatorY(this.y));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}