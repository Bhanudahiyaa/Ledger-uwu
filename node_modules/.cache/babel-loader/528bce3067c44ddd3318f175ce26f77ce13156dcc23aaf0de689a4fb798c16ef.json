{"ast":null,"code":"import graphlib from './graphlib';\nimport List from './data/list';\nconst Graph = graphlib.Graph;\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\n// module.exports = greedyFAS;\nconst DEFAULT_WEIGHT_FN = () => 1;\nconst greedyFAS = (g, weightFn) => {\n  var _a;\n  if (g.nodeCount() <= 1) return [];\n  const state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  const results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n  // Expand multi-edges\n  // @ts-ignore\n  return (_a = results.map(e => g.outEdges(e.v, e.w))) === null || _a === void 0 ? void 0 : _a.flat();\n};\nconst doGreedyFAS = (g, buckets, zeroIdx) => {\n  let results = [];\n  const sources = buckets[buckets.length - 1];\n  const sinks = buckets[0];\n  let entry;\n  while (g.nodeCount()) {\n    while (entry = sinks.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while (entry = sources.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n  return results;\n};\nconst removeNode = (g, buckets, zeroIdx, entry, collectPredecessors) => {\n  var _a, _b;\n  const results = collectPredecessors ? [] : undefined;\n  (_a = g.inEdges(entry.v)) === null || _a === void 0 ? void 0 : _a.forEach(edge => {\n    const weight = g.edge(edge);\n    const uEntry = g.node(edge.v);\n    if (collectPredecessors) {\n      results.push({\n        v: edge.v,\n        w: edge.w\n      });\n    }\n    if (uEntry.out === undefined) uEntry.out = 0;\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n  (_b = g.outEdges(entry.v)) === null || _b === void 0 ? void 0 : _b.forEach(edge => {\n    const weight = g.edge(edge);\n    const w = edge.w;\n    const wEntry = g.node(w);\n    if (wEntry.in === undefined) wEntry.in = 0;\n    wEntry.in -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n  g.removeNode(entry.v);\n  return results;\n};\nconst buildState = (g, weightFn) => {\n  const fasGraph = new Graph();\n  let maxIn = 0;\n  let maxOut = 0;\n  g.nodes().forEach(v => {\n    fasGraph.setNode(v, {\n      v,\n      \"in\": 0,\n      out: 0\n    });\n  });\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  g.edges().forEach(e => {\n    const prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    const weight = weightFn === null || weightFn === void 0 ? void 0 : weightFn(e);\n    const edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn = Math.max(maxIn, fasGraph.node(e.w)[\"in\"] += weight);\n  });\n  const buckets = [];\n  const rangeMax = maxOut + maxIn + 3;\n  for (let i = 0; i < rangeMax; i++) {\n    buckets.push(new List());\n  }\n  const zeroIdx = maxIn + 1;\n  fasGraph.nodes().forEach(v => {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n  return {\n    buckets,\n    zeroIdx,\n    graph: fasGraph\n  };\n};\nconst assignBucket = (buckets, zeroIdx, entry) => {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n};\nexport default greedyFAS;","map":{"version":3,"names":["graphlib","List","Graph","DEFAULT_WEIGHT_FN","greedyFAS","g","weightFn","nodeCount","state","buildState","results","doGreedyFAS","graph","buckets","zeroIdx","_a","map","e","outEdges","v","w","flat","sources","length","sinks","entry","dequeue","removeNode","i","concat","collectPredecessors","undefined","inEdges","forEach","edge","weight","uEntry","node","push","out","assignBucket","_b","wEntry","in","fasGraph","maxIn","maxOut","nodes","setNode","edges","prevWeight","edgeWeight","setEdge","Math","max","rangeMax","enqueue"],"sources":["../../../../src/layout/dagre/src/greedy-fas.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,aAAa;AAI9B,MAAMC,KAAK,GAAIF,QAAgB,CAACE,KAAK;AAGrC;;;;;;;AAOA;AAEA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,CAAC;AAEjC,MAAMC,SAAS,GAAGA,CAACC,CAAS,EAAEC,QAAuB,KAAI;;EACvD,IAAID,CAAC,CAACE,SAAS,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE;EACjC,MAAMC,KAAK,GAAGC,UAAU,CAACJ,CAAC,EAAEC,QAAQ,IAAIH,iBAAiB,CAAC;EAC1D,MAAMO,OAAO,GAAGC,WAAW,CAACH,KAAK,CAACI,KAAY,EAAEJ,KAAK,CAACK,OAAO,EAAEL,KAAK,CAACM,OAAO,CAAC;EAE7E;EACA;EACA,OAAO,CAAAC,EAAA,GAAAL,OAAO,CAACM,GAAG,CAAEC,CAAM,IAAKZ,CAAC,CAACa,QAAQ,CAACD,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC,CAAC,cAAAL,EAAA,uBAAAA,EAAA,CAAEM,IAAI,EAAE;AAC9D,CAAC;AAED,MAAMV,WAAW,GAAGA,CAACN,CAAS,EAAEQ,OAAY,EAAEC,OAAe,KAAI;EAC/D,IAAIJ,OAAO,GAAW,EAAE;EACxB,MAAMY,OAAO,GAAGT,OAAO,CAACA,OAAO,CAACU,MAAM,GAAG,CAAC,CAAC;EAC3C,MAAMC,KAAK,GAAGX,OAAO,CAAC,CAAC,CAAC;EAExB,IAAIY,KAAK;EACT,OAAOpB,CAAC,CAACE,SAAS,EAAE,EAAE;IACpB,OAAQkB,KAAK,GAAGD,KAAK,CAACE,OAAO,EAAE,EAAK;MAAEC,UAAU,CAACtB,CAAC,EAAEQ,OAAO,EAAEC,OAAO,EAAEW,KAAK,CAAC;;IAC5E,OAAQA,KAAK,GAAGH,OAAO,CAACI,OAAO,EAAE,EAAG;MAAEC,UAAU,CAACtB,CAAC,EAAEQ,OAAO,EAAEC,OAAO,EAAEW,KAAK,CAAC;;IAC5E,IAAIpB,CAAC,CAACE,SAAS,EAAE,EAAE;MACjB,KAAK,IAAIqB,CAAC,GAAGf,OAAO,CAACU,MAAM,GAAG,CAAC,EAAEK,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;QAC3CH,KAAK,GAAGZ,OAAO,CAACe,CAAC,CAAC,CAACF,OAAO,EAAE;QAC5B,IAAID,KAAK,EAAE;UACTf,OAAO,GAAGA,OAAO,CAACmB,MAAM,CAACF,UAAU,CAACtB,CAAC,EAAEQ,OAAO,EAAEC,OAAO,EAAEW,KAAK,EAAE,IAAI,CAAC,CAAC;UACtE;;;;;EAMR,OAAOf,OAAO;AAChB,CAAC;AAED,MAAMiB,UAAU,GAAGA,CAACtB,CAAS,EAAEQ,OAAY,EAAEC,OAAe,EAAEW,KAAU,EAAEK,mBAA6B,KAAI;;EACzG,MAAMpB,OAAO,GAAQoB,mBAAmB,GAAG,EAAE,GAAGC,SAAS;EAEzD,CAAAhB,EAAA,GAAAV,CAAC,CAAC2B,OAAO,CAACP,KAAK,CAACN,CAAC,CAAC,cAAAJ,EAAA,uBAAAA,EAAA,CAAEkB,OAAO,CAAEC,IAAI,IAAI;IACnC,MAAMC,MAAM,GAAQ9B,CAAC,CAAC6B,IAAI,CAACA,IAAI,CAAC;IAChC,MAAME,MAAM,GAAS/B,CAAC,CAACgC,IAAI,CAACH,IAAI,CAACf,CAAC,CAAC;IAEnC,IAAIW,mBAAmB,EAAE;MACvBpB,OAAO,CAAC4B,IAAI,CAAC;QAAEnB,CAAC,EAAEe,IAAI,CAACf,CAAC;QAAEC,CAAC,EAAEc,IAAI,CAACd;MAAC,CAAE,CAAC;;IAExC,IAAIgB,MAAM,CAACG,GAAG,KAAKR,SAAS,EAAEK,MAAM,CAACG,GAAG,GAAG,CAAC;IAC5CH,MAAM,CAACG,GAAG,IAAIJ,MAAM;IACpBK,YAAY,CAAC3B,OAAO,EAAEC,OAAO,EAAEsB,MAAM,CAAC;EACxC,CAAC,CAAC;EAEF,CAAAK,EAAA,GAAApC,CAAC,CAACa,QAAQ,CAACO,KAAK,CAACN,CAAC,CAAC,cAAAsB,EAAA,uBAAAA,EAAA,CAAER,OAAO,CAAEC,IAAI,IAAI;IACpC,MAAMC,MAAM,GAAQ9B,CAAC,CAAC6B,IAAI,CAACA,IAAI,CAAC;IAChC,MAAMd,CAAC,GAAGc,IAAI,CAACd,CAAC;IAChB,MAAMsB,MAAM,GAAGrC,CAAC,CAACgC,IAAI,CAACjB,CAAC,CAAC;IACxB,IAAIsB,MAAM,CAACC,EAAE,KAAKZ,SAAS,EAAEW,MAAM,CAACC,EAAE,GAAG,CAAC;IAC1CD,MAAM,CAACC,EAAE,IAAIR,MAAM;IACnBK,YAAY,CAAC3B,OAAO,EAAEC,OAAO,EAAE4B,MAAM,CAAC;EACxC,CAAC,CAAC;EAEFrC,CAAC,CAACsB,UAAU,CAACF,KAAK,CAACN,CAAC,CAAC;EAErB,OAAOT,OAAO;AAChB,CAAC;AAED,MAAMD,UAAU,GAAGA,CAACJ,CAAS,EAAEC,QAAkC,KAAI;EACnE,MAAMsC,QAAQ,GAAG,IAAI1C,KAAK,EAAE;EAC5B,IAAI2C,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,CAAC;EAEdzC,CAAC,CAAC0C,KAAK,EAAE,CAACd,OAAO,CAAEd,CAAC,IAAI;IACtByB,QAAQ,CAACI,OAAO,CAAC7B,CAAC,EAAE;MAAEA,CAAC;MAAE,IAAI,EAAE,CAAC;MAAEoB,GAAG,EAAE;IAAC,CAAE,CAAC;EAC7C,CAAC,CAAC;EAEF;EACA;EACAlC,CAAC,CAAC4C,KAAK,EAAE,CAAChB,OAAO,CAAEhB,CAAC,IAAI;IACtB,MAAMiC,UAAU,GAAGN,QAAQ,CAACV,IAAI,CAACjB,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC,IAAI,CAAC;IAC/C,MAAMe,MAAM,GAAG7B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGW,CAAC,CAAC;IAC5B,MAAMkC,UAAU,GAAGD,UAAU,GAAGf,MAAM;IACtCS,QAAQ,CAACQ,OAAO,CAACnC,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,EAAE+B,UAAU,CAAC;IACtCL,MAAM,GAAGO,IAAI,CAACC,GAAG,CAACR,MAAM,EAAEF,QAAQ,CAACP,IAAI,CAACpB,CAAC,CAACE,CAAC,CAAC,CAACoB,GAAG,IAAIJ,MAAM,CAAC;IAC3DU,KAAK,GAAIQ,IAAI,CAACC,GAAG,CAACT,KAAK,EAAGD,QAAQ,CAACP,IAAI,CAACpB,CAAC,CAACG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAKe,MAAM,CAAC;EAChE,CAAC,CAAC;EAEF,MAAMtB,OAAO,GAAQ,EAAE;EACvB,MAAM0C,QAAQ,GAAGT,MAAM,GAAGD,KAAK,GAAG,CAAC;EACnC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,QAAQ,EAAE3B,CAAC,EAAG,EAAE;IAClCf,OAAO,CAACyB,IAAI,CAAC,IAAIrC,IAAI,EAAE,CAAC;;EAE1B,MAAMa,OAAO,GAAG+B,KAAK,GAAG,CAAC;EAEzBD,QAAQ,CAACG,KAAK,EAAE,CAACd,OAAO,CAAEd,CAAS,IAAI;IACrCqB,YAAY,CAAC3B,OAAO,EAAEC,OAAO,EAAE8B,QAAQ,CAACP,IAAI,CAAClB,CAAC,CAAC,CAAC;EAClD,CAAC,CAAC;EAEF,OAAO;IAAEN,OAAO;IAAEC,OAAO;IAAEF,KAAK,EAAEgC;EAAQ,CAAE;AAC9C,CAAC;AAED,MAAMJ,YAAY,GAAGA,CAAC3B,OAAY,EAAEC,OAAe,EAAEW,KAAU,KAAI;EACjE,IAAI,CAACA,KAAK,CAACc,GAAG,EAAE;IACd1B,OAAO,CAAC,CAAC,CAAC,CAAC2C,OAAO,CAAC/B,KAAK,CAAC;GAC1B,MAAM,IAAI,CAACA,KAAK,CAAC,IAAI,CAAC,EAAE;IACvBZ,OAAO,CAACA,OAAO,CAACU,MAAM,GAAG,CAAC,CAAC,CAACiC,OAAO,CAAC/B,KAAK,CAAC;GAC3C,MAAM;IACLZ,OAAO,CAACY,KAAK,CAACc,GAAG,GAAGd,KAAK,CAAC,IAAI,CAAC,GAAGX,OAAO,CAAC,CAAC0C,OAAO,CAAC/B,KAAK,CAAC;;AAE7D,CAAC;AAGD,eAAerB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}