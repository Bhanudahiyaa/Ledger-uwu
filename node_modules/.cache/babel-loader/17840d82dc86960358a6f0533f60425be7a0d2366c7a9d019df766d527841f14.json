{"ast":null,"code":"// @ts-nocheck\n\nconst methodMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// New WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\nconst nativeAPI = (() => {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n  const unprefixedMethods = methodMap[0];\n  const returnValue = {};\n  for (const methodList of methodMap) {\n    const exitFullscreenMethod = methodList === null || methodList === void 0 ? void 0 : methodList[1];\n    if (exitFullscreenMethod in document) {\n      for (const [index, method] of methodList.entries()) {\n        returnValue[unprefixedMethods[index]] = method;\n      }\n      return returnValue;\n    }\n  }\n  return false;\n})();\nconst eventNameMap = {\n  change: nativeAPI.fullscreenchange,\n  error: nativeAPI.fullscreenerror\n};\nlet screenfull = {\n  // eslint-disable-next-line default-param-last\n  request(element = document.documentElement, options) {\n    return new Promise((resolve, reject) => {\n      const onFullScreenEntered = () => {\n        screenfull.off('change', onFullScreenEntered);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenEntered);\n      const returnPromise = element[nativeAPI.requestFullscreen](options);\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenEntered).catch(reject);\n      }\n    });\n  },\n  exit() {\n    return new Promise((resolve, reject) => {\n      if (!screenfull.isFullscreen) {\n        resolve();\n        return;\n      }\n      const onFullScreenExit = () => {\n        screenfull.off('change', onFullScreenExit);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenExit);\n      const returnPromise = document[nativeAPI.exitFullscreen]();\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenExit).catch(reject);\n      }\n    });\n  },\n  toggle(element, options) {\n    return screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n  },\n  onchange(callback) {\n    screenfull.on('change', callback);\n  },\n  onerror(callback) {\n    screenfull.on('error', callback);\n  },\n  on(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.addEventListener(eventName, callback, false);\n    }\n  },\n  off(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.removeEventListener(eventName, callback, false);\n    }\n  },\n  raw: nativeAPI\n};\nObject.defineProperties(screenfull, {\n  isFullscreen: {\n    get: () => Boolean(document[nativeAPI.fullscreenElement])\n  },\n  element: {\n    enumerable: true,\n    get: () => {\n      var _document$nativeAPI$f;\n      return (_document$nativeAPI$f = document[nativeAPI.fullscreenElement]) !== null && _document$nativeAPI$f !== void 0 ? _document$nativeAPI$f : undefined;\n    }\n  },\n  isEnabled: {\n    enumerable: true,\n    // Coerce to boolean in case of old WebKit.\n    get: () => Boolean(document[nativeAPI.fullscreenEnabled])\n  }\n});\nif (!nativeAPI) {\n  screenfull = {\n    isEnabled: false\n  };\n}\nexport default screenfull;","map":{"version":3,"names":["methodMap","nativeAPI","document","unprefixedMethods","returnValue","methodList","exitFullscreenMethod","index","method","entries","eventNameMap","change","fullscreenchange","error","fullscreenerror","screenfull","request","element","documentElement","options","Promise","resolve","reject","onFullScreenEntered","off","on","returnPromise","requestFullscreen","then","catch","exit","isFullscreen","onFullScreenExit","exitFullscreen","toggle","onchange","callback","onerror","event","eventName","addEventListener","removeEventListener","raw","Object","defineProperties","get","Boolean","fullscreenElement","enumerable","_document$nativeAPI$f","undefined","isEnabled","fullscreenEnabled"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-component/es/utils/screenfull.js"],"sourcesContent":["// @ts-nocheck\n\nconst methodMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// New WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\nconst nativeAPI = (() => {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n  const unprefixedMethods = methodMap[0];\n  const returnValue = {};\n  for (const methodList of methodMap) {\n    const exitFullscreenMethod = methodList === null || methodList === void 0 ? void 0 : methodList[1];\n    if (exitFullscreenMethod in document) {\n      for (const [index, method] of methodList.entries()) {\n        returnValue[unprefixedMethods[index]] = method;\n      }\n      return returnValue;\n    }\n  }\n  return false;\n})();\nconst eventNameMap = {\n  change: nativeAPI.fullscreenchange,\n  error: nativeAPI.fullscreenerror\n};\nlet screenfull = {\n  // eslint-disable-next-line default-param-last\n  request(element = document.documentElement, options) {\n    return new Promise((resolve, reject) => {\n      const onFullScreenEntered = () => {\n        screenfull.off('change', onFullScreenEntered);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenEntered);\n      const returnPromise = element[nativeAPI.requestFullscreen](options);\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenEntered).catch(reject);\n      }\n    });\n  },\n  exit() {\n    return new Promise((resolve, reject) => {\n      if (!screenfull.isFullscreen) {\n        resolve();\n        return;\n      }\n      const onFullScreenExit = () => {\n        screenfull.off('change', onFullScreenExit);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenExit);\n      const returnPromise = document[nativeAPI.exitFullscreen]();\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenExit).catch(reject);\n      }\n    });\n  },\n  toggle(element, options) {\n    return screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n  },\n  onchange(callback) {\n    screenfull.on('change', callback);\n  },\n  onerror(callback) {\n    screenfull.on('error', callback);\n  },\n  on(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.addEventListener(eventName, callback, false);\n    }\n  },\n  off(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.removeEventListener(eventName, callback, false);\n    }\n  },\n  raw: nativeAPI\n};\nObject.defineProperties(screenfull, {\n  isFullscreen: {\n    get: () => Boolean(document[nativeAPI.fullscreenElement])\n  },\n  element: {\n    enumerable: true,\n    get: () => {\n      var _document$nativeAPI$f;\n      return (_document$nativeAPI$f = document[nativeAPI.fullscreenElement]) !== null && _document$nativeAPI$f !== void 0 ? _document$nativeAPI$f : undefined;\n    }\n  },\n  isEnabled: {\n    enumerable: true,\n    // Coerce to boolean in case of old WebKit.\n    get: () => Boolean(document[nativeAPI.fullscreenEnabled])\n  }\n});\nif (!nativeAPI) {\n  screenfull = {\n    isEnabled: false\n  };\n}\nexport default screenfull;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}