{"ast":null,"code":"import { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport class Stencil extends View {\n  constructor(options) {\n    super();\n    this.graphs = {};\n    this.$groups = {};\n    this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n    this.dnd = new Dnd(this.options);\n    this.onSearch = FunctionExt.debounce(this.onSearch, 200);\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container).addClass(this.prefixClassName(ClassNames.base)).attr('data-not-found-text', this.options.notFoundText || 'No matches found');\n    this.options.collapsable = options.collapsable && options.groups && options.groups.some(group => group.collapsable !== false);\n    if (this.options.collapsable) {\n      this.$container.addClass('collapsable');\n      const collapsed = options.groups && options.groups.every(group => group.collapsed || group.collapsable === false);\n      if (collapsed) {\n        this.$container.addClass('collapsed');\n      }\n    }\n    this.$('<div/>').addClass(this.prefixClassName(ClassNames.title)).html(this.options.title).appendTo(this.$container);\n    if (options.search) {\n      this.$container.addClass('searchable').append(this.renderSearch());\n    }\n    this.$content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.content)).appendTo(this.$container);\n    const globalGraphOptions = options.stencilGraphOptions || {};\n    if (options.groups && options.groups.length) {\n      options.groups.forEach(group => {\n        const $group = this.$('<div/>').addClass(this.prefixClassName(ClassNames.group)).attr('data-name', group.name);\n        if (group.collapsable == null && options.collapsable || group.collapsable !== false) {\n          $group.addClass('collapsable');\n        }\n        $group.toggleClass('collapsed', group.collapsed === true);\n        const $title = this.$('<h3/>').addClass(this.prefixClassName(ClassNames.groupTitle)).html(group.title || group.name);\n        const $content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.groupContent));\n        const graphOptionsInGroup = group.graphOptions;\n        const graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), {\n          container: document.createElement('div'),\n          model: globalGraphOptions.model || new Model(),\n          width: group.graphWidth || options.stencilGraphWidth,\n          height: group.graphHeight || options.stencilGraphHeight,\n          interacting: false,\n          preventDefaultBlankAction: false\n        }));\n        $content.append(graph.container);\n        $group.append($title, $content).appendTo(this.$content);\n        this.$groups[group.name] = $group;\n        this.graphs[group.name] = graph;\n      });\n    } else {\n      const graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), {\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: options.stencilGraphWidth,\n        height: options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false\n      }));\n      this.$content.append(graph.container);\n      this.graphs[Private.defaultGroupName] = graph;\n    }\n    this.startListening();\n    return this;\n  }\n  get targetScroller() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target.scroller.widget : target;\n  }\n  get targetGraph() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target : target.graph;\n  }\n  get targetModel() {\n    return this.targetGraph.model;\n  }\n  renderSearch() {\n    return this.$('<div/>').addClass(this.prefixClassName(ClassNames.search)).append(this.$('<input/>').attr({\n      type: 'search',\n      placeholder: this.options.placeholder || 'Search'\n    }).addClass(this.prefixClassName(ClassNames.searchText)));\n  }\n  startListening() {\n    const title = this.prefixClassName(ClassNames.title);\n    const searchText = this.prefixClassName(ClassNames.searchText);\n    const groupTitle = this.prefixClassName(ClassNames.groupTitle);\n    this.delegateEvents({\n      [`click .${title}`]: 'onTitleClick',\n      [`touchstart .${title}`]: 'onTitleClick',\n      [`click .${groupTitle}`]: 'onGroupTitleClick',\n      [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n      [`input .${searchText}`]: 'onSearch',\n      [`focusin .${searchText}`]: 'onSearchFocusIn',\n      [`focusout .${searchText}`]: 'onSearchFocusOut'\n    });\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.on('cell:mousedown', this.onDragStart, this);\n    });\n  }\n  stopListening() {\n    this.undelegateEvents();\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.off('cell:mousedown', this.onDragStart, this);\n    });\n  }\n  load(data, groupName) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName);\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach(groupName => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName);\n        }\n      });\n    }\n    return this;\n  }\n  loadGroup(cells, groupName) {\n    const model = this.getModel(groupName);\n    if (model) {\n      const nodes = cells.map(cell => Node.isNode(cell) ? cell : Node.create(cell));\n      model.resetCells(nodes);\n    }\n    const group = this.getGroup(groupName);\n    let height = this.options.stencilGraphHeight;\n    if (group && group.graphHeight != null) {\n      height = group.graphHeight;\n    }\n    const layout = group && group.layout || this.options.layout;\n    if (layout && model) {\n      FunctionExt.call(layout, this, model, group);\n    }\n    if (!height) {\n      const graph = this.getGraph(groupName);\n      graph.fitToContent({\n        minWidth: graph.options.width,\n        gridHeight: 1,\n        padding: group && group.graphPadding || this.options.stencilGraphPadding || 10\n      });\n    }\n    return this;\n  }\n  onDragStart(args) {\n    const {\n      e,\n      node\n    } = args;\n    this.dnd.start(node, e);\n  }\n  filter(keyword, filter) {\n    const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n      const graph = this.graphs[groupName];\n      const name = groupName === Private.defaultGroupName ? null : groupName;\n      const items = graph.model.getNodes().filter(cell => {\n        let matched = false;\n        if (typeof filter === 'function') {\n          matched = FunctionExt.call(filter, this, cell, keyword, name, this);\n        } else if (typeof filter === 'boolean') {\n          matched = filter;\n        } else {\n          matched = this.isCellMatched(cell, keyword, filter, keyword.toLowerCase() !== keyword);\n        }\n        const view = graph.renderer.findViewByCell(cell);\n        if (view) {\n          view.$(view.container).toggleClass('unmatched', !matched);\n        }\n        return matched;\n      });\n      const found = items.length > 0;\n      const options = this.options;\n      const model = new Model();\n      model.resetCells(items);\n      if (options.layout) {\n        FunctionExt.call(options.layout, this, model, this.getGroup(groupName));\n      }\n      if (this.$groups[groupName]) {\n        this.$groups[groupName].toggleClass('unmatched', !found);\n      }\n      graph.fitToContent({\n        gridWidth: 1,\n        gridHeight: 1,\n        padding: options.stencilGraphPadding || 10\n      });\n      return memo || found;\n    }, false);\n    this.$container.toggleClass('not-found', !found);\n  }\n  isCellMatched(cell, keyword, filters, ignoreCase) {\n    if (keyword && filters) {\n      return Object.keys(filters).some(shape => {\n        if (shape === '*' || cell.shape === shape) {\n          const filter = filters[shape];\n          if (typeof filter === 'boolean') {\n            return filter;\n          }\n          const paths = Array.isArray(filter) ? filter : [filter];\n          return paths.some(path => {\n            let val = cell.getPropByPath(path);\n            if (val != null) {\n              val = `${val}`;\n              if (!ignoreCase) {\n                val = val.toLowerCase();\n              }\n              return val.indexOf(keyword) >= 0;\n            }\n            return false;\n          });\n        }\n        return false;\n      });\n    }\n    return true;\n  }\n  onSearch(evt) {\n    this.filter(evt.target.value, this.options.search);\n  }\n  onSearchFocusIn() {\n    this.$container.addClass('is-focused');\n  }\n  onSearchFocusOut() {\n    this.$container.removeClass('is-focused');\n  }\n  onTitleClick() {\n    if (this.options.collapsable) {\n      this.$container.toggleClass('collapsed');\n      if (this.$container.hasClass('collapsed')) {\n        this.collapseGroups();\n      } else {\n        this.expandGroups();\n      }\n    }\n  }\n  onGroupTitleClick(evt) {\n    const $group = this.$(evt.target).closest(`.${this.prefixClassName(ClassNames.group)}`);\n    this.toggleGroup($group.attr('data-name') || '');\n    const allCollapsed = Object.keys(this.$groups).every(name => {\n      const group = this.getGroup(name);\n      const $group = this.$groups[name];\n      return group && group.collapsable === false || $group.hasClass('collapsed');\n    });\n    this.$container.toggleClass('collapsed', allCollapsed);\n  }\n  getModel(groupName) {\n    const graph = this.getGraph(groupName);\n    return graph ? graph.model : null;\n  }\n  getGraph(groupName) {\n    return this.graphs[groupName || Private.defaultGroupName];\n  }\n  getGroup(groupName) {\n    const groups = this.options.groups;\n    if (groupName != null && groups && groups.length) {\n      return groups.find(group => group.name === groupName);\n    }\n    return null;\n  }\n  toggleGroup(groupName) {\n    if (this.isGroupCollapsed(groupName)) {\n      this.expandGroup(groupName);\n    } else {\n      this.collapseGroup(groupName);\n    }\n    return this;\n  }\n  collapseGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName];\n      if ($group && !this.isGroupCollapsed(groupName)) {\n        this.trigger('group:collapse', {\n          name: groupName\n        });\n        $group.addClass('collapsed');\n      }\n    }\n    return this;\n  }\n  expandGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName];\n      if ($group && this.isGroupCollapsed(groupName)) {\n        this.trigger('group:expand', {\n          name: groupName\n        });\n        $group.removeClass('collapsed');\n      }\n    }\n    return this;\n  }\n  isGroupCollapsable(groupName) {\n    const $group = this.$groups[groupName];\n    return $group.hasClass('collapsable');\n  }\n  isGroupCollapsed(groupName) {\n    const $group = this.$groups[groupName];\n    return $group && $group.hasClass('collapsed');\n  }\n  collapseGroups() {\n    Object.keys(this.$groups).forEach(groupName => this.collapseGroup(groupName));\n    return this;\n  }\n  expandGroups() {\n    Object.keys(this.$groups).forEach(groupName => this.expandGroup(groupName));\n    return this;\n  }\n  resizeGroup(groupName, size) {\n    const graph = this.graphs[groupName];\n    if (graph) {\n      graph.resize(size.width, size.height);\n    }\n    return this;\n  }\n  onRemove() {\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.view.remove();\n      delete this.graphs[groupName];\n    });\n    this.dnd.remove();\n    this.stopListening();\n    this.undelegateDocumentEvents();\n  }\n}\n(function (Stencil) {\n  Stencil.defaultOptions = Object.assign({\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n    layout(model, group) {\n      const options = {\n        columnWidth: this.options.stencilGraphWidth / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10\n      };\n      grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), group ? group.layoutOptions : {}));\n    }\n  }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\nvar ClassNames;\n(function (ClassNames) {\n  ClassNames.base = 'widget-stencil';\n  ClassNames.title = `${ClassNames.base}-title`;\n  ClassNames.search = `${ClassNames.base}-search`;\n  ClassNames.searchText = `${ClassNames.search}-text`;\n  ClassNames.content = `${ClassNames.base}-content`;\n  ClassNames.group = `${ClassNames.base}-group`;\n  ClassNames.groupTitle = `${ClassNames.group}-title`;\n  ClassNames.groupContent = `${ClassNames.group}-content`;\n})(ClassNames || (ClassNames = {}));\nvar Private;\n(function (Private) {\n  Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));","map":{"version":3,"names":["FunctionExt","grid","Node","Model","View","Graph","Dnd","Stencil","constructor","options","graphs","$groups","Object","assign","defaultOptions","dnd","onSearch","debounce","container","document","createElement","$container","$","addClass","prefixClassName","ClassNames","base","attr","notFoundText","collapsable","groups","some","group","collapsed","every","title","html","appendTo","search","append","renderSearch","$content","content","globalGraphOptions","stencilGraphOptions","length","forEach","$group","name","toggleClass","$title","groupTitle","groupContent","graphOptionsInGroup","graphOptions","graph","model","width","graphWidth","stencilGraphWidth","height","graphHeight","stencilGraphHeight","interacting","preventDefaultBlankAction","Private","defaultGroupName","startListening","targetScroller","target","isGraph","scroller","widget","targetGraph","targetModel","type","placeholder","searchText","delegateEvents","keys","groupName","on","onDragStart","stopListening","undelegateEvents","off","load","data","Array","isArray","loadGroup","cells","getModel","nodes","map","cell","isNode","create","resetCells","getGroup","layout","call","getGraph","fitToContent","minWidth","gridHeight","padding","graphPadding","stencilGraphPadding","args","e","node","start","filter","keyword","found","reduce","memo","items","getNodes","matched","isCellMatched","toLowerCase","view","renderer","findViewByCell","gridWidth","filters","ignoreCase","shape","paths","path","val","getPropByPath","indexOf","evt","value","onSearchFocusIn","onSearchFocusOut","removeClass","onTitleClick","hasClass","collapseGroups","expandGroups","onGroupTitleClick","closest","toggleGroup","allCollapsed","find","isGroupCollapsed","expandGroup","collapseGroup","isGroupCollapsable","trigger","resizeGroup","size","resize","onRemove","remove","undelegateDocumentEvents","columnWidth","columns","rowHeight","resizeToFit","dx","dy","layoutOptions","defaults"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/stencil/index.ts"],"sourcesContent":["import { FunctionExt } from '../../util'\nimport { grid } from '../../layout/grid'\nimport { Cell } from '../../model/cell'\nimport { Node } from '../../model/node'\nimport { Model } from '../../model/model'\nimport { View } from '../../view/view'\nimport { Graph } from '../../graph/graph'\nimport { EventArgs } from '../../graph/events'\nimport { Dnd } from '../dnd'\n\nexport class Stencil extends View {\n  public readonly options: Stencil.Options\n  public readonly dnd: Dnd\n  protected readonly graphs: { [groupName: string]: Graph }\n  protected readonly $groups: { [groupName: string]: JQuery<HTMLElement> }\n  protected readonly $container: JQuery<HTMLDivElement>\n  protected readonly $content: JQuery<HTMLDivElement>\n\n  protected get targetScroller() {\n    const target = this.options.target\n    return Graph.isGraph(target) ? target.scroller.widget : target\n  }\n\n  protected get targetGraph() {\n    const target = this.options.target\n    return Graph.isGraph(target) ? target : target.graph\n  }\n\n  protected get targetModel() {\n    return this.targetGraph.model\n  }\n\n  constructor(options: Partial<Stencil.Options>) {\n    super()\n\n    this.graphs = {}\n    this.$groups = {}\n    this.options = {\n      ...Stencil.defaultOptions,\n      ...options,\n    } as Stencil.Options\n\n    this.dnd = new Dnd(this.options)\n    this.onSearch = FunctionExt.debounce(this.onSearch, 200)\n    this.container = document.createElement('div')\n    this.$container = this.$(this.container)\n      .addClass(this.prefixClassName(ClassNames.base))\n      .attr(\n        'data-not-found-text',\n        this.options.notFoundText || 'No matches found',\n      )\n\n    this.options.collapsable =\n      options.collapsable &&\n      options.groups &&\n      options.groups.some((group) => group.collapsable !== false)\n\n    if (this.options.collapsable) {\n      this.$container.addClass('collapsable')\n      const collapsed =\n        options.groups &&\n        options.groups.every(\n          (group) => group.collapsed || group.collapsable === false,\n        )\n      if (collapsed) {\n        this.$container.addClass('collapsed')\n      }\n    }\n\n    this.$('<div/>')\n      .addClass(this.prefixClassName(ClassNames.title))\n      .html(this.options.title)\n      .appendTo(this.$container)\n\n    if (options.search) {\n      this.$container.addClass('searchable').append(this.renderSearch())\n    }\n\n    this.$content = this.$('<div/>')\n      .addClass(this.prefixClassName(ClassNames.content))\n      .appendTo(this.$container)\n\n    const globalGraphOptions = options.stencilGraphOptions || {}\n\n    if (options.groups && options.groups.length) {\n      options.groups.forEach((group) => {\n        const $group = this.$('<div/>')\n          .addClass(this.prefixClassName(ClassNames.group))\n          .attr('data-name', group.name)\n\n        if (\n          (group.collapsable == null && options.collapsable) ||\n          group.collapsable !== false\n        ) {\n          $group.addClass('collapsable')\n        }\n\n        $group.toggleClass('collapsed', group.collapsed === true)\n\n        const $title = this.$('<h3/>')\n          .addClass(this.prefixClassName(ClassNames.groupTitle))\n          .html(group.title || group.name)\n\n        const $content = this.$('<div/>').addClass(\n          this.prefixClassName(ClassNames.groupContent),\n        )\n\n        const graphOptionsInGroup = group.graphOptions\n        const graph = new Graph({\n          ...globalGraphOptions,\n          ...graphOptionsInGroup,\n          container: document.createElement('div'),\n          model: globalGraphOptions.model || new Model(),\n          width: group.graphWidth || options.stencilGraphWidth,\n          height: group.graphHeight || options.stencilGraphHeight,\n          interacting: false,\n          preventDefaultBlankAction: false,\n        })\n\n        $content.append(graph.container)\n        $group.append($title, $content).appendTo(this.$content)\n\n        this.$groups[group.name] = $group\n        this.graphs[group.name] = graph\n      })\n    } else {\n      const graph = new Graph({\n        ...globalGraphOptions,\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: options.stencilGraphWidth,\n        height: options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false,\n      })\n      this.$content.append(graph.container)\n      this.graphs[Private.defaultGroupName] = graph\n    }\n\n    this.startListening()\n    return this\n  }\n\n  protected renderSearch() {\n    return this.$('<div/>')\n      .addClass(this.prefixClassName(ClassNames.search))\n      .append(\n        this.$('<input/>')\n          .attr({\n            type: 'search',\n            placeholder: this.options.placeholder || 'Search',\n          })\n          .addClass(this.prefixClassName(ClassNames.searchText)),\n      )\n  }\n\n  protected startListening() {\n    const title = this.prefixClassName(ClassNames.title)\n    const searchText = this.prefixClassName(ClassNames.searchText)\n    const groupTitle = this.prefixClassName(ClassNames.groupTitle)\n\n    this.delegateEvents({\n      [`click .${title}`]: 'onTitleClick',\n      [`touchstart .${title}`]: 'onTitleClick',\n      [`click .${groupTitle}`]: 'onGroupTitleClick',\n      [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n      [`input .${searchText}`]: 'onSearch',\n      [`focusin .${searchText}`]: 'onSearchFocusIn',\n      [`focusout .${searchText}`]: 'onSearchFocusOut',\n    })\n\n    Object.keys(this.graphs).forEach((groupName) => {\n      const graph = this.graphs[groupName]\n      graph.on('cell:mousedown', this.onDragStart, this)\n    })\n  }\n\n  protected stopListening() {\n    this.undelegateEvents()\n    Object.keys(this.graphs).forEach((groupName) => {\n      const graph = this.graphs[groupName]\n      graph.off('cell:mousedown', this.onDragStart, this)\n    })\n  }\n\n  load(groups: { [groupName: string]: (Node | Node.Metadata)[] }): this\n  load(nodes: (Node | Node.Metadata)[], groupName?: string): this\n  load(\n    data:\n      | { [groupName: string]: (Node | Node.Metadata)[] }\n      | (Node | Node.Metadata)[],\n    groupName?: string,\n  ) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName)\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach((groupName) => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName)\n        }\n      })\n    }\n    return this\n  }\n\n  protected loadGroup(cells: (Node | Node.Metadata)[], groupName?: string) {\n    const model = this.getModel(groupName)\n    if (model) {\n      const nodes = cells.map((cell) =>\n        Node.isNode(cell) ? cell : Node.create(cell),\n      )\n      model.resetCells(nodes)\n    }\n\n    const group = this.getGroup(groupName)\n    let height = this.options.stencilGraphHeight\n    if (group && group.graphHeight != null) {\n      height = group.graphHeight\n    }\n\n    const layout = (group && group.layout) || this.options.layout\n    if (layout && model) {\n      FunctionExt.call(layout, this, model, group)\n    }\n\n    if (!height) {\n      const graph = this.getGraph(groupName)\n      graph.fitToContent({\n        minWidth: graph.options.width,\n        gridHeight: 1,\n        padding:\n          (group && group.graphPadding) ||\n          this.options.stencilGraphPadding ||\n          10,\n      })\n    }\n\n    return this\n  }\n\n  protected onDragStart(args: EventArgs['node:mousedown']) {\n    const { e, node } = args\n    this.dnd.start(node, e)\n  }\n\n  protected filter(keyword: string, filter?: Stencil.Filter) {\n    const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n      const graph = this.graphs[groupName]\n      const name = groupName === Private.defaultGroupName ? null : groupName\n      const items = graph.model.getNodes().filter((cell) => {\n        let matched = false\n        if (typeof filter === 'function') {\n          matched = FunctionExt.call(filter, this, cell, keyword, name, this)\n        } else if (typeof filter === 'boolean') {\n          matched = filter\n        } else {\n          matched = this.isCellMatched(\n            cell,\n            keyword,\n            filter,\n            keyword.toLowerCase() !== keyword,\n          )\n        }\n\n        const view = graph.renderer.findViewByCell(cell)\n        if (view) {\n          view.$(view.container).toggleClass('unmatched', !matched)\n        }\n\n        return matched\n      })\n\n      const found = items.length > 0\n      const options = this.options\n\n      const model = new Model()\n      model.resetCells(items)\n\n      if (options.layout) {\n        FunctionExt.call(options.layout, this, model, this.getGroup(groupName))\n      }\n\n      if (this.$groups[groupName]) {\n        this.$groups[groupName].toggleClass('unmatched', !found)\n      }\n\n      graph.fitToContent({\n        gridWidth: 1,\n        gridHeight: 1,\n        padding: options.stencilGraphPadding || 10,\n      })\n\n      return memo || found\n    }, false)\n\n    this.$container.toggleClass('not-found', !found)\n  }\n\n  protected isCellMatched(\n    cell: Cell,\n    keyword: string,\n    filters: Stencil.Filters | undefined,\n    ignoreCase: boolean,\n  ) {\n    if (keyword && filters) {\n      return Object.keys(filters).some((shape) => {\n        if (shape === '*' || cell.shape === shape) {\n          const filter = filters[shape]\n          if (typeof filter === 'boolean') {\n            return filter\n          }\n\n          const paths = Array.isArray(filter) ? filter : [filter]\n          return paths.some((path) => {\n            let val = cell.getPropByPath<string>(path)\n            if (val != null) {\n              val = `${val}`\n              if (!ignoreCase) {\n                val = val.toLowerCase()\n              }\n              return val.indexOf(keyword) >= 0\n            }\n            return false\n          })\n        }\n\n        return false\n      })\n    }\n\n    return true\n  }\n\n  protected onSearch(evt: JQuery.TriggeredEvent) {\n    this.filter(evt.target.value as string, this.options.search)\n  }\n\n  protected onSearchFocusIn() {\n    this.$container.addClass('is-focused')\n  }\n\n  protected onSearchFocusOut() {\n    this.$container.removeClass('is-focused')\n  }\n\n  protected onTitleClick() {\n    if (this.options.collapsable) {\n      this.$container.toggleClass('collapsed')\n      if (this.$container.hasClass('collapsed')) {\n        this.collapseGroups()\n      } else {\n        this.expandGroups()\n      }\n    }\n  }\n\n  protected onGroupTitleClick(evt: JQuery.TriggeredEvent) {\n    const $group = this.$(evt.target).closest(\n      `.${this.prefixClassName(ClassNames.group)}`,\n    )\n    this.toggleGroup($group.attr('data-name') || '')\n\n    const allCollapsed = Object.keys(this.$groups).every((name) => {\n      const group = this.getGroup(name)\n      const $group = this.$groups[name]\n      return (\n        (group && group.collapsable === false) || $group.hasClass('collapsed')\n      )\n    })\n\n    this.$container.toggleClass('collapsed', allCollapsed)\n  }\n\n  protected getModel(groupName?: string) {\n    const graph = this.getGraph(groupName)\n    return graph ? graph.model : null\n  }\n\n  protected getGraph(groupName?: string) {\n    return this.graphs[groupName || Private.defaultGroupName]\n  }\n\n  protected getGroup(groupName?: string) {\n    const groups = this.options.groups\n    if (groupName != null && groups && groups.length) {\n      return groups.find((group) => group.name === groupName)\n    }\n    return null\n  }\n\n  toggleGroup(groupName: string) {\n    if (this.isGroupCollapsed(groupName)) {\n      this.expandGroup(groupName)\n    } else {\n      this.collapseGroup(groupName)\n    }\n    return this\n  }\n\n  collapseGroup(groupName: string) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName]\n      if ($group && !this.isGroupCollapsed(groupName)) {\n        this.trigger('group:collapse', { name: groupName })\n        $group.addClass('collapsed')\n      }\n    }\n    return this\n  }\n\n  expandGroup(groupName: string) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName]\n      if ($group && this.isGroupCollapsed(groupName)) {\n        this.trigger('group:expand', { name: groupName })\n        $group.removeClass('collapsed')\n      }\n    }\n    return this\n  }\n\n  isGroupCollapsable(groupName: string) {\n    const $group = this.$groups[groupName]\n    return $group.hasClass('collapsable')\n  }\n\n  isGroupCollapsed(groupName: string) {\n    const $group = this.$groups[groupName]\n    return $group && $group.hasClass('collapsed')\n  }\n\n  collapseGroups() {\n    Object.keys(this.$groups).forEach((groupName) =>\n      this.collapseGroup(groupName),\n    )\n    return this\n  }\n\n  expandGroups() {\n    Object.keys(this.$groups).forEach((groupName) =>\n      this.expandGroup(groupName),\n    )\n    return this\n  }\n\n  resizeGroup(groupName: string, size: { width: number; height: number }) {\n    const graph = this.graphs[groupName]\n    if (graph) {\n      graph.resize(size.width, size.height)\n    }\n    return this\n  }\n\n  onRemove() {\n    Object.keys(this.graphs).forEach((groupName) => {\n      const graph = this.graphs[groupName]\n      graph.view.remove()\n      delete this.graphs[groupName]\n    })\n    this.dnd.remove()\n    this.stopListening()\n    this.undelegateDocumentEvents()\n  }\n}\n\nexport namespace Stencil {\n  export interface Options extends Dnd.Options {\n    title: string\n    groups?: Group[]\n    search?: Filter\n    placeholder?: string\n    notFoundText?: string\n    collapsable?: boolean\n    stencilGraphWidth: number\n    stencilGraphHeight: number\n    stencilGraphOptions?: Graph.Options\n    stencilGraphPadding?: number\n    layout?: (this: Stencil, model: Model, group?: Group | null) => any\n    layoutOptions?: any\n  }\n\n  export type Filter = Filters | FilterFn | boolean\n  export type Filters = { [shape: string]: string | string[] | boolean }\n  export type FilterFn = (\n    this: Stencil,\n    cell: Node,\n    keyword: string,\n    groupName: string | null,\n    stencil: Stencil,\n  ) => boolean\n\n  export interface Group {\n    name: string\n    title?: string\n    collapsed?: boolean\n    collapsable?: boolean\n    graphWidth?: number\n    graphHeight?: number\n    graphPadding?: number\n    graphOptions?: Graph.Options\n    layout?: (this: Stencil, model: Model, group?: Group | null) => any\n    layoutOptions?: any\n  }\n\n  export const defaultOptions: Partial<Options> = {\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n\n    layout(model, group) {\n      const options = {\n        columnWidth: (this.options.stencilGraphWidth as number) / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10,\n      }\n\n      grid(model, {\n        ...options,\n        ...this.options.layoutOptions,\n        ...(group ? group.layoutOptions : {}),\n      })\n    },\n    ...Dnd.defaults,\n  }\n}\n\nnamespace ClassNames {\n  export const base = 'widget-stencil'\n  export const title = `${base}-title`\n  export const search = `${base}-search`\n  export const searchText = `${search}-text`\n  export const content = `${base}-content`\n  export const group = `${base}-group`\n  export const groupTitle = `${group}-title`\n  export const groupContent = `${group}-content`\n}\n\nnamespace Private {\n  export const defaultGroupName = '__default__'\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}