{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _dec, _class, _temp;\n\n/**\n * implements renderService with WebGPU API\n * @see https://webgpu.io/\n * @see https://github.com/BabylonJS/Babylon.js/blob/WebGPU/src/Engines/webgpuEngine.ts\n */\nimport { isSafari } from '@antv/g-webgpu-core'; // import { Glslang } from '@webgpu/glslang/dist/web-devel/glslang.onefile';\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { injectable } from 'inversify';\nimport glslang from './glslang';\nimport WebGPUAttribute from './WebGPUAttribute';\nimport WebGPUBuffer from './WebGPUBuffer';\nimport WebGPUComputeModel from './WebGPUComputeModel';\nimport WebGPUElements from './WebGPUElements';\nimport WebGPUFramebuffer from './WebGPUFramebuffer';\nimport WebGPUModel from './WebGPUModel';\nimport WebGPUTexture2D from './WebGPUTexture2D';\nexport\n/**\n * regl renderer\n */\nvar WebGPUEngine = (_dec = injectable(), _dec(_class = (_temp = /*#__PURE__*/function () {\n  function WebGPUEngine() {\n    var _this = this;\n    _classCallCheck(this, WebGPUEngine);\n    this.supportWebGPU = true;\n    this.useWGSL = false;\n    this.options = void 0;\n    this.canvas = void 0;\n    this.context = void 0;\n    this.glslang = void 0;\n    this.adapter = void 0;\n    this.device = void 0;\n    this.swapChain = void 0;\n    this.mainPassSampleCount = void 0;\n    this.mainTexture = void 0;\n    this.depthTexture = void 0;\n    this.mainColorAttachments = void 0;\n    this.mainTextureExtends = void 0;\n    this.mainDepthAttachment = void 0;\n    this.uploadEncoder = void 0;\n    this.renderEncoder = void 0;\n    this.computeEncoder = void 0;\n    this.renderTargetEncoder = void 0;\n    this.commandBuffers = new Array(4).fill(undefined);\n    this.currentRenderPass = null;\n    this.mainRenderPass = null;\n    this.currentRenderTargetViewDescriptor = void 0;\n    this.currentComputePass = null;\n    this.bundleEncoder = void 0;\n    this.tempBuffers = [];\n    this.currentRenderTarget = null;\n    this.uploadEncoderDescriptor = {\n      label: 'upload'\n    };\n    this.renderEncoderDescriptor = {\n      label: 'render'\n    };\n    this.renderTargetEncoderDescriptor = {\n      label: 'renderTarget'\n    };\n    this.computeEncoderDescriptor = {\n      label: 'compute'\n    };\n    this.pipelines = {};\n    this.computePipelines = {};\n    this.defaultSampleCount = 4;\n    this.clearDepthValue = 1;\n    this.clearStencilValue = 0;\n    this.transientViewport = {\n      x: Infinity,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.cachedViewport = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.clear = function (options) {\n      var framebuffer = options.framebuffer,\n        color = options.color,\n        depth = options.depth,\n        stencil = options.stencil;\n      if (_this.options.supportCompute) {\n        _this.startComputePass();\n      } // We need to recreate the render pass so that the new parameters for clear color / depth / stencil are taken into account\n\n      if (_this.currentRenderTarget) {\n        if (_this.currentRenderPass) {\n          _this.endRenderTargetRenderPass();\n        }\n        _this.startRenderTargetRenderPass(_this.currentRenderTarget, color ? color : null, !!depth, !!stencil);\n      } else {\n        // if (this.useReverseDepthBuffer) {\n        //     this._depthCullingState.depthFunc = Constants.GREATER;\n        // }\n        _this.mainColorAttachments[0].loadValue = color ? color : WebGPUConstants.LoadOp.Load;\n        _this.mainDepthAttachment.depthLoadValue = depth ? depth : WebGPUConstants.LoadOp.Load;\n        _this.mainDepthAttachment.stencilLoadValue = stencil ? _this.clearStencilValue : WebGPUConstants.LoadOp.Load;\n        if (_this.mainRenderPass) {\n          _this.endMainRenderPass();\n        }\n        _this.startMainRenderPass();\n      }\n    };\n    this.createModel = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                model = new WebGPUModel(_this, options);\n                _context.next = 3;\n                return model.init();\n              case 3:\n                return _context.abrupt(\"return\", model);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.createAttribute = function (options) {\n      return new WebGPUAttribute(_this, options);\n    };\n    this.createBuffer = function (options) {\n      return new WebGPUBuffer(_this, options);\n    };\n    this.createElements = function (options) {\n      return new WebGPUElements(_this, options);\n    };\n    this.createTexture2D = function (options) {\n      return new WebGPUTexture2D(_this, options);\n    };\n    this.createFramebuffer = function (options) {\n      return new WebGPUFramebuffer(_this, options);\n    };\n    this.useFramebuffer = function (framebuffer, drawCommands) {\n      // bind\n      if (_this.currentRenderTarget) {\n        _this.unbindFramebuffer(_this.currentRenderTarget);\n      }\n      _this.currentRenderTarget = framebuffer; // TODO: use mipmap options in framebuffer\n\n      _this.currentRenderTargetViewDescriptor = {\n        dimension: WebGPUConstants.TextureViewDimension.E2d,\n        // mipLevelCount: bindWithMipMaps ? WebGPUTextureHelper.computeNumMipmapLevels(texture.width, texture.height) - lodLevel : 1,\n        // baseArrayLayer: faceIndex,\n        // baseMipLevel: lodLevel,\n        arrayLayerCount: 1,\n        aspect: WebGPUConstants.TextureAspect.All\n      };\n      _this.currentRenderPass = null;\n      drawCommands();\n    };\n    this.createComputeModel = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model = new WebGPUComputeModel(_this, context);\n                _context2.next = 3;\n                return model.init();\n              case 3:\n                return _context2.abrupt(\"return\", model);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.getCanvas = function () {\n      return _this.canvas;\n    };\n    this.getGLContext = function () {\n      throw new Error('Method not implemented.');\n    };\n    this.viewport = function (_ref3) {\n      var x = _ref3.x,\n        y = _ref3.y,\n        width = _ref3.width,\n        height = _ref3.height;\n      if (!_this.currentRenderPass) {\n        // call viewport() before current render pass created\n        _this.transientViewport = {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        };\n      } else if (_this.transientViewport.x !== Infinity) {\n        var renderPass = _this.getCurrentRenderPass(); // @see https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setviewport\n\n        renderPass.setViewport(_this.transientViewport.x, _this.transientViewport.y, _this.transientViewport.width, _this.transientViewport.height, 0, 1);\n      } else if (x !== _this.cachedViewport.x || y !== _this.cachedViewport.y || width !== _this.cachedViewport.width || height !== _this.cachedViewport.height) {\n        _this.cachedViewport = {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        };\n        var _renderPass = _this.getCurrentRenderPass();\n        _renderPass.setViewport(x, y, width, height, 0, 1);\n      }\n    };\n    this.readPixels = function (options) {\n      throw new Error('Method not implemented.');\n    };\n  }\n  _createClass(WebGPUEngine, [{\n    key: \"isFloatSupported\",\n    value: function isFloatSupported() {\n      return true;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(config) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.canvas = config.canvas;\n                this.options = config;\n                this.useWGSL = !!config.useWGSL;\n                this.mainPassSampleCount = config.antialiasing ? this.defaultSampleCount : 1;\n                _context3.next = 6;\n                return this.initGlslang();\n              case 6:\n                this.initContextAndSwapChain();\n                this.initMainAttachments();\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function init(_x3) {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }, {\n    key: \"setScissor\",\n    value: function setScissor(scissor) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.mainTexture) {\n        this.mainTexture.destroy();\n      }\n      if (this.depthTexture) {\n        this.depthTexture.destroy();\n      }\n      this.tempBuffers.forEach(function (buffer) {\n        return buffer.destroy();\n      });\n      this.tempBuffers = [];\n    }\n  }, {\n    key: \"beginFrame\",\n    value: function beginFrame() {\n      this.uploadEncoder = this.device.createCommandEncoder(this.uploadEncoderDescriptor);\n      this.renderEncoder = this.device.createCommandEncoder(this.renderEncoderDescriptor);\n      this.renderTargetEncoder = this.device.createCommandEncoder(this.renderTargetEncoderDescriptor);\n      if (this.options.supportCompute) {\n        this.computeEncoder = this.device.createCommandEncoder(this.computeEncoderDescriptor);\n      }\n    }\n  }, {\n    key: \"endFrame\",\n    value: function endFrame() {\n      if (this.options.supportCompute) {\n        this.endComputePass();\n      }\n      this.endMainRenderPass();\n      this.commandBuffers[0] = this.uploadEncoder.finish();\n      this.commandBuffers[1] = this.renderEncoder.finish();\n      if (this.options.supportCompute) {\n        this.commandBuffers[2] = this.computeEncoder.finish();\n      }\n      this.commandBuffers[3] = this.renderTargetEncoder.finish();\n      if (isSafari) {\n        this.device // @ts-ignore\n        .getQueue().submit(this.commandBuffers.filter(function (buffer) {\n          return buffer;\n        }));\n      } else {\n        this.device.defaultQueue.submit(this.commandBuffers.filter(function (buffer) {\n          return buffer;\n        }));\n      }\n    }\n  }, {\n    key: \"getCurrentRenderPass\",\n    value: function getCurrentRenderPass() {\n      if (this.currentRenderTarget && !this.currentRenderPass) {\n        this.startRenderTargetRenderPass(this.currentRenderTarget, null, false, false);\n      } else if (!this.currentRenderPass) {\n        this.startMainRenderPass();\n      }\n      return this.currentRenderPass;\n    }\n  }, {\n    key: \"initGlslang\",\n    value: function () {\n      var _initGlslang = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _navigator, _navigator$gpu;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return glslang();\n              case 2:\n                this.glslang = _context4.sent;\n                _context4.next = 5;\n                return (_navigator = navigator) === null || _navigator === void 0 ? void 0 : (_navigator$gpu = _navigator.gpu) === null || _navigator$gpu === void 0 ? void 0 : _navigator$gpu.requestAdapter();\n              case 5:\n                this.adapter = _context4.sent;\n                _context4.next = 8;\n                return this.adapter.requestDevice();\n              case 8:\n                this.device = _context4.sent;\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function initGlslang() {\n        return _initGlslang.apply(this, arguments);\n      }\n      return initGlslang;\n    }()\n  }, {\n    key: \"initContextAndSwapChain\",\n    value: function initContextAndSwapChain() {\n      this.context = this.canvas.getContext(isSafari ? 'gpu' : 'gpupresent');\n      this.swapChain = this.context.configureSwapChain({\n        device: this.device,\n        format: this.options.swapChainFormat,\n        usage: WebGPUConstants.TextureUsage.OutputAttachment | WebGPUConstants.TextureUsage.CopySrc\n      });\n    }\n  }, {\n    key: \"initMainAttachments\",\n    value: function initMainAttachments() {\n      this.mainTextureExtends = {\n        width: this.canvas.width,\n        height: this.canvas.height,\n        depth: 1\n      };\n      if (this.options.antialiasing) {\n        var mainTextureDescriptor = {\n          size: this.mainTextureExtends,\n          // TODO: arrayLayerCount is deprecated: use size.depth\n          // arrayLayerCount: 1,\n          mipLevelCount: 1,\n          sampleCount: this.mainPassSampleCount,\n          dimension: WebGPUConstants.TextureDimension.E2d,\n          format: WebGPUConstants.TextureFormat.BGRA8Unorm,\n          usage: WebGPUConstants.TextureUsage.OutputAttachment\n        };\n        if (this.mainTexture) {\n          this.mainTexture.destroy();\n        }\n        this.mainTexture = this.device.createTexture(mainTextureDescriptor);\n        this.mainColorAttachments = [{\n          attachment: isSafari ?\n          // @ts-ignore\n          this.mainTexture.createDefaultView() : this.mainTexture.createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store\n        }];\n      } else {\n        this.mainColorAttachments = [{\n          attachment: isSafari ?\n          // @ts-ignore\n          this.swapChain.getCurrentTexture().createDefaultView() : this.swapChain.getCurrentTexture().createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store\n        }];\n      }\n      var depthTextureDescriptor = {\n        size: this.mainTextureExtends,\n        // arrayLayerCount: 1,\n        mipLevelCount: 1,\n        sampleCount: this.mainPassSampleCount,\n        dimension: WebGPUConstants.TextureDimension.E2d,\n        format: isSafari ? 'depth32float-stencil8' : WebGPUConstants.TextureFormat.Depth24PlusStencil8,\n        usage: WebGPUConstants.TextureUsage.OutputAttachment\n      };\n      if (this.depthTexture) {\n        this.depthTexture.destroy();\n      }\n      this.depthTexture = this.device.createTexture(\n      // @ts-ignore\n      depthTextureDescriptor);\n      this.mainDepthAttachment = {\n        attachment: isSafari ?\n        // @ts-ignore\n        this.depthTexture.createDefaultView() : this.depthTexture.createView(),\n        depthLoadValue: this.clearDepthValue,\n        depthStoreOp: WebGPUConstants.StoreOp.Store,\n        stencilLoadValue: this.clearStencilValue,\n        stencilStoreOp: WebGPUConstants.StoreOp.Store\n      };\n    }\n  }, {\n    key: \"startComputePass\",\n    value: function startComputePass() {\n      if (this.currentComputePass) {\n        this.endComputePass();\n      }\n      this.currentComputePass = this.computeEncoder.beginComputePass();\n    }\n  }, {\n    key: \"startMainRenderPass\",\n    value: function startMainRenderPass() {\n      if (this.currentRenderPass && !this.currentRenderTarget) {\n        this.endMainRenderPass();\n      } // Resolve in case of MSAA\n\n      if (this.options.antialiasing) {\n        this.mainColorAttachments[0].resolveTarget = isSafari ?\n        // @ts-ignore\n        this.swapChain.getCurrentTexture().createDefaultView() : this.swapChain.getCurrentTexture().createView();\n      } else {\n        this.mainColorAttachments[0].attachment = isSafari ?\n        // @ts-ignore\n        this.swapChain.getCurrentTexture().createDefaultView() : this.swapChain.getCurrentTexture().createView();\n      }\n      this.currentRenderPass = this.renderEncoder.beginRenderPass({\n        colorAttachments: this.mainColorAttachments,\n        depthStencilAttachment: this.mainDepthAttachment // TODO: use framebuffer's depth & stencil\n      });\n      this.mainRenderPass = this.currentRenderPass;\n      if (this.cachedViewport) {\n        this.viewport(this.cachedViewport);\n      }\n    }\n  }, {\n    key: \"startRenderTargetRenderPass\",\n    value: function startRenderTargetRenderPass(renderTarget, clearColor, clearDepth) {\n      var _renderTarget$get$col, _renderTarget$get$dep;\n      var clearStencil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var gpuTexture = (_renderTarget$get$col = renderTarget.get().color) === null || _renderTarget$get$col === void 0 ? void 0 : _renderTarget$get$col.texture;\n      var colorTextureView;\n      if (gpuTexture) {\n        colorTextureView = gpuTexture.createView(this.currentRenderTargetViewDescriptor);\n      }\n      var depthStencilTexture = (_renderTarget$get$dep = renderTarget.get().depth) === null || _renderTarget$get$dep === void 0 ? void 0 : _renderTarget$get$dep.texture;\n      var depthStencilTextureView;\n      if (depthStencilTexture) {\n        depthStencilTextureView = depthStencilTexture.createView();\n      }\n      var renderPass = this.renderTargetEncoder.beginRenderPass({\n        colorAttachments: [{\n          attachment: colorTextureView,\n          loadValue: clearColor !== null ? clearColor : WebGPUConstants.LoadOp.Load,\n          storeOp: WebGPUConstants.StoreOp.Store\n        }],\n        depthStencilAttachment: depthStencilTexture && depthStencilTextureView ? {\n          attachment: depthStencilTextureView,\n          depthLoadValue: clearDepth ? this.clearDepthValue : WebGPUConstants.LoadOp.Load,\n          depthStoreOp: WebGPUConstants.StoreOp.Store,\n          stencilLoadValue: clearStencil ? this.clearStencilValue : WebGPUConstants.LoadOp.Load,\n          stencilStoreOp: WebGPUConstants.StoreOp.Store\n        } : undefined\n      });\n      this.currentRenderPass = renderPass;\n      if (this.cachedViewport) {\n        this.viewport(this.cachedViewport);\n      } // TODO WEBGPU set the scissor rect and the stencil reference value\n    }\n  }, {\n    key: \"endMainRenderPass\",\n    value: function endMainRenderPass() {\n      if (this.currentRenderPass === this.mainRenderPass && this.currentRenderPass !== null) {\n        this.currentRenderPass.endPass();\n        this.resetCachedViewport();\n        this.currentRenderPass = null;\n        this.mainRenderPass = null;\n      }\n    }\n  }, {\n    key: \"endComputePass\",\n    value: function endComputePass() {\n      if (this.currentComputePass) {\n        this.currentComputePass.endPass();\n        this.currentComputePass = null;\n      }\n    }\n  }, {\n    key: \"endRenderTargetRenderPass\",\n    value: function endRenderTargetRenderPass() {\n      if (this.currentRenderPass) {\n        this.currentRenderPass.endPass();\n        this.resetCachedViewport();\n      }\n    }\n  }, {\n    key: \"resetCachedViewport\",\n    value: function resetCachedViewport() {\n      this.cachedViewport = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }, {\n    key: \"unbindFramebuffer\",\n    value: function unbindFramebuffer(framebuffer) {\n      // unbind\n      if (this.currentRenderPass && this.currentRenderPass !== this.mainRenderPass) {\n        this.endRenderTargetRenderPass();\n      }\n      this.transientViewport.x = Infinity;\n      this.currentRenderTarget = null; // if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n      //   this._generateMipmaps(texture);\n      // }\n\n      this.currentRenderPass = this.mainRenderPass;\n    }\n  }]);\n  return WebGPUEngine;\n}(), _temp)) || _class);","map":{"version":3,"names":["isSafari","WebGPUConstants","injectable","glslang","WebGPUAttribute","WebGPUBuffer","WebGPUComputeModel","WebGPUElements","WebGPUFramebuffer","WebGPUModel","WebGPUTexture2D","WebGPUEngine","_dec","_class","_temp","_this","_classCallCheck","supportWebGPU","useWGSL","options","canvas","context","adapter","device","swapChain","mainPassSampleCount","mainTexture","depthTexture","mainColorAttachments","mainTextureExtends","mainDepthAttachment","uploadEncoder","renderEncoder","computeEncoder","renderTargetEncoder","commandBuffers","Array","fill","undefined","currentRenderPass","mainRenderPass","currentRenderTargetViewDescriptor","currentComputePass","bundleEncoder","tempBuffers","currentRenderTarget","uploadEncoderDescriptor","label","renderEncoderDescriptor","renderTargetEncoderDescriptor","computeEncoderDescriptor","pipelines","computePipelines","defaultSampleCount","clearDepthValue","clearStencilValue","transientViewport","x","Infinity","y","width","height","cachedViewport","clear","framebuffer","color","depth","stencil","supportCompute","startComputePass","endRenderTargetRenderPass","startRenderTargetRenderPass","loadValue","LoadOp","Load","depthLoadValue","stencilLoadValue","endMainRenderPass","startMainRenderPass","createModel","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","model","wrap","_callee$","_context","prev","next","init","abrupt","stop","_x","apply","arguments","createAttribute","createBuffer","createElements","createTexture2D","createFramebuffer","useFramebuffer","drawCommands","unbindFramebuffer","dimension","TextureViewDimension","E2d","arrayLayerCount","aspect","TextureAspect","All","createComputeModel","_ref2","_callee2","_callee2$","_context2","_x2","getCanvas","getGLContext","Error","viewport","_ref3","renderPass","getCurrentRenderPass","setViewport","_renderPass","readPixels","_createClass","key","value","isFloatSupported","_init","_callee3","config","_callee3$","_context3","antialiasing","initGlslang","initContextAndSwapChain","initMainAttachments","_x3","setScissor","scissor","destroy","forEach","buffer","beginFrame","createCommandEncoder","endFrame","endComputePass","finish","getQueue","submit","filter","defaultQueue","_initGlslang","_callee4","_navigator","_navigator$gpu","_callee4$","_context4","sent","navigator","gpu","requestAdapter","requestDevice","getContext","configureSwapChain","format","swapChainFormat","usage","TextureUsage","OutputAttachment","CopySrc","mainTextureDescriptor","size","mipLevelCount","sampleCount","TextureDimension","TextureFormat","BGRA8Unorm","createTexture","attachment","createDefaultView","createView","storeOp","StoreOp","Store","getCurrentTexture","depthTextureDescriptor","Depth24PlusStencil8","depthStoreOp","stencilStoreOp","beginComputePass","resolveTarget","beginRenderPass","colorAttachments","depthStencilAttachment","renderTarget","clearColor","clearDepth","_renderTarget$get$col","_renderTarget$get$dep","clearStencil","length","gpuTexture","get","texture","colorTextureView","depthStencilTexture","depthStencilTextureView","endPass","resetCachedViewport"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-engine/src/webgpu/index.ts"],"sourcesContent":["/**\n * implements renderService with WebGPU API\n * @see https://webgpu.io/\n * @see https://github.com/BabylonJS/Babylon.js/blob/WebGPU/src/Engines/webgpuEngine.ts\n */\nimport {\n  GLSLContext,\n  IAttribute,\n  IAttributeInitializationOptions,\n  IBuffer,\n  IBufferInitializationOptions,\n  IClearOptions,\n  IElements,\n  IElementsInitializationOptions,\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n  IModel,\n  IModelInitializationOptions,\n  IReadPixelsOptions,\n  IRendererConfig,\n  IRendererService,\n  isSafari,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  IViewport,\n} from '@antv/g-webgpu-core';\n// import { Glslang } from '@webgpu/glslang/dist/web-devel/glslang.onefile';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { vec4 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nimport glslang from './glslang';\nimport WebGPUAttribute from './WebGPUAttribute';\nimport WebGPUBuffer from './WebGPUBuffer';\nimport WebGPUComputeModel from './WebGPUComputeModel';\nimport WebGPUElements from './WebGPUElements';\nimport WebGPUFramebuffer from './WebGPUFramebuffer';\nimport WebGPUModel from './WebGPUModel';\nimport WebGPUTexture2D from './WebGPUTexture2D';\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * regl renderer\n */\n@injectable()\nexport class WebGPUEngine implements IRendererService {\n  public supportWebGPU = true;\n  public useWGSL = false;\n\n  public options: IRendererConfig;\n  public canvas: HTMLCanvasElement;\n  public context: GPUCanvasContext;\n  public glslang: any;\n  public adapter: GPUAdapter;\n  public device: GPUDevice;\n  public swapChain: GPUSwapChain;\n\n  public mainPassSampleCount: number;\n\n  public mainTexture: GPUTexture;\n  public depthTexture: GPUTexture;\n  public mainColorAttachments: GPURenderPassColorAttachmentDescriptor[];\n  public mainTextureExtends: GPUExtent3D;\n  public mainDepthAttachment: GPURenderPassDepthStencilAttachmentDescriptor;\n\n  // Frame Life Cycle (recreated each frame)\n  public uploadEncoder: GPUCommandEncoder;\n  public renderEncoder: GPUCommandEncoder;\n  public computeEncoder: GPUCommandEncoder;\n  public renderTargetEncoder: GPUCommandEncoder;\n  public commandBuffers: GPUCommandBuffer[] = new Array(4).fill(undefined);\n\n  // Frame Buffer Life Cycle (recreated for each render target pass)\n  public currentRenderPass: GPURenderPassEncoder | null = null;\n  public mainRenderPass: GPURenderPassEncoder | null = null;\n  public currentRenderTargetViewDescriptor: GPUTextureViewDescriptor;\n  public currentComputePass: GPUComputePassEncoder | null = null;\n  public bundleEncoder: GPURenderBundleEncoder | null;\n  public tempBuffers: GPUBuffer[] = [];\n  public currentRenderTarget: WebGPUFramebuffer | null = null;\n\n  public readonly uploadEncoderDescriptor = { label: 'upload' };\n  public readonly renderEncoderDescriptor = { label: 'render' };\n  public readonly renderTargetEncoderDescriptor = { label: 'renderTarget' };\n  public readonly computeEncoderDescriptor = { label: 'compute' };\n\n  /**\n   * 通过名称访问\n   */\n  private pipelines: {\n    [pipelineName: string]: GPURenderPipeline;\n  } = {};\n  private computePipelines: {\n    [pipelineName: string]: GPUComputePipeline;\n  } = {};\n\n  private readonly defaultSampleCount = 4;\n  private readonly clearDepthValue = 1;\n  private readonly clearStencilValue = 0;\n  private transientViewport: IViewport = {\n    x: Infinity,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n  private cachedViewport: IViewport = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n\n  public isFloatSupported() {\n    return true;\n  }\n\n  public async init(config: IRendererConfig): Promise<void> {\n    this.canvas = config.canvas!;\n    this.options = config;\n    this.useWGSL = !!config.useWGSL;\n    this.mainPassSampleCount = config.antialiasing\n      ? this.defaultSampleCount\n      : 1;\n\n    await this.initGlslang();\n    this.initContextAndSwapChain();\n    this.initMainAttachments();\n  }\n\n  public setScissor(\n    scissor: Partial<{\n      enable: boolean;\n      box: { x: number; y: number; width: number; height: number };\n    }>,\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  public clear = (options: IClearOptions): void => {\n    const { framebuffer, color, depth, stencil } = options;\n\n    if (this.options.supportCompute) {\n      this.startComputePass();\n    }\n\n    // We need to recreate the render pass so that the new parameters for clear color / depth / stencil are taken into account\n    if (this.currentRenderTarget) {\n      if (this.currentRenderPass) {\n        this.endRenderTargetRenderPass();\n      }\n      this.startRenderTargetRenderPass(\n        this.currentRenderTarget!,\n        color ? color : null,\n        !!depth,\n        !!stencil,\n      );\n    } else {\n      // if (this.useReverseDepthBuffer) {\n      //     this._depthCullingState.depthFunc = Constants.GREATER;\n      // }\n\n      this.mainColorAttachments[0].loadValue = color\n        ? color\n        : WebGPUConstants.LoadOp.Load;\n\n      this.mainDepthAttachment.depthLoadValue = depth\n        ? depth\n        : WebGPUConstants.LoadOp.Load;\n      this.mainDepthAttachment.stencilLoadValue = stencil\n        ? this.clearStencilValue\n        : WebGPUConstants.LoadOp.Load;\n\n      if (this.mainRenderPass) {\n        this.endMainRenderPass();\n      }\n\n      this.startMainRenderPass();\n    }\n  };\n\n  public createModel = async (\n    options: IModelInitializationOptions,\n  ): Promise<IModel> => {\n    const model = new WebGPUModel(this, options);\n    await model.init();\n    return model;\n  };\n\n  public createAttribute = (\n    options: IAttributeInitializationOptions,\n  ): IAttribute => {\n    return new WebGPUAttribute(this, options);\n  };\n\n  public createBuffer = (options: IBufferInitializationOptions): IBuffer => {\n    return new WebGPUBuffer(this, options);\n  };\n\n  public createElements = (\n    options: IElementsInitializationOptions,\n  ): IElements => {\n    return new WebGPUElements(this, options);\n  };\n\n  public createTexture2D = (\n    options: ITexture2DInitializationOptions,\n  ): ITexture2D => {\n    return new WebGPUTexture2D(this, options);\n  };\n\n  public createFramebuffer = (\n    options: IFramebufferInitializationOptions,\n  ): IFramebuffer => {\n    return new WebGPUFramebuffer(this, options);\n  };\n\n  public useFramebuffer = (\n    framebuffer: IFramebuffer | null,\n    drawCommands: () => void,\n  ): void => {\n    // bind\n    if (this.currentRenderTarget) {\n      this.unbindFramebuffer(this.currentRenderTarget);\n    }\n    this.currentRenderTarget = framebuffer as WebGPUFramebuffer;\n\n    // TODO: use mipmap options in framebuffer\n    this.currentRenderTargetViewDescriptor = {\n      dimension: WebGPUConstants.TextureViewDimension.E2d,\n      // mipLevelCount: bindWithMipMaps ? WebGPUTextureHelper.computeNumMipmapLevels(texture.width, texture.height) - lodLevel : 1,\n      // baseArrayLayer: faceIndex,\n      // baseMipLevel: lodLevel,\n      arrayLayerCount: 1,\n      aspect: WebGPUConstants.TextureAspect.All,\n    };\n\n    this.currentRenderPass = null;\n\n    drawCommands();\n  };\n\n  public createComputeModel = async (context: GLSLContext) => {\n    const model = new WebGPUComputeModel(this, context);\n    await model.init();\n    return model;\n  };\n\n  public getCanvas = (): HTMLCanvasElement => {\n    return this.canvas;\n  };\n\n  public getGLContext = (): WebGLRenderingContext => {\n    throw new Error('Method not implemented.');\n  };\n\n  public viewport = ({\n    x,\n    y,\n    width,\n    height,\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }): void => {\n    if (!this.currentRenderPass) {\n      // call viewport() before current render pass created\n      this.transientViewport = { x, y, width, height };\n    } else if (this.transientViewport.x !== Infinity) {\n      const renderPass = this.getCurrentRenderPass();\n      // @see https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setviewport\n      renderPass.setViewport(\n        this.transientViewport.x,\n        this.transientViewport.y,\n        this.transientViewport.width,\n        this.transientViewport.height,\n        0,\n        1,\n      );\n    } else if (\n      x !== this.cachedViewport.x ||\n      y !== this.cachedViewport.y ||\n      width !== this.cachedViewport.width ||\n      height !== this.cachedViewport.height\n    ) {\n      this.cachedViewport = { x, y, width, height };\n      const renderPass = this.getCurrentRenderPass();\n      renderPass.setViewport(x, y, width, height, 0, 1);\n    }\n  };\n\n  public readPixels = (options: IReadPixelsOptions): Uint8Array => {\n    throw new Error('Method not implemented.');\n  };\n\n  public destroy(): void {\n    if (this.mainTexture) {\n      this.mainTexture.destroy();\n    }\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n    this.tempBuffers.forEach((buffer) => buffer.destroy());\n    this.tempBuffers = [];\n  }\n\n  public beginFrame() {\n    this.uploadEncoder = this.device.createCommandEncoder(\n      this.uploadEncoderDescriptor,\n    );\n    this.renderEncoder = this.device.createCommandEncoder(\n      this.renderEncoderDescriptor,\n    );\n    this.renderTargetEncoder = this.device.createCommandEncoder(\n      this.renderTargetEncoderDescriptor,\n    );\n    if (this.options.supportCompute) {\n      this.computeEncoder = this.device.createCommandEncoder(\n        this.computeEncoderDescriptor,\n      );\n    }\n  }\n\n  public endFrame() {\n    if (this.options.supportCompute) {\n      this.endComputePass();\n    }\n\n    this.endMainRenderPass();\n\n    this.commandBuffers[0] = this.uploadEncoder.finish();\n    this.commandBuffers[1] = this.renderEncoder.finish();\n    if (this.options.supportCompute) {\n      this.commandBuffers[2] = this.computeEncoder.finish();\n    }\n    this.commandBuffers[3] = this.renderTargetEncoder.finish();\n\n    if (isSafari) {\n      this.device\n        // @ts-ignore\n        .getQueue()\n        .submit(this.commandBuffers.filter((buffer) => buffer));\n    } else {\n      this.device.defaultQueue.submit(\n        this.commandBuffers.filter((buffer) => buffer),\n      );\n    }\n  }\n\n  public getCurrentRenderPass(): GPURenderPassEncoder {\n    if (this.currentRenderTarget && !this.currentRenderPass) {\n      this.startRenderTargetRenderPass(\n        this.currentRenderTarget,\n        null,\n        false,\n        false,\n      );\n    } else if (!this.currentRenderPass) {\n      this.startMainRenderPass();\n    }\n\n    return this.currentRenderPass!;\n  }\n\n  private async initGlslang() {\n    this.glslang = await glslang();\n    this.adapter = (await navigator?.gpu?.requestAdapter()) as GPUAdapter;\n    this.device = (await this.adapter.requestDevice()) as GPUDevice;\n  }\n\n  private initContextAndSwapChain() {\n    this.context = (this.canvas.getContext(\n      isSafari ? 'gpu' : 'gpupresent',\n    ) as unknown) as GPUCanvasContext;\n    this.swapChain = this.context.configureSwapChain({\n      device: this.device,\n      format: this.options.swapChainFormat!,\n      usage:\n        WebGPUConstants.TextureUsage.OutputAttachment |\n        WebGPUConstants.TextureUsage.CopySrc,\n    });\n  }\n\n  private initMainAttachments() {\n    this.mainTextureExtends = {\n      width: this.canvas.width,\n      height: this.canvas.height,\n      depth: 1,\n    };\n\n    if (this.options.antialiasing) {\n      const mainTextureDescriptor = {\n        size: this.mainTextureExtends,\n        // TODO: arrayLayerCount is deprecated: use size.depth\n        // arrayLayerCount: 1,\n        mipLevelCount: 1,\n        sampleCount: this.mainPassSampleCount,\n        dimension: WebGPUConstants.TextureDimension.E2d,\n        format: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        usage: WebGPUConstants.TextureUsage.OutputAttachment,\n      };\n\n      if (this.mainTexture) {\n        this.mainTexture.destroy();\n      }\n      this.mainTexture = this.device.createTexture(mainTextureDescriptor);\n      this.mainColorAttachments = [\n        {\n          attachment: isSafari\n            ? // @ts-ignore\n              this.mainTexture.createDefaultView()\n            : this.mainTexture.createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ];\n    } else {\n      this.mainColorAttachments = [\n        {\n          attachment: isSafari\n            ? // @ts-ignore\n              this.swapChain.getCurrentTexture().createDefaultView()\n            : this.swapChain.getCurrentTexture().createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ];\n    }\n\n    const depthTextureDescriptor = {\n      size: this.mainTextureExtends,\n      // arrayLayerCount: 1,\n      mipLevelCount: 1,\n      sampleCount: this.mainPassSampleCount,\n      dimension: WebGPUConstants.TextureDimension.E2d,\n      format: isSafari\n        ? 'depth32float-stencil8'\n        : WebGPUConstants.TextureFormat.Depth24PlusStencil8,\n      usage: WebGPUConstants.TextureUsage.OutputAttachment,\n    };\n\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n\n    this.depthTexture = this.device.createTexture(\n      // @ts-ignore\n      depthTextureDescriptor,\n    );\n    this.mainDepthAttachment = {\n      attachment: isSafari\n        ? // @ts-ignore\n          this.depthTexture.createDefaultView()\n        : this.depthTexture.createView(),\n      depthLoadValue: this.clearDepthValue,\n      depthStoreOp: WebGPUConstants.StoreOp.Store,\n      stencilLoadValue: this.clearStencilValue,\n      stencilStoreOp: WebGPUConstants.StoreOp.Store,\n    };\n  }\n\n  private startComputePass() {\n    if (this.currentComputePass) {\n      this.endComputePass();\n    }\n\n    this.currentComputePass = this.computeEncoder.beginComputePass();\n  }\n\n  private startMainRenderPass() {\n    if (this.currentRenderPass && !this.currentRenderTarget) {\n      this.endMainRenderPass();\n    }\n\n    // Resolve in case of MSAA\n    if (this.options.antialiasing) {\n      this.mainColorAttachments[0].resolveTarget = isSafari\n        ? // @ts-ignore\n          this.swapChain.getCurrentTexture().createDefaultView()\n        : this.swapChain.getCurrentTexture().createView();\n    } else {\n      this.mainColorAttachments[0].attachment = isSafari\n        ? // @ts-ignore\n          this.swapChain.getCurrentTexture().createDefaultView()\n        : this.swapChain.getCurrentTexture().createView();\n    }\n\n    this.currentRenderPass = this.renderEncoder.beginRenderPass({\n      colorAttachments: this.mainColorAttachments,\n      depthStencilAttachment: this.mainDepthAttachment, // TODO: use framebuffer's depth & stencil\n    });\n\n    this.mainRenderPass = this.currentRenderPass;\n\n    if (this.cachedViewport) {\n      this.viewport(this.cachedViewport);\n    }\n  }\n\n  private startRenderTargetRenderPass(\n    renderTarget: WebGPUFramebuffer,\n    clearColor: [number, number, number, number] | null,\n    clearDepth: boolean,\n    clearStencil: boolean = false,\n  ) {\n    const gpuTexture = renderTarget.get().color?.texture;\n    let colorTextureView: GPUTextureView;\n    if (gpuTexture) {\n      colorTextureView = gpuTexture.createView(\n        this.currentRenderTargetViewDescriptor,\n      );\n    }\n\n    const depthStencilTexture = renderTarget.get().depth?.texture;\n    let depthStencilTextureView;\n    if (depthStencilTexture) {\n      depthStencilTextureView = depthStencilTexture.createView();\n    }\n\n    const renderPass = this.renderTargetEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorTextureView!,\n          loadValue:\n            clearColor !== null ? clearColor : WebGPUConstants.LoadOp.Load,\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ],\n      depthStencilAttachment:\n        depthStencilTexture && depthStencilTextureView\n          ? {\n              attachment: depthStencilTextureView,\n              depthLoadValue: clearDepth\n                ? this.clearDepthValue\n                : WebGPUConstants.LoadOp.Load,\n              depthStoreOp: WebGPUConstants.StoreOp.Store,\n              stencilLoadValue: clearStencil\n                ? this.clearStencilValue\n                : WebGPUConstants.LoadOp.Load,\n              stencilStoreOp: WebGPUConstants.StoreOp.Store,\n            }\n          : undefined,\n    });\n\n    this.currentRenderPass = renderPass;\n\n    if (this.cachedViewport) {\n      this.viewport(this.cachedViewport);\n    }\n\n    // TODO WEBGPU set the scissor rect and the stencil reference value\n  }\n\n  private endMainRenderPass() {\n    if (\n      this.currentRenderPass === this.mainRenderPass &&\n      this.currentRenderPass !== null\n    ) {\n      this.currentRenderPass.endPass();\n      this.resetCachedViewport();\n      this.currentRenderPass = null;\n      this.mainRenderPass = null;\n    }\n  }\n\n  private endComputePass() {\n    if (this.currentComputePass) {\n      this.currentComputePass.endPass();\n      this.currentComputePass = null;\n    }\n  }\n\n  private endRenderTargetRenderPass() {\n    if (this.currentRenderPass) {\n      this.currentRenderPass.endPass();\n      this.resetCachedViewport();\n    }\n  }\n\n  private resetCachedViewport() {\n    this.cachedViewport = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  private unbindFramebuffer(framebuffer: WebGPUFramebuffer) {\n    // unbind\n    if (\n      this.currentRenderPass &&\n      this.currentRenderPass !== this.mainRenderPass\n    ) {\n      this.endRenderTargetRenderPass();\n    }\n\n    this.transientViewport.x = Infinity;\n    this.currentRenderTarget = null;\n\n    // if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n    //   this._generateMipmaps(texture);\n    // }\n\n    this.currentRenderPass = this.mainRenderPass;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}