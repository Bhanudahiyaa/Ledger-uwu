{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Dom, NumberExt } from '../util';\nimport { Point, Rectangle } from '../geometry';\nimport { Base } from './base';\nexport class TransformManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.widgets = new Map();\n  }\n  get container() {\n    return this.graph.view.container;\n  }\n  get viewport() {\n    return this.graph.view.viewport;\n  }\n  get isSelectionEnabled() {\n    return this.options.selecting.enabled === true;\n  }\n  init() {\n    this.startListening();\n    this.resize();\n  }\n  startListening() {\n    this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.on('node:selected', this.onNodeSelected, this);\n    this.graph.on('node:unselected', this.onNodeUnSelected, this);\n  }\n  stopListening() {\n    this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.off('node:selected', this.onNodeSelected, this);\n    this.graph.off('node:unselected', this.onNodeUnSelected, this);\n  }\n  onNodeMouseUp({\n    node\n  }) {\n    if (!this.isSelectionEnabled) {\n      const widget = this.graph.hook.createTransform(node, {\n        clearAll: true\n      });\n      if (widget) {\n        this.widgets.set(node, widget);\n      }\n    }\n  }\n  onNodeSelected({\n    node\n  }) {\n    if (this.isSelectionEnabled) {\n      const widget = this.graph.hook.createTransform(node, {\n        clearAll: false\n      });\n      if (widget) {\n        this.widgets.set(node, widget);\n      }\n    }\n  }\n  onNodeUnSelected({\n    node\n  }) {\n    if (this.isSelectionEnabled) {\n      const widget = this.widgets.get(node);\n      if (widget) {\n        widget.dispose();\n      }\n      this.widgets.delete(node);\n    }\n  }\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  getMatrix() {\n    const transform = this.viewport.getAttribute('transform');\n    if (transform !== this.viewportTransformString) {\n      // `getCTM`: top-left relative to the SVG element\n      // `getScreenCTM`: top-left relative to the document\n      this.viewportMatrix = this.viewport.getCTM();\n      this.viewportTransformString = transform;\n    }\n    // Clone the cached current transformation matrix.\n    // If no matrix previously stored the identity matrix is returned.\n    return Dom.createSVGMatrix(this.viewportMatrix);\n  }\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  setMatrix(matrix) {\n    const ctm = Dom.createSVGMatrix(matrix);\n    const transform = Dom.matrixToTransformString(ctm);\n    this.viewport.setAttribute('transform', transform);\n    this.viewportMatrix = ctm;\n    this.viewportTransformString = transform;\n  }\n  resize(width, height) {\n    let w = width === undefined ? this.options.width : width;\n    let h = height === undefined ? this.options.height : height;\n    this.options.width = w;\n    this.options.height = h;\n    if (typeof w === 'number') {\n      w = Math.round(w);\n    }\n    if (typeof h === 'number') {\n      h = Math.round(h);\n    }\n    this.container.style.width = w == null ? '' : `${w}px`;\n    this.container.style.height = h == null ? '' : `${h}px`;\n    const size = this.getComputedSize();\n    this.graph.trigger('resize', Object.assign({}, size));\n    return this;\n  }\n  getComputedSize() {\n    let w = this.options.width;\n    let h = this.options.height;\n    if (!NumberExt.isNumber(w)) {\n      w = this.container.clientWidth;\n    }\n    if (!NumberExt.isNumber(h)) {\n      h = this.container.clientHeight;\n    }\n    return {\n      width: w,\n      height: h\n    };\n  }\n  getScale() {\n    return Dom.matrixToScale(this.getMatrix());\n  }\n  scale(sx, sy = sx, ox = 0, oy = 0, options = {}) {\n    sx = this.clampScale(sx); // eslint-disable-line\n    sy = this.clampScale(sy); // eslint-disable-line\n    if (ox || oy) {\n      const ts = this.getTranslation();\n      const tx = ts.tx - ox * (sx - 1);\n      const ty = ts.ty - oy * (sy - 1);\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty);\n      }\n    }\n    const matrix = this.getMatrix();\n    matrix.a = sx;\n    matrix.d = sy;\n    this.setMatrix(matrix);\n    this.graph.trigger('scale', Object.assign({\n      sx,\n      sy,\n      ox,\n      oy\n    }, options));\n    return this;\n  }\n  clampScale(scale) {\n    const range = this.graph.options.scaling;\n    return NumberExt.clamp(scale, range.min || 0.01, range.max || 16);\n  }\n  getZoom() {\n    return this.getScale().sx;\n  }\n  zoom(factor, options) {\n    options = options || {}; // eslint-disable-line\n    let sx = factor;\n    let sy = factor;\n    const scale = this.getScale();\n    const clientSize = this.getComputedSize();\n    let cx = clientSize.width / 2;\n    let cy = clientSize.height / 2;\n    if (!options.absolute) {\n      sx += scale.sx;\n      sy += scale.sy;\n    }\n    if (options.scaleGrid) {\n      sx = Math.round(sx / options.scaleGrid) * options.scaleGrid;\n      sy = Math.round(sy / options.scaleGrid) * options.scaleGrid;\n    }\n    if (options.maxScale) {\n      sx = Math.min(options.maxScale, sx);\n      sy = Math.min(options.maxScale, sy);\n    }\n    if (options.minScale) {\n      sx = Math.max(options.minScale, sx);\n      sy = Math.max(options.minScale, sy);\n    }\n    if (options.center) {\n      cx = options.center.x;\n      cy = options.center.y;\n    }\n    sx = this.clampScale(sx);\n    sy = this.clampScale(sy);\n    if (cx || cy) {\n      const ts = this.getTranslation();\n      const tx = cx - (cx - ts.tx) * (sx / scale.sx);\n      const ty = cy - (cy - ts.ty) * (sy / scale.sy);\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty, {\n          ui: options.ui\n        });\n      }\n    }\n    this.scale(sx, sy, 0, 0, {\n      ui: options.ui\n    });\n    return this;\n  }\n  getRotation() {\n    return Dom.matrixToRotation(this.getMatrix());\n  }\n  rotate(angle, cx, cy) {\n    if (cx == null || cy == null) {\n      const bbox = Dom.getBBox(this.graph.view.stage);\n      cx = bbox.width / 2; // eslint-disable-line\n      cy = bbox.height / 2; // eslint-disable-line\n    }\n    const ctm = this.getMatrix().translate(cx, cy).rotate(angle).translate(-cx, -cy);\n    this.setMatrix(ctm);\n    return this;\n  }\n  getTranslation() {\n    return Dom.matrixToTranslation(this.getMatrix());\n  }\n  translate(tx, ty, options = {}) {\n    const matrix = this.getMatrix();\n    matrix.e = tx || 0;\n    matrix.f = ty || 0;\n    this.setMatrix(matrix);\n    const ts = this.getTranslation();\n    this.options.x = ts.tx;\n    this.options.y = ts.ty;\n    this.graph.trigger('translate', Object.assign(Object.assign({}, ts), options));\n    return this;\n  }\n  setOrigin(ox, oy) {\n    return this.translate(ox || 0, oy || 0);\n  }\n  fitToContent(gridWidth, gridHeight, padding, options) {\n    if (typeof gridWidth === 'object') {\n      const opts = gridWidth;\n      gridWidth = opts.gridWidth || 1; // eslint-disable-line\n      gridHeight = opts.gridHeight || 1; // eslint-disable-line\n      padding = opts.padding || 0; // eslint-disable-line\n      options = opts; // eslint-disable-line\n    } else {\n      gridWidth = gridWidth || 1; // eslint-disable-line\n      gridHeight = gridHeight || 1; // eslint-disable-line\n      padding = padding || 0; // eslint-disable-line\n      if (options == null) {\n        options = {}; // eslint-disable-line\n      }\n    }\n    const paddings = NumberExt.normalizeSides(padding);\n    const border = options.border || 0;\n    const contentArea = options.contentArea ? Rectangle.create(options.contentArea) : this.getContentArea(options);\n    if (border > 0) {\n      contentArea.inflate(border);\n    }\n    const scale = this.getScale();\n    const translate = this.getTranslation();\n    const sx = scale.sx;\n    const sy = scale.sy;\n    contentArea.x *= sx;\n    contentArea.y *= sy;\n    contentArea.width *= sx;\n    contentArea.height *= sy;\n    let width = Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) * gridWidth;\n    let height = Math.max(Math.ceil((contentArea.height + contentArea.y) / gridHeight), 1) * gridHeight;\n    let tx = 0;\n    let ty = 0;\n    if (options.allowNewOrigin === 'negative' && contentArea.x < 0 || options.allowNewOrigin === 'positive' && contentArea.x >= 0 || options.allowNewOrigin === 'any') {\n      tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth;\n      tx += paddings.left;\n      width += tx;\n    }\n    if (options.allowNewOrigin === 'negative' && contentArea.y < 0 || options.allowNewOrigin === 'positive' && contentArea.y >= 0 || options.allowNewOrigin === 'any') {\n      ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight;\n      ty += paddings.top;\n      height += ty;\n    }\n    width += paddings.right;\n    height += paddings.bottom;\n    // Make sure the resulting width and height are greater than minimum.\n    width = Math.max(width, options.minWidth || 0);\n    height = Math.max(height, options.minHeight || 0);\n    // Make sure the resulting width and height are lesser than maximum.\n    width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER);\n    height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER);\n    const size = this.getComputedSize();\n    const sizeChanged = width !== size.width || height !== size.height;\n    const originChanged = tx !== translate.tx || ty !== translate.ty;\n    // Change the dimensions only if there is a size discrepency or an origin change\n    if (originChanged) {\n      this.translate(tx, ty);\n    }\n    if (sizeChanged) {\n      this.resize(width, height);\n    }\n    return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy);\n  }\n  scaleContentToFit(options = {}) {\n    this.scaleContentToFitImpl(options);\n  }\n  scaleContentToFitImpl(options = {}, translate = true) {\n    let contentBBox;\n    let contentLocalOrigin;\n    if (options.contentArea) {\n      const contentArea = options.contentArea;\n      contentBBox = this.graph.localToGraph(contentArea);\n      contentLocalOrigin = Point.create(contentArea);\n    } else {\n      contentBBox = this.getContentBBox(options);\n      contentLocalOrigin = this.graph.graphToLocal(contentBBox);\n    }\n    if (!contentBBox.width || !contentBBox.height) {\n      return;\n    }\n    const padding = NumberExt.normalizeSides(options.padding);\n    const minScale = options.minScale || 0;\n    const maxScale = options.maxScale || Number.MAX_SAFE_INTEGER;\n    const minScaleX = options.minScaleX || minScale;\n    const maxScaleX = options.maxScaleX || maxScale;\n    const minScaleY = options.minScaleY || minScale;\n    const maxScaleY = options.maxScaleY || maxScale;\n    let fittingBox;\n    if (options.viewportArea) {\n      fittingBox = options.viewportArea;\n    } else {\n      const computedSize = this.getComputedSize();\n      const currentTranslate = this.getTranslation();\n      fittingBox = {\n        x: currentTranslate.tx,\n        y: currentTranslate.ty,\n        width: computedSize.width,\n        height: computedSize.height\n      };\n    }\n    fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n      x: padding.left,\n      y: padding.top,\n      width: -padding.left - padding.right,\n      height: -padding.top - padding.bottom\n    });\n    const currentScale = this.getScale();\n    let newSX = fittingBox.width / contentBBox.width * currentScale.sx;\n    let newSY = fittingBox.height / contentBBox.height * currentScale.sy;\n    if (options.preserveAspectRatio !== false) {\n      newSX = newSY = Math.min(newSX, newSY);\n    }\n    // snap scale to a grid\n    const gridSize = options.scaleGrid;\n    if (gridSize) {\n      newSX = gridSize * Math.floor(newSX / gridSize);\n      newSY = gridSize * Math.floor(newSY / gridSize);\n    }\n    // scale min/max boundaries\n    newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX);\n    newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY);\n    this.scale(newSX, newSY);\n    if (translate) {\n      const origin = this.options;\n      const newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x;\n      const newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y;\n      this.translate(newOX, newOY);\n    }\n  }\n  getContentArea(options = {}) {\n    if (options.useCellGeometry) {\n      return this.model.getAllCellsBBox() || new Rectangle();\n    }\n    return Dom.getBBox(this.graph.view.stage);\n  }\n  getContentBBox(options = {}) {\n    return this.graph.localToGraph(this.getContentArea(options));\n  }\n  getGraphArea() {\n    const rect = Rectangle.fromSize(this.getComputedSize());\n    return this.graph.graphToLocal(rect);\n  }\n  zoomToRect(rect, options = {}) {\n    const area = Rectangle.create(rect);\n    const graph = this.graph;\n    options.contentArea = area;\n    if (options.viewportArea == null) {\n      options.viewportArea = {\n        x: graph.options.x,\n        y: graph.options.y,\n        width: this.options.width,\n        height: this.options.height\n      };\n    }\n    this.scaleContentToFitImpl(options, false);\n    const center = area.getCenter();\n    this.centerPoint(center.x, center.y);\n    return this;\n  }\n  zoomToFit(options = {}) {\n    return this.zoomToRect(this.getContentArea(options), options);\n  }\n  centerPoint(x, y) {\n    const clientSize = this.getComputedSize();\n    const scale = this.getScale();\n    const ts = this.getTranslation();\n    const cx = clientSize.width / 2;\n    const cy = clientSize.height / 2;\n    x = typeof x === 'number' ? x : cx; // eslint-disable-line\n    y = typeof y === 'number' ? y : cy; // eslint-disable-line\n    x = cx - x * scale.sx; // eslint-disable-line\n    y = cy - y * scale.sy; // eslint-disable-line\n    if (ts.tx !== x || ts.ty !== y) {\n      this.translate(x, y);\n    }\n  }\n  centerContent(options) {\n    const rect = this.graph.getContentArea(options);\n    const center = rect.getCenter();\n    this.centerPoint(center.x, center.y);\n  }\n  centerCell(cell) {\n    return this.positionCell(cell, 'center');\n  }\n  positionPoint(point, x, y) {\n    const clientSize = this.getComputedSize();\n    // eslint-disable-next-line\n    x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width));\n    if (x < 0) {\n      x = clientSize.width + x; // eslint-disable-line\n    }\n    // eslint-disable-next-line\n    y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height));\n    if (y < 0) {\n      y = clientSize.height + y; // eslint-disable-line\n    }\n    const ts = this.getTranslation();\n    const scale = this.getScale();\n    const dx = x - point.x * scale.sx;\n    const dy = y - point.y * scale.sy;\n    if (ts.tx !== dx || ts.ty !== dy) {\n      this.translate(dx, dy);\n    }\n  }\n  positionRect(rect, pos) {\n    const bbox = Rectangle.create(rect);\n    switch (pos) {\n      case 'center':\n        return this.positionPoint(bbox.getCenter(), '50%', '50%');\n      case 'top':\n        return this.positionPoint(bbox.getTopCenter(), '50%', 0);\n      case 'top-right':\n        return this.positionPoint(bbox.getTopRight(), '100%', 0);\n      case 'right':\n        return this.positionPoint(bbox.getRightMiddle(), '100%', '50%');\n      case 'bottom-right':\n        return this.positionPoint(bbox.getBottomRight(), '100%', '100%');\n      case 'bottom':\n        return this.positionPoint(bbox.getBottomCenter(), '50%', '100%');\n      case 'bottom-left':\n        return this.positionPoint(bbox.getBottomLeft(), 0, '100%');\n      case 'left':\n        return this.positionPoint(bbox.getLeftMiddle(), 0, '50%');\n      case 'top-left':\n        return this.positionPoint(bbox.getTopLeft(), 0, 0);\n      default:\n        return this;\n    }\n  }\n  positionCell(cell, pos) {\n    const bbox = cell.getBBox();\n    return this.positionRect(bbox, pos);\n  }\n  positionContent(pos, options) {\n    const rect = this.graph.getContentArea(options);\n    return this.positionRect(rect, pos);\n  }\n  dispose() {\n    this.widgets.forEach(widget => widget.dispose());\n    this.widgets.clear();\n    this.stopListening();\n  }\n}\n__decorate([TransformManager.dispose()], TransformManager.prototype, \"dispose\", null);","map":{"version":3,"names":["Dom","NumberExt","Point","Rectangle","Base","TransformManager","constructor","widgets","Map","container","graph","view","viewport","isSelectionEnabled","options","selecting","enabled","init","startListening","resize","on","onNodeMouseUp","onNodeSelected","onNodeUnSelected","stopListening","off","node","widget","hook","createTransform","clearAll","set","get","dispose","delete","getMatrix","transform","getAttribute","viewportTransformString","viewportMatrix","getCTM","createSVGMatrix","setMatrix","matrix","ctm","matrixToTransformString","setAttribute","width","height","w","undefined","h","Math","round","style","size","getComputedSize","trigger","Object","assign","isNumber","clientWidth","clientHeight","getScale","matrixToScale","scale","sx","sy","ox","oy","clampScale","ts","getTranslation","tx","ty","translate","a","d","range","scaling","clamp","min","max","getZoom","zoom","factor","clientSize","cx","cy","absolute","scaleGrid","maxScale","minScale","center","x","y","ui","getRotation","matrixToRotation","rotate","angle","bbox","getBBox","stage","matrixToTranslation","e","f","setOrigin","fitToContent","gridWidth","gridHeight","padding","opts","paddings","normalizeSides","border","contentArea","create","getContentArea","inflate","ceil","allowNewOrigin","left","top","right","bottom","minWidth","minHeight","maxWidth","Number","MAX_SAFE_INTEGER","maxHeight","sizeChanged","originChanged","scaleContentToFit","scaleContentToFitImpl","contentBBox","contentLocalOrigin","localToGraph","getContentBBox","graphToLocal","minScaleX","maxScaleX","minScaleY","maxScaleY","fittingBox","viewportArea","computedSize","currentTranslate","moveAndExpand","currentScale","newSX","newSY","preserveAspectRatio","gridSize","floor","origin","newOX","newOY","useCellGeometry","model","getAllCellsBBox","getGraphArea","rect","fromSize","zoomToRect","area","getCenter","centerPoint","zoomToFit","centerContent","centerCell","cell","positionCell","positionPoint","point","normalizePercentage","dx","dy","positionRect","pos","getTopCenter","getTopRight","getRightMiddle","getBottomRight","getBottomCenter","getBottomLeft","getLeftMiddle","getTopLeft","positionContent","forEach","clear","__decorate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/graph/transform.ts"],"sourcesContent":["import { Dom, NumberExt } from '../util'\nimport { Point, Rectangle } from '../geometry'\nimport { Transform } from '../addon/transform'\nimport { Node } from '../model/node'\nimport { Cell } from '../model/cell'\nimport { EventArgs } from './events'\nimport { Base } from './base'\n\nexport class TransformManager extends Base {\n  protected widgets: Map<Node, Transform> = new Map()\n\n  protected viewportMatrix: DOMMatrix | null\n\n  protected viewportTransformString: string | null\n\n  protected get container() {\n    return this.graph.view.container\n  }\n\n  protected get viewport() {\n    return this.graph.view.viewport\n  }\n\n  protected get isSelectionEnabled() {\n    return this.options.selecting.enabled === true\n  }\n\n  protected init() {\n    this.startListening()\n    this.resize()\n  }\n\n  protected startListening() {\n    this.graph.on('node:mouseup', this.onNodeMouseUp, this)\n    this.graph.on('node:selected', this.onNodeSelected, this)\n    this.graph.on('node:unselected', this.onNodeUnSelected, this)\n  }\n\n  protected stopListening() {\n    this.graph.off('node:mouseup', this.onNodeMouseUp, this)\n    this.graph.off('node:selected', this.onNodeSelected, this)\n    this.graph.off('node:unselected', this.onNodeUnSelected, this)\n  }\n\n  protected onNodeMouseUp({ node }: EventArgs['node:mouseup']) {\n    if (!this.isSelectionEnabled) {\n      const widget = this.graph.hook.createTransform(node, { clearAll: true })\n      if (widget) {\n        this.widgets.set(node, widget)\n      }\n    }\n  }\n\n  protected onNodeSelected({ node }: EventArgs['node:selected']) {\n    if (this.isSelectionEnabled) {\n      const widget = this.graph.hook.createTransform(node, { clearAll: false })\n      if (widget) {\n        this.widgets.set(node, widget)\n      }\n    }\n  }\n\n  protected onNodeUnSelected({ node }: EventArgs['node:unselected']) {\n    if (this.isSelectionEnabled) {\n      const widget = this.widgets.get(node)\n      if (widget) {\n        widget.dispose()\n      }\n      this.widgets.delete(node)\n    }\n  }\n\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  getMatrix() {\n    const transform = this.viewport.getAttribute('transform')\n    if (transform !== this.viewportTransformString) {\n      // `getCTM`: top-left relative to the SVG element\n      // `getScreenCTM`: top-left relative to the document\n      this.viewportMatrix = this.viewport.getCTM()\n      this.viewportTransformString = transform\n    }\n\n    // Clone the cached current transformation matrix.\n    // If no matrix previously stored the identity matrix is returned.\n    return Dom.createSVGMatrix(this.viewportMatrix)\n  }\n\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  setMatrix(matrix: DOMMatrix | Dom.MatrixLike | null) {\n    const ctm = Dom.createSVGMatrix(matrix)\n    const transform = Dom.matrixToTransformString(ctm)\n    this.viewport.setAttribute('transform', transform)\n    this.viewportMatrix = ctm\n    this.viewportTransformString = transform\n  }\n\n  resize(width?: number, height?: number) {\n    let w = width === undefined ? this.options.width : width\n    let h = height === undefined ? this.options.height : height\n\n    this.options.width = w\n    this.options.height = h\n\n    if (typeof w === 'number') {\n      w = Math.round(w)\n    }\n    if (typeof h === 'number') {\n      h = Math.round(h)\n    }\n\n    this.container.style.width = w == null ? '' : `${w}px`\n    this.container.style.height = h == null ? '' : `${h}px`\n\n    const size = this.getComputedSize()\n    this.graph.trigger('resize', { ...size })\n    return this\n  }\n\n  getComputedSize() {\n    let w = this.options.width\n    let h = this.options.height\n    if (!NumberExt.isNumber(w)) {\n      w = this.container.clientWidth\n    }\n    if (!NumberExt.isNumber(h)) {\n      h = this.container.clientHeight\n    }\n    return { width: w, height: h }\n  }\n\n  getScale() {\n    return Dom.matrixToScale(this.getMatrix())\n  }\n\n  scale(\n    sx: number,\n    sy: number = sx,\n    ox = 0,\n    oy = 0,\n    options: TransformManager.TransformOptions = {},\n  ) {\n    sx = this.clampScale(sx) // eslint-disable-line\n    sy = this.clampScale(sy) // eslint-disable-line\n\n    if (ox || oy) {\n      const ts = this.getTranslation()\n      const tx = ts.tx - ox * (sx - 1)\n      const ty = ts.ty - oy * (sy - 1)\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty)\n      }\n    }\n\n    const matrix = this.getMatrix()\n    matrix.a = sx\n    matrix.d = sy\n\n    this.setMatrix(matrix)\n    this.graph.trigger('scale', { sx, sy, ox, oy, ...options })\n    return this\n  }\n\n  clampScale(scale: number) {\n    const range = this.graph.options.scaling\n    return NumberExt.clamp(scale, range.min || 0.01, range.max || 16)\n  }\n\n  getZoom() {\n    return this.getScale().sx\n  }\n\n  zoom(\n    factor: number,\n    options?: TransformManager.ZoomOptions & TransformManager.TransformOptions,\n  ) {\n    options = options || {} // eslint-disable-line\n\n    let sx = factor\n    let sy = factor\n    const scale = this.getScale()\n    const clientSize = this.getComputedSize()\n    let cx = clientSize.width / 2\n    let cy = clientSize.height / 2\n\n    if (!options.absolute) {\n      sx += scale.sx\n      sy += scale.sy\n    }\n\n    if (options.scaleGrid) {\n      sx = Math.round(sx / options.scaleGrid) * options.scaleGrid\n      sy = Math.round(sy / options.scaleGrid) * options.scaleGrid\n    }\n\n    if (options.maxScale) {\n      sx = Math.min(options.maxScale, sx)\n      sy = Math.min(options.maxScale, sy)\n    }\n\n    if (options.minScale) {\n      sx = Math.max(options.minScale, sx)\n      sy = Math.max(options.minScale, sy)\n    }\n\n    if (options.center) {\n      cx = options.center.x\n      cy = options.center.y\n    }\n\n    sx = this.clampScale(sx)\n    sy = this.clampScale(sy)\n\n    if (cx || cy) {\n      const ts = this.getTranslation()\n      const tx = cx - (cx - ts.tx) * (sx / scale.sx)\n      const ty = cy - (cy - ts.ty) * (sy / scale.sy)\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty, { ui: options.ui })\n      }\n    }\n\n    this.scale(sx, sy, 0, 0, { ui: options.ui })\n\n    return this\n  }\n\n  getRotation() {\n    return Dom.matrixToRotation(this.getMatrix())\n  }\n\n  rotate(angle: number, cx?: number, cy?: number) {\n    if (cx == null || cy == null) {\n      const bbox = Dom.getBBox(this.graph.view.stage)\n      cx = bbox.width / 2 // eslint-disable-line\n      cy = bbox.height / 2 // eslint-disable-line\n    }\n\n    const ctm = this.getMatrix()\n      .translate(cx, cy)\n      .rotate(angle)\n      .translate(-cx, -cy)\n    this.setMatrix(ctm)\n    return this\n  }\n\n  getTranslation() {\n    return Dom.matrixToTranslation(this.getMatrix())\n  }\n\n  translate(\n    tx: number,\n    ty: number,\n    options: TransformManager.TransformOptions = {},\n  ) {\n    const matrix = this.getMatrix()\n    matrix.e = tx || 0\n    matrix.f = ty || 0\n    this.setMatrix(matrix)\n    const ts = this.getTranslation()\n    this.options.x = ts.tx\n    this.options.y = ts.ty\n    this.graph.trigger('translate', { ...ts, ...options })\n    return this\n  }\n\n  setOrigin(ox?: number, oy?: number) {\n    return this.translate(ox || 0, oy || 0)\n  }\n\n  fitToContent(\n    gridWidth?: number | TransformManager.FitToContentFullOptions,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: TransformManager.FitToContentOptions,\n  ) {\n    if (typeof gridWidth === 'object') {\n      const opts = gridWidth\n      gridWidth = opts.gridWidth || 1 // eslint-disable-line\n      gridHeight = opts.gridHeight || 1 // eslint-disable-line\n      padding = opts.padding || 0 // eslint-disable-line\n      options = opts // eslint-disable-line\n    } else {\n      gridWidth = gridWidth || 1 // eslint-disable-line\n      gridHeight = gridHeight || 1 // eslint-disable-line\n      padding = padding || 0 // eslint-disable-line\n      if (options == null) {\n        options = {} // eslint-disable-line\n      }\n    }\n\n    const paddings = NumberExt.normalizeSides(padding)\n    const border = options.border || 0\n    const contentArea = options.contentArea\n      ? Rectangle.create(options.contentArea)\n      : this.getContentArea(options)\n\n    if (border > 0) {\n      contentArea.inflate(border)\n    }\n\n    const scale = this.getScale()\n    const translate = this.getTranslation()\n    const sx = scale.sx\n    const sy = scale.sy\n\n    contentArea.x *= sx\n    contentArea.y *= sy\n    contentArea.width *= sx\n    contentArea.height *= sy\n\n    let width =\n      Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) *\n      gridWidth\n\n    let height =\n      Math.max(\n        Math.ceil((contentArea.height + contentArea.y) / gridHeight),\n        1,\n      ) * gridHeight\n\n    let tx = 0\n    let ty = 0\n\n    if (\n      (options.allowNewOrigin === 'negative' && contentArea.x < 0) ||\n      (options.allowNewOrigin === 'positive' && contentArea.x >= 0) ||\n      options.allowNewOrigin === 'any'\n    ) {\n      tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth\n      tx += paddings.left\n      width += tx\n    }\n\n    if (\n      (options.allowNewOrigin === 'negative' && contentArea.y < 0) ||\n      (options.allowNewOrigin === 'positive' && contentArea.y >= 0) ||\n      options.allowNewOrigin === 'any'\n    ) {\n      ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight\n      ty += paddings.top\n      height += ty\n    }\n\n    width += paddings.right\n    height += paddings.bottom\n\n    // Make sure the resulting width and height are greater than minimum.\n    width = Math.max(width, options.minWidth || 0)\n    height = Math.max(height, options.minHeight || 0)\n\n    // Make sure the resulting width and height are lesser than maximum.\n    width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER)\n    height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER)\n\n    const size = this.getComputedSize()\n    const sizeChanged = width !== size.width || height !== size.height\n    const originChanged = tx !== translate.tx || ty !== translate.ty\n\n    // Change the dimensions only if there is a size discrepency or an origin change\n    if (originChanged) {\n      this.translate(tx, ty)\n    }\n\n    if (sizeChanged) {\n      this.resize(width, height)\n    }\n\n    return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy)\n  }\n\n  scaleContentToFit(options: TransformManager.ScaleContentToFitOptions = {}) {\n    this.scaleContentToFitImpl(options)\n  }\n\n  scaleContentToFitImpl(\n    options: TransformManager.ScaleContentToFitOptions = {},\n    translate = true,\n  ) {\n    let contentBBox\n    let contentLocalOrigin\n    if (options.contentArea) {\n      const contentArea = options.contentArea\n      contentBBox = this.graph.localToGraph(contentArea)\n      contentLocalOrigin = Point.create(contentArea)\n    } else {\n      contentBBox = this.getContentBBox(options)\n      contentLocalOrigin = this.graph.graphToLocal(contentBBox)\n    }\n\n    if (!contentBBox.width || !contentBBox.height) {\n      return\n    }\n\n    const padding = NumberExt.normalizeSides(options.padding)\n    const minScale = options.minScale || 0\n    const maxScale = options.maxScale || Number.MAX_SAFE_INTEGER\n    const minScaleX = options.minScaleX || minScale\n    const maxScaleX = options.maxScaleX || maxScale\n    const minScaleY = options.minScaleY || minScale\n    const maxScaleY = options.maxScaleY || maxScale\n\n    let fittingBox\n    if (options.viewportArea) {\n      fittingBox = options.viewportArea\n    } else {\n      const computedSize = this.getComputedSize()\n      const currentTranslate = this.getTranslation()\n      fittingBox = {\n        x: currentTranslate.tx,\n        y: currentTranslate.ty,\n        width: computedSize.width,\n        height: computedSize.height,\n      }\n    }\n\n    fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n      x: padding.left,\n      y: padding.top,\n      width: -padding.left - padding.right,\n      height: -padding.top - padding.bottom,\n    })\n\n    const currentScale = this.getScale()\n\n    let newSX = (fittingBox.width / contentBBox.width) * currentScale.sx\n    let newSY = (fittingBox.height / contentBBox.height) * currentScale.sy\n\n    if (options.preserveAspectRatio !== false) {\n      newSX = newSY = Math.min(newSX, newSY)\n    }\n\n    // snap scale to a grid\n    const gridSize = options.scaleGrid\n    if (gridSize) {\n      newSX = gridSize * Math.floor(newSX / gridSize)\n      newSY = gridSize * Math.floor(newSY / gridSize)\n    }\n\n    // scale min/max boundaries\n    newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX)\n    newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY)\n\n    this.scale(newSX, newSY)\n\n    if (translate) {\n      const origin = this.options\n      const newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x\n      const newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y\n      this.translate(newOX, newOY)\n    }\n  }\n\n  getContentArea(options: TransformManager.GetContentAreaOptions = {}) {\n    if (options.useCellGeometry) {\n      return this.model.getAllCellsBBox() || new Rectangle()\n    }\n\n    return Dom.getBBox(this.graph.view.stage)\n  }\n\n  getContentBBox(options: TransformManager.GetContentAreaOptions = {}) {\n    return this.graph.localToGraph(this.getContentArea(options))\n  }\n\n  getGraphArea() {\n    const rect = Rectangle.fromSize(this.getComputedSize())\n    return this.graph.graphToLocal(rect)\n  }\n\n  zoomToRect(\n    rect: Rectangle.RectangleLike,\n    options: TransformManager.ScaleContentToFitOptions = {},\n  ) {\n    const area = Rectangle.create(rect)\n    const graph = this.graph\n\n    options.contentArea = area\n    if (options.viewportArea == null) {\n      options.viewportArea = {\n        x: graph.options.x,\n        y: graph.options.y,\n        width: this.options.width,\n        height: this.options.height,\n      }\n    }\n\n    this.scaleContentToFitImpl(options, false)\n    const center = area.getCenter()\n    this.centerPoint(center.x, center.y)\n\n    return this\n  }\n\n  zoomToFit(\n    options: TransformManager.GetContentAreaOptions &\n      TransformManager.ScaleContentToFitOptions = {},\n  ) {\n    return this.zoomToRect(this.getContentArea(options), options)\n  }\n\n  centerPoint(x?: number, y?: number) {\n    const clientSize = this.getComputedSize()\n    const scale = this.getScale()\n    const ts = this.getTranslation()\n    const cx = clientSize.width / 2\n    const cy = clientSize.height / 2\n\n    x = typeof x === 'number' ? x : cx // eslint-disable-line\n    y = typeof y === 'number' ? y : cy // eslint-disable-line\n\n    x = cx - x * scale.sx // eslint-disable-line\n    y = cy - y * scale.sy // eslint-disable-line\n\n    if (ts.tx !== x || ts.ty !== y) {\n      this.translate(x, y)\n    }\n  }\n\n  centerContent(options?: TransformManager.GetContentAreaOptions) {\n    const rect = this.graph.getContentArea(options)\n    const center = rect.getCenter()\n    this.centerPoint(center.x, center.y)\n  }\n\n  centerCell(cell: Cell) {\n    return this.positionCell(cell, 'center')\n  }\n\n  positionPoint(\n    point: Point.PointLike,\n    x: number | string,\n    y: number | string,\n  ) {\n    const clientSize = this.getComputedSize()\n\n    // eslint-disable-next-line\n    x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width))\n    if (x < 0) {\n      x = clientSize.width + x // eslint-disable-line\n    }\n\n    // eslint-disable-next-line\n    y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height))\n    if (y < 0) {\n      y = clientSize.height + y // eslint-disable-line\n    }\n\n    const ts = this.getTranslation()\n    const scale = this.getScale()\n    const dx = x - point.x * scale.sx\n    const dy = y - point.y * scale.sy\n\n    if (ts.tx !== dx || ts.ty !== dy) {\n      this.translate(dx, dy)\n    }\n  }\n\n  positionRect(rect: Rectangle.RectangleLike, pos: TransformManager.Direction) {\n    const bbox = Rectangle.create(rect)\n    switch (pos) {\n      case 'center':\n        return this.positionPoint(bbox.getCenter(), '50%', '50%')\n      case 'top':\n        return this.positionPoint(bbox.getTopCenter(), '50%', 0)\n      case 'top-right':\n        return this.positionPoint(bbox.getTopRight(), '100%', 0)\n      case 'right':\n        return this.positionPoint(bbox.getRightMiddle(), '100%', '50%')\n      case 'bottom-right':\n        return this.positionPoint(bbox.getBottomRight(), '100%', '100%')\n      case 'bottom':\n        return this.positionPoint(bbox.getBottomCenter(), '50%', '100%')\n      case 'bottom-left':\n        return this.positionPoint(bbox.getBottomLeft(), 0, '100%')\n      case 'left':\n        return this.positionPoint(bbox.getLeftMiddle(), 0, '50%')\n      case 'top-left':\n        return this.positionPoint(bbox.getTopLeft(), 0, 0)\n      default:\n        return this\n    }\n  }\n\n  positionCell(cell: Cell, pos: TransformManager.Direction) {\n    const bbox = cell.getBBox()\n    return this.positionRect(bbox, pos)\n  }\n\n  positionContent(\n    pos: TransformManager.Direction,\n    options?: TransformManager.GetContentAreaOptions,\n  ) {\n    const rect = this.graph.getContentArea(options)\n    return this.positionRect(rect, pos)\n  }\n\n  @TransformManager.dispose()\n  dispose() {\n    this.widgets.forEach((widget) => widget.dispose())\n    this.widgets.clear()\n    this.stopListening()\n  }\n}\n\nexport namespace TransformManager {\n  export interface TransformOptions {\n    ui?: boolean\n  }\n  export interface FitToContentOptions extends GetContentAreaOptions {\n    minWidth?: number\n    minHeight?: number\n    maxWidth?: number\n    maxHeight?: number\n    contentArea?: Rectangle | Rectangle.RectangleLike\n    border?: number\n    allowNewOrigin?: 'negative' | 'positive' | 'any'\n  }\n\n  export interface FitToContentFullOptions extends FitToContentOptions {\n    gridWidth?: number\n    gridHeight?: number\n    padding?: NumberExt.SideOptions\n  }\n\n  export interface ScaleContentToFitOptions extends GetContentAreaOptions {\n    padding?: NumberExt.SideOptions\n    minScale?: number\n    maxScale?: number\n    minScaleX?: number\n    minScaleY?: number\n    maxScaleX?: number\n    maxScaleY?: number\n    scaleGrid?: number\n    contentArea?: Rectangle.RectangleLike\n    viewportArea?: Rectangle.RectangleLike\n    preserveAspectRatio?: boolean\n  }\n\n  export interface GetContentAreaOptions {\n    useCellGeometry?: boolean\n  }\n\n  export interface ZoomOptions {\n    absolute?: boolean\n    minScale?: number\n    maxScale?: number\n    scaleGrid?: number\n    center?: Point.PointLike\n  }\n\n  export type Direction =\n    | 'center'\n    | 'top'\n    | 'top-right'\n    | 'top-left'\n    | 'right'\n    | 'bottom-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'left'\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}