{"ast":null,"code":"/**\n * WebGL 中的顶点数据压缩\n * 使用 float-pack 技术，在 shader 中解压\n * @see https://zhuanlan.zhihu.com/p/67484498\n */\n\nimport { lodashUtil } from '@antv/l7-utils';\nimport { getShapeIndex } from \"./sdf-2d\";\nconst {\n  clamp\n} = lodashUtil;\nexport const LEFT_SHIFT1 = 2;\nexport const LEFT_SHIFT2 = 4;\nexport const LEFT_SHIFT6 = 64;\nexport const LEFT_SHIFT7 = 128;\nexport const LEFT_SHIFT8 = 256;\nexport const LEFT_SHIFT9 = 512;\nexport const LEFT_SHIFT13 = 8192;\nexport const LEFT_SHIFT14 = 16384;\nexport const LEFT_SHIFT15 = 32768;\nexport const LEFT_SHIFT16 = 32768 * 2;\nexport const LEFT_SHIFT17 = 131072.0;\nexport const LEFT_SHIFT18 = 262144.0;\nexport const LEFT_SHIFT19 = 524288.0;\nexport const LEFT_SHIFT20 = 1048576.0;\nexport const LEFT_SHIFT21 = 2097152.0;\nexport const LEFT_SHIFT22 = 4194304.0;\nexport const LEFT_SHIFT23 = 8388608.0;\nexport const LEFT_SHIFT24 = 16777216.0;\nexport const LEFT_SHIFT25 = 16777216.0 * 2;\n\n/**\n * encode 2 8-bit unsigned int into a 16-bit float\n * @param {number} a 8-bit int\n * @param {number} b 8-bit int\n * @return {number} float\n */\nexport function packUint8ToFloat(a, b) {\n  a = clamp(Math.floor(a), 0, 255);\n  b = clamp(Math.floor(b), 0, 255);\n  return 256 * a + b;\n}\n\n/**\n * 为 SDF circle 压缩顶点数据\n */\nexport function packCircleVertex(props) {\n  const {\n    color,\n    radius,\n    tileX,\n    tileY,\n    shape,\n    opacity,\n    // packed buffer1\n    stroke,\n    strokeWidth,\n    strokeOpacity // packed buffer2\n  } = props;\n  const packedBuffer = [];\n  const packedBuffer2 = [];\n  const packedBuffer3 = [];\n  const packedColor = [packUint8ToFloat(color[0], color[1]), packUint8ToFloat(color[2], color[3])];\n  const packedStrokeColor = [packUint8ToFloat(stroke[0], stroke[1]), packUint8ToFloat(stroke[2], stroke[3])];\n  [[-1, -1], [1, -1], [1, 1], [-1, 1]].forEach(([extrudeX, extrudeY]) => {\n    // vec4(\n    //   color,\n    //   color,\n    //   (4-bit extrude, 4-bit shape, 16-bit radius),\n    //   tileCoords\n    // )\n    packedBuffer.push([...packedColor, (extrudeX + 1) * LEFT_SHIFT23 + (extrudeY + 1) * LEFT_SHIFT21 + getShapeIndex(shape) * LEFT_SHIFT17 + radius, (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6]);\n\n    // vec4(\n    //   strokeColor,\n    //   strokeColor,\n    //   strokeWidth,\n    //   strokeOpacity\n    // )\n    packedBuffer2.push([...packedStrokeColor, strokeWidth, strokeOpacity]);\n    packedBuffer3.push([opacity, 0, 0, 0]);\n  });\n  return {\n    packedBuffer,\n    packedBuffer2,\n    packedBuffer3\n  };\n}\nexport function packOpacity(opacity, placed) {\n  if (opacity === 0 && !placed) {\n    return 0;\n  } else if (opacity === 1 && placed) {\n    return 4294967295;\n  }\n  const targetBit = placed ? 1 : 0;\n  const opacityBits = Math.floor(opacity * 127);\n  return opacityBits * LEFT_SHIFT25 + targetBit * LEFT_SHIFT24 + opacityBits * LEFT_SHIFT17 + targetBit * LEFT_SHIFT16 + opacityBits * LEFT_SHIFT9 + targetBit * LEFT_SHIFT8 + opacityBits * LEFT_SHIFT1 + targetBit;\n}","map":{"version":3,"names":["lodashUtil","getShapeIndex","clamp","LEFT_SHIFT1","LEFT_SHIFT2","LEFT_SHIFT6","LEFT_SHIFT7","LEFT_SHIFT8","LEFT_SHIFT9","LEFT_SHIFT13","LEFT_SHIFT14","LEFT_SHIFT15","LEFT_SHIFT16","LEFT_SHIFT17","LEFT_SHIFT18","LEFT_SHIFT19","LEFT_SHIFT20","LEFT_SHIFT21","LEFT_SHIFT22","LEFT_SHIFT23","LEFT_SHIFT24","LEFT_SHIFT25","packUint8ToFloat","a","b","Math","floor","packCircleVertex","props","color","radius","tileX","tileY","shape","opacity","stroke","strokeWidth","strokeOpacity","packedBuffer","packedBuffer2","packedBuffer3","packedColor","packedStrokeColor","forEach","extrudeX","extrudeY","push","packOpacity","placed","targetBit","opacityBits"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/utils/vertex-compression.js"],"sourcesContent":["/**\n * WebGL 中的顶点数据压缩\n * 使用 float-pack 技术，在 shader 中解压\n * @see https://zhuanlan.zhihu.com/p/67484498\n */\n\nimport { lodashUtil } from '@antv/l7-utils';\nimport { getShapeIndex } from \"./sdf-2d\";\nconst {\n  clamp\n} = lodashUtil;\nexport const LEFT_SHIFT1 = 2;\nexport const LEFT_SHIFT2 = 4;\nexport const LEFT_SHIFT6 = 64;\nexport const LEFT_SHIFT7 = 128;\nexport const LEFT_SHIFT8 = 256;\nexport const LEFT_SHIFT9 = 512;\nexport const LEFT_SHIFT13 = 8192;\nexport const LEFT_SHIFT14 = 16384;\nexport const LEFT_SHIFT15 = 32768;\nexport const LEFT_SHIFT16 = 32768 * 2;\nexport const LEFT_SHIFT17 = 131072.0;\nexport const LEFT_SHIFT18 = 262144.0;\nexport const LEFT_SHIFT19 = 524288.0;\nexport const LEFT_SHIFT20 = 1048576.0;\nexport const LEFT_SHIFT21 = 2097152.0;\nexport const LEFT_SHIFT22 = 4194304.0;\nexport const LEFT_SHIFT23 = 8388608.0;\nexport const LEFT_SHIFT24 = 16777216.0;\nexport const LEFT_SHIFT25 = 16777216.0 * 2;\n\n/**\n * encode 2 8-bit unsigned int into a 16-bit float\n * @param {number} a 8-bit int\n * @param {number} b 8-bit int\n * @return {number} float\n */\nexport function packUint8ToFloat(a, b) {\n  a = clamp(Math.floor(a), 0, 255);\n  b = clamp(Math.floor(b), 0, 255);\n  return 256 * a + b;\n}\n\n/**\n * 为 SDF circle 压缩顶点数据\n */\nexport function packCircleVertex(props) {\n  const {\n    color,\n    radius,\n    tileX,\n    tileY,\n    shape,\n    opacity,\n    // packed buffer1\n    stroke,\n    strokeWidth,\n    strokeOpacity // packed buffer2\n  } = props;\n  const packedBuffer = [];\n  const packedBuffer2 = [];\n  const packedBuffer3 = [];\n  const packedColor = [packUint8ToFloat(color[0], color[1]), packUint8ToFloat(color[2], color[3])];\n  const packedStrokeColor = [packUint8ToFloat(stroke[0], stroke[1]), packUint8ToFloat(stroke[2], stroke[3])];\n  [[-1, -1], [1, -1], [1, 1], [-1, 1]].forEach(([extrudeX, extrudeY]) => {\n    // vec4(\n    //   color,\n    //   color,\n    //   (4-bit extrude, 4-bit shape, 16-bit radius),\n    //   tileCoords\n    // )\n    packedBuffer.push([...packedColor, (extrudeX + 1) * LEFT_SHIFT23 + (extrudeY + 1) * LEFT_SHIFT21 + getShapeIndex(shape) * LEFT_SHIFT17 + radius, (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6]);\n\n    // vec4(\n    //   strokeColor,\n    //   strokeColor,\n    //   strokeWidth,\n    //   strokeOpacity\n    // )\n    packedBuffer2.push([...packedStrokeColor, strokeWidth, strokeOpacity]);\n    packedBuffer3.push([opacity, 0, 0, 0]);\n  });\n  return {\n    packedBuffer,\n    packedBuffer2,\n    packedBuffer3\n  };\n}\nexport function packOpacity(opacity, placed) {\n  if (opacity === 0 && !placed) {\n    return 0;\n  } else if (opacity === 1 && placed) {\n    return 4294967295;\n  }\n  const targetBit = placed ? 1 : 0;\n  const opacityBits = Math.floor(opacity * 127);\n  return opacityBits * LEFT_SHIFT25 + targetBit * LEFT_SHIFT24 + opacityBits * LEFT_SHIFT17 + targetBit * LEFT_SHIFT16 + opacityBits * LEFT_SHIFT9 + targetBit * LEFT_SHIFT8 + opacityBits * LEFT_SHIFT1 + targetBit;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,aAAa,QAAQ,UAAU;AACxC,MAAM;EACJC;AACF,CAAC,GAAGF,UAAU;AACd,OAAO,MAAMG,WAAW,GAAG,CAAC;AAC5B,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC5B,OAAO,MAAMC,WAAW,GAAG,EAAE;AAC7B,OAAO,MAAMC,WAAW,GAAG,GAAG;AAC9B,OAAO,MAAMC,WAAW,GAAG,GAAG;AAC9B,OAAO,MAAMC,WAAW,GAAG,GAAG;AAC9B,OAAO,MAAMC,YAAY,GAAG,IAAI;AAChC,OAAO,MAAMC,YAAY,GAAG,KAAK;AACjC,OAAO,MAAMC,YAAY,GAAG,KAAK;AACjC,OAAO,MAAMC,YAAY,GAAG,KAAK,GAAG,CAAC;AACrC,OAAO,MAAMC,YAAY,GAAG,QAAQ;AACpC,OAAO,MAAMC,YAAY,GAAG,QAAQ;AACpC,OAAO,MAAMC,YAAY,GAAG,QAAQ;AACpC,OAAO,MAAMC,YAAY,GAAG,SAAS;AACrC,OAAO,MAAMC,YAAY,GAAG,SAAS;AACrC,OAAO,MAAMC,YAAY,GAAG,SAAS;AACrC,OAAO,MAAMC,YAAY,GAAG,SAAS;AACrC,OAAO,MAAMC,YAAY,GAAG,UAAU;AACtC,OAAO,MAAMC,YAAY,GAAG,UAAU,GAAG,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrCD,CAAC,GAAGrB,KAAK,CAACuB,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;EAChCC,CAAC,GAAGtB,KAAK,CAACuB,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;EAChC,OAAO,GAAG,GAAGD,CAAC,GAAGC,CAAC;AACpB;;AAEA;AACA;AACA;AACA,OAAO,SAASG,gBAAgBA,CAACC,KAAK,EAAE;EACtC,MAAM;IACJC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,KAAK;IACLC,KAAK;IACLC,OAAO;IACP;IACAC,MAAM;IACNC,WAAW;IACXC,aAAa,CAAC;EAChB,CAAC,GAAGT,KAAK;EACT,MAAMU,YAAY,GAAG,EAAE;EACvB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,WAAW,GAAG,CAACnB,gBAAgB,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEP,gBAAgB,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAChG,MAAMa,iBAAiB,GAAG,CAACpB,gBAAgB,CAACa,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEb,gBAAgB,CAACa,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1G,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,QAAQ,CAAC,KAAK;IACrE;IACA;IACA;IACA;IACA;IACA;IACAP,YAAY,CAACQ,IAAI,CAAC,CAAC,GAAGL,WAAW,EAAE,CAACG,QAAQ,GAAG,CAAC,IAAIzB,YAAY,GAAG,CAAC0B,QAAQ,GAAG,CAAC,IAAI5B,YAAY,GAAGhB,aAAa,CAACgC,KAAK,CAAC,GAAGpB,YAAY,GAAGiB,MAAM,EAAE,CAACC,KAAK,GAAG,GAAG,IAAIhB,YAAY,GAAG,CAACiB,KAAK,GAAG,GAAG,IAAI3B,WAAW,CAAC,CAAC;;IAE7M;IACA;IACA;IACA;IACA;IACA;IACAkC,aAAa,CAACO,IAAI,CAAC,CAAC,GAAGJ,iBAAiB,EAAEN,WAAW,EAAEC,aAAa,CAAC,CAAC;IACtEG,aAAa,CAACM,IAAI,CAAC,CAACZ,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC;EACF,OAAO;IACLI,YAAY;IACZC,aAAa;IACbC;EACF,CAAC;AACH;AACA,OAAO,SAASO,WAAWA,CAACb,OAAO,EAAEc,MAAM,EAAE;EAC3C,IAAId,OAAO,KAAK,CAAC,IAAI,CAACc,MAAM,EAAE;IAC5B,OAAO,CAAC;EACV,CAAC,MAAM,IAAId,OAAO,KAAK,CAAC,IAAIc,MAAM,EAAE;IAClC,OAAO,UAAU;EACnB;EACA,MAAMC,SAAS,GAAGD,MAAM,GAAG,CAAC,GAAG,CAAC;EAChC,MAAME,WAAW,GAAGzB,IAAI,CAACC,KAAK,CAACQ,OAAO,GAAG,GAAG,CAAC;EAC7C,OAAOgB,WAAW,GAAG7B,YAAY,GAAG4B,SAAS,GAAG7B,YAAY,GAAG8B,WAAW,GAAGrC,YAAY,GAAGoC,SAAS,GAAGrC,YAAY,GAAGsC,WAAW,GAAG1C,WAAW,GAAGyC,SAAS,GAAG1C,WAAW,GAAG2C,WAAW,GAAG/C,WAAW,GAAG8C,SAAS;AACpN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}