{"ast":null,"code":"import acyclic from './acyclic';\nimport normalize from './normalize';\nimport rank from './rank';\nimport util, { normalizeRanks, removeEmptyRanks } from './util';\nimport parentDummyChains from './parent-dummy-chains';\nimport nestingGraph from './nesting-graph';\nimport addBorderSegments from './add-border-segments';\nimport coordinateSystem from './coordinate-system';\nimport order from './order';\nimport position from './position';\nimport graphlib from './graphlib';\nimport initDataOrder from './order/init-data-order';\nconst Graph = graphlib.Graph;\nconst layout = (g, opts) => {\n  const time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", () => {\n    // 如果在原图基础上修改，继承原图的order结果\n    if (opts && !opts.keepNodeOrder && opts.prevGraph) {\n      time(\"  inheritOrder\", () => {\n        inheritOrder(g, opts.prevGraph);\n      });\n    }\n    const layoutGraph = time(\"  buildLayoutGraph\", () => {\n      return buildLayoutGraph(g);\n    });\n    // 控制是否为边的label留位置（这会影响是否在边中间添加dummy node）\n    if (!(opts && opts.edgeLabelSpace === false)) {\n      time(\"  makeSpaceForEdgeLabels\", () => {\n        makeSpaceForEdgeLabels(layoutGraph);\n      });\n    }\n    // TODO: 暂时处理层级设置不正确时的异常报错，提示设置正确的层级\n    try {\n      time(\"  runLayout\", () => {\n        runLayout(layoutGraph, time, opts);\n      });\n    } catch (e) {\n      if (e.message === \"Not possible to find intersection inside of the rectangle\") {\n        console.error('The following error may be caused by improper layer setting, please make sure your manual layer setting does not violate the graph\\'s structure:\\n', e);\n        return;\n      }\n      throw e;\n    }\n    time(\"  updateInputGraph\", () => {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n};\nconst runLayout = (g, time, opts) => {\n  time(\"    removeSelfEdges\", () => {\n    removeSelfEdges(g);\n  });\n  time(\"    acyclic\", () => {\n    acyclic.run(g);\n  });\n  time(\"    nestingGraph.run\", () => {\n    nestingGraph.run(g);\n  });\n  time(\"    rank\", () => {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time(\"    injectEdgeLabelProxies\", () => {\n    injectEdgeLabelProxies(g);\n  });\n  time(\"    removeEmptyRanks\", () => {\n    removeEmptyRanks(g);\n  });\n  time(\"    nestingGraph.cleanup\", () => {\n    nestingGraph.cleanup(g);\n  });\n  time(\"    normalizeRanks\", () => {\n    normalizeRanks(g);\n  });\n  time(\"    assignRankMinMax\", () => {\n    assignRankMinMax(g);\n  });\n  time(\"    removeEdgeLabelProxies\", () => {\n    removeEdgeLabelProxies(g);\n  });\n  time(\"    normalize.run\", () => {\n    normalize.run(g);\n  });\n  time(\"    parentDummyChains\", () => {\n    parentDummyChains(g);\n  });\n  time(\"    addBorderSegments\", () => {\n    addBorderSegments(g);\n  });\n  if (opts && opts.keepNodeOrder) {\n    time(\"    initDataOrder\", () => {\n      initDataOrder(g, opts.nodeOrder);\n    });\n  }\n  time(\"    order\", () => {\n    order(g);\n  });\n  time(\"    insertSelfEdges\", () => {\n    insertSelfEdges(g);\n  });\n  time(\"    adjustCoordinateSystem\", () => {\n    coordinateSystem.adjust(g);\n  });\n  time(\"    position\", () => {\n    position(g);\n  });\n  time(\"    positionSelfEdges\", () => {\n    positionSelfEdges(g);\n  });\n  time(\"    removeBorderNodes\", () => {\n    removeBorderNodes(g);\n  });\n  time(\"    normalize.undo\", () => {\n    normalize.undo(g);\n  });\n  time(\"    fixupEdgeLabelCoords\", () => {\n    fixupEdgeLabelCoords(g);\n  });\n  time(\"    undoCoordinateSystem\", () => {\n    coordinateSystem.undo(g);\n  });\n  time(\"    translateGraph\", () => {\n    translateGraph(g);\n  });\n  time(\"    assignNodeIntersects\", () => {\n    assignNodeIntersects(g);\n  });\n  time(\"    reversePoints\", () => {\n    reversePointsForReversedEdges(g);\n  });\n  time(\"    acyclic.undo\", () => {\n    acyclic.undo(g);\n  });\n};\n/**\n * 继承上一个布局中的order，防止翻转\n * TODO: 暂时没有考虑涉及层级变动的布局，只保证原来布局层级和相对顺序不变\n */\nconst inheritOrder = (currG, prevG) => {\n  const prevNodeMap = prevG._nodes || {};\n  currG.nodes().forEach(n => {\n    const node = currG.node(n);\n    if (prevNodeMap[n] !== undefined) {\n      node.fixorder = prevNodeMap[n]._order;\n      delete prevNodeMap[n]._order;\n    } else {\n      delete node.fixorder;\n    }\n  });\n};\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nconst updateInputGraph = (inputGraph, layoutGraph) => {\n  inputGraph.nodes().forEach(v => {\n    var _a;\n    const inputLabel = inputGraph.node(v);\n    const layoutLabel = layoutGraph.node(v);\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n      inputLabel._order = layoutLabel.order;\n      inputLabel._rank = layoutLabel.rank;\n      if ((_a = layoutGraph.children(v)) === null || _a === void 0 ? void 0 : _a.length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n  inputGraph.edges().forEach(e => {\n    const inputLabel = inputGraph.edge(e);\n    const layoutLabel = layoutGraph.edge(e);\n    inputLabel.points = layoutLabel.points;\n    if (layoutLabel.hasOwnProperty(\"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n};\nconst graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nconst graphDefaults = {\n  ranksep: 50,\n  edgesep: 20,\n  nodesep: 50,\n  rankdir: \"tb\"\n};\nconst graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nconst nodeNumAttrs = [\"width\", \"height\", \"layer\", \"fixorder\"]; // 需要传入layer, fixOrder作为参数参考\nconst nodeDefaults = {\n  width: 0,\n  height: 0\n};\nconst edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nconst edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: \"r\"\n};\nconst edgeAttrs = [\"labelpos\"];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nconst buildLayoutGraph = inputGraph => {\n  const g = new Graph({\n    multigraph: true,\n    compound: true\n  });\n  const graph = canonicalize(inputGraph.graph());\n  const pickedProperties = {};\n  graphAttrs === null || graphAttrs === void 0 ? void 0 : graphAttrs.forEach(key => {\n    if (graph[key] !== undefined) pickedProperties[key] = graph[key];\n  });\n  g.setGraph(Object.assign({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), pickedProperties));\n  inputGraph.nodes().forEach(v => {\n    const node = canonicalize(inputGraph.node(v));\n    const defaultAttrs = selectNumberAttrs(node, nodeNumAttrs);\n    Object.keys(nodeDefaults).forEach(key => {\n      if (defaultAttrs[key] === undefined) {\n        defaultAttrs[key] = nodeDefaults[key];\n      }\n    });\n    g.setNode(v, defaultAttrs);\n    g.setParent(v, inputGraph.parent(v));\n  });\n  inputGraph.edges().forEach(e => {\n    const edge = canonicalize(inputGraph.edge(e));\n    const pickedProperties = {};\n    edgeAttrs === null || edgeAttrs === void 0 ? void 0 : edgeAttrs.forEach(key => {\n      if (edge[key] !== undefined) pickedProperties[key] = edge[key];\n    });\n    g.setEdge(e, Object.assign({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), pickedProperties));\n  });\n  return g;\n};\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nconst makeSpaceForEdgeLabels = g => {\n  const graph = g.graph();\n  if (!graph.ranksep) graph.ranksep = 0;\n  graph.ranksep /= 2;\n  g.nodes().forEach(n => {\n    const node = g.node(n);\n    if (!isNaN(node.layer)) {\n      if (!node.layer) node.layer = 0;else node.layer *= 2; // TODO: 因为默认的rank变为两倍，设定的layer也*2\n    }\n  });\n  g.edges().forEach(e => {\n    var _a;\n    const edge = g.edge(e);\n    edge.minlen *= 2;\n    if (((_a = edge.labelpos) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n};\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nconst injectEdgeLabelProxies = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    if (edge.width && edge.height) {\n      const v = g.node(e.v);\n      const w = g.node(e.w);\n      const label = {\n        e,\n        rank: (w.rank - v.rank) / 2 + v.rank\n      };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n};\nconst assignRankMinMax = g => {\n  let maxRank = 0;\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = Math.max(maxRank, node.maxRank || -Infinity);\n    }\n  });\n  g.graph().maxRank = maxRank;\n};\nconst removeEdgeLabelProxies = g => {\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n};\nconst translateGraph = g => {\n  let minX = Number.POSITIVE_INFINITY;\n  let maxX = 0;\n  let minY = Number.POSITIVE_INFINITY;\n  let maxY = 0;\n  const graphLabel = g.graph();\n  const marginX = graphLabel.marginx || 0;\n  const marginY = graphLabel.marginy || 0;\n  const getExtremes = attrs => {\n    if (!attrs) return;\n    const x = attrs.x;\n    const y = attrs.y;\n    const w = attrs.width;\n    const h = attrs.height;\n    if (!isNaN(x) && !isNaN(w)) {\n      minX = Math.min(minX, x - w / 2);\n      maxX = Math.max(maxX, x + w / 2);\n    }\n    if (!isNaN(y) && !isNaN(h)) {\n      minY = Math.min(minY, y - h / 2);\n      maxY = Math.max(maxY, y + h / 2);\n    }\n  };\n  g.nodes().forEach(v => {\n    getExtremes(g.node(v));\n  });\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    if (edge.hasOwnProperty(\"x\")) {\n      getExtremes(edge);\n    }\n  });\n  minX -= marginX;\n  minY -= marginY;\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n  g.edges().forEach(e => {\n    var _a;\n    const edge = g.edge(e);\n    (_a = edge.points) === null || _a === void 0 ? void 0 : _a.forEach(p => {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (edge.hasOwnProperty(\"x\")) {\n      edge.x -= minX;\n    }\n    if (edge.hasOwnProperty(\"y\")) {\n      edge.y -= minY;\n    }\n  });\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n};\nconst assignNodeIntersects = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    const nodeV = g.node(e.v);\n    const nodeW = g.node(e.w);\n    let p1;\n    let p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n};\nconst fixupEdgeLabelCoords = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    if (edge.hasOwnProperty(\"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case \"l\":\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case \"r\":\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n};\nconst reversePointsForReversedEdges = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n};\nconst removeBorderNodes = g => {\n  g.nodes().forEach(v => {\n    var _a, _b, _c;\n    if ((_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.length) {\n      const node = g.node(v);\n      const t = g.node(node.borderTop);\n      const b = g.node(node.borderBottom);\n      const l = g.node(node.borderLeft[((_b = node.borderLeft) === null || _b === void 0 ? void 0 : _b.length) - 1]);\n      const r = g.node(node.borderRight[((_c = node.borderRight) === null || _c === void 0 ? void 0 : _c.length) - 1]);\n      node.width = Math.abs((r === null || r === void 0 ? void 0 : r.x) - (l === null || l === void 0 ? void 0 : l.x)) || 10;\n      node.height = Math.abs((b === null || b === void 0 ? void 0 : b.y) - (t === null || t === void 0 ? void 0 : t.y)) || 10;\n      node.x = ((l === null || l === void 0 ? void 0 : l.x) || 0) + node.width / 2;\n      node.y = ((t === null || t === void 0 ? void 0 : t.y) || 0) + node.height / 2;\n    }\n  });\n  g.nodes().forEach(v => {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n};\nconst removeSelfEdges = g => {\n  g.edges().forEach(e => {\n    if (e.v === e.w) {\n      const node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({\n        e,\n        label: g.edge(e)\n      });\n      g.removeEdge(e);\n    }\n  });\n};\nconst insertSelfEdges = g => {\n  const layers = util.buildLayerMatrix(g);\n  layers === null || layers === void 0 ? void 0 : layers.forEach(layer => {\n    let orderShift = 0;\n    layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n      var _a;\n      const node = g.node(v);\n      node.order = i + orderShift;\n      (_a = node.selfEdges) === null || _a === void 0 ? void 0 : _a.forEach(selfEdge => {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + ++orderShift,\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n};\nconst positionSelfEdges = g => {\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      const selfNode = g.node(node.e.v);\n      const x = selfNode.x + selfNode.width / 2;\n      const y = selfNode.y;\n      const dx = node.x - x;\n      const dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [{\n        x: x + 2 * dx / 3,\n        y: y - dy\n      }, {\n        x: x + 5 * dx / 6,\n        y: y - dy\n      }, {\n        y,\n        x: x + dx\n      }, {\n        x: x + 5 * dx / 6,\n        y: y + dy\n      }, {\n        x: x + 2 * dx / 3,\n        y: y + dy\n      }];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n};\nconst selectNumberAttrs = (obj, attrs) => {\n  const pickedProperties = {};\n  attrs === null || attrs === void 0 ? void 0 : attrs.forEach(key => {\n    if (obj[key] === undefined) return;\n    pickedProperties[key] = +obj[key];\n  });\n  return pickedProperties;\n};\nconst canonicalize = attrs => {\n  const newAttrs = {};\n  Object.keys(attrs).forEach(k => {\n    const v = attrs[k];\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n};\nexport default layout;","map":{"version":3,"names":["acyclic","normalize","rank","util","normalizeRanks","removeEmptyRanks","parentDummyChains","nestingGraph","addBorderSegments","coordinateSystem","order","position","graphlib","initDataOrder","Graph","layout","g","opts","time","debugTiming","notime","keepNodeOrder","prevGraph","inheritOrder","layoutGraph","buildLayoutGraph","edgeLabelSpace","makeSpaceForEdgeLabels","runLayout","e","message","console","error","updateInputGraph","removeSelfEdges","run","asNonCompoundGraph","injectEdgeLabelProxies","cleanup","assignRankMinMax","removeEdgeLabelProxies","nodeOrder","insertSelfEdges","adjust","positionSelfEdges","removeBorderNodes","undo","fixupEdgeLabelCoords","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","currG","prevG","prevNodeMap","_nodes","nodes","forEach","n","node","undefined","fixorder","_order","inputGraph","v","inputLabel","layoutLabel","x","y","_rank","_a","children","length","width","height","edges","edge","points","hasOwnProperty","graph","graphNumAttrs","graphDefaults","ranksep","edgesep","nodesep","rankdir","graphAttrs","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","minlen","weight","labeloffset","labelpos","edgeAttrs","multigraph","compound","canonicalize","pickedProperties","key","setGraph","Object","assign","selectNumberAttrs","defaultAttrs","keys","setNode","setParent","parent","setEdge","isNaN","layer","toLowerCase","w","label","addDummyNode","maxRank","borderTop","minRank","borderBottom","Math","max","Infinity","dummy","labelRank","removeNode","minX","Number","POSITIVE_INFINITY","maxX","minY","maxY","graphLabel","marginX","marginx","marginY","marginy","getExtremes","attrs","h","min","p","nodeV","nodeW","p1","p2","unshift","intersectRect","push","reversed","reverse","t","b","l","borderLeft","_b","r","borderRight","_c","abs","selfEdges","removeEdge","layers","buildLayerMatrix","orderShift","i","selfEdge","selfNode","dx","dy","obj","newAttrs","k"],"sources":["../../../../src/layout/dagre/src/layout.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}