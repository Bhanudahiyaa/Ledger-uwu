{"ast":null,"code":"// @ts-nocheck\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\";\n// @ts-ignore\nimport { World } from \"@antv/g-webgpu\";\n// compile at runtime in dev mode\nimport { buildTextureData, attributesToTextureData } from \"../../util/gpu\";\n// use compiled bundle in prod mode\nimport { fruchtermanBundle, clusterBundle } from \"./fruchtermanShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * fruchterman 布局\n */\nexport class FruchtermanGPULayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n    this.maxIteration = 1000;\n    /** 重力大小，影响图的紧凑程度 */\n    this.gravity = 10;\n    /** 速度 */\n    this.speed = 1;\n    /** 是否产生聚类力 */\n    this.clustering = false;\n    /** 根据哪个字段聚类 */\n    this.clusterField = \"cluster\";\n    /** 聚类力大小 */\n    this.clusterGravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n    this.workerEnabled = false;\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.nodeMap = {};\n    this.nodeIdxMap = {};\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      gravity: 10,\n      speed: 1,\n      clustering: false,\n      clusterGravity: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const self = this;\n      const nodes = self.nodes;\n      if (!nodes || nodes.length === 0) {\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return;\n      }\n      if (!self.width && typeof window !== \"undefined\") {\n        self.width = window.innerWidth;\n      }\n      if (!self.height && typeof window !== \"undefined\") {\n        self.height = window.innerHeight;\n      }\n      if (!self.center) {\n        self.center = [self.width / 2, self.height / 2];\n      }\n      const center = self.center;\n      if (nodes.length === 1) {\n        nodes[0].x = center[0];\n        nodes[0].y = center[1];\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return;\n      }\n      const nodeMap = {};\n      const nodeIdxMap = {};\n      nodes.forEach((node, i) => {\n        if (!isNumber(node.x)) node.x = Math.random() * this.width;\n        if (!isNumber(node.y)) node.y = Math.random() * this.height;\n        nodeMap[node.id] = node;\n        nodeIdxMap[node.id] = i;\n      });\n      self.nodeMap = nodeMap;\n      self.nodeIdxMap = nodeIdxMap;\n      // layout\n      yield self.run();\n    });\n  }\n  executeWithWorker(canvas, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const self = this;\n      const nodes = self.nodes;\n      const center = self.center;\n      if (!nodes || nodes.length === 0) {\n        return;\n      }\n      if (nodes.length === 1) {\n        nodes[0].x = center[0];\n        nodes[0].y = center[1];\n        return;\n      }\n      const nodeMap = {};\n      const nodeIdxMap = {};\n      nodes.forEach((node, i) => {\n        if (!isNumber(node.x)) node.x = Math.random() * this.width;\n        if (!isNumber(node.y)) node.y = Math.random() * this.height;\n        nodeMap[node.id] = node;\n        nodeIdxMap[node.id] = i;\n      });\n      self.nodeMap = nodeMap;\n      self.nodeIdxMap = nodeIdxMap;\n      // layout\n      yield self.run(canvas, ctx);\n    });\n  }\n  run(canvas, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const self = this;\n      const nodes = self.nodes;\n      const edges = self.edges;\n      const maxIteration = self.maxIteration;\n      const center = self.center;\n      const area = self.height * self.width;\n      let maxDisplace = Math.sqrt(area) / 10;\n      const k2 = area / (nodes.length + 1);\n      const k = Math.sqrt(k2);\n      const speed = self.speed;\n      const clustering = self.clustering;\n      const {\n        array: attributeArray,\n        count: clusterCount\n      } = attributesToTextureData([self.clusterField], nodes);\n      // pushing the fx and fy\n      nodes.forEach((node, i) => {\n        let fx = 0;\n        let fy = 0;\n        if (isNumber(node.fx) && isNumber(node.fy)) {\n          fx = node.fx || 0.001;\n          fy = node.fy || 0.001;\n        }\n        attributeArray[4 * i + 1] = fx;\n        attributeArray[4 * i + 2] = fy;\n      });\n      const numParticles = nodes.length;\n      const {\n        maxEdgePerVetex,\n        array: nodesEdgesArray\n      } = buildTextureData(nodes, edges);\n      const workerEnabled = self.workerEnabled;\n      let world;\n      if (workerEnabled) {\n        world = World.create({\n          canvas,\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n      } else {\n        world = World.create({\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n      }\n      // compile at runtime in dev mode\n      // const compiler = new Compiler()\n      // const fruchtermanBundle = compiler.compileBundle(fruchtermanCode)\n      // const clusterBundle = compiler.compileBundle(clusterCode)\n      // use compiled bundle in prod mode\n      // console.log(fruchtermanBundle.toString())\n      // console.log(clusterBundle.toString())\n      const onLayoutEnd = self.onLayoutEnd;\n      const clusterCenters = [];\n      for (let i = 0; i < clusterCount; i++) {\n        clusterCenters.push(0, 0, 0, 0);\n      }\n      const kernelFruchterman = world.createKernel(fruchtermanBundle).setDispatch([numParticles, 1, 1]).setBinding({\n        u_Data: nodesEdgesArray,\n        u_K: k,\n        u_K2: k2,\n        u_Gravity: self.gravity,\n        u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n        u_Speed: speed,\n        u_MaxDisplace: maxDisplace,\n        u_Clustering: clustering ? 1 : 0,\n        u_Center: center,\n        u_AttributeArray: attributeArray,\n        u_ClusterCenters: clusterCenters,\n        MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n        VERTEX_COUNT: numParticles\n      });\n      let kernelCluster;\n      if (clustering) {\n        kernelCluster = world.createKernel(clusterBundle).setDispatch([clusterCount, 1, 1]).setBinding({\n          u_Data: nodesEdgesArray,\n          u_NodeAttributes: attributeArray,\n          u_ClusterCenters: clusterCenters,\n          VERTEX_COUNT: numParticles,\n          CLUSTER_COUNT: clusterCount\n        });\n      }\n      const execute = () => __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < maxIteration; i++) {\n          // eslint-disable-next-line no-await-in-loop\n          yield kernelFruchterman.execute();\n          if (clustering) {\n            kernelCluster.setBinding({\n              u_Data: kernelFruchterman\n            });\n            // eslint-disable-next-line no-await-in-loop\n            yield kernelCluster.execute();\n            kernelFruchterman.setBinding({\n              u_ClusterCenters: kernelCluster\n            });\n          }\n          kernelFruchterman.setBinding({\n            u_MaxDisplace: maxDisplace *= 0.99\n          });\n        }\n        const finalParticleData = yield kernelFruchterman.getOutput();\n        if (canvas) {\n          // 传递数据给主线程\n          ctx.postMessage({\n            type: LAYOUT_MESSAGE.GPUEND,\n            vertexEdgeData: finalParticleData\n            // edgeIndexBufferData,\n          });\n        } else {\n          nodes.forEach((node, i) => {\n            const x = finalParticleData[4 * i];\n            const y = finalParticleData[4 * i + 1];\n            node.x = x;\n            node.y = y;\n          });\n        }\n        if (onLayoutEnd) onLayoutEnd();\n      });\n      yield execute();\n    });\n  }\n  getType() {\n    return \"fruchterman-gpu\";\n  }\n}","map":{"version":3,"names":["Base","isNumber","World","buildTextureData","attributesToTextureData","fruchtermanBundle","clusterBundle","LAYOUT_MESSAGE","FruchtermanGPULayout","constructor","options","maxIteration","gravity","speed","clustering","clusterField","clusterGravity","workerEnabled","nodes","edges","width","height","nodeMap","nodeIdxMap","updateCfg","getDefaultCfg","execute","self","length","onLayoutEnd","window","innerWidth","innerHeight","center","x","y","forEach","node","i","Math","random","id","run","executeWithWorker","canvas","ctx","area","maxDisplace","sqrt","k2","k","array","attributeArray","count","clusterCount","fx","fy","numParticles","maxEdgePerVetex","nodesEdgesArray","world","create","engineOptions","supportCompute","clusterCenters","push","kernelFruchterman","createKernel","setDispatch","setBinding","u_Data","u_K","u_K2","u_Gravity","u_ClusterGravity","u_Speed","u_MaxDisplace","u_Clustering","u_Center","u_AttributeArray","u_ClusterCenters","MAX_EDGE_PER_VERTEX","VERTEX_COUNT","kernelCluster","u_NodeAttributes","CLUSTER_COUNT","__awaiter","finalParticleData","getOutput","postMessage","type","GPUEND","vertexEdgeData","getType"],"sources":["../../../src/layout/gpu/fruchterman.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}