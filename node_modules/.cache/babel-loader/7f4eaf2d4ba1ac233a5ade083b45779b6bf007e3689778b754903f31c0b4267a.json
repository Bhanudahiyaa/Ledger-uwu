{"ast":null,"code":"import { Matrix as MLMatrix, SingularValueDecomposition } from 'ml-matrix';\nexport default class MDS {\n  constructor(params) {\n    this.distances = params.distances;\n    this.dimension = params.dimension || 2;\n    this.linkDistance = params.linkDistance;\n  }\n  layout() {\n    const self = this;\n    const {\n      dimension,\n      distances,\n      linkDistance\n    } = self;\n    try {\n      // square distances\n      const M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5);\n      // double centre the rows/columns\n      const rowMeans = M.mean('row');\n      const colMeans = M.mean('column');\n      const totalMean = M.mean();\n      M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n      // take the SVD of the double centred matrix, and return the\n      // points from it\n      const ret = new SingularValueDecomposition(M);\n      const eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n      return ret.leftSingularVectors.toJSON().map(row => {\n        return MLMatrix.mul([row], [eigenValues]).toJSON()[0].splice(0, dimension);\n      });\n    } catch (_a) {\n      const res = [];\n      for (let i = 0; i < distances.length; i++) {\n        const x = Math.random() * linkDistance;\n        const y = Math.random() * linkDistance;\n        res.push([x, y]);\n      }\n      return res;\n    }\n  }\n}","map":{"version":3,"names":["Matrix","MLMatrix","SingularValueDecomposition","MDS","constructor","params","distances","dimension","linkDistance","layout","self","M","mul","pow","rowMeans","mean","colMeans","totalMean","add","subRowVector","subColumnVector","ret","eigenValues","sqrt","diagonalMatrix","diagonal","leftSingularVectors","toJSON","map","row","splice","_a","res","i","length","x","Math","random","y","push"],"sources":["../../../src/layout/radial/mds.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,MAAM,IAAIC,QAAQ,EAAEC,0BAA0B,QAAQ,WAAW;AAE1E,eAAc,MAAOC,GAAG;EAUtBC,YAAYC,MAAyE;IACnF,IAAI,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS;IACjC,IAAI,CAACC,SAAS,GAAGF,MAAM,CAACE,SAAS,IAAI,CAAC;IACtC,IAAI,CAACC,YAAY,GAAGH,MAAM,CAACG,YAAY;EACzC;EAEOC,MAAMA,CAAA;IACX,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAM;MAAEH,SAAS;MAAED,SAAS;MAAEE;IAAY,CAAE,GAAGE,IAAI;IAEnD,IAAI;MACF;MACA,MAAMC,CAAC,GAAGV,QAAQ,CAACW,GAAG,CAACX,QAAQ,CAACY,GAAG,CAACP,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;MAExD;MACA,MAAMQ,QAAQ,GAAGH,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC;MAC9B,MAAMC,QAAQ,GAAGL,CAAC,CAACI,IAAI,CAAC,QAAQ,CAAC;MACjC,MAAME,SAAS,GAAGN,CAAC,CAACI,IAAI,EAAE;MAC1BJ,CAAC,CAACO,GAAG,CAACD,SAAS,CAAC,CAACE,YAAY,CAACL,QAAQ,CAAC,CAACM,eAAe,CAACJ,QAAQ,CAAC;MAEjE;MACA;MACA,MAAMK,GAAG,GAAG,IAAInB,0BAA0B,CAACS,CAAC,CAAC;MAC7C,MAAMW,WAAW,GAAGrB,QAAQ,CAACsB,IAAI,CAACF,GAAG,CAACG,cAAc,CAAC,CAACC,QAAQ,EAAE;MAChE,OAAOJ,GAAG,CAACK,mBAAmB,CAACC,MAAM,EAAE,CAACC,GAAG,CAAEC,GAAa,IAAI;QAC5D,OAAO5B,QAAQ,CAACW,GAAG,CAAC,CAACiB,GAAG,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC,CAACK,MAAM,EAAE,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,EAAEvB,SAAS,CAAe;MAC1F,CAAC,CAAC;KACH,CAAC,OAAAwB,EAAA,EAAM;MACN,MAAMC,GAAG,GAAiB,EAAE;MAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,SAAS,CAAC4B,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG7B,YAAY;QACtC,MAAM8B,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAE,GAAG7B,YAAY;QACtCwB,GAAG,CAACO,IAAI,CAAC,CAACJ,CAAC,EAAEG,CAAC,CAAC,CAAC;;MAElB,OAAON,GAAG;;EAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}