{"ast":null,"code":"/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nconst longestPath = g => {\n  var _a;\n  const visited = {};\n  const dfs = v => {\n    var _a;\n    const label = g.node(v);\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n    const lengths = (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(e => {\n      return dfs(e.w) - g.edge(e).minlen || Infinity;\n    });\n    let rank = Math.min(...lengths);\n    if (rank === Number.POSITIVE_INFINITY ||\n    // return value of _.map([]) for Lodash 3\n    rank === undefined ||\n    // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n    label.rank = rank;\n    return rank;\n  };\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(source => dfs(source));\n};\nconst longestPathWithLayer = g => {\n  var _a;\n  // 用longest path，找出最深的点\n  const visited = {};\n  let minRank = 0;\n  const dfs = v => {\n    var _a;\n    const label = g.node(v);\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n    const lengths = (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(e => {\n      return dfs(e.w) - g.edge(e).minlen || Infinity;\n    });\n    let rank = Math.min(...lengths);\n    if (rank === Number.POSITIVE_INFINITY ||\n    // return value of _.map([]) for Lodash 3\n    rank === undefined ||\n    // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n    label.rank = rank;\n    minRank = Math.min(label.rank, minRank);\n    return label.rank;\n  };\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(source => dfs(source));\n  minRank += 1; // NOTE: 最小的层级是dummy root，+1\n  // forward一遍，赋值层级\n  const dfsForward = (v, nextRank) => {\n    var _a;\n    const label = g.node(v);\n    const currRank = !isNaN(label.layer) ? label.layer : nextRank;\n    // 没有指定，取最大值\n    if (label.rank === undefined || label.rank < currRank) {\n      label.rank = currRank;\n    }\n    // DFS遍历子节点\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(e => {\n      dfsForward(e.w, currRank + g.edge(e).minlen);\n    });\n  };\n  // 指定层级的，更新下游\n  g.nodes().forEach(n => {\n    const label = g.node(n);\n    if (!isNaN(label.layer)) {\n      dfsForward(n, label.layer); // 默认的dummy root所在层的rank是-1\n    } else {\n      label.rank -= minRank;\n    }\n  });\n};\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nconst slack = (g, e) => {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n};\nexport { longestPath, longestPathWithLayer, slack };\nexport default {\n  longestPath,\n  longestPathWithLayer,\n  slack\n};","map":{"version":3,"names":["longestPath","g","visited","dfs","v","label","node","hasOwnProperty","rank","lengths","_a","outEdges","map","e","w","edge","minlen","Infinity","Math","min","Number","POSITIVE_INFINITY","undefined","sources","forEach","source","longestPathWithLayer","minRank","dfsForward","nextRank","currRank","isNaN","layer","nodes","n","slack"],"sources":["../../../../../src/layout/dagre/src/rank/util.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}