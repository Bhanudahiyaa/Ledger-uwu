{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, DOM } from '@antv/l7-utils';\nimport { isEventCrash } from \"../../utils/dom\";\nimport { InteractionEvent } from \"../interaction/IInteractionService\";\nimport { TextureUsage } from \"../renderer/ITexture2D\";\nexport default class PickingService {\n  constructor(container) {\n    var _this = this;\n    _defineProperty(this, \"pickedColors\", void 0);\n    _defineProperty(this, \"pickedTileLayers\", []);\n    _defineProperty(this, \"pickingFBO\", void 0);\n    _defineProperty(this, \"width\", 0);\n    _defineProperty(this, \"height\", 0);\n    _defineProperty(this, \"alreadyInPicking\", false);\n    _defineProperty(this, \"pickBufferScale\", 1.0);\n    _defineProperty(this, \"pickFromPickingFBO\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (layer, {\n        x,\n        y,\n        lngLat,\n        type,\n        target\n      }) {\n        var _pickedColors;\n        let isPicked = false;\n        const {\n          readPixels,\n          readPixelsAsync,\n          getViewportSize,\n          queryVerdorInfo\n        } = _this.rendererService;\n        const {\n          width,\n          height\n        } = getViewportSize();\n        const {\n          enableHighlight,\n          enableSelect\n        } = layer.getLayerConfig();\n        const xInDevicePixel = x * DOM.DPR;\n        const yInDevicePixel = y * DOM.DPR;\n        if (xInDevicePixel > width - 1 * DOM.DPR || xInDevicePixel < 0 || yInDevicePixel > height - 1 * DOM.DPR || yInDevicePixel < 0) {\n          return false;\n        }\n        let pickedColors;\n\n        // readPixelsAsync 比 readPixels 慢，会造成拾取事件冒泡延迟，优先使用 readPixelsAsync，WebGPU 只支持 readPixelsAsync API\n        const isWebGPU = queryVerdorInfo() === 'WebGPU';\n        if (isWebGPU) {\n          pickedColors = yield readPixelsAsync({\n            x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n            // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n            y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n            width: 1,\n            height: 1,\n            data: new Uint8Array(1 * 1 * 4),\n            framebuffer: _this.pickingFBO\n          });\n        } else {\n          pickedColors = readPixels({\n            x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n            // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n            y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n            width: 1,\n            height: 1,\n            data: new Uint8Array(1 * 1 * 4),\n            framebuffer: _this.pickingFBO\n          });\n        }\n        _this.pickedColors = pickedColors;\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          const pickedFeatureIdx = decodePickingColor(pickedColors);\n          // 瓦片数据获取性能问题需要优化\n          const rawFeature = layer.layerPickService.getFeatureById(pickedFeatureIdx);\n          if (pickedFeatureIdx !== layer.getCurrentPickId() && type === 'mousemove') {\n            type = 'mouseenter';\n          }\n          const layerTarget = {\n            x,\n            y,\n            type,\n            lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature,\n            target\n          };\n          if (!rawFeature) {\n            // this.logger.error(\n            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n            // );\n          } else {\n            // trigger onHover/Click callback on layer\n            isPicked = true;\n            layer.setCurrentPickId(pickedFeatureIdx);\n            _this.triggerHoverOnLayer(layer, layerTarget); // 触发拾取事件\n          }\n        } else {\n          // 未选中\n          const layerTarget = {\n            x,\n            y,\n            lngLat,\n            type: layer.getCurrentPickId() !== null && type === 'mousemove' ? 'mouseout' : 'un' + type,\n            featureId: null,\n            target,\n            feature: null\n          };\n          _this.triggerHoverOnLayer(layer, _objectSpread(_objectSpread({}, layerTarget), {}, {\n            type: 'unpick'\n          }));\n          _this.triggerHoverOnLayer(layer, layerTarget);\n          layer.setCurrentPickId(null);\n        }\n        if (enableHighlight) {\n          layer.layerPickService.highlightPickedFeature(pickedColors);\n        }\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          const selectedId = decodePickingColor(pickedColors);\n          if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {\n            layer.layerPickService.selectFeature(pickedColors);\n            layer.setCurrentSelectedId(selectedId);\n          } else {\n            layer.layerPickService.selectFeature(new Uint8Array([0, 0, 0, 0])); // toggle select\n            layer.setCurrentSelectedId(null);\n          }\n        }\n        return isPicked;\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    this.container = container;\n  }\n  get mapService() {\n    return this.container.mapService;\n  }\n  get rendererService() {\n    return this.container.rendererService;\n  }\n  get configService() {\n    return this.container.globalConfigService;\n  }\n  get interactionService() {\n    return this.container.interactionService;\n  }\n  get layerService() {\n    return this.container.layerService;\n  }\n  init(id) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize\n    } = this.rendererService;\n    let {\n      width,\n      height\n    } = getViewportSize();\n    this.pickBufferScale = this.configService.getSceneConfig(id).pickBufferScale || 1;\n    width = Math.round(width / this.pickBufferScale);\n    height = Math.round(height / this.pickBufferScale);\n    // 创建 picking framebuffer，后续实时 resize\n    const pickingColorTexture = createTexture2D({\n      width,\n      height,\n      // wrapS: gl.CLAMP_TO_EDGE,\n      // wrapT: gl.CLAMP_TO_EDGE,\n      usage: TextureUsage.RENDER_TARGET,\n      label: 'Picking Texture'\n    });\n    this.pickingFBO = createFramebuffer({\n      color: pickingColorTexture,\n      depth: true,\n      width,\n      height\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickingAllLayer.bind(this));\n  }\n  boxPickLayer(layer, box, cb) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        useFramebufferAsync,\n        clear\n      } = _this2.rendererService;\n      _this2.resizePickingFBO();\n      layer.hooks.beforePickingEncode.call();\n      yield useFramebufferAsync(_this2.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        clear({\n          framebuffer: _this2.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1\n        });\n        layer.renderModels({\n          ispick: true\n        });\n      }));\n      layer.hooks.afterPickingEncode.call();\n      const features = yield _this2.pickBox(layer, box);\n      cb(features);\n    })();\n  }\n  pickBox(layer, box) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const [xMin, yMin, xMax, yMax] = box.map(v => {\n        const tmpV = v < 0 ? 0 : v;\n        return Math.floor(tmpV * DOM.DPR / _this3.pickBufferScale);\n      });\n      const {\n        readPixelsAsync,\n        getViewportSize\n      } = _this3.rendererService;\n      const {\n        width,\n        height\n      } = getViewportSize();\n      if (xMin > (width - 1) * DOM.DPR / _this3.pickBufferScale || xMax < 0 || yMin > (height - 1) * DOM.DPR / _this3.pickBufferScale || yMax < 0) {\n        return [];\n      }\n      const w = Math.min(width / _this3.pickBufferScale, xMax) - xMin;\n      const h = Math.min(height / _this3.pickBufferScale, yMax) - yMin;\n      const pickedColors = yield readPixelsAsync({\n        x: xMin,\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.floor(height / _this3.pickBufferScale - (yMax + 1)),\n        width: w,\n        height: h,\n        data: new Uint8Array(w * h * 4),\n        framebuffer: _this3.pickingFBO\n      });\n      const features = [];\n      const featuresIdMap = {};\n      for (let i = 0; i < pickedColors.length / 4; i = i + 1) {\n        const color = pickedColors.slice(i * 4, i * 4 + 4);\n        const pickedFeatureIdx = decodePickingColor(color);\n        if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n          const rawFeature = layer.layerPickService.getFeatureById(pickedFeatureIdx);\n          features.push(_objectSpread(_objectSpread({}, rawFeature), {}, {\n            pickedFeatureIdx\n          }));\n          featuresIdMap[pickedFeatureIdx] = true;\n        }\n      }\n      return features;\n    })();\n  }\n\n  // 动态设置鼠标光标\n  handleCursor(layer, type) {\n    const {\n      cursor = '',\n      cursorEnabled\n    } = layer.getLayerConfig();\n    if (cursorEnabled) {\n      const mapType = this.mapService.getType();\n      const domContainer = mapType === 'amap' ? this.mapService.getMapContainer() : this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMapContainer();\n      const defaultCursor = domContainer === null || domContainer === void 0 ? void 0 : domContainer.style.getPropertyValue('cursor');\n      if (type === 'unmousemove' && defaultCursor !== '') {\n        domContainer === null || domContainer === void 0 || domContainer.style.setProperty('cursor', '');\n      } else if (type === 'mousemove') {\n        domContainer === null || domContainer === void 0 || domContainer.style.setProperty('cursor', cursor);\n      }\n    }\n    // const domContainer = this.mapService.getMapContainer()\n    // domContainer?.style.setProperty('cursor', 'move');\n  }\n  destroy() {\n    this.pickingFBO.destroy();\n    // this.pickingFBO = null; 清除对 webgl 实例的引用\n    // @ts-ignore\n    this.pickingFBO = null;\n  }\n  pickingAllLayer(target) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // 判断是否进行拾取操作\n      if (!_this4.layerService.needPick(target.type) || !_this4.isPickingAllLayer()) {\n        return;\n      }\n      _this4.alreadyInPicking = true;\n      yield _this4.pickingLayers(target);\n      _this4.layerService.renderLayers();\n      _this4.alreadyInPicking = false;\n    })();\n  }\n  isPickingAllLayer() {\n    // this.alreadyInPicking 避免多次重复拾取\n\n    if (this.alreadyInPicking) {\n      return false;\n    }\n    // this.layerService.alreadyInRendering 一个渲染序列中只进行一次拾取操作\n    if (this.layerService.alreadyInRendering) {\n      return false;\n    }\n    // this.interactionService.dragging amap2 在点击操作的时候同时会触发 dragging 的情况（避免舍去）\n    if (this.interactionService.indragging) {\n      return false;\n    }\n\n    // 判断当前进行 shader pick 拾取判断\n    if (!this.layerService.getShaderPickStat()) {\n      return false;\n    }\n\n    // 进行拾取\n    return true;\n  }\n  resizePickingFBO() {\n    const {\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale)\n      });\n      this.width = width;\n      this.height = height;\n    }\n  }\n  pickingLayers(target) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        clear,\n        useFramebufferAsync\n      } = _this5.rendererService;\n      _this5.resizePickingFBO();\n      const layers = _this5.layerService.getRenderList();\n      for (const layer of layers.filter(layer => layer.needPick(target.type)).reverse()) {\n        yield useFramebufferAsync(_this5.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n          clear({\n            framebuffer: _this5.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1\n          });\n          // 渲染需要拾取的图层\n          layer.layerPickService.pickRender(target);\n        }));\n        const isPicked = yield _this5.pickFromPickingFBO(layer, target);\n        _this5.layerService.pickedLayerId = isPicked ? +layer.id : -1;\n        if (isPicked && !layer.getLayerConfig().enablePropagation) {\n          break;\n        }\n      }\n    })();\n  }\n  triggerHoverOnLayer(layer, target) {\n    // layer.emit(target.type, target);\n    // 判断是否发生事件冲突\n    if (isEventCrash(target)) {\n      // Tip: 允许用户动态设置鼠标光标\n      this.handleCursor(layer, target.type);\n      layer.emit(target.type, target);\n    }\n  }\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_defineProperty","decodePickingColor","DOM","isEventCrash","InteractionEvent","TextureUsage","PickingService","constructor","container","_this","_ref","layer","x","y","lngLat","type","target","_pickedColors","isPicked","readPixels","readPixelsAsync","getViewportSize","queryVerdorInfo","rendererService","width","height","enableHighlight","enableSelect","getLayerConfig","xInDevicePixel","DPR","yInDevicePixel","pickedColors","isWebGPU","Math","floor","pickBufferScale","data","Uint8Array","framebuffer","pickingFBO","pickedFeatureIdx","rawFeature","layerPickService","getFeatureById","getCurrentPickId","layerTarget","featureId","feature","setCurrentPickId","triggerHoverOnLayer","highlightPickedFeature","toString","selectedId","getCurrentSelectedId","selectFeature","setCurrentSelectedId","_x","_x2","apply","arguments","mapService","configService","globalConfigService","interactionService","layerService","init","id","createTexture2D","createFramebuffer","getSceneConfig","round","pickingColorTexture","usage","RENDER_TARGET","label","color","depth","on","Hover","pickingAllLayer","bind","boxPickLayer","box","cb","_this2","useFramebufferAsync","clear","resizePickingFBO","hooks","beforePickingEncode","call","stencil","renderModels","ispick","afterPickingEncode","features","pickBox","_this3","xMin","yMin","xMax","yMax","map","v","tmpV","w","min","h","featuresIdMap","i","length","slice","push","handleCursor","cursor","cursorEnabled","mapType","getType","domContainer","getMapContainer","getMarkerContainer","defaultCursor","style","getPropertyValue","setProperty","destroy","_this4","needPick","isPickingAllLayer","alreadyInPicking","pickingLayers","renderLayers","alreadyInRendering","indragging","getShaderPickStat","resize","_this5","layers","getRenderList","filter","reverse","pickRender","pickFromPickingFBO","pickedLayerId","enablePropagation","emit"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/interaction/PickingService.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, DOM } from '@antv/l7-utils';\nimport { isEventCrash } from \"../../utils/dom\";\nimport { InteractionEvent } from \"../interaction/IInteractionService\";\nimport { TextureUsage } from \"../renderer/ITexture2D\";\nexport default class PickingService {\n  constructor(container) {\n    var _this = this;\n    _defineProperty(this, \"pickedColors\", void 0);\n    _defineProperty(this, \"pickedTileLayers\", []);\n    _defineProperty(this, \"pickingFBO\", void 0);\n    _defineProperty(this, \"width\", 0);\n    _defineProperty(this, \"height\", 0);\n    _defineProperty(this, \"alreadyInPicking\", false);\n    _defineProperty(this, \"pickBufferScale\", 1.0);\n    _defineProperty(this, \"pickFromPickingFBO\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (layer, {\n        x,\n        y,\n        lngLat,\n        type,\n        target\n      }) {\n        var _pickedColors;\n        let isPicked = false;\n        const {\n          readPixels,\n          readPixelsAsync,\n          getViewportSize,\n          queryVerdorInfo\n        } = _this.rendererService;\n        const {\n          width,\n          height\n        } = getViewportSize();\n        const {\n          enableHighlight,\n          enableSelect\n        } = layer.getLayerConfig();\n        const xInDevicePixel = x * DOM.DPR;\n        const yInDevicePixel = y * DOM.DPR;\n        if (xInDevicePixel > width - 1 * DOM.DPR || xInDevicePixel < 0 || yInDevicePixel > height - 1 * DOM.DPR || yInDevicePixel < 0) {\n          return false;\n        }\n        let pickedColors;\n\n        // readPixelsAsync 比 readPixels 慢，会造成拾取事件冒泡延迟，优先使用 readPixelsAsync，WebGPU 只支持 readPixelsAsync API\n        const isWebGPU = queryVerdorInfo() === 'WebGPU';\n        if (isWebGPU) {\n          pickedColors = yield readPixelsAsync({\n            x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n            // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n            y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n            width: 1,\n            height: 1,\n            data: new Uint8Array(1 * 1 * 4),\n            framebuffer: _this.pickingFBO\n          });\n        } else {\n          pickedColors = readPixels({\n            x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n            // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n            y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n            width: 1,\n            height: 1,\n            data: new Uint8Array(1 * 1 * 4),\n            framebuffer: _this.pickingFBO\n          });\n        }\n        _this.pickedColors = pickedColors;\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          const pickedFeatureIdx = decodePickingColor(pickedColors);\n          // 瓦片数据获取性能问题需要优化\n          const rawFeature = layer.layerPickService.getFeatureById(pickedFeatureIdx);\n          if (pickedFeatureIdx !== layer.getCurrentPickId() && type === 'mousemove') {\n            type = 'mouseenter';\n          }\n          const layerTarget = {\n            x,\n            y,\n            type,\n            lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature,\n            target\n          };\n          if (!rawFeature) {\n            // this.logger.error(\n            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n            // );\n          } else {\n            // trigger onHover/Click callback on layer\n            isPicked = true;\n            layer.setCurrentPickId(pickedFeatureIdx);\n            _this.triggerHoverOnLayer(layer, layerTarget); // 触发拾取事件\n          }\n        } else {\n          // 未选中\n          const layerTarget = {\n            x,\n            y,\n            lngLat,\n            type: layer.getCurrentPickId() !== null && type === 'mousemove' ? 'mouseout' : 'un' + type,\n            featureId: null,\n            target,\n            feature: null\n          };\n          _this.triggerHoverOnLayer(layer, _objectSpread(_objectSpread({}, layerTarget), {}, {\n            type: 'unpick'\n          }));\n          _this.triggerHoverOnLayer(layer, layerTarget);\n          layer.setCurrentPickId(null);\n        }\n        if (enableHighlight) {\n          layer.layerPickService.highlightPickedFeature(pickedColors);\n        }\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          const selectedId = decodePickingColor(pickedColors);\n          if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {\n            layer.layerPickService.selectFeature(pickedColors);\n            layer.setCurrentSelectedId(selectedId);\n          } else {\n            layer.layerPickService.selectFeature(new Uint8Array([0, 0, 0, 0])); // toggle select\n            layer.setCurrentSelectedId(null);\n          }\n        }\n        return isPicked;\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    this.container = container;\n  }\n  get mapService() {\n    return this.container.mapService;\n  }\n  get rendererService() {\n    return this.container.rendererService;\n  }\n  get configService() {\n    return this.container.globalConfigService;\n  }\n  get interactionService() {\n    return this.container.interactionService;\n  }\n  get layerService() {\n    return this.container.layerService;\n  }\n  init(id) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize\n    } = this.rendererService;\n    let {\n      width,\n      height\n    } = getViewportSize();\n    this.pickBufferScale = this.configService.getSceneConfig(id).pickBufferScale || 1;\n    width = Math.round(width / this.pickBufferScale);\n    height = Math.round(height / this.pickBufferScale);\n    // 创建 picking framebuffer，后续实时 resize\n    const pickingColorTexture = createTexture2D({\n      width,\n      height,\n      // wrapS: gl.CLAMP_TO_EDGE,\n      // wrapT: gl.CLAMP_TO_EDGE,\n      usage: TextureUsage.RENDER_TARGET,\n      label: 'Picking Texture'\n    });\n    this.pickingFBO = createFramebuffer({\n      color: pickingColorTexture,\n      depth: true,\n      width,\n      height\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickingAllLayer.bind(this));\n  }\n  boxPickLayer(layer, box, cb) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        useFramebufferAsync,\n        clear\n      } = _this2.rendererService;\n      _this2.resizePickingFBO();\n      layer.hooks.beforePickingEncode.call();\n      yield useFramebufferAsync(_this2.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        clear({\n          framebuffer: _this2.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1\n        });\n        layer.renderModels({\n          ispick: true\n        });\n      }));\n      layer.hooks.afterPickingEncode.call();\n      const features = yield _this2.pickBox(layer, box);\n      cb(features);\n    })();\n  }\n  pickBox(layer, box) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const [xMin, yMin, xMax, yMax] = box.map(v => {\n        const tmpV = v < 0 ? 0 : v;\n        return Math.floor(tmpV * DOM.DPR / _this3.pickBufferScale);\n      });\n      const {\n        readPixelsAsync,\n        getViewportSize\n      } = _this3.rendererService;\n      const {\n        width,\n        height\n      } = getViewportSize();\n      if (xMin > (width - 1) * DOM.DPR / _this3.pickBufferScale || xMax < 0 || yMin > (height - 1) * DOM.DPR / _this3.pickBufferScale || yMax < 0) {\n        return [];\n      }\n      const w = Math.min(width / _this3.pickBufferScale, xMax) - xMin;\n      const h = Math.min(height / _this3.pickBufferScale, yMax) - yMin;\n      const pickedColors = yield readPixelsAsync({\n        x: xMin,\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.floor(height / _this3.pickBufferScale - (yMax + 1)),\n        width: w,\n        height: h,\n        data: new Uint8Array(w * h * 4),\n        framebuffer: _this3.pickingFBO\n      });\n      const features = [];\n      const featuresIdMap = {};\n      for (let i = 0; i < pickedColors.length / 4; i = i + 1) {\n        const color = pickedColors.slice(i * 4, i * 4 + 4);\n        const pickedFeatureIdx = decodePickingColor(color);\n        if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n          const rawFeature = layer.layerPickService.getFeatureById(pickedFeatureIdx);\n          features.push(_objectSpread(_objectSpread({}, rawFeature), {}, {\n            pickedFeatureIdx\n          }));\n          featuresIdMap[pickedFeatureIdx] = true;\n        }\n      }\n      return features;\n    })();\n  }\n\n  // 动态设置鼠标光标\n  handleCursor(layer, type) {\n    const {\n      cursor = '',\n      cursorEnabled\n    } = layer.getLayerConfig();\n    if (cursorEnabled) {\n      const mapType = this.mapService.getType();\n      const domContainer = mapType === 'amap' ? this.mapService.getMapContainer() : this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMapContainer();\n      const defaultCursor = domContainer === null || domContainer === void 0 ? void 0 : domContainer.style.getPropertyValue('cursor');\n      if (type === 'unmousemove' && defaultCursor !== '') {\n        domContainer === null || domContainer === void 0 || domContainer.style.setProperty('cursor', '');\n      } else if (type === 'mousemove') {\n        domContainer === null || domContainer === void 0 || domContainer.style.setProperty('cursor', cursor);\n      }\n    }\n    // const domContainer = this.mapService.getMapContainer()\n    // domContainer?.style.setProperty('cursor', 'move');\n  }\n  destroy() {\n    this.pickingFBO.destroy();\n    // this.pickingFBO = null; 清除对 webgl 实例的引用\n    // @ts-ignore\n    this.pickingFBO = null;\n  }\n  pickingAllLayer(target) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // 判断是否进行拾取操作\n      if (!_this4.layerService.needPick(target.type) || !_this4.isPickingAllLayer()) {\n        return;\n      }\n      _this4.alreadyInPicking = true;\n      yield _this4.pickingLayers(target);\n      _this4.layerService.renderLayers();\n      _this4.alreadyInPicking = false;\n    })();\n  }\n  isPickingAllLayer() {\n    // this.alreadyInPicking 避免多次重复拾取\n\n    if (this.alreadyInPicking) {\n      return false;\n    }\n    // this.layerService.alreadyInRendering 一个渲染序列中只进行一次拾取操作\n    if (this.layerService.alreadyInRendering) {\n      return false;\n    }\n    // this.interactionService.dragging amap2 在点击操作的时候同时会触发 dragging 的情况（避免舍去）\n    if (this.interactionService.indragging) {\n      return false;\n    }\n\n    // 判断当前进行 shader pick 拾取判断\n    if (!this.layerService.getShaderPickStat()) {\n      return false;\n    }\n\n    // 进行拾取\n    return true;\n  }\n  resizePickingFBO() {\n    const {\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale)\n      });\n      this.width = width;\n      this.height = height;\n    }\n  }\n  pickingLayers(target) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        clear,\n        useFramebufferAsync\n      } = _this5.rendererService;\n      _this5.resizePickingFBO();\n      const layers = _this5.layerService.getRenderList();\n      for (const layer of layers.filter(layer => layer.needPick(target.type)).reverse()) {\n        yield useFramebufferAsync(_this5.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n          clear({\n            framebuffer: _this5.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1\n          });\n          // 渲染需要拾取的图层\n          layer.layerPickService.pickRender(target);\n        }));\n        const isPicked = yield _this5.pickFromPickingFBO(layer, target);\n        _this5.layerService.pickedLayerId = isPicked ? +layer.id : -1;\n        if (isPicked && !layer.getLayerConfig().enablePropagation) {\n          break;\n        }\n      }\n    })();\n  }\n  triggerHoverOnLayer(layer, target) {\n    // layer.emit(target.type, target);\n    // 判断是否发生事件冲突\n    if (isEventCrash(target)) {\n      // Tip: 允许用户动态设置鼠标光标\n      this.handleCursor(layer, target.type);\n      layer.emit(target.type, target);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}