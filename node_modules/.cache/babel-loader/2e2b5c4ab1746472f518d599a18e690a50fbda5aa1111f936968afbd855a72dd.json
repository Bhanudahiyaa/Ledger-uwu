{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n(function (NsAddNode) {\n  /** Command: 用于注册named factory */\n  NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n  /** hookName */\n  NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\nlet AddNodeCommand = class AddNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.addNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          createNodeService,\n          cellFactory,\n          commandService,\n          options\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        let rawNode = handlerArgs.nodeConfig;\n        // 通过createNodeService来获取诸如nodeId的信息，如果返回的nodeid为空则不添加到画布\n        if (createNodeService) {\n          const res = yield createNodeService(handlerArgs);\n          if (typeof res === 'boolean') {\n            return {\n              err: 'createNodeService rejected'\n            };\n          }\n          rawNode = res;\n        }\n        const nodeConfig = yield this.processNodeConfig(rawNode);\n        let x6NodeCell;\n        const eventOptions = Object.assign(Object.assign({}, options), {\n          isCommand: true\n        });\n        if (cellFactory) {\n          /** 使用参数中的工厂方法 */\n          const cell = yield cellFactory(nodeConfig, this);\n          x6NodeCell = graph.addNode(cell, eventOptions);\n        } else {\n          x6NodeCell = graph.addNode(nodeConfig, eventOptions);\n        }\n        /** add undo: delete node */\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          const nodeData = Object.assign({\n            id: x6NodeCell.id\n          }, x6NodeCell.getData());\n          commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        })));\n        return {\n          nodeConfig: nodeConfig,\n          nodeCell: x6NodeCell\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    this.processNodeConfig = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      /**\n       * 1. react shape node 逻辑\n       * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n       */\n      nodeConfig.data = Object.assign({}, nodeConfig);\n      /** 非 react shape */\n      if (nodeConfig.shape) {\n        return nodeConfig;\n      }\n      /** react shape 使用react-portal-view提高性能 */\n      if (!nodeConfig.view) {\n        const graphConfig = yield ctx.getGraphConfig();\n        nodeConfig.view = graphConfig.graphId;\n      }\n      /** 获取 react component */\n      if (!nodeConfig.component) {\n        const reactComponent = yield this.getNodeReactComponent(nodeConfig);\n        const commands = ctx.getCommands();\n        const modelService = ctx.getModelService();\n        nodeConfig.shape = 'react-shape';\n        nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n      }\n      return nodeConfig;\n    });\n    this.getNodeReactComponent = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const hooks = ctx.getHooks();\n      /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n      const graphConfig = yield ctx.getGraphConfig();\n      /** 通过hooks获取更多的组件 */\n      const renderMap = yield hooks.reactNodeRender.call(graphConfig.nodeRender);\n      /** 获取renderKey，没有renderKey时使用默认Key */\n      const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n      /** 获取组件 */\n      const reactComponent = renderMap.get(renderKey);\n      if (!reactComponent) {\n        console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n      }\n      return reactComponent;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddNodeCommand.prototype, \"contextProvider\", void 0);\nAddNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddNode.command.id\n  }\n})\n/** 创建节点命令 */], AddNodeCommand);\nexport { AddNodeCommand };","map":{"version":3,"names":["inject","injectable","ICommandHandler","ICommandContextProvider","getNodeReactComponent","XFlowNodeCommands","Disposable","XFLOW_DEFAULT_NODE","NsAddNode","command","ADD_NODE","hookKey","AddNodeCommand","constructor","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","result","addNode","call","handlerArgs","createNodeService","cellFactory","commandService","options","graph","getX6Graph","rawNode","nodeConfig","res","err","processNodeConfig","x6NodeCell","eventOptions","Object","assign","isCommand","cell","addUndo","create","nodeData","id","getData","executeCommand","DEL_NODE","nodeCell","setResult","data","shape","view","graphConfig","getGraphConfig","graphId","component","reactComponent","commands","getCommands","modelService","getModelService","renderMap","reactNodeRender","nodeRender","renderKey","nodeTypeParser","get","console","error","undo","isUndoable","redo","__decorate","token","named"],"sources":["../../../src/command-contributions/node/node-add.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}