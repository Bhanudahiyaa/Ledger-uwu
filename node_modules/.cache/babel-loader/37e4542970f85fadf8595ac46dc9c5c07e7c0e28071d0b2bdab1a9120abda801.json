{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Tile from \"./Tile\";\nimport { getTileLayer } from \"./util\";\nexport default class VectorTile extends Tile {\n  initTileLayer() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const attributes = _this.parent.getLayerAttributeConfig();\n      const layerOptions = _this.getLayerOptions();\n      const vectorLayer = getTileLayer(_this.parent.type);\n      const sourceOptions = _this.getSourceOption();\n      if (!sourceOptions) {\n        _this.isLoaded = true;\n        _this.emit('loaded');\n        return;\n      }\n      const layer = new vectorLayer(_objectSpread({}, layerOptions)).source(sourceOptions.data, sourceOptions.options);\n\n      // 初始化数据映射\n      Object.keys(attributes).forEach(type => {\n        var _attributes$attr, _attributes$attr2;\n        const attr = type;\n        // @ts-ignore\n        layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);\n      });\n      yield _this.addLayer(layer);\n      if (layerOptions.tileMask) {\n        // 瓦片数据裁剪\n        yield _this.addTileMask();\n      }\n      _this.setLayerMinMaxZoom(layer);\n      _this.isLoaded = true;\n      _this.emit('loaded');\n    })();\n  }\n  getSourceOption() {\n    const rawSource = this.parent.getSource();\n    const {\n      sourceLayer = 'defaultLayer',\n      featureId = 'id'\n    } = this.parent.getLayerConfig();\n    const features = this.getFeatures(sourceLayer);\n    return {\n      data: {\n        type: 'FeatureCollection',\n        features\n      },\n      options: {\n        parser: {\n          type: 'geojson',\n          featureId\n        },\n        transforms: rawSource.transforms\n      }\n    };\n  }\n  setLayerMinMaxZoom(layer) {\n    // 文本图层设置，可见范围\n    if (layer.getModelType() === 'text') {\n      layer.updateLayerConfig({\n        maxZoom: this.z + 1,\n        minZoom: this.z - 1\n      });\n    }\n  }\n  // 获取瓦片数据\n\n  getFeatures(sourceLayer) {\n    const source = this.sourceTile.data;\n    return source.getTileData(sourceLayer);\n  }\n\n  /**\n   * 在一个 Tile 中可能存在一个相同 ID 的 feature\n   * @param id\n   * @returns\n   */\n  getFeatureById(id) {\n    const layer = this.getMainLayer();\n    if (!layer) {\n      return [];\n    }\n    const res = layer.getSource().data.dataArray.filter(d => d._id === id);\n    return res;\n  }\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","Tile","getTileLayer","VectorTile","initTileLayer","_this","attributes","parent","getLayerAttributeConfig","layerOptions","getLayerOptions","vectorLayer","type","sourceOptions","getSourceOption","isLoaded","emit","layer","source","data","options","Object","keys","forEach","_attributes$attr","_attributes$attr2","attr","field","values","addLayer","tileMask","addTileMask","setLayerMinMaxZoom","rawSource","getSource","sourceLayer","featureId","getLayerConfig","features","getFeatures","parser","transforms","getModelType","updateLayerConfig","maxZoom","z","minZoom","sourceTile","getTileData","getFeatureById","id","getMainLayer","res","dataArray","filter","d","_id"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/tile/tile/VectorTile.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Tile from \"./Tile\";\nimport { getTileLayer } from \"./util\";\nexport default class VectorTile extends Tile {\n  initTileLayer() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const attributes = _this.parent.getLayerAttributeConfig();\n      const layerOptions = _this.getLayerOptions();\n      const vectorLayer = getTileLayer(_this.parent.type);\n      const sourceOptions = _this.getSourceOption();\n      if (!sourceOptions) {\n        _this.isLoaded = true;\n        _this.emit('loaded');\n        return;\n      }\n      const layer = new vectorLayer(_objectSpread({}, layerOptions)).source(sourceOptions.data, sourceOptions.options);\n\n      // 初始化数据映射\n      Object.keys(attributes).forEach(type => {\n        var _attributes$attr, _attributes$attr2;\n        const attr = type;\n        // @ts-ignore\n        layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);\n      });\n      yield _this.addLayer(layer);\n      if (layerOptions.tileMask) {\n        // 瓦片数据裁剪\n        yield _this.addTileMask();\n      }\n      _this.setLayerMinMaxZoom(layer);\n      _this.isLoaded = true;\n      _this.emit('loaded');\n    })();\n  }\n  getSourceOption() {\n    const rawSource = this.parent.getSource();\n    const {\n      sourceLayer = 'defaultLayer',\n      featureId = 'id'\n    } = this.parent.getLayerConfig();\n    const features = this.getFeatures(sourceLayer);\n    return {\n      data: {\n        type: 'FeatureCollection',\n        features\n      },\n      options: {\n        parser: {\n          type: 'geojson',\n          featureId\n        },\n        transforms: rawSource.transforms\n      }\n    };\n  }\n  setLayerMinMaxZoom(layer) {\n    // 文本图层设置，可见范围\n    if (layer.getModelType() === 'text') {\n      layer.updateLayerConfig({\n        maxZoom: this.z + 1,\n        minZoom: this.z - 1\n      });\n    }\n  }\n  // 获取瓦片数据\n\n  getFeatures(sourceLayer) {\n    const source = this.sourceTile.data;\n    return source.getTileData(sourceLayer);\n  }\n\n  /**\n   * 在一个 Tile 中可能存在一个相同 ID 的 feature\n   * @param id\n   * @returns\n   */\n  getFeatureById(id) {\n    const layer = this.getMainLayer();\n    if (!layer) {\n      return [];\n    }\n    const res = layer.getSource().data.dataArray.filter(d => d._id === id);\n    return res;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}