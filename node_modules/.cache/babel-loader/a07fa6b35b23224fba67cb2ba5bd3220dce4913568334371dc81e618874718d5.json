{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport { createEntity as _createEntity, createWorldContainer, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine'; // tslint:disable-next-line:no-submodule-imports\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\nexport var World = (_dec = injectable(), _dec2 = inject(IDENTIFIER.ConfigService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n    this.container = void 0;\n  }\n  _createClass(World, [{\n    key: \"getEngine\",\n    value: function () {\n      var _getEngine = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var engine, _this$configService$g, canvas, engineOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                engine = this.container.get(IDENTIFIER.RenderEngine);\n                _this$configService$g = this.configService.get(), canvas = _this$configService$g.canvas, engineOptions = _this$configService$g.engineOptions;\n                _context.next = 4;\n                return engine.init(_objectSpread({\n                  canvas: canvas || createCanvas(),\n                  swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n                  antialiasing: false\n                }, engineOptions));\n              case 4:\n                return _context.abrupt(\"return\", engine);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getEngine() {\n        return _getEngine.apply(this, arguments);\n      }\n      return getEngine;\n    }()\n    /**\n     * get transform component\n     * @param entity\n     */\n  }, {\n    key: \"getTransformComponent\",\n    value: function getTransformComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.TransformComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"getMeshComponent\",\n    value: function getMeshComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.MeshComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.configService.set(config);\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      this.container = container;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity() {\n      return _createEntity();\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene() {\n      return this.container.get(Scene);\n    }\n  }, {\n    key: \"createCamera\",\n    value: function createCamera() {\n      return this.container.get(Camera);\n    }\n  }, {\n    key: \"createView\",\n    value: function createView() {\n      return this.container.get(View);\n    } // public createLight(type: string,) {\n    //   return this.container.getNamed(IDENTIFIER.Light, type)\n    // }\n  }, {\n    key: \"createRenderable\",\n    value: function createRenderable(type, config) {\n      var renderable = type ? this.container.getNamed(IDENTIFIER.Renderable, type) : this.container.get(Renderable);\n      var entity = _createEntity();\n      renderable.setConfig(config || {});\n      renderable.setEntity(entity);\n      return renderable;\n    }\n  }, {\n    key: \"createGeometry\",\n    value: function createGeometry(type, config) {\n      var geometry = this.container.getNamed(IDENTIFIER.Geometry, type);\n      var entity = _createEntity();\n      geometry.setConfig(config || {});\n      geometry.setEntity(entity);\n      return geometry.getComponent();\n    }\n  }, {\n    key: \"createMaterial\",\n    value: function createMaterial(type, config) {\n      var material = this.container.getNamed(IDENTIFIER.Material, type);\n      var entity = _createEntity();\n      material.setConfig(config || {});\n      material.setEntity(entity, type);\n      return material.getComponent();\n    }\n  }, {\n    key: \"createTexture2D\",\n    value: function createTexture2D(config) {\n      var texture = this.container.get(Texture2D);\n      texture.setConfig(config);\n      return texture;\n    }\n  }, {\n    key: \"createBufferGeometry\",\n    value: function createBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createBufferGeometry(params);\n    }\n  }, {\n    key: \"createInstancedBufferGeometry\",\n    value: function createInstancedBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createInstancedBufferGeometry(params);\n    }\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var materialSystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.MaterialSystem);\n      return materialSystem.createShaderMaterial(params);\n    }\n  }, {\n    key: \"createKernel\",\n    value: function createKernel(precompiledBundle) {\n      var kernel = this.container.get(Kernel);\n      if (typeof precompiledBundle === 'string') {\n        kernel.setBundle(JSON.parse(precompiledBundle));\n      } else {\n        kernel.setBundle(precompiledBundle);\n      }\n      kernel.init();\n      return kernel;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      var renderer = this.container.get(Renderer);\n      renderer.container = this.container;\n      renderer.init();\n      return renderer;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var systems = this.container.getAll(IDENTIFIER.Systems);\n      systems.forEach(function (system) {\n        if (system.tearDown) {\n          system.tearDown();\n        }\n      });\n      var engine = this.container.get(IDENTIFIER.RenderEngine);\n      engine.destroy();\n      var interactor = this.container.get(IDENTIFIER.InteractorService);\n      interactor.destroy();\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var worldContainer = createWorldContainer(); // bind render engine, fallback to WebGL\n\n      var engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n      if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n        worldContainer.bind(IDENTIFIER.RenderEngine) // @ts-ignore\n        .to(engineClazz).inSingletonScope();\n      }\n      worldContainer.bind(Renderer).toSelf();\n      worldContainer.bind(Kernel).toSelf();\n      worldContainer.bind(Renderable).toSelf();\n      worldContainer.bind(View).toSelf();\n      worldContainer.bind(Camera).toSelf();\n      worldContainer.bind(Scene).toSelf();\n      worldContainer.bind(World).toSelf();\n      worldContainer.bind(TextureCache).toSelf();\n      worldContainer.bind(Texture2D).toSelf(); // bind geometries\n\n      worldContainer.bind(IDENTIFIER.Geometry).to(Box).whenTargetNamed(Geometry.BOX);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Sphere).whenTargetNamed(Geometry.SPHERE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Plane).whenTargetNamed(Geometry.PLANE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Merged).whenTargetNamed(Geometry.MERGED); // bind materials\n\n      worldContainer.bind(IDENTIFIER.Material).to(Basic).whenTargetNamed(Material.BASIC); // bind renderables\n\n      worldContainer.bind(IDENTIFIER.Renderable).to(Point).whenTargetNamed(Renderable.POINT);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Line).whenTargetNamed(Renderable.LINE);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Grid).whenTargetNamed(Renderable.GRID);\n      var world = worldContainer.get(World);\n      world.setContainer(worldContainer);\n      world.setConfig(config);\n      return world;\n    }\n  }]);\n  return World;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["createEntity","_createEntity","createWorldContainer","IDENTIFIER","WebGLEngine","WebGPUEngine","WebGPUConstants","inject","injectable","Camera","Geometry","Box","Merged","Plane","Sphere","Kernel","Material","Basic","Grid","Line","Point","Renderable","Renderer","Scene","TextureCache","Texture2D","createCanvas","View","World","_dec","_dec2","ConfigService","_class","_class2","_temp","_classCallCheck","_initializerDefineProperty","_descriptor","container","_createClass","key","value","_getEngine","_asyncToGenerator","_regeneratorRuntime","mark","_callee","engine","_this$configService$g","canvas","engineOptions","wrap","_callee$","_context","prev","next","get","RenderEngine","configService","init","_objectSpread","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","abrupt","stop","getEngine","apply","arguments","getTransformComponent","entity","manager","TransformComponentManager","getComponentByEntity","getMeshComponent","MeshComponentManager","setConfig","config","set","setContainer","getContainer","createScene","createCamera","createView","createRenderable","type","renderable","getNamed","setEntity","createGeometry","geometry","getComponent","createMaterial","material","createTexture2D","texture","createBufferGeometry","params","geometrySystem","Systems","GeometrySystem","createInstancedBufferGeometry","createShaderMaterial","materialSystem","MaterialSystem","createKernel","precompiledBundle","kernel","setBundle","JSON","parse","createRenderer","renderer","destroy","systems","getAll","forEach","system","tearDown","interactor","InteractorService","create","length","undefined","worldContainer","engineClazz","navigator","gpu","isBound","bind","to","inSingletonScope","toSelf","whenTargetNamed","BOX","SPHERE","PLANE","MERGED","BASIC","POINT","LINE","GRID","world","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu/src/World.ts"],"sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry, IGeometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { IMaterial, Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n    worldContainer.bind(TextureCache).toSelf();\n    worldContainer.bind(Texture2D).toSelf();\n\n    // bind geometries\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Box)\n      .whenTargetNamed(Geometry.BOX);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Sphere)\n      .whenTargetNamed(Geometry.SPHERE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Plane)\n      .whenTargetNamed(Geometry.PLANE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Merged)\n      .whenTargetNamed(Geometry.MERGED);\n\n    // bind materials\n    worldContainer\n      .bind<IMaterial<unknown>>(IDENTIFIER.Material)\n      .to(Basic)\n      .whenTargetNamed(Material.BASIC);\n\n    // bind renderables\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Grid)\n      .whenTargetNamed(Renderable.GRID);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  // public createLight(type: string,) {\n  //   return this.container.getNamed(IDENTIFIER.Light, type)\n  // }\n\n  public createRenderable<T>(type?: string, config?: T) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    const entity = createEntity();\n    renderable.setConfig(config || {});\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createGeometry<T>(type: string, config?: T) {\n    const geometry: Geometry = this.container.getNamed(\n      IDENTIFIER.Geometry,\n      type,\n    );\n    const entity = createEntity();\n    geometry.setConfig(config || {});\n    geometry.setEntity(entity);\n    return geometry.getComponent();\n  }\n\n  public createMaterial<T>(type: string, config?: T) {\n    const material: Material = this.container.getNamed(\n      IDENTIFIER.Material,\n      type,\n    );\n    const entity = createEntity();\n    material.setConfig(config || {});\n    material.setEntity(entity, type);\n    return material.getComponent();\n  }\n\n  public createTexture2D(\n    config: ITexture2DInitializationOptions & { url: string },\n  ) {\n    const texture = this.container.get(Texture2D);\n    texture.setConfig(config);\n    return texture;\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}