{"ast":null,"code":"// src/parser/raster.ts\nimport { bandsOperation } from \"../utils/bandOperation/bands\";\nimport { extentToCoord, isNumberArray } from \"../utils/util\";\nfunction raster(data, cfg) {\n  const {\n    extent = [121.168, 30.2828, 121.384, 30.4219],\n    coordinates,\n    width,\n    height,\n    min,\n    max,\n    format,\n    operation\n  } = cfg;\n  let bandData;\n  let rasterWidth;\n  let rasterHeight;\n  if (format === void 0 || isNumberArray(data)) {\n    bandData = Array.from(data);\n    rasterWidth = width;\n    rasterHeight = height;\n  } else {\n    const imageDataList = Array.isArray(data) ? data : [data];\n    bandData = bandsOperation(imageDataList, format, operation);\n  }\n  const imageCoord = extentToCoord(coordinates, extent);\n  const resultData = {\n    _id: 1,\n    dataArray: [{\n      _id: 1,\n      data: bandData,\n      width: rasterWidth,\n      height: rasterHeight,\n      min,\n      max,\n      coordinates: imageCoord\n    }]\n  };\n  return resultData;\n}\nexport { raster as default };","map":{"version":3,"names":["bandsOperation","extentToCoord","isNumberArray","raster","data","cfg","extent","coordinates","width","height","min","max","format","operation","bandData","rasterWidth","rasterHeight","Array","from","imageDataList","isArray","imageCoord","resultData","_id","dataArray","default"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-source/es/parser/raster.js"],"sourcesContent":["// src/parser/raster.ts\nimport { bandsOperation } from \"../utils/bandOperation/bands\";\nimport { extentToCoord, isNumberArray } from \"../utils/util\";\nfunction raster(data, cfg) {\n  const {\n    extent = [121.168, 30.2828, 121.384, 30.4219],\n    coordinates,\n    width,\n    height,\n    min,\n    max,\n    format,\n    operation\n  } = cfg;\n  let bandData;\n  let rasterWidth;\n  let rasterHeight;\n  if (format === void 0 || isNumberArray(data)) {\n    bandData = Array.from(data);\n    rasterWidth = width;\n    rasterHeight = height;\n  } else {\n    const imageDataList = Array.isArray(data) ? data : [data];\n    bandData = bandsOperation(imageDataList, format, operation);\n  }\n  const imageCoord = extentToCoord(coordinates, extent);\n  const resultData = {\n    _id: 1,\n    dataArray: [\n      {\n        _id: 1,\n        data: bandData,\n        width: rasterWidth,\n        height: rasterHeight,\n        min,\n        max,\n        coordinates: imageCoord\n      }\n    ]\n  };\n  return resultData;\n}\nexport {\n  raster as default\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,aAAa,EAAEC,aAAa,QAAQ,eAAe;AAC5D,SAASC,MAAMA,CAACC,IAAI,EAAEC,GAAG,EAAE;EACzB,MAAM;IACJC,MAAM,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAC7CC,WAAW;IACXC,KAAK;IACLC,MAAM;IACNC,GAAG;IACHC,GAAG;IACHC,MAAM;IACNC;EACF,CAAC,GAAGR,GAAG;EACP,IAAIS,QAAQ;EACZ,IAAIC,WAAW;EACf,IAAIC,YAAY;EAChB,IAAIJ,MAAM,KAAK,KAAK,CAAC,IAAIV,aAAa,CAACE,IAAI,CAAC,EAAE;IAC5CU,QAAQ,GAAGG,KAAK,CAACC,IAAI,CAACd,IAAI,CAAC;IAC3BW,WAAW,GAAGP,KAAK;IACnBQ,YAAY,GAAGP,MAAM;EACvB,CAAC,MAAM;IACL,MAAMU,aAAa,GAAGF,KAAK,CAACG,OAAO,CAAChB,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IACzDU,QAAQ,GAAGd,cAAc,CAACmB,aAAa,EAAEP,MAAM,EAAEC,SAAS,CAAC;EAC7D;EACA,MAAMQ,UAAU,GAAGpB,aAAa,CAACM,WAAW,EAAED,MAAM,CAAC;EACrD,MAAMgB,UAAU,GAAG;IACjBC,GAAG,EAAE,CAAC;IACNC,SAAS,EAAE,CACT;MACED,GAAG,EAAE,CAAC;MACNnB,IAAI,EAAEU,QAAQ;MACdN,KAAK,EAAEO,WAAW;MAClBN,MAAM,EAAEO,YAAY;MACpBN,GAAG;MACHC,GAAG;MACHJ,WAAW,EAAEc;IACf,CAAC;EAEL,CAAC;EACD,OAAOC,UAAU;AACnB;AACA,SACEnB,MAAM,IAAIsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}