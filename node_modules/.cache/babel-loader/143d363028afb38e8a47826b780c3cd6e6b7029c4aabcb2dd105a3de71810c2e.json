{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\nimport { inject, injectable } from 'inversify';\nimport { createEntity } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nexport var GeometrySystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.GeometryComponentManager), _dec3 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function GeometrySystem() {\n    _classCallCheck(this, GeometrySystem);\n    _initializerDefineProperty(this, \"geometry\", _descriptor, this);\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n  }\n  _createClass(GeometrySystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.geometry.forEach(function (entity, component) {\n                  // build buffers for each geometry\n                  if (component.dirty) {\n                    component.attributes.forEach(function (attribute) {\n                      if (attribute.dirty && attribute.data) {\n                        if (!attribute.buffer) {\n                          attribute.buffer = _this.engine.createBuffer({\n                            data: attribute.data,\n                            type: gl.FLOAT\n                          });\n                        } else {\n                          var _attribute$buffer;\n                          (_attribute$buffer = attribute.buffer) === null || _attribute$buffer === void 0 ? void 0 : _attribute$buffer.subData({\n                            data: attribute.data,\n                            // TODO: support offset in subdata\n                            offset: 0\n                          });\n                        }\n                        attribute.dirty = false;\n                      }\n                    }); // create index buffer if needed\n\n                    if (component.indices) {\n                      if (!component.indicesBuffer) {\n                        component.indicesBuffer = _this.engine.createElements({\n                          data: component.indices,\n                          count: component.indices.length,\n                          type: gl.UNSIGNED_INT,\n                          usage: gl.STATIC_DRAW\n                        });\n                      } else {\n                        component.indicesBuffer.subData({\n                          data: component.indices,\n                          offset: 0\n                        });\n                      }\n                    }\n                    component.dirty = false;\n                  }\n                });\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.geometry.forEach(function (_, geometry) {\n        if (geometry.indicesBuffer) {\n          geometry.indicesBuffer.destroy();\n        }\n        geometry.attributes.forEach(function (attribute) {\n          if (attribute.buffer) {\n            attribute.buffer.destroy();\n          }\n        });\n      });\n      this.geometry.clear();\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n     */\n  }, {\n    key: \"createBufferGeometry\",\n    value: function createBufferGeometry() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          vertexCount: 3\n        },\n        vertexCount = _ref.vertexCount;\n      var entity = createEntity();\n      return this.geometry.create(entity, {\n        vertexCount: vertexCount\n      });\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n     */\n  }, {\n    key: \"createInstancedBufferGeometry\",\n    value: function createInstancedBufferGeometry(_ref2) {\n      var maxInstancedCount = _ref2.maxInstancedCount,\n        vertexCount = _ref2.vertexCount;\n      var entity = createEntity();\n      return this.geometry.create(entity, {\n        maxInstancedCount: maxInstancedCount,\n        vertexCount: vertexCount\n      });\n    }\n  }]);\n  return GeometrySystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["inject","injectable","createEntity","IDENTIFIER","gl","GeometrySystem","_dec","_dec2","GeometryComponentManager","_dec3","RenderEngine","_class","_class2","_temp","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this","wrap","_callee$","_context","prev","next","geometry","forEach","entity","component","dirty","attributes","attribute","data","buffer","engine","createBuffer","type","FLOAT","_attribute$buffer","subData","offset","indices","indicesBuffer","createElements","count","length","UNSIGNED_INT","usage","STATIC_DRAW","stop","execute","apply","arguments","tearDown","_","destroy","clear","createBufferGeometry","_ref","undefined","vertexCount","create","createInstancedBufferGeometry","_ref2","maxInstancedCount","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/geometry/System.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { generateAABBFromVertices } from '../../utils/aabb';\nimport { gl } from '../renderer/gl';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { GeometryComponent } from './GeometryComponent';\n\n@injectable()\nexport class GeometrySystem implements ISystem {\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute() {\n    this.geometry.forEach((entity, component) => {\n      // build buffers for each geometry\n      if (component.dirty) {\n        component.attributes.forEach((attribute) => {\n          if (attribute.dirty && attribute.data) {\n            if (!attribute.buffer) {\n              attribute.buffer = this.engine.createBuffer({\n                data: attribute.data,\n                type: gl.FLOAT,\n              });\n            } else {\n              attribute.buffer?.subData({\n                data: attribute.data,\n                // TODO: support offset in subdata\n                offset: 0,\n              });\n            }\n            attribute.dirty = false;\n          }\n        });\n\n        // create index buffer if needed\n        if (component.indices) {\n          if (!component.indicesBuffer) {\n            component.indicesBuffer = this.engine.createElements({\n              data: component.indices,\n              count: component.indices.length,\n              type: gl.UNSIGNED_INT,\n              usage: gl.STATIC_DRAW,\n            });\n          } else {\n            component.indicesBuffer.subData({\n              data: component.indices,\n              offset: 0,\n            });\n          }\n        }\n        component.dirty = false;\n      }\n    });\n  }\n\n  public tearDown() {\n    this.geometry.forEach((_, geometry) => {\n      if (geometry.indicesBuffer) {\n        geometry.indicesBuffer.destroy();\n      }\n\n      geometry.attributes.forEach((attribute) => {\n        if (attribute.buffer) {\n          attribute.buffer.destroy();\n        }\n      });\n    });\n    this.geometry.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n   */\n  public createBufferGeometry(\n    { vertexCount }: { vertexCount: number } = { vertexCount: 3 },\n  ) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      vertexCount,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n   */\n  public createInstancedBufferGeometry({\n    maxInstancedCount,\n    vertexCount,\n  }: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      maxInstancedCount,\n      vertexCount,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}