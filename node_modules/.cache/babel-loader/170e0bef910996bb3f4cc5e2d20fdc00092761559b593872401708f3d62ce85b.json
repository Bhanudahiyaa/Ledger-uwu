{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, Disposable } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { XFlowNode } from '../x6-extension/node';\nimport { Shape } from '@antv/x6';\nexport const flowOptions = {\n  grid: true,\n  mousewheel: {\n    enabled: true,\n    zoomAtMousePosition: true,\n    modifiers: 'ctrl',\n    minScale: 0.5,\n    maxScale: 3\n  },\n  connecting: {\n    router: 'manhattan',\n    connector: {\n      name: 'rounded',\n      args: {\n        radius: 8\n      }\n    },\n    anchor: 'center',\n    connectionPoint: 'anchor',\n    allowBlank: false,\n    snap: {\n      radius: 20\n    },\n    createEdge() {\n      return new Shape.Edge({\n        attrs: {\n          line: {\n            stroke: '#A2B1C3',\n            strokeWidth: 2,\n            targetMarker: {\n              name: 'block',\n              width: 12,\n              height: 8\n            }\n          }\n        },\n        zIndex: 0\n      });\n    },\n    validateConnection({\n      targetMagnet\n    }) {\n      return !!targetMagnet;\n    }\n  },\n  highlighting: {\n    magnetAdsorbed: {\n      name: 'stroke',\n      args: {\n        attrs: {\n          fill: '#5F95FF',\n          stroke: '#5F95FF'\n        }\n      }\n    }\n  },\n  resizing: true,\n  rotating: true,\n  selecting: {\n    enabled: true,\n    rubberband: true,\n    showNodeSelectionBox: true,\n    modifiers: 'shift'\n  },\n  snapline: true,\n  keyboard: true,\n  clipboard: true\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\nlet FlowHooksContribution = class FlowHooksContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'flow-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'flow-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            delete edgeConfig.id;\n            const cell = new Shape.Edge({\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId\n              },\n              attrs: {\n                line: {\n                  stroke: '#A2B1C3',\n                  strokeWidth: 2,\n                  targetMarker: {\n                    name: 'block',\n                    width: 12,\n                    height: 8\n                  }\n                }\n              },\n              zIndex: -1,\n              data: Object.assign({}, edgeConfig)\n            });\n            return cell;\n          });\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'assign options ',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          Object.assign(args, flowOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n  }\n};\nFlowHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":{"version":3,"names":["ManaSyringe","DisposableCollection","Disposable","IHookContribution","XFlowNode","Shape","flowOptions","grid","mousewheel","enabled","zoomAtMousePosition","modifiers","minScale","maxScale","connecting","router","connector","name","args","radius","anchor","connectionPoint","allowBlank","snap","createEdge","Edge","attrs","line","stroke","strokeWidth","targetMarker","width","height","zIndex","validateConnection","targetMagnet","highlighting","magnetAdsorbed","fill","resizing","rotating","selecting","rubberband","showNodeSelectionBox","snapline","keyboard","clipboard","FlowHooksContribution","constructor","toDispose","registerHookHub","__awaiter","create","registerHook","hooks","disposables","addNode","handler","cellFactory","nodeConfig","node","Object","assign","addEdge","edgeConfig","id","cell","source","port","sourcePortId","target","targetPortId","data","graphOptions","pushAll","__decorate","singleton","contrib"],"sources":["../../../src/canvas-flow-extension/contributions/flow.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}