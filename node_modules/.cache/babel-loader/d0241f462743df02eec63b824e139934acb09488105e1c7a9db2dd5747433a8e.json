{"ast":null,"code":"import JQuery from 'jquery';\nimport { DataUri, NumberExt, FunctionExt, Vector } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Base } from './base';\nexport class FormatManager extends Base {\n  toSVG(callback, options = {}) {\n    this.graph.trigger('before:export', options);\n    const rawSVG = this.view.svg;\n    const vSVG = Vector.create(rawSVG).clone();\n    let clonedSVG = vSVG.node;\n    const vStage = vSVG.findOne(`.${this.view.prefixClassName('graph-svg-stage')}`);\n    const viewBox = options.viewBox || this.graph.graphToLocal(this.graph.getContentBBox());\n    const dimension = options.preserveDimensions;\n    if (dimension) {\n      const size = typeof dimension === 'boolean' ? viewBox : dimension;\n      vSVG.attr({\n        width: size.width,\n        height: size.height\n      });\n    }\n    vSVG.removeAttribute('style').attr('viewBox', [viewBox.x, viewBox.y, viewBox.width, viewBox.height].join(' '));\n    vStage.removeAttribute('transform');\n    // Stores all the CSS declarations from external stylesheets to the\n    // `style` attribute of the SVG document nodes.\n    // This is achieved in three steps.\n    // -----------------------------------\n    // 1. Disabling all the stylesheets in the page and therefore collecting\n    //    only default style values. This, together with the step 2, makes it\n    //    possible to discard default CSS property values and store only those\n    //    that differ.\n    //\n    // 2. Enabling back all the stylesheets in the page and collecting styles\n    //    that differ from the default values.\n    //\n    // 3. Applying the difference between default values and the ones set by\n    //    custom stylesheets onto the `style` attribute of each of the nodes\n    //    in SVG.\n    if (options.copyStyles !== false) {\n      const document = rawSVG.ownerDocument;\n      const raws = Array.from(rawSVG.querySelectorAll('*'));\n      const clones = Array.from(clonedSVG.querySelectorAll('*'));\n      const styleSheetCount = document.styleSheets.length;\n      const styleSheetsCopy = [];\n      for (let k = styleSheetCount - 1; k >= 0; k -= 1) {\n        // There is a bug (bugSS) in Chrome 14 and Safari. When you set\n        // `stylesheet.disable = true` it will also remove it from\n        // `document.styleSheets`. So we need to store all stylesheets before\n        // we disable them. Later on we put them back to `document.styleSheets`\n        // if needed.\n        // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.\n        styleSheetsCopy[k] = document.styleSheets[k];\n        document.styleSheets[k].disabled = true;\n      }\n      const defaultComputedStyles = {};\n      raws.forEach((elem, index) => {\n        const computedStyle = window.getComputedStyle(elem, null);\n        // We're making a deep copy of the `computedStyle` so that it's not affected\n        // by that next step when all the stylesheets are re-enabled again.\n        const defaultComputedStyle = {};\n        Object.keys(computedStyle).forEach(property => {\n          defaultComputedStyle[property] = computedStyle.getPropertyValue(property);\n        });\n        defaultComputedStyles[index] = defaultComputedStyle;\n      });\n      // Copy all stylesheets back\n      if (styleSheetCount !== document.styleSheets.length) {\n        styleSheetsCopy.forEach((copy, index) => {\n          document.styleSheets[index] = copy;\n        });\n      }\n      for (let i = 0; i < styleSheetCount; i += 1) {\n        document.styleSheets[i].disabled = false;\n      }\n      const customStyles = {};\n      raws.forEach((elem, index) => {\n        const computedStyle = window.getComputedStyle(elem, null);\n        const defaultComputedStyle = defaultComputedStyles[index];\n        const customStyle = {};\n        Object.keys(computedStyle).forEach(property => {\n          if (!NumberExt.isNumeric(property) && computedStyle.getPropertyValue(property) !== defaultComputedStyle[property]) {\n            customStyle[property] = computedStyle.getPropertyValue(property);\n          }\n        });\n        customStyles[index] = customStyle;\n      });\n      clones.forEach((elem, index) => {\n        JQuery(elem).css(customStyles[index]);\n      });\n    }\n    const stylesheet = options.stylesheet;\n    if (typeof stylesheet === 'string') {\n      const cDATASection = rawSVG.ownerDocument.implementation.createDocument(null, 'xml', null).createCDATASection(stylesheet);\n      vSVG.prepend(Vector.create('style', {\n        type: 'text/css'\n      }, [cDATASection]));\n    }\n    const format = () => {\n      const beforeSerialize = options.beforeSerialize;\n      if (typeof beforeSerialize === 'function') {\n        const ret = FunctionExt.call(beforeSerialize, this.graph, clonedSVG);\n        if (ret instanceof SVGSVGElement) {\n          clonedSVG = ret;\n        }\n      }\n      const dataUri = new XMLSerializer().serializeToString(clonedSVG).replace(/&nbsp;/g, '\\u00a0');\n      this.graph.trigger('after:export', options);\n      callback(dataUri);\n    };\n    if (options.serializeImages) {\n      const deferrals = vSVG.find('image').map(vImage => {\n        return new Promise(resolve => {\n          const url = vImage.attr('xlink:href') || vImage.attr('href');\n          DataUri.imageToDataUri(url, (err, dataUri) => {\n            if (!err && dataUri) {\n              vImage.attr('xlink:href', dataUri);\n            }\n            resolve();\n          });\n        });\n      });\n      Promise.all(deferrals).then(format);\n    } else {\n      format();\n    }\n  }\n  toDataURL(callback, options) {\n    let viewBox = options.viewBox || this.graph.getContentBBox();\n    const padding = NumberExt.normalizeSides(options.padding);\n    if (options.width && options.height) {\n      if (padding.left + padding.right >= options.width) {\n        padding.left = padding.right = 0;\n      }\n      if (padding.top + padding.bottom >= options.height) {\n        padding.top = padding.bottom = 0;\n      }\n    }\n    const expanding = new Rectangle(-padding.left, -padding.top, padding.left + padding.right, padding.top + padding.bottom);\n    if (options.width && options.height) {\n      const width = viewBox.width + padding.left + padding.right;\n      const height = viewBox.height + padding.top + padding.bottom;\n      expanding.scale(width / options.width, height / options.height);\n    }\n    viewBox = Rectangle.create(viewBox).moveAndExpand(expanding);\n    const rawSize = typeof options.width === 'number' && typeof options.height === 'number' ? {\n      width: options.width,\n      height: options.height\n    } : viewBox;\n    let scale = options.ratio ? parseFloat(options.ratio) : 1;\n    if (!Number.isFinite(scale) || scale === 0) {\n      scale = 1;\n    }\n    const size = {\n      width: Math.max(Math.round(rawSize.width * scale), 1),\n      height: Math.max(Math.round(rawSize.height * scale), 1)\n    };\n    {\n      const imgDataCanvas = document.createElement('canvas');\n      const context2D = imgDataCanvas.getContext('2d');\n      imgDataCanvas.width = size.width;\n      imgDataCanvas.height = size.height;\n      const x = size.width - 1;\n      const y = size.height - 1;\n      context2D.fillStyle = 'rgb(1,1,1)';\n      context2D.fillRect(x, y, 1, 1);\n      const data = context2D.getImageData(x, y, 1, 1).data;\n      if (data[0] !== 1 || data[1] !== 1 || data[2] !== 1) {\n        throw new Error('size exceeded');\n      }\n    }\n    const img = new Image();\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = size.width;\n      canvas.height = size.height;\n      const context = canvas.getContext('2d');\n      context.fillStyle = options.backgroundColor || 'white';\n      context.fillRect(0, 0, size.width, size.height);\n      try {\n        context.drawImage(img, 0, 0, size.width, size.height);\n        const dataUri = canvas.toDataURL(options.type, options.quality);\n        callback(dataUri);\n      } catch (error) {\n        // pass\n      }\n    };\n    this.toSVG(dataUri => {\n      img.src = `data:image/svg+xml,${encodeURIComponent(dataUri)}`;\n    }, Object.assign(Object.assign({}, options), {\n      viewBox,\n      serializeImages: true,\n      preserveDimensions: Object.assign({}, size)\n    }));\n  }\n  toPNG(callback, options = {}) {\n    this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n      type: 'image/png'\n    }));\n  }\n  toJPEG(callback, options = {}) {\n    this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n      type: 'image/jpeg'\n    }));\n  }\n}","map":{"version":3,"names":["JQuery","DataUri","NumberExt","FunctionExt","Vector","Rectangle","Base","FormatManager","toSVG","callback","options","graph","trigger","rawSVG","view","svg","vSVG","create","clone","clonedSVG","node","vStage","findOne","prefixClassName","viewBox","graphToLocal","getContentBBox","dimension","preserveDimensions","size","attr","width","height","removeAttribute","x","y","join","copyStyles","document","ownerDocument","raws","Array","from","querySelectorAll","clones","styleSheetCount","styleSheets","length","styleSheetsCopy","k","disabled","defaultComputedStyles","forEach","elem","index","computedStyle","window","getComputedStyle","defaultComputedStyle","Object","keys","property","getPropertyValue","copy","i","customStyles","customStyle","isNumeric","css","stylesheet","cDATASection","implementation","createDocument","createCDATASection","prepend","type","format","beforeSerialize","ret","call","SVGSVGElement","dataUri","XMLSerializer","serializeToString","replace","serializeImages","deferrals","find","map","vImage","Promise","resolve","url","imageToDataUri","err","all","then","toDataURL","padding","normalizeSides","left","right","top","bottom","expanding","scale","moveAndExpand","rawSize","ratio","parseFloat","Number","isFinite","Math","max","round","imgDataCanvas","createElement","context2D","getContext","fillStyle","fillRect","data","getImageData","Error","img","Image","onload","canvas","context","backgroundColor","drawImage","quality","error","src","encodeURIComponent","assign","toPNG","toJPEG"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/graph/format.ts"],"sourcesContent":["import JQuery from 'jquery'\nimport { DataUri, NumberExt, FunctionExt, Vector } from '../util'\nimport { Size, KeyValue } from '../types'\nimport { Rectangle } from '../geometry'\nimport { Graph } from './graph'\nimport { Base } from './base'\n\nexport class FormatManager extends Base {\n  toSVG(\n    callback: FormatManager.ToSVGCallback,\n    options: FormatManager.ToSVGOptions = {},\n  ) {\n    this.graph.trigger('before:export', options)\n\n    const rawSVG = this.view.svg\n    const vSVG = Vector.create(rawSVG).clone()\n    let clonedSVG = vSVG.node as SVGSVGElement\n    const vStage = vSVG.findOne(\n      `.${this.view.prefixClassName('graph-svg-stage')}`,\n    )!\n\n    const viewBox =\n      options.viewBox || this.graph.graphToLocal(this.graph.getContentBBox())\n    const dimension = options.preserveDimensions\n    if (dimension) {\n      const size = typeof dimension === 'boolean' ? viewBox : dimension\n      vSVG.attr({\n        width: size.width,\n        height: size.height,\n      })\n    }\n\n    vSVG\n      .removeAttribute('style')\n      .attr(\n        'viewBox',\n        [viewBox.x, viewBox.y, viewBox.width, viewBox.height].join(' '),\n      )\n\n    vStage.removeAttribute('transform')\n\n    // Stores all the CSS declarations from external stylesheets to the\n    // `style` attribute of the SVG document nodes.\n\n    // This is achieved in three steps.\n    // -----------------------------------\n\n    // 1. Disabling all the stylesheets in the page and therefore collecting\n    //    only default style values. This, together with the step 2, makes it\n    //    possible to discard default CSS property values and store only those\n    //    that differ.\n    //\n    // 2. Enabling back all the stylesheets in the page and collecting styles\n    //    that differ from the default values.\n    //\n    // 3. Applying the difference between default values and the ones set by\n    //    custom stylesheets onto the `style` attribute of each of the nodes\n    //    in SVG.\n\n    if (options.copyStyles !== false) {\n      const document = rawSVG.ownerDocument!\n      const raws = Array.from(rawSVG.querySelectorAll('*'))\n      const clones = Array.from(clonedSVG.querySelectorAll('*'))\n\n      const styleSheetCount = document.styleSheets.length\n      const styleSheetsCopy = []\n      for (let k = styleSheetCount - 1; k >= 0; k -= 1) {\n        // There is a bug (bugSS) in Chrome 14 and Safari. When you set\n        // `stylesheet.disable = true` it will also remove it from\n        // `document.styleSheets`. So we need to store all stylesheets before\n        // we disable them. Later on we put them back to `document.styleSheets`\n        // if needed.\n\n        // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.\n        styleSheetsCopy[k] = document.styleSheets[k]\n        document.styleSheets[k].disabled = true\n      }\n\n      const defaultComputedStyles: KeyValue<KeyValue<string>> = {}\n      raws.forEach((elem, index) => {\n        const computedStyle = window.getComputedStyle(elem, null)\n        // We're making a deep copy of the `computedStyle` so that it's not affected\n        // by that next step when all the stylesheets are re-enabled again.\n        const defaultComputedStyle: KeyValue<string> = {}\n        Object.keys(computedStyle).forEach((property) => {\n          defaultComputedStyle[property] =\n            computedStyle.getPropertyValue(property)\n        })\n\n        defaultComputedStyles[index] = defaultComputedStyle\n      })\n\n      // Copy all stylesheets back\n      if (styleSheetCount !== document.styleSheets.length) {\n        styleSheetsCopy.forEach((copy, index) => {\n          document.styleSheets[index] = copy\n        })\n      }\n\n      for (let i = 0; i < styleSheetCount; i += 1) {\n        document.styleSheets[i].disabled = false\n      }\n\n      const customStyles: KeyValue<KeyValue<string>> = {}\n      raws.forEach((elem, index) => {\n        const computedStyle = window.getComputedStyle(elem, null)\n        const defaultComputedStyle = defaultComputedStyles[index]\n        const customStyle: KeyValue<string> = {}\n\n        Object.keys(computedStyle).forEach((property) => {\n          if (\n            !NumberExt.isNumeric(property) &&\n            computedStyle.getPropertyValue(property) !==\n              defaultComputedStyle[property]\n          ) {\n            customStyle[property] = computedStyle.getPropertyValue(property)\n          }\n        })\n\n        customStyles[index] = customStyle\n      })\n\n      clones.forEach((elem, index) => {\n        JQuery(elem).css(customStyles[index])\n      })\n    }\n\n    const stylesheet = options.stylesheet\n    if (typeof stylesheet === 'string') {\n      const cDATASection = rawSVG\n        .ownerDocument!.implementation.createDocument(null, 'xml', null)\n        .createCDATASection(stylesheet)\n\n      vSVG.prepend(\n        Vector.create(\n          'style',\n          {\n            type: 'text/css',\n          },\n          [cDATASection as any],\n        ),\n      )\n    }\n\n    const format = () => {\n      const beforeSerialize = options.beforeSerialize\n      if (typeof beforeSerialize === 'function') {\n        const ret = FunctionExt.call(beforeSerialize, this.graph, clonedSVG)\n        if (ret instanceof SVGSVGElement) {\n          clonedSVG = ret\n        }\n      }\n\n      const dataUri = new XMLSerializer()\n        .serializeToString(clonedSVG)\n        .replace(/&nbsp;/g, '\\u00a0')\n\n      this.graph.trigger('after:export', options)\n      callback(dataUri)\n    }\n\n    if (options.serializeImages) {\n      const deferrals = vSVG.find('image').map((vImage) => {\n        return new Promise<void>((resolve) => {\n          const url = vImage.attr('xlink:href') || vImage.attr('href')\n          DataUri.imageToDataUri(url, (err, dataUri) => {\n            if (!err && dataUri) {\n              vImage.attr('xlink:href', dataUri)\n            }\n            resolve()\n          })\n        })\n      })\n\n      Promise.all(deferrals).then(format)\n    } else {\n      format()\n    }\n  }\n\n  toDataURL(\n    callback: FormatManager.ToSVGCallback,\n    options: FormatManager.ToDataURLOptions,\n  ) {\n    let viewBox = options.viewBox || this.graph.getContentBBox()\n\n    const padding = NumberExt.normalizeSides(options.padding)\n    if (options.width && options.height) {\n      if (padding.left + padding.right >= options.width) {\n        padding.left = padding.right = 0\n      }\n      if (padding.top + padding.bottom >= options.height) {\n        padding.top = padding.bottom = 0\n      }\n    }\n\n    const expanding = new Rectangle(\n      -padding.left,\n      -padding.top,\n      padding.left + padding.right,\n      padding.top + padding.bottom,\n    )\n\n    if (options.width && options.height) {\n      const width = viewBox.width + padding.left + padding.right\n      const height = viewBox.height + padding.top + padding.bottom\n      expanding.scale(width / options.width, height / options.height)\n    }\n\n    viewBox = Rectangle.create(viewBox).moveAndExpand(expanding)\n\n    const rawSize =\n      typeof options.width === 'number' && typeof options.height === 'number'\n        ? { width: options.width, height: options.height }\n        : viewBox\n\n    let scale = options.ratio ? parseFloat(options.ratio) : 1\n    if (!Number.isFinite(scale) || scale === 0) {\n      scale = 1\n    }\n\n    const size = {\n      width: Math.max(Math.round(rawSize.width * scale), 1),\n      height: Math.max(Math.round(rawSize.height * scale), 1),\n    }\n\n    {\n      const imgDataCanvas = document.createElement('canvas')\n      const context2D = imgDataCanvas.getContext('2d')!\n      imgDataCanvas.width = size.width\n      imgDataCanvas.height = size.height\n      const x = size.width - 1\n      const y = size.height - 1\n      context2D.fillStyle = 'rgb(1,1,1)'\n      context2D.fillRect(x, y, 1, 1)\n      const data = context2D.getImageData(x, y, 1, 1).data\n      if (data[0] !== 1 || data[1] !== 1 || data[2] !== 1) {\n        throw new Error('size exceeded')\n      }\n    }\n\n    const img = new Image()\n    img.onload = () => {\n      const canvas = document.createElement('canvas')\n      canvas.width = size.width\n      canvas.height = size.height\n\n      const context = canvas.getContext('2d')!\n      context.fillStyle = options.backgroundColor || 'white'\n      context.fillRect(0, 0, size.width, size.height)\n\n      try {\n        context.drawImage(img, 0, 0, size.width, size.height)\n        const dataUri = canvas.toDataURL(options.type, options.quality)\n        callback(dataUri)\n      } catch (error) {\n        // pass\n      }\n    }\n\n    this.toSVG(\n      (dataUri) => {\n        img.src = `data:image/svg+xml,${encodeURIComponent(dataUri)}`\n      },\n      {\n        ...options,\n        viewBox,\n        serializeImages: true,\n        preserveDimensions: {\n          ...size,\n        },\n      },\n    )\n  }\n\n  toPNG(\n    callback: FormatManager.ToSVGCallback,\n    options: FormatManager.ToImageOptions = {},\n  ) {\n    this.toDataURL(callback, {\n      ...options,\n      type: 'image/png',\n    })\n  }\n\n  toJPEG(\n    callback: FormatManager.ToSVGCallback,\n    options: FormatManager.ToImageOptions = {},\n  ) {\n    this.toDataURL(callback, {\n      ...options,\n      type: 'image/jpeg',\n    })\n  }\n}\n\nexport namespace FormatManager {\n  export type ToSVGCallback = (dataUri: string) => any\n\n  export interface ToSVGOptions {\n    /**\n     * By default, the resulting SVG has set width and height to `100%`.\n     * If you'd like to have the dimensions to be set to the actual content\n     * width and height, set `preserveDimensions` to `true`. An object with\n     * `width` and `height` properties can be also used here if you need to\n     * define the export size explicitely.\n     */\n    preserveDimensions?: boolean | Size\n\n    viewBox?: Rectangle.RectangleLike\n\n    /**\n     * When set to `true` all the styles from external stylesheets are copied\n     * to the resulting SVG export. Note this requires a lot of computations\n     * and it might significantly affect the export time.\n     */\n    copyStyles?: boolean\n\n    stylesheet?: string\n\n    /**\n     * Converts all contained images into Data URI format.\n     */\n    serializeImages?: boolean\n\n    /**\n     * A function called before the XML serialization. It may be used to\n     * modify the exported SVG before it is converted to a string. The\n     * function can also return a new SVGDocument.\n     */\n    beforeSerialize?: (this: Graph, svg: SVGSVGElement) => any\n  }\n\n  export interface ToImageOptions extends ToSVGOptions {\n    /**\n     * The width of the image in pixels.\n     */\n    width?: number\n    /**\n     * The height of the image in pixels.\n     */\n    height?: number\n    ratio?: string\n    backgroundColor?: string\n    padding?: NumberExt.SideOptions\n    quality?: number\n  }\n\n  export interface ToDataURLOptions extends ToImageOptions {\n    type: 'image/png' | 'image/jpeg'\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}