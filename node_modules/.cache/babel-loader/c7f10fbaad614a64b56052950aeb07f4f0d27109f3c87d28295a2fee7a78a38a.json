{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport dagre from \"./dagre/index\";\nimport { isArray, isNumber, isObject, getEdgeTerminal } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * 层次布局\n */\nexport class DagreLayout extends Base {\n  constructor(options) {\n    super();\n    /** layout 方向, 可选 TB, BT, LR, RL */\n    this.rankdir = \"TB\";\n    /** 节点水平间距(px) */\n    this.nodesep = 50;\n    /** 每一层节点之间间距 */\n    this.ranksep = 50;\n    /** 是否保留布局连线的控制点 */\n    this.controlPoints = false;\n    /** 每层节点是否根据节点数据中的 comboId 进行排序，以防止同层 combo 重叠 */\n    this.sortByCombo = false;\n    /** 是否保留每条边上的dummy node */\n    this.edgeLabelSpace = true;\n    this.nodes = [];\n    this.edges = [];\n    /** 迭代结束的回调函数 */\n    this.onLayoutEnd = () => {};\n    this.layoutNode = nodeId => {\n      const self = this;\n      const {\n        nodes\n      } = self;\n      const node = nodes.find(node => node.id === nodeId);\n      if (node) {\n        const layout = node.layout !== false;\n        return layout;\n      }\n      return true;\n    };\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      rankdir: \"TB\",\n      align: undefined,\n      nodeSize: undefined,\n      nodesepFunc: undefined,\n      ranksepFunc: undefined,\n      nodesep: 50,\n      ranksep: 50,\n      controlPoints: false // 是否保留布局连线的控制点\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const {\n      nodes,\n      nodeSize,\n      rankdir,\n      combos,\n      begin\n    } = self;\n    if (!nodes) return;\n    const edges = self.edges || [];\n    const g = new dagre.graphlib.Graph({\n      multigraph: true,\n      compound: true\n    });\n    let nodeSizeFunc;\n    if (!nodeSize) {\n      nodeSizeFunc = d => {\n        if (d.size) {\n          if (isArray(d.size)) {\n            return d.size;\n          }\n          if (isObject(d.size)) {\n            return [d.size.width || 40, d.size.height || 40];\n          }\n          return [d.size, d.size];\n        }\n        return [40, 40];\n      };\n    } else if (isArray(nodeSize)) {\n      nodeSizeFunc = () => nodeSize;\n    } else {\n      nodeSizeFunc = () => [nodeSize, nodeSize];\n    }\n    let horisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n    let vertisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n    if (rankdir === \"LR\" || rankdir === \"RL\") {\n      horisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n      vertisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n    }\n    g.setDefaultEdgeLabel(() => ({}));\n    g.setGraph(self);\n    const comboMap = {};\n    nodes.filter(node => node.layout !== false).forEach(node => {\n      const size = nodeSizeFunc(node);\n      const verti = vertisep(node);\n      const hori = horisep(node);\n      const width = size[0] + 2 * hori;\n      const height = size[1] + 2 * verti;\n      const layer = node.layer;\n      if (isNumber(layer)) {\n        // 如果有layer属性，加入到node的label中\n        g.setNode(node.id, {\n          width,\n          height,\n          layer\n        });\n      } else {\n        g.setNode(node.id, {\n          width,\n          height\n        });\n      }\n      if (this.sortByCombo && node.comboId) {\n        if (!comboMap[node.comboId]) {\n          comboMap[node.comboId] = true;\n          g.setNode(node.comboId, {});\n        }\n        g.setParent(node.id, node.comboId);\n      }\n    });\n    if (this.sortByCombo && combos) {\n      combos.forEach(combo => {\n        if (!combo.parentId) return;\n        if (!comboMap[combo.parentId]) {\n          comboMap[combo.parentId] = true;\n          g.setNode(combo.parentId, {});\n        }\n        g.setParent(combo.id, combo.parentId);\n      });\n    }\n    edges.forEach(edge => {\n      // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n      const source = getEdgeTerminal(edge, 'source');\n      const target = getEdgeTerminal(edge, 'target');\n      if (this.layoutNode(source) && this.layoutNode(target)) {\n        g.setEdge(source, target, {\n          weight: edge.weight || 1\n        });\n      }\n    });\n    // 考虑增量图中的原始图\n    let prevGraph = undefined;\n    if (self.preset) {\n      prevGraph = new dagre.graphlib.Graph({\n        multigraph: true,\n        compound: true\n      });\n      self.preset.nodes.forEach(node => {\n        prevGraph === null || prevGraph === void 0 ? void 0 : prevGraph.setNode(node.id, node);\n      });\n    }\n    dagre.layout(g, {\n      prevGraph,\n      edgeLabelSpace: self.edgeLabelSpace,\n      keepNodeOrder: Boolean(!!self.nodeOrder),\n      nodeOrder: self.nodeOrder\n    });\n    const dBegin = [0, 0];\n    if (begin) {\n      let minX = Infinity;\n      let minY = Infinity;\n      g.nodes().forEach(node => {\n        const coord = g.node(node);\n        if (minX > coord.x) minX = coord.x;\n        if (minY > coord.y) minY = coord.y;\n      });\n      g.edges().forEach(edge => {\n        const coord = g.edge(edge);\n        coord.points.forEach(point => {\n          if (minX > point.x) minX = point.x;\n          if (minY > point.y) minY = point.y;\n        });\n      });\n      dBegin[0] = begin[0] - minX;\n      dBegin[1] = begin[1] - minY;\n    }\n    g.nodes().forEach(node => {\n      const coord = g.node(node);\n      const i = nodes.findIndex(it => it.id === node);\n      if (!nodes[i]) return;\n      nodes[i].x = coord.x + dBegin[0];\n      nodes[i].y = coord.y + dBegin[1];\n      // @ts-ignore: pass layer order to data for increment layout use\n      nodes[i]._order = coord._order;\n    });\n    g.edges().forEach(edge => {\n      const coord = g.edge(edge);\n      const i = edges.findIndex(it => {\n        const source = getEdgeTerminal(it, 'source');\n        const target = getEdgeTerminal(it, 'target');\n        return source === edge.v && target === edge.w;\n      });\n      if (self.edgeLabelSpace && self.controlPoints && edges[i].type !== \"loop\") {\n        edges[i].controlPoints = coord.points.slice(1, coord.points.length - 1);\n        edges[i].controlPoints.forEach(point => {\n          point.x += dBegin[0];\n          point.y += dBegin[1];\n        });\n      }\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes,\n      edges\n    };\n  }\n  getType() {\n    return \"dagre\";\n  }\n}\nfunction getFunc(func, value, defaultValue) {\n  let resultFunc;\n  if (func) {\n    resultFunc = func;\n  } else if (isNumber(value)) {\n    resultFunc = () => value;\n  } else {\n    resultFunc = () => defaultValue;\n  }\n  return resultFunc;\n}","map":{"version":3,"names":["dagre","isArray","isNumber","isObject","getEdgeTerminal","Base","DagreLayout","constructor","options","rankdir","nodesep","ranksep","controlPoints","sortByCombo","edgeLabelSpace","nodes","edges","onLayoutEnd","layoutNode","nodeId","self","node","find","id","layout","updateCfg","getDefaultCfg","align","undefined","nodeSize","nodesepFunc","ranksepFunc","execute","combos","begin","g","graphlib","Graph","multigraph","compound","nodeSizeFunc","d","size","width","height","horisep","getFunc","vertisep","setDefaultEdgeLabel","setGraph","comboMap","filter","forEach","verti","hori","layer","setNode","comboId","setParent","combo","parentId","edge","source","target","setEdge","weight","prevGraph","preset","keepNodeOrder","Boolean","nodeOrder","dBegin","minX","Infinity","minY","coord","x","y","points","point","i","findIndex","it","_order","v","w","type","slice","length","getType","func","value","defaultValue","resultFunc"],"sources":["../../src/layout/dagre.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}