{"ast":null,"code":"let _Symbol$iterator;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Disposable } from './disposable';\nexport var Event;\n(function (Event) {\n  Event.None = () => Disposable.NONE;\n  function map(event, mapFunc) {\n    return (listener, context) => event(i => listener.call(context, mapFunc(i)), undefined);\n  }\n  Event.map = map;\n})(Event || (Event = {}));\n_Symbol$iterator = Symbol.iterator;\nclass CallbackList {\n  constructor(mono = false) {\n    this.mono = void 0;\n    this._callbacks = void 0;\n    this.mono = mono;\n  }\n  get callbacks() {\n    if (!this._callbacks) {\n      this._callbacks = [];\n    }\n    return this._callbacks;\n  }\n  get length() {\n    return this.callbacks.length;\n  }\n  add(callback, context = undefined) {\n    this.callbacks.push([callback, context]);\n  }\n  remove(callback, context = undefined) {\n    if (this.isEmpty()) return;\n    let foundCallbackWithDifferentContext = false;\n    for (let i = 0; i < this.length; i += 1) {\n      if (this.callbacks[i][0] === callback) {\n        if (this.callbacks[i][1] === context) {\n          // remove when callback & context match\n          this.callbacks.splice(i, 1);\n          return;\n        }\n        foundCallbackWithDifferentContext = true;\n      }\n    }\n    if (foundCallbackWithDifferentContext) {\n      throw new Error('You should remove it with the same context you add it');\n    }\n  }\n  [_Symbol$iterator]() {\n    if (this.isEmpty()) {\n      return [][Symbol.iterator]();\n    }\n    const callbacks = this.callbacks.slice(0);\n    return callbacks.map(callback => (...args) => callback[0].apply(callback[1], args))[Symbol.iterator]();\n  }\n  invoke(...args) {\n    const ret = [];\n    for (const callback of this) {\n      try {\n        ret.push(callback(...args));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    return ret;\n  }\n  isEmpty() {\n    return this.callbacks.length === 0;\n  }\n  dispose() {\n    this._callbacks = undefined;\n  }\n}\nexport class Emitter {\n  constructor(options = {}) {\n    this.options = void 0;\n    this._event = void 0;\n    this._callbacks = void 0;\n    this.disposed = false;\n    this.options = options;\n  }\n  get callbacks() {\n    if (!this._callbacks) {\n      this._callbacks = new CallbackList();\n    }\n    return this._callbacks;\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n\n  get event() {\n    if (!this._event) {\n      this._event = (listener, thisArgs) => {\n        if (this.options.onFirstListenerAdd && this.callbacks.isEmpty()) {\n          this.options.onFirstListenerAdd(this);\n        }\n        this.callbacks.add(listener, thisArgs);\n        const result = {\n          dispose: () => {\n            result.dispose = Emitter.noop;\n            if (!this.disposed) {\n              this.callbacks.remove(listener, thisArgs);\n              result.dispose = Emitter.noop;\n              if (this.options.onLastListenerRemove && this.callbacks.isEmpty()) {\n                this.options.onLastListenerRemove(this);\n              }\n            }\n          }\n        };\n        return result;\n      };\n    }\n    return this._event;\n  }\n  fire(event) {\n    if (!this._callbacks) {\n      return;\n    }\n    this.callbacks.invoke(event);\n  }\n  /**\n   * Process each listener one by one.\n   * Return `false` to stop iterating over the listeners, `true` to continue.\n   */\n\n  async sequence(processor) {\n    for (const listener of this.callbacks) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await processor(listener);\n      if (!result) {\n        break;\n      }\n    }\n  }\n  dispose() {\n    if (this._callbacks) {\n      this._callbacks.dispose();\n      this._callbacks = undefined;\n    }\n    this.disposed = true;\n  }\n}\nEmitter.noop = () => {};","map":{"version":3,"names":["_Symbol$iterator","Disposable","Event","None","NONE","map","event","mapFunc","listener","context","i","call","undefined","Symbol","iterator","CallbackList","constructor","mono","_callbacks","callbacks","length","add","callback","push","remove","isEmpty","foundCallbackWithDifferentContext","splice","Error","slice","args","apply","invoke","ret","e","console","error","dispose","Emitter","options","_event","disposed","thisArgs","onFirstListenerAdd","result","noop","onLastListenerRemove","fire","sequence","processor"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/mana-common/es/event.js"],"sourcesContent":["let _Symbol$iterator;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Disposable } from './disposable';\nexport var Event;\n\n(function (Event) {\n  Event.None = () => Disposable.NONE;\n\n  function map(event, mapFunc) {\n    return (listener, context) => event(i => listener.call(context, mapFunc(i)), undefined);\n  }\n\n  Event.map = map;\n})(Event || (Event = {}));\n\n_Symbol$iterator = Symbol.iterator;\n\nclass CallbackList {\n  constructor(mono = false) {\n    this.mono = void 0;\n    this._callbacks = void 0;\n    this.mono = mono;\n  }\n\n  get callbacks() {\n    if (!this._callbacks) {\n      this._callbacks = [];\n    }\n\n    return this._callbacks;\n  }\n\n  get length() {\n    return this.callbacks.length;\n  }\n\n  add(callback, context = undefined) {\n    this.callbacks.push([callback, context]);\n  }\n\n  remove(callback, context = undefined) {\n    if (this.isEmpty()) return;\n    let foundCallbackWithDifferentContext = false;\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (this.callbacks[i][0] === callback) {\n        if (this.callbacks[i][1] === context) {\n          // remove when callback & context match\n          this.callbacks.splice(i, 1);\n          return;\n        }\n\n        foundCallbackWithDifferentContext = true;\n      }\n    }\n\n    if (foundCallbackWithDifferentContext) {\n      throw new Error('You should remove it with the same context you add it');\n    }\n  }\n\n  [_Symbol$iterator]() {\n    if (this.isEmpty()) {\n      return [][Symbol.iterator]();\n    }\n\n    const callbacks = this.callbacks.slice(0);\n    return callbacks.map(callback => (...args) => callback[0].apply(callback[1], args))[Symbol.iterator]();\n  }\n\n  invoke(...args) {\n    const ret = [];\n\n    for (const callback of this) {\n      try {\n        ret.push(callback(...args));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    return ret;\n  }\n\n  isEmpty() {\n    return this.callbacks.length === 0;\n  }\n\n  dispose() {\n    this._callbacks = undefined;\n  }\n\n}\n\nexport class Emitter {\n  constructor(options = {}) {\n    this.options = void 0;\n    this._event = void 0;\n    this._callbacks = void 0;\n    this.disposed = false;\n    this.options = options;\n  }\n\n  get callbacks() {\n    if (!this._callbacks) {\n      this._callbacks = new CallbackList();\n    }\n\n    return this._callbacks;\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n\n\n  get event() {\n    if (!this._event) {\n      this._event = (listener, thisArgs) => {\n        if (this.options.onFirstListenerAdd && this.callbacks.isEmpty()) {\n          this.options.onFirstListenerAdd(this);\n        }\n\n        this.callbacks.add(listener, thisArgs);\n        const result = {\n          dispose: () => {\n            result.dispose = Emitter.noop;\n\n            if (!this.disposed) {\n              this.callbacks.remove(listener, thisArgs);\n              result.dispose = Emitter.noop;\n\n              if (this.options.onLastListenerRemove && this.callbacks.isEmpty()) {\n                this.options.onLastListenerRemove(this);\n              }\n            }\n          }\n        };\n        return result;\n      };\n    }\n\n    return this._event;\n  }\n\n  fire(event) {\n    if (!this._callbacks) {\n      return;\n    }\n\n    this.callbacks.invoke(event);\n  }\n  /**\n   * Process each listener one by one.\n   * Return `false` to stop iterating over the listeners, `true` to continue.\n   */\n\n\n  async sequence(processor) {\n    for (const listener of this.callbacks) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await processor(listener);\n\n      if (!result) {\n        break;\n      }\n    }\n  }\n\n  dispose() {\n    if (this._callbacks) {\n      this._callbacks.dispose();\n\n      this._callbacks = undefined;\n    }\n\n    this.disposed = true;\n  }\n\n}\n\nEmitter.noop = () => {};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}