{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport { rampColor2legend } from \"../utils/rampcolor_legend\";\nimport HeatMapModels from \"./models\";\nexport default class HeatMapLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'HeatMapLayer');\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shape = _this.getModelType();\n      _this.layerModel = new HeatMapModels[shape](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  prerender() {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.prerender(); // 独立的渲染流程\n      }\n    }\n  }\n  renderModels(options = {}) {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.render(options); // 独立的渲染流程\n      }\n      return this;\n    }\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      return this;\n    }\n    this.hooks.beforeRender.call();\n    this.models.forEach(model => model.draw({\n      uniforms: this.layerModel.getUninforms(),\n      blend: this.layerModel.getBlend(),\n      stencil: this.layerModel.getStencil(options)\n    }));\n    this.hooks.afterRender.call();\n    return this;\n  }\n  updateModelData(data) {\n    if (data.attributes && data.elements) {\n      this.models[0].updateAttributesAndElements(data.attributes, data.elements);\n    } else {\n      console.warn('data error');\n    }\n  }\n  getModelType() {\n    var _shapeAttribute$scale;\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n    const {\n      shape3d\n    } = this.getLayerConfig();\n    const source = this.getSource();\n    const sourceType = source.data.type;\n    const shape = (shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';\n    if (shape === 'heatmap' || shape === 'heatmap3d') {\n      return 'heatmap';\n    }\n    if (sourceType === 'hexagon') {\n      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';\n    }\n    if (sourceType === 'grid') {\n      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';\n    }\n    return 'heatmap';\n  }\n  getLegend(name) {\n    if (this.getModelType() === 'heatmap') {\n      if (name !== 'color') return {\n        type: undefined,\n        field: undefined,\n        items: []\n      };\n      const rampColors = this.getLayerConfig().rampColors;\n      return rampColor2legend(rampColors, name);\n    } else {\n      return super.getLegend(name);\n    }\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","BaseLayer","rampColor2legend","HeatMapModels","HeatMapLayer","constructor","args","buildModels","_this","shape","getModelType","layerModel","initLayerModels","prerender","renderModels","options","render","encodeDataLength","forceRender","hooks","beforeRender","call","models","forEach","model","draw","uniforms","getUninforms","blend","getBlend","stencil","getStencil","afterRender","updateModelData","data","attributes","elements","updateAttributesAndElements","console","warn","_shapeAttribute$scale","shapeAttribute","styleAttributeService","getLayerStyleAttribute","shape3d","getLayerConfig","source","getSource","sourceType","type","scale","field","indexOf","getLegend","name","undefined","items","rampColors"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/heatmap/index.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport { rampColor2legend } from \"../utils/rampcolor_legend\";\nimport HeatMapModels from \"./models\";\nexport default class HeatMapLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'HeatMapLayer');\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shape = _this.getModelType();\n      _this.layerModel = new HeatMapModels[shape](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  prerender() {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.prerender(); // 独立的渲染流程\n      }\n    }\n  }\n  renderModels(options = {}) {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.render(options); // 独立的渲染流程\n      }\n      return this;\n    }\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      return this;\n    }\n    this.hooks.beforeRender.call();\n    this.models.forEach(model => model.draw({\n      uniforms: this.layerModel.getUninforms(),\n      blend: this.layerModel.getBlend(),\n      stencil: this.layerModel.getStencil(options)\n    }));\n    this.hooks.afterRender.call();\n    return this;\n  }\n  updateModelData(data) {\n    if (data.attributes && data.elements) {\n      this.models[0].updateAttributesAndElements(data.attributes, data.elements);\n    } else {\n      console.warn('data error');\n    }\n  }\n  getModelType() {\n    var _shapeAttribute$scale;\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n    const {\n      shape3d\n    } = this.getLayerConfig();\n    const source = this.getSource();\n    const sourceType = source.data.type;\n    const shape = (shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';\n    if (shape === 'heatmap' || shape === 'heatmap3d') {\n      return 'heatmap';\n    }\n    if (sourceType === 'hexagon') {\n      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';\n    }\n    if (sourceType === 'grid') {\n      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';\n    }\n    return 'heatmap';\n  }\n  getLegend(name) {\n    if (this.getModelType() === 'heatmap') {\n      if (name !== 'color') return {\n        type: undefined,\n        field: undefined,\n        items: []\n      };\n      const rampColors = this.getLayerConfig().rampColors;\n      return rampColor2legend(rampColors, name);\n    } else {\n      return super.getLegend(name);\n    }\n  }\n}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,OAAOC,SAAS,MAAM,mBAAmB;AACzC,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAOC,aAAa,MAAM,UAAU;AACpC,eAAe,MAAMC,YAAY,SAASH,SAAS,CAAC;EAClDI,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACdN,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,cAAc,CAAC;EAC/C;EACAO,WAAWA,CAAA,EAAG;IACZ,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAOT,iBAAiB,CAAC,aAAa;MACpC,MAAMU,KAAK,GAAGD,KAAK,CAACE,YAAY,CAAC,CAAC;MAClCF,KAAK,CAACG,UAAU,GAAG,IAAIR,aAAa,CAACM,KAAK,CAAC,CAACD,KAAK,CAAC;MAClD,MAAMA,KAAK,CAACI,eAAe,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,SAASA,CAAA,EAAG;IACV,MAAMJ,KAAK,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACjC,IAAID,KAAK,KAAK,SAAS,EAAE;MACvB,IAAI,IAAI,CAACE,UAAU,EAAE;QACnB,IAAI,CAACA,UAAU,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;MAC/B;IACF;EACF;EACAC,YAAYA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzB,MAAMN,KAAK,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACjC,IAAID,KAAK,KAAK,SAAS,EAAE;MACvB,IAAI,IAAI,CAACE,UAAU,EAAE;QACnB,IAAI,CAACA,UAAU,CAACK,MAAM,CAACD,OAAO,CAAC,CAAC,CAAC;MACnC;MACA,OAAO,IAAI;IACb;IACA,IAAI,IAAI,CAACE,gBAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnD,OAAO,IAAI;IACb;IACA,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,IAAI,CAAC,CAAC;IAC9B,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;MACtCC,QAAQ,EAAE,IAAI,CAACf,UAAU,CAACgB,YAAY,CAAC,CAAC;MACxCC,KAAK,EAAE,IAAI,CAACjB,UAAU,CAACkB,QAAQ,CAAC,CAAC;MACjCC,OAAO,EAAE,IAAI,CAACnB,UAAU,CAACoB,UAAU,CAAChB,OAAO;IAC7C,CAAC,CAAC,CAAC;IACH,IAAI,CAACI,KAAK,CAACa,WAAW,CAACX,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI;EACb;EACAY,eAAeA,CAACC,IAAI,EAAE;IACpB,IAAIA,IAAI,CAACC,UAAU,IAAID,IAAI,CAACE,QAAQ,EAAE;MACpC,IAAI,CAACd,MAAM,CAAC,CAAC,CAAC,CAACe,2BAA2B,CAACH,IAAI,CAACC,UAAU,EAAED,IAAI,CAACE,QAAQ,CAAC;IAC5E,CAAC,MAAM;MACLE,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;IAC5B;EACF;EACA7B,YAAYA,CAAA,EAAG;IACb,IAAI8B,qBAAqB;IACzB,MAAMC,cAAc,GAAG,IAAI,CAACC,qBAAqB,CAACC,sBAAsB,CAAC,OAAO,CAAC;IACjF,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IACzB,MAAMC,MAAM,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IAC/B,MAAMC,UAAU,GAAGF,MAAM,CAACZ,IAAI,CAACe,IAAI;IACnC,MAAMxC,KAAK,GAAG,CAACgC,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,IAAI,CAACD,qBAAqB,GAAGC,cAAc,CAACS,KAAK,MAAM,IAAI,IAAIV,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACW,KAAK,KAAK,SAAS;IACvN,IAAI1C,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,WAAW,EAAE;MAChD,OAAO,SAAS;IAClB;IACA,IAAIuC,UAAU,KAAK,SAAS,EAAE;MAC5B,OAAO,CAACJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACQ,OAAO,CAAC3C,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,SAAS,GAAG,QAAQ;IACjH;IACA,IAAIuC,UAAU,KAAK,MAAM,EAAE;MACzB,OAAO,CAACJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACQ,OAAO,CAAC3C,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,QAAQ;IAC9G;IACA,OAAO,SAAS;EAClB;EACA4C,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAAC5C,YAAY,CAAC,CAAC,KAAK,SAAS,EAAE;MACrC,IAAI4C,IAAI,KAAK,OAAO,EAAE,OAAO;QAC3BL,IAAI,EAAEM,SAAS;QACfJ,KAAK,EAAEI,SAAS;QAChBC,KAAK,EAAE;MACT,CAAC;MACD,MAAMC,UAAU,GAAG,IAAI,CAACZ,cAAc,CAAC,CAAC,CAACY,UAAU;MACnD,OAAOvD,gBAAgB,CAACuD,UAAU,EAAEH,IAAI,CAAC;IAC3C,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,SAAS,CAACC,IAAI,CAAC;IAC9B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}