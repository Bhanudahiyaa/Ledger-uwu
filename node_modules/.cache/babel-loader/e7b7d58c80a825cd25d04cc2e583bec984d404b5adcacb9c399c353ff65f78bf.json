{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n(function (NsGraphStatusCommand) {\n  /** Command: 获取执行状态 */\n  NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n  /** Command: 用于注册 named factory */\n  NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n  /** hookName */\n  NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n  /** 状态 类型 */\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[\"SUCCESS\"] = \"success\";\n    StatusEnum[\"PROCESSING\"] = \"processing\";\n    StatusEnum[\"ERROR\"] = \"error\";\n    StatusEnum[\"DEFAULT\"] = \"default\";\n    StatusEnum[\"WARNING\"] = \"warning\";\n  })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n  /** 按status 分类  */\n  NsGraphStatusCommand.initStatusMap = () => ({\n    [NsGraphStatusCommand.StatusEnum.DEFAULT]: [],\n    [NsGraphStatusCommand.StatusEnum.PROCESSING]: [],\n    [NsGraphStatusCommand.StatusEnum.ERROR]: [],\n    [NsGraphStatusCommand.StatusEnum.WARNING]: [],\n    [NsGraphStatusCommand.StatusEnum.SUCCESS]: []\n  });\n  /** 接口返回 类型 */\n  NsGraphStatusCommand.groupByStatus = data => {\n    const seed = NsGraphStatusCommand.initStatusMap();\n    return Object.entries(data).reduce((acc, [nodeId, value]) => {\n      acc[value.status].push(nodeId);\n      return acc;\n    }, seed);\n  };\n  /** diff status */\n  NsGraphStatusCommand.statusDiff = (cur, next) => {\n    const items = new Set([...cur, ...next]);\n    const diff = {\n      current: [],\n      add: [],\n      remove: []\n    };\n    items.forEach(item => {\n      if (next.includes(item) && !cur.includes(item)) {\n        diff.add.push(item);\n      }\n      if (!next.includes(item) && cur.includes(item)) {\n        diff.remove.push(item);\n      }\n    });\n    return diff;\n  };\n  NsGraphStatusCommand.shouldStop = info => __awaiter(this, void 0, void 0, function* () {\n    return [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus);\n  });\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\nlet QueryGraphStatusCommand = class QueryGraphStatusCommand {\n  constructor() {\n    /** 状态缓存 */\n    this.statusInfo = NsGraphStatusCommand.initStatusMap();\n    /** 获取Model */\n    this.getStatusModel = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const modelService = ctx.getModelService();\n      const statusModel = yield GRAPH_STATUS_INFO.getModel(modelService);\n      return statusModel;\n    });\n    /** 更新Model数据 */\n    this.updateModelValue = callback => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      statusModel.setValue(callback);\n    });\n    /** 停止Looping的flag */\n    this.stopCurrentStatusLooping = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.dispose();\n    });\n    /** 设置停止looping的方法 */\n    this.addStopDispose = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.push({\n        dispose: () => {\n          /** 重制processing的边的状态 */\n          this.updateEdges(this.statusInfo, NsGraphStatusCommand.initStatusMap());\n          this.isLooping = false;\n        }\n      });\n    });\n    /** 更新Graph的数据 */\n    this.updateGraph = (curStatusInfo, nextStatusMap, statusMap) => {\n      /** 更新节点 */\n      this.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n      /** 更新边 */\n      this.updateEdges(curStatusInfo, nextStatusMap);\n    };\n    /** 更新节点数据 */\n    this.updateNodeData = (id, data) => {\n      const cell = this.x6Graph.getCellById(id);\n      if (!cell) {\n        return;\n      }\n      cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n    };\n    /** 更新连线数据 */\n    this.updateNodes = (curStatusInfo, nextStatusMap, statusMap) => {\n      Object.keys(curStatusInfo).forEach(status => {\n        const nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n        nodes.add.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n        nodes.remove.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n      });\n    };\n    /** 更新节点数据 */\n    this.updateEdges = (curStatusInfo, nextStatusMap) => {\n      const runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n      const edges = this.x6Graph.getEdges();\n      edges.forEach(edge => {\n        var _a;\n        const view = (_a = this.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n        const target = edge.getTargetCellId();\n        if (!target) {\n          return;\n        }\n        const targetNodeId = target.toString();\n        if (!view) {\n          return;\n        }\n        if (runningNodes.add.includes(targetNodeId)) {\n          /** 新增className */\n          return view.addClass(EDGE_PROCESSING_CLASSNAME);\n        } else if (runningNodes.remove.includes(targetNodeId)) {\n          /** 移除className */\n          return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n        }\n      });\n    };\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      // 引用\n      this.x6Graph = yield ctx.getX6Graph();\n      const result = yield hooks.queryGraphStatus.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graphStatusService,\n          shouldStop = NsGraphStatusCommand.shouldStop,\n          doOnce\n        } = handlerArgs;\n        // 取消已有的循环\n        yield this.stopCurrentStatusLooping();\n        // 循环函数\n        const loopFunction = (service, loopInterval = 10000) => __awaiter(this, void 0, void 0, function* () {\n          // 查询服务端状态\n          const data = yield service(handlerArgs);\n          // 更新全局状态\n          this.updateModelValue(state => {\n            Object.entries(data.statusMap).forEach(([key, value]) => {\n              state.statusMap.set(key, value);\n            });\n            state.graphStatus = data.graphStatus;\n          });\n          // 更新图上状态\n          const statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n          this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap);\n          // 缓存当前状态作为对比数据\n          this.statusInfo = statusGroupMap;\n          // 延迟\n          yield delay(loopInterval);\n          // 判断是否循环\n          if (!this.isLooping) {\n            return;\n          }\n          // 判断是否循环\n          if (shouldStop) {\n            const isStop = yield shouldStop(data, handlerArgs);\n            if (isStop) {\n              return;\n            }\n          }\n          // 执行下次调用\n          yield loopFunction(service, loopInterval);\n        });\n        // 从参数更新循环的FLAG\n        this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop;\n        // 添加可以停止loop的回调\n        yield this.addStopDispose();\n        // 执行\n        if (doOnce) {\n          yield doOnce(handlerArgs);\n        }\n        loopFunction(graphStatusService, handlerArgs.loopInterval);\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([ManaSyringe.inject(ICommandContextProvider), __metadata(\"design:type\", Object)], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\nQueryGraphStatusCommand = __decorate([ManaSyringe.injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphStatusCommand.command.id\n  }\n})], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport const execCmd = () => {};","map":{"version":3,"names":["ManaSyringe","ICommandHandler","ICommandContextProvider","delay","XFlowDagCommands","GRAPH_STATUS_INFO","EDGE_PROCESSING_CLASSNAME","NsGraphStatusCommand","MODEL","command","QUERY_GRAPH_STATUS","hookKey","StatusEnum","initStatusMap","DEFAULT","PROCESSING","ERROR","WARNING","SUCCESS","groupByStatus","data","seed","Object","entries","reduce","acc","nodeId","value","status","push","statusDiff","cur","next","items","Set","diff","current","add","remove","forEach","item","includes","shouldStop","info","__awaiter","graphStatus","QueryGraphStatusCommand","constructor","statusInfo","getStatusModel","ctx","contextProvider","modelService","getModelService","statusModel","getModel","updateModelValue","callback","setValue","stopCurrentStatusLooping","subscription","getValidValue","dispose","addStopDispose","updateEdges","isLooping","updateGraph","curStatusInfo","nextStatusMap","statusMap","updateNodes","updateNodeData","id","cell","x6Graph","getCellById","setData","assign","getData","getSize","getPosition","keys","nodes","runningNodes","processing","edges","getEdges","edge","view","_a","findViewByCell","target","getTargetCellId","targetNodeId","toString","addClass","removeClass","execute","args","hooks","runtimeHook","getArgs","getHooks","getX6Graph","result","queryGraphStatus","call","handlerArgs","graphStatusService","doOnce","loopFunction","service","loopInterval","state","key","set","statusGroupMap","isStop","loop","undefined","setResult","undo","isUndoable","redo","__decorate","inject","injectable","token","named","execCmd"],"sources":["../../../src/canvas-dag-extension/contributions/command.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}