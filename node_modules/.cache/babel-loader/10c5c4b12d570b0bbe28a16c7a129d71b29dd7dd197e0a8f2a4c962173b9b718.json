{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Event } from \"./util/evented\";\nimport Point from '@mapbox/point-geometry';\nimport { DOM } from \"./util/dom\";\n\n/**\n * `MapEventType` - a mapping between the event name and the event value.\n * These events are used with the {@link Map#on} method.\n * When using a `layerId` with {@link Map#on} method, please refer to {@link MapLayerEventType}.\n * The following example can be used for all the events.\n *\n * @group Event Related\n * @example\n * ```ts\n * // Initialize the map\n * let map = new Map({ // map options });\n * // Set an event listener\n * map.on('the-event-name', () => {\n *   console.log('An event has occurred!');\n * });\n * ```\n */\n\n/**\n * The base event for MapLibre\n *\n * @group Event Related\n */\n\n/**\n * `MapMouseEvent` is the event type for mouse-related map events.\n *\n * @group Event Related\n *\n * @example\n * ```ts\n * // The `click` event is an example of a `MapMouseEvent`.\n * // Set up an event listener on the map.\n * map.on('click', (e) => {\n *   // The event object (e) contains information like the\n *   // coordinates of the point on the map that was clicked.\n *   console.log('A click event has occurred at ' + e.lngLat);\n * });\n * ```\n */\nexport class MapMouseEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the following default map behaviors:\n   *\n   *   * On `mousedown` events, the behavior of {@link DragPanHandler}\n   *   * On `mousedown` events, the behavior of {@link DragRotateHandler}\n   *   * On `mousedown` events, the behavior of {@link BoxZoomHandler}\n   *   * On `dblclick` events, the behavior of {@link DoubleClickZoomHandler}\n   *\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  constructor(type, map, originalEvent, data = {}) {\n    super(type, data);\n    /**\n     * The event type\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    /**\n     * The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.\n     */\n    _defineProperty(this, \"point\", void 0);\n    /**\n     * The geographic location on the map of the mouse cursor.\n     */\n    _defineProperty(this, \"lngLat\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    const point = DOM.mousePos(map.getCanvasContainer(), originalEvent);\n    const lngLat = map.unproject(point);\n    this.point = point;\n    this.lngLat = lngLat;\n    this.originalEvent = originalEvent;\n    this._defaultPrevented = false;\n    this.target = map;\n  }\n}\n\n/**\n * `MapTouchEvent` is the event type for touch-related map events.\n *\n * @group Event Related\n */\nexport class MapTouchEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the following default map behaviors:\n   *\n   *   * On `touchstart` events, the behavior of {@link DragPanHandler}\n   *   * On `touchstart` events, the behavior of {@link TwoFingersTouchZoomRotateHandler}\n   *\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  constructor(type, map, originalEvent) {\n    super(type);\n    /**\n     * The event type.\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    /**\n     * The geographic location on the map of the center of the touch event points.\n     */\n    _defineProperty(this, \"lngLat\", void 0);\n    /**\n     * The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left\n     * corner.\n     */\n    _defineProperty(this, \"point\", void 0);\n    /**\n     * The array of pixel coordinates corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    _defineProperty(this, \"points\", void 0);\n    /**\n     * The geographical locations on the map corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    _defineProperty(this, \"lngLats\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    const touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;\n    const points = DOM.touchPos(map.getCanvasContainer(), touches);\n    const lngLats = points.map(t => map.unproject(t));\n    const point = points.reduce((prev, curr, i, arr) => {\n      return prev.add(curr.div(arr.length));\n    }, new Point(0, 0));\n    const lngLat = map.unproject(point);\n    this.target = map;\n    this.points = points;\n    this.point = point;\n    this.lngLats = lngLats;\n    this.lngLat = lngLat;\n    this.originalEvent = originalEvent;\n    this._defaultPrevented = false;\n  }\n}\n\n/**\n * `MapWheelEvent` is the event type for the `wheel` map event.\n *\n * @group Event Related\n *\n */\nexport class MapWheelEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the behavior of {@link ScrollZoomHandler}.\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  /** */\n  constructor(type, map, originalEvent) {\n    super(type);\n    /**\n     * The event type\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    this.target = map;\n    this._defaultPrevented = false;\n    this.originalEvent = originalEvent;\n  }\n}\n\n/**\n * A `MapLibreZoomEvent` is the event type for the boxzoom-related map events emitted by the {@link BoxZoomHandler}.\n *\n * @group Event Related\n */","map":{"version":3,"names":["_defineProperty","Event","Point","DOM","MapMouseEvent","preventDefault","_defaultPrevented","defaultPrevented","constructor","type","map","originalEvent","data","point","mousePos","getCanvasContainer","lngLat","unproject","target","MapTouchEvent","touches","changedTouches","points","touchPos","lngLats","t","reduce","prev","curr","i","arr","add","div","length","MapWheelEvent"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-map/es/map/events.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Event } from \"./util/evented\";\nimport Point from '@mapbox/point-geometry';\nimport { DOM } from \"./util/dom\";\n\n/**\n * `MapEventType` - a mapping between the event name and the event value.\n * These events are used with the {@link Map#on} method.\n * When using a `layerId` with {@link Map#on} method, please refer to {@link MapLayerEventType}.\n * The following example can be used for all the events.\n *\n * @group Event Related\n * @example\n * ```ts\n * // Initialize the map\n * let map = new Map({ // map options });\n * // Set an event listener\n * map.on('the-event-name', () => {\n *   console.log('An event has occurred!');\n * });\n * ```\n */\n\n/**\n * The base event for MapLibre\n *\n * @group Event Related\n */\n\n/**\n * `MapMouseEvent` is the event type for mouse-related map events.\n *\n * @group Event Related\n *\n * @example\n * ```ts\n * // The `click` event is an example of a `MapMouseEvent`.\n * // Set up an event listener on the map.\n * map.on('click', (e) => {\n *   // The event object (e) contains information like the\n *   // coordinates of the point on the map that was clicked.\n *   console.log('A click event has occurred at ' + e.lngLat);\n * });\n * ```\n */\nexport class MapMouseEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the following default map behaviors:\n   *\n   *   * On `mousedown` events, the behavior of {@link DragPanHandler}\n   *   * On `mousedown` events, the behavior of {@link DragRotateHandler}\n   *   * On `mousedown` events, the behavior of {@link BoxZoomHandler}\n   *   * On `dblclick` events, the behavior of {@link DoubleClickZoomHandler}\n   *\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  constructor(type, map, originalEvent, data = {}) {\n    super(type, data);\n    /**\n     * The event type\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    /**\n     * The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.\n     */\n    _defineProperty(this, \"point\", void 0);\n    /**\n     * The geographic location on the map of the mouse cursor.\n     */\n    _defineProperty(this, \"lngLat\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    const point = DOM.mousePos(map.getCanvasContainer(), originalEvent);\n    const lngLat = map.unproject(point);\n    this.point = point;\n    this.lngLat = lngLat;\n    this.originalEvent = originalEvent;\n    this._defaultPrevented = false;\n    this.target = map;\n  }\n}\n\n/**\n * `MapTouchEvent` is the event type for touch-related map events.\n *\n * @group Event Related\n */\nexport class MapTouchEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the following default map behaviors:\n   *\n   *   * On `touchstart` events, the behavior of {@link DragPanHandler}\n   *   * On `touchstart` events, the behavior of {@link TwoFingersTouchZoomRotateHandler}\n   *\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  constructor(type, map, originalEvent) {\n    super(type);\n    /**\n     * The event type.\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    /**\n     * The geographic location on the map of the center of the touch event points.\n     */\n    _defineProperty(this, \"lngLat\", void 0);\n    /**\n     * The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left\n     * corner.\n     */\n    _defineProperty(this, \"point\", void 0);\n    /**\n     * The array of pixel coordinates corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    _defineProperty(this, \"points\", void 0);\n    /**\n     * The geographical locations on the map corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    _defineProperty(this, \"lngLats\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    const touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;\n    const points = DOM.touchPos(map.getCanvasContainer(), touches);\n    const lngLats = points.map(t => map.unproject(t));\n    const point = points.reduce((prev, curr, i, arr) => {\n      return prev.add(curr.div(arr.length));\n    }, new Point(0, 0));\n    const lngLat = map.unproject(point);\n    this.target = map;\n    this.points = points;\n    this.point = point;\n    this.lngLats = lngLats;\n    this.lngLat = lngLat;\n    this.originalEvent = originalEvent;\n    this._defaultPrevented = false;\n  }\n}\n\n/**\n * `MapWheelEvent` is the event type for the `wheel` map event.\n *\n * @group Event Related\n *\n */\nexport class MapWheelEvent extends Event {\n  /**\n   * Prevents subsequent default processing of the event by the map.\n   *\n   * Calling this method will prevent the behavior of {@link ScrollZoomHandler}.\n   */\n  preventDefault() {\n    this._defaultPrevented = true;\n  }\n\n  /**\n   * `true` if `preventDefault` has been called.\n   */\n  get defaultPrevented() {\n    return this._defaultPrevented;\n  }\n  /** */\n  constructor(type, map, originalEvent) {\n    super(type);\n    /**\n     * The event type\n     */\n    /**\n     * The `Map` object that fired the event.\n     */\n    _defineProperty(this, \"target\", void 0);\n    /**\n     * The DOM event which caused the map event.\n     */\n    _defineProperty(this, \"originalEvent\", void 0);\n    _defineProperty(this, \"_defaultPrevented\", void 0);\n    this.target = map;\n    this._defaultPrevented = false;\n    this.originalEvent = originalEvent;\n  }\n}\n\n/**\n * A `MapLibreZoomEvent` is the event type for the boxzoom-related map events emitted by the {@link BoxZoomHandler}.\n *\n * @group Event Related\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}