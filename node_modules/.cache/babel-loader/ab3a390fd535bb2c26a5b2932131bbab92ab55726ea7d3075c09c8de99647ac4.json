{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { getSymbol, lineArrowPath } from \"./shape/arrow\";\n\n// list all arrow shape\n\n// Half Edge\nexport function FlowHalfArrowFillTriangulation(feature) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const tin = 1;\n  const tout = 1.0;\n  return {\n    vertices: [1, 0, 0, ...coord,\n    // 0\n    1, 2, -3, ...coord,\n    // 1\n    1, 1, -3, ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord,\n    // 4\n    1, 0, 0, ...coord,\n    // 0\n    1, 2, -3, ...coord,\n    // 1\n    1, 1, -3, ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord // 4\n    ],\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function FlowLineTriangulation(feature, symbolOption) {\n  return symbolOption ? ArrowLineTriangulation(feature, symbolOption) : FlowHalfArrowFillTriangulation(feature);\n}\nexport function ArrowLineTriangulation(feature, symbolOption) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const {\n    target = 'classic',\n    source = 'circle'\n  } = symbolOption;\n  const startSymbol = shape2Vertices(getSymbol(source, 'source'), coord, 0, 0);\n  const linePath = lineArrowPath(coord, startSymbol.vertices.length / 7, symbolOption);\n  const endSymbol = shape2Vertices(getSymbol(target, 'target'), coord, 1, startSymbol.vertices.length / 7 + linePath.vertices.length / 7);\n  const data = {\n    vertices: [...startSymbol.vertices, ...linePath.vertices, ...endSymbol.vertices],\n    indices: [...startSymbol.outLineIndices, ...linePath.outLineIndices, ...endSymbol.outLineIndices, ...startSymbol.indices, ...linePath.indices, ...endSymbol.indices],\n    normals: [...startSymbol.normals, ...linePath.normals, ...endSymbol.normals],\n    size: 7\n  };\n  return data;\n}\n// start 0,end 1;\nfunction shape2Vertices(shape, coord, type = 1, indexOffset = 0) {\n  const shapeVertices = [];\n  const {\n    vertices,\n    indices,\n    dimensions,\n    outLineIndices\n  } = shape;\n  for (let i = 0; i < vertices.length; i += dimensions) {\n    shapeVertices.push(type, vertices[i + 1], vertices[i], ...coord);\n  }\n  return _objectSpread(_objectSpread({}, shape), {}, {\n    vertices: shapeVertices,\n    indices: indices.map(i => i + indexOffset),\n    outLineIndices: outLineIndices.map(i => i + indexOffset)\n  });\n}","map":{"version":3,"names":["_objectSpread","getSymbol","lineArrowPath","FlowHalfArrowFillTriangulation","feature","coord","coordinates","flat","tin","tout","vertices","normals","indices","size","FlowLineTriangulation","symbolOption","ArrowLineTriangulation","target","source","startSymbol","shape2Vertices","linePath","length","endSymbol","data","outLineIndices","shape","type","indexOffset","shapeVertices","dimensions","i","push","map"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/core/line_trangluation.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { getSymbol, lineArrowPath } from \"./shape/arrow\";\n\n// list all arrow shape\n\n// Half Edge\nexport function FlowHalfArrowFillTriangulation(feature) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const tin = 1;\n  const tout = 1.0;\n  return {\n    vertices: [1, 0, 0, ...coord,\n    // 0\n    1, 2, -3, ...coord,\n    // 1\n    1, 1, -3, ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord,\n    // 4\n    1, 0, 0, ...coord,\n    // 0\n    1, 2, -3, ...coord,\n    // 1\n    1, 1, -3, ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord // 4\n    ],\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function FlowLineTriangulation(feature, symbolOption) {\n  return symbolOption ? ArrowLineTriangulation(feature, symbolOption) : FlowHalfArrowFillTriangulation(feature);\n}\nexport function ArrowLineTriangulation(feature, symbolOption) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const {\n    target = 'classic',\n    source = 'circle'\n  } = symbolOption;\n  const startSymbol = shape2Vertices(getSymbol(source, 'source'), coord, 0, 0);\n  const linePath = lineArrowPath(coord, startSymbol.vertices.length / 7, symbolOption);\n  const endSymbol = shape2Vertices(getSymbol(target, 'target'), coord, 1, startSymbol.vertices.length / 7 + linePath.vertices.length / 7);\n  const data = {\n    vertices: [...startSymbol.vertices, ...linePath.vertices, ...endSymbol.vertices],\n    indices: [...startSymbol.outLineIndices, ...linePath.outLineIndices, ...endSymbol.outLineIndices, ...startSymbol.indices, ...linePath.indices, ...endSymbol.indices],\n    normals: [...startSymbol.normals, ...linePath.normals, ...endSymbol.normals],\n    size: 7\n  };\n  return data;\n}\n// start 0,end 1;\nfunction shape2Vertices(shape, coord, type = 1, indexOffset = 0) {\n  const shapeVertices = [];\n  const {\n    vertices,\n    indices,\n    dimensions,\n    outLineIndices\n  } = shape;\n  for (let i = 0; i < vertices.length; i += dimensions) {\n    shapeVertices.push(type, vertices[i + 1], vertices[i], ...coord);\n  }\n  return _objectSpread(_objectSpread({}, shape), {}, {\n    vertices: shapeVertices,\n    indices: indices.map(i => i + indexOffset),\n    outLineIndices: outLineIndices.map(i => i + indexOffset)\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}