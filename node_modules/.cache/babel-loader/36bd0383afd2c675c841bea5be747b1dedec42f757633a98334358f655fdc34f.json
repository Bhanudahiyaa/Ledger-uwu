{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst _excluded = [\"passes\"],\n  _excluded2 = [\"moduleName\", \"vertexShader\", \"fragmentShader\", \"defines\", \"inject\", \"triangulation\", \"styleOption\", \"pickingEnabled\"];\n// @ts-ignore\nimport { AsyncSeriesBailHook, AsyncWaterfallHook, SyncBailHook, SyncHook } from '@antv/async-hook';\nimport { BlendType, IDebugLog, ILayerStage, globalConfigService } from '@antv/l7-core';\nimport { encodePickingColor, lodashUtil } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { createPlugins } from \"../plugins\";\nimport { BlendTypes } from \"../utils/blend\";\nimport { createMultiPassRenderer, normalizePasses } from \"../utils/multiPassRender\";\nimport LayerPickService from \"./LayerPickService\";\nimport TextureService from \"./TextureService\";\nconst {\n  isEqual,\n  isFunction,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isUndefined\n} = lodashUtil;\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\nexport default class BaseLayer extends EventEmitter {\n  get shaderModuleService() {\n    return this.container.shaderModuleService;\n  }\n  get cameraService() {\n    return this.container.cameraService;\n  }\n  get coordinateService() {\n    return this.container.coordinateSystemService;\n  }\n  get iconService() {\n    return this.container.iconService;\n  }\n  get fontService() {\n    return this.container.fontService;\n  }\n  get pickingService() {\n    return this.container.pickingService;\n  }\n  get rendererService() {\n    return this.container.rendererService;\n  }\n  get layerService() {\n    return this.container.layerService;\n  }\n  get debugService() {\n    return this.container.debugService;\n  }\n  get interactionService() {\n    return this.container.interactionService;\n  }\n  get mapService() {\n    var _this$container;\n    return (_this$container = this.container) === null || _this$container === void 0 ? void 0 : _this$container.mapService;\n  }\n  get normalPassFactory() {\n    return this.container.normalPassFactory;\n  }\n  constructor(config = {}) {\n    super();\n    _defineProperty(this, \"id\", `${layerIdCounter++}`);\n    _defineProperty(this, \"name\", `${layerIdCounter}`);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"coordCenter\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"visible\", true);\n    _defineProperty(this, \"zIndex\", 0);\n    _defineProperty(this, \"minZoom\", void 0);\n    _defineProperty(this, \"maxZoom\", void 0);\n    _defineProperty(this, \"inited\", false);\n    _defineProperty(this, \"layerModelNeedUpdate\", false);\n    _defineProperty(this, \"pickedFeatureID\", null);\n    _defineProperty(this, \"selectedFeatureID\", null);\n    _defineProperty(this, \"styleNeedUpdate\", false);\n    _defineProperty(this, \"rendering\", void 0);\n    _defineProperty(this, \"forceRender\", false);\n    _defineProperty(this, \"clusterZoom\", 0);\n    // 聚合等级标记\n    _defineProperty(this, \"layerType\", void 0);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"layerPickService\", void 0);\n    _defineProperty(this, \"textureService\", void 0);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [],\n      options: {\n        parser: {\n          type: 'json'\n        }\n      }\n    });\n    _defineProperty(this, \"dataState\", {\n      dataSourceNeedUpdate: false,\n      dataMappingNeedUpdate: false,\n      filterNeedUpdate: false,\n      featureScaleNeedUpdate: false,\n      StyleAttrNeedUpdate: false\n    });\n    // 生命周期钩子\n    _defineProperty(this, \"hooks\", {\n      init: new AsyncSeriesBailHook(),\n      afterInit: new SyncBailHook(),\n      beforeRender: new SyncBailHook(),\n      beforeRenderData: new AsyncWaterfallHook(),\n      afterRender: new SyncHook(),\n      beforePickingEncode: new SyncHook(),\n      afterPickingEncode: new SyncHook(),\n      beforeHighlight: new SyncHook(['pickedColor']),\n      afterHighlight: new SyncHook(),\n      beforeSelect: new SyncHook(['pickedColor']),\n      afterSelect: new SyncHook(),\n      beforeDestroy: new SyncHook(),\n      afterDestroy: new SyncHook()\n    });\n    // 待渲染 model 列表\n    _defineProperty(this, \"models\", []);\n    // 每个 Layer 都有一个\n    _defineProperty(this, \"multiPassRenderer\", void 0);\n    // 注入插件\n    _defineProperty(this, \"plugins\", void 0);\n    _defineProperty(this, \"startInit\", false);\n    _defineProperty(this, \"sourceOption\", void 0);\n    _defineProperty(this, \"layerModel\", void 0);\n    _defineProperty(this, \"shapeOption\", void 0);\n    _defineProperty(this, \"tileLayer\", void 0);\n    // 用于保存子图层对象\n    _defineProperty(this, \"layerChildren\", []);\n    _defineProperty(this, \"masks\", []);\n    _defineProperty(this, \"configService\", globalConfigService);\n    _defineProperty(this, \"styleAttributeService\", void 0);\n    _defineProperty(this, \"layerSource\", void 0);\n    _defineProperty(this, \"postProcessingPassFactory\", void 0);\n    _defineProperty(this, \"animateOptions\", {\n      enable: false\n    });\n    /**\n     * 图层容器\n     */\n    _defineProperty(this, \"container\", void 0);\n    _defineProperty(this, \"encodedData\", void 0);\n    _defineProperty(this, \"currentPickId\", null);\n    _defineProperty(this, \"rawConfig\", void 0);\n    _defineProperty(this, \"needUpdateConfig\", void 0);\n    _defineProperty(this, \"encodeStyleAttribute\", {});\n    // Shader 的数据映射\n    _defineProperty(this, \"enableShaderEncodeStyles\", []);\n    // 数据层数据映射\n    _defineProperty(this, \"enableDataEncodeStyles\", []);\n    /**\n     * 待更新样式属性，在初始化阶段完成注册\n     */\n    _defineProperty(this, \"pendingStyleAttributes\", []);\n    _defineProperty(this, \"scaleOptions\", {});\n    _defineProperty(this, \"animateStartTime\", void 0);\n    _defineProperty(this, \"animateStatus\", false);\n    _defineProperty(this, \"isDestroyed\", false);\n    // private pickingPassRender: IPass<'pixelPicking'>;\n    _defineProperty(this, \"uniformBuffers\", []);\n    _defineProperty(this, \"encodeDataLength\", 0);\n    _defineProperty(this, \"sourceEvent\", () => {\n      this.dataState.dataSourceNeedUpdate = true;\n      const layerConfig = this.getLayerConfig();\n      if (layerConfig && layerConfig.autoFit) {\n        this.fitBounds(layerConfig.fitBoundsOptions);\n      }\n      const autoRender = this.layerSource.getSourceCfg().autoRender;\n      if (autoRender) {\n        setTimeout(() => {\n          this.reRender();\n        }, 10);\n      }\n    });\n    this.name = config.name || this.id;\n    this.zIndex = config.zIndex || 0;\n    this.rawConfig = config;\n    this.masks = config.maskLayers || [];\n  }\n  addMask(layer) {\n    this.masks.push(layer);\n    this.updateLayerConfig({\n      maskLayers: this.masks\n    });\n    this.enableMask();\n  }\n  removeMask(layer) {\n    const layerIndex = this.masks.indexOf(layer);\n    if (layerIndex > -1) {\n      this.masks.splice(layerIndex, 1);\n    }\n    this.updateLayerConfig({\n      maskLayers: this.masks\n    });\n  }\n  disableMask() {\n    this.updateLayerConfig({\n      enableMask: false\n    });\n  }\n  enableMask() {\n    this.updateLayerConfig({\n      enableMask: true\n    });\n  }\n\n  /**\n   * 将废弃\n   * @deprecated\n   */\n  addMaskLayer(maskLayer) {\n    this.masks.push(maskLayer);\n  }\n\n  /**\n   * 将废弃\n   * @deprecated\n   */\n  removeMaskLayer(maskLayer) {\n    const layerIndex = this.masks.indexOf(maskLayer);\n    if (layerIndex > -1) {\n      this.masks.splice(layerIndex, 1);\n    }\n    maskLayer.destroy();\n  }\n  getAttribute(name) {\n    return this.styleAttributeService.getLayerStyleAttribute(name);\n  }\n  getLayerConfig() {\n    return this.configService.getLayerConfig(this.id);\n  }\n  updateLayerConfig(configToUpdate) {\n    // 同步 rawConfig\n    Object.keys(configToUpdate).map(key => {\n      if (key in this.rawConfig) {\n        // @ts-ignore\n        this.rawConfig[key] = configToUpdate[key];\n      }\n    });\n    if (!this.startInit) {\n      this.needUpdateConfig = _objectSpread(_objectSpread({}, this.needUpdateConfig), configToUpdate);\n    } else {\n      const sceneId = this.container.id;\n      // @ts-ignore\n      // styleDataMapping(configToUpdate, this); // 处理 style 中进行数据映射的属性字段\n      this.configService.setLayerConfig(sceneId, this.id, _objectSpread(_objectSpread(_objectSpread({}, this.configService.getLayerConfig(this.id)), this.needUpdateConfig), configToUpdate));\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  setContainer(container) {\n    this.container = container;\n  }\n  getContainer() {\n    return this.container;\n  }\n  addPlugin(plugin) {\n    this.plugins.push(plugin);\n    return this;\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // 设置配置项\n      const sceneId = _this.container.id;\n      _this.startInit = true;\n      // 初始化图层配置项\n      // const { enableMultiPassRenderer = false } = this.rawConfig;\n      // this.configService.setLayerConfig(sceneId, this.id, {\n      //   enableMultiPassRenderer,\n      // });\n      _this.configService.setLayerConfig(sceneId, _this.id, _this.rawConfig);\n      _this.layerType = _this.rawConfig.layerType;\n\n      // 全局容器服务\n\n      // 场景容器服务\n      const {\n        enableMultiPassRenderer,\n        passes\n      } = _this.getLayerConfig();\n      if (enableMultiPassRenderer && passes !== null && passes !== void 0 && passes.length && passes.length > 0) {\n        // Tip: 兼容 multiPassRender 在 amap1 时存在的图层不同步问题 zoom\n        _this.mapService.on('mapAfterFrameChange', () => {\n          _this.renderLayers();\n        });\n      }\n      _this.postProcessingPassFactory = _this.container.postProcessingPassFactory;\n\n      // 图层容器服务\n      _this.styleAttributeService = _this.container.styleAttributeService;\n      if (enableMultiPassRenderer) {\n        // 按需初始化 瓦片频繁报错\n        _this.multiPassRenderer = _this.container.multiPassRenderer;\n        _this.multiPassRenderer.setLayer(_this);\n      }\n      // 完成样式服务注册完成前添加的属性\n      _this.pendingStyleAttributes.forEach(({\n        attributeName,\n        attributeField,\n        attributeValues,\n        updateOptions\n      }) => {\n        _this.styleAttributeService.updateStyleAttribute(attributeName, {\n          // @ts-ignore\n          scale: _objectSpread({\n            field: attributeField\n          }, _this.splitValuesAndCallbackInAttribute(\n          // @ts-ignore\n          attributeValues,\n          // @ts-ignore\n          attributeField ? undefined : _this.getLayerConfig()[attributeName] // 设置了字段不需要设置默认值\n          ))\n        },\n        // @ts-ignore\n        updateOptions);\n      });\n      _this.pendingStyleAttributes = [];\n\n      // 获取插件集\n      _this.plugins = createPlugins();\n      // 完成插件注册，传入场景和图层容器内的服务\n      for (const plugin of _this.plugins) {\n        plugin.apply(_this, _this.container);\n      }\n      // if (this.getSource().isTile) {\n      //   this.tileLayer = new TileLayer(this);\n      // }\n\n      // 初始化其他服务\n      _this.layerPickService = new LayerPickService(_this);\n\n      // 颜色纹理服务\n      _this.textureService = new TextureService(_this);\n      _this.log(IDebugLog.LayerInitStart);\n      // 触发 init 生命周期插件\n      yield _this.hooks.init.promise();\n      _this.log(IDebugLog.LayerInitEnd);\n      _this.inited = true;\n      // add mask layer\n      // 触发初始化完成事件;\n      _this.emit('inited', {\n        target: _this,\n        type: 'inited'\n      });\n      _this.emit('add', {\n        target: _this,\n        type: 'add'\n      });\n      _this.hooks.afterInit.call();\n    })();\n  }\n  log(logType, step = 'init') {\n    var _this$debugService;\n    // @ts-ignore 瓦片、瓦片图层目前不参与日志\n    if (this.tileLayer || this.isTileLayer) {\n      return;\n    }\n    const key = `${this.id}.${step}.${logType}`;\n    const values = {\n      id: this.id,\n      type: this.type\n    };\n    (_this$debugService = this.debugService) === null || _this$debugService === void 0 || _this$debugService.log(key, values);\n  }\n  updateModelData(data) {\n    if (data.attributes && data.elements) {\n      this.models.map(m => {\n        m.updateAttributesAndElements(data.attributes, data.elements);\n      });\n    } else {\n      console.warn('data error');\n    }\n  }\n  setLayerPickService(layerPickService) {\n    this.layerPickService = layerPickService;\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  prepareBuildModel() {\n    if (Object.keys(this.needUpdateConfig || {}).length !== 0) {\n      this.updateLayerConfig({});\n    }\n\n    // 启动动画\n    const {\n      animateOption\n    } = this.getLayerConfig();\n    if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {\n      this.layerService.startAnimate();\n      this.animateStatus = true;\n    }\n  }\n  color(field, values, updateOptions) {\n    this.updateStyleAttribute('color', field, values, updateOptions);\n    return this;\n  }\n\n  // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）\n  texture(field, values, updateOptions) {\n    this.updateStyleAttribute('texture', field, values, updateOptions);\n    return this;\n  }\n  rotate(field, values, updateOptions) {\n    this.updateStyleAttribute('rotate', field, values, updateOptions);\n    return this;\n  }\n  size(field, values, updateOptions) {\n    this.updateStyleAttribute('size', field, values, updateOptions);\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  filter(field, values, updateOptions) {\n    const flag = this.updateStyleAttribute('filter', field, values, updateOptions);\n    this.dataState.dataSourceNeedUpdate = flag && this.inited;\n    return this;\n  }\n  shape(field, values, updateOptions) {\n    this.shapeOption = {\n      field,\n      values\n    };\n    const flag = this.updateStyleAttribute('shape', field, values, updateOptions);\n    this.dataState.dataSourceNeedUpdate = flag && this.inited;\n    return this;\n  }\n  label(field, values, updateOptions) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions\n    });\n    return this;\n  }\n  animate(options) {\n    let rawAnimate = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = _objectSpread(_objectSpread({}, rawAnimate), options);\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate\n    });\n    return this;\n  }\n  source(data, options) {\n    if ((data === null || data === void 0 ? void 0 : data.type) === 'source') {\n      // 判断是否为source\n      this.setSource(data);\n      return this;\n    }\n    // 设置source 配置\n    this.sourceOption = {\n      data,\n      options\n    };\n    this.clusterZoom = 0;\n    return this;\n  }\n  setData(data, options) {\n    if (this.inited) {\n      this.dataUpdatelog();\n      this.layerSource.setData(data, options);\n    } else {\n      this.on('inited', () => {\n        this.dataUpdatelog();\n        this.layerSource.setData(data, options);\n      });\n    }\n    return this;\n  }\n  dataUpdatelog() {\n    this.log(IDebugLog.SourceInitStart, ILayerStage.UPDATE);\n    this.layerSource.once('update', () => {\n      this.log(IDebugLog.SourceInitEnd, ILayerStage.UPDATE);\n    });\n  }\n  style(options) {\n    const {\n        passes\n      } = options,\n      rest = _objectWithoutProperties(options, _excluded);\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(pass => {\n        const postProcessingPass = this.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);\n        if (postProcessingPass) {\n          postProcessingPass.updateOptions(pass[1]);\n        }\n      });\n    }\n    // 兼容 borderColor borderWidth\n    // @ts-ignore\n    if (rest.borderColor) {\n      // @ts-ignore\n      rest.stroke = rest.borderColor;\n    }\n    // @ts-ignore\n    if (rest.borderWidth) {\n      // @ts-ignore\n      rest.strokeWidth = rest.borderWidth;\n    }\n\n    // 兼容老版本的写法 ['field, 'value']\n    const newOption = rest;\n    Object.keys(rest).forEach(key => {\n      // @ts-ignore\n      const values = rest[key];\n      if (Array.isArray(values) && values.length === 2 && !isNumber(values[0]) && !isNumber(values[1])) {\n        newOption[key] = {\n          field: values[0],\n          value: values[1]\n        };\n      }\n    });\n    this.encodeStyle(newOption);\n    this.updateLayerConfig(newOption);\n    return this;\n  }\n\n  // 参与数据映射的字段 encodeing\n  encodeStyle(options) {\n    Object.keys(options).forEach(key => {\n      if (\n      // 需要数据映射\n      [...this.enableShaderEncodeStyles, ...this.enableDataEncodeStyles].includes(key) && isPlainObject(options[key]) && (options[key].field || options[key].value) && !isEqual(this.encodeStyleAttribute[key], options[key]) // 防止计算属性重复计算\n      ) {\n        this.encodeStyleAttribute[key] = options[key];\n        this.updateStyleAttribute(key, options[key].field, options[key].value);\n        if (this.inited) {\n          this.dataState.dataMappingNeedUpdate = true;\n        }\n      } else {\n        // 不需要数据映射\n        if (this.encodeStyleAttribute[key]) {\n          delete this.encodeStyleAttribute[key]; // 删除已经存在的属性\n          this.dataState.dataSourceNeedUpdate = true;\n        }\n      }\n    });\n  }\n  scale(field, cfg) {\n    const preOption = _objectSpread({}, this.scaleOptions);\n    if (isObject(field)) {\n      this.scaleOptions = _objectSpread(_objectSpread({}, this.scaleOptions), field);\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    if (this.styleAttributeService && !isEqual(preOption, this.scaleOptions)) {\n      const scaleOptions = isObject(field) ? field : {\n        [field]: cfg\n      };\n      this.styleAttributeService.updateScaleAttribute(scaleOptions);\n    }\n    return this;\n  }\n\n  /**\n   * 渲染所有的图层\n   */\n  renderLayers() {\n    this.rendering = true;\n    this.layerService.reRender();\n    this.rendering = false;\n  }\n  prerender() {}\n  render(options = {}) {\n    if (this.tileLayer) {\n      // 瓦片图层执行单独的 render 渲染队列\n      this.tileLayer.render();\n      return this;\n    }\n    this.layerService.beforeRenderData(this);\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      return this;\n    }\n    // Tip: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    this.renderModels(options);\n    return this;\n  }\n\n  /**\n   * renderMultiPass 专门用于渲染支持 multipass 的 layer\n   */\n  renderMultiPass() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.encodeDataLength <= 0 && !_this2.forceRender) {\n        return;\n      }\n      if (_this2.multiPassRenderer && _this2.multiPassRenderer.getRenderFlag()) {\n        // multi render 开始执行 multiPassRender 的渲染流程\n        yield _this2.multiPassRenderer.render();\n      } else {\n        _this2.renderModels();\n      }\n    })();\n  }\n  active(options) {\n    const activeOption = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n      if (options.mix) {\n        activeOption.activeMix = options.mix;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  setActive(id, options) {\n    if (isObject(id)) {\n      const {\n        x = 0,\n        y = 0\n      } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options) ? options.color : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options) ? options.mix : this.getLayerConfig().activeMix\n      });\n      this.pick({\n        x,\n        y\n      });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options) ? options.color : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options) ? options.mix : this.getLayerConfig().activeMix\n      });\n      this.hooks.beforeHighlight.call(encodePickingColor(id))\n      // @ts-ignore\n      .then(() => {\n        setTimeout(() => {\n          this.reRender();\n        }, 1);\n      });\n    }\n  }\n  select(option) {\n    const activeOption = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n      if (option.mix) {\n        activeOption.selectMix = option.mix;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  setSelect(id, options) {\n    if (isObject(id)) {\n      const {\n        x = 0,\n        y = 0\n      } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options) ? options.color : this.getLayerConfig().selectColor,\n        selectMix: isObject(options) ? options.mix : this.getLayerConfig().selectMix\n      });\n      this.pick({\n        x,\n        y\n      });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options) ? options.color : this.getLayerConfig().selectColor,\n        selectMix: isObject(options) ? options.mix : this.getLayerConfig().selectMix\n      });\n      this.hooks.beforeSelect.call(encodePickingColor(id))\n      // @ts-ignore\n      .then(() => {\n        setTimeout(() => {\n          this.reRender();\n        }, 1);\n      });\n    }\n  }\n  setBlend(type) {\n    this.updateLayerConfig({\n      blend: type\n    });\n    // this.layerModelNeedUpdate = true;\n    this.reRender();\n    return this;\n  }\n  show() {\n    this.updateLayerConfig({\n      visible: true\n    });\n    this.reRender();\n    this.emit('show');\n    return this;\n  }\n  hide() {\n    this.updateLayerConfig({\n      visible: false\n    });\n    this.reRender();\n    this.emit('hide');\n    return this;\n  }\n  setIndex(index) {\n    this.zIndex = index;\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    return this;\n  }\n  setCurrentPickId(id) {\n    this.currentPickId = id;\n  }\n  getCurrentPickId() {\n    return this.currentPickId;\n  }\n  setCurrentSelectedId(id) {\n    this.selectedFeatureID = id;\n  }\n  getCurrentSelectedId() {\n    return this.selectedFeatureID;\n  }\n  isVisible() {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom < maxZoom;\n  }\n  setMultiPass(enableMultiPass, currentPasses) {\n    this.updateLayerConfig({\n      enableMultiPassRenderer: enableMultiPass\n    });\n    if (currentPasses) {\n      this.updateLayerConfig({\n        passes: currentPasses\n      });\n    }\n    if (enableMultiPass) {\n      const {\n        passes = []\n      } = this.getLayerConfig();\n      this.multiPassRenderer = createMultiPassRenderer(this, passes, this.postProcessingPassFactory, this.normalPassFactory);\n      this.multiPassRenderer.setRenderFlag(true);\n      const {\n        width,\n        height\n      } = this.rendererService.getViewportSize();\n      this.multiPassRenderer.resize(width, height);\n    }\n    return this;\n  }\n  setMinZoom(minZoom) {\n    this.updateLayerConfig({\n      minZoom\n    });\n    return this;\n  }\n  getMinZoom() {\n    const {\n      minZoom\n    } = this.getLayerConfig();\n    return minZoom;\n  }\n  getMaxZoom() {\n    const {\n      maxZoom\n    } = this.getLayerConfig();\n    return maxZoom;\n  }\n  get(name) {\n    const cfg = this.getLayerConfig();\n    // @ts-ignore\n    return cfg[name];\n  }\n  setMaxZoom(maxZoom) {\n    this.updateLayerConfig({\n      maxZoom\n    });\n    return this;\n  }\n  setAutoFit(autoFit) {\n    this.updateLayerConfig({\n      autoFit\n    });\n    return this;\n  }\n\n  /**\n   * zoom to layer Bounds\n   */\n  fitBounds(fitBoundsOptions) {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    const isValid = extent.some(v => Math.abs(v) === Infinity);\n    if (isValid) {\n      return this;\n    }\n    this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]], fitBoundsOptions);\n    return this;\n  }\n  destroy(refresh = true) {\n    var _this$layerModel, _this$multiPassRender, _this$layerModel2, _this$tileLayer, _this$debugService2;\n    if (this.isDestroyed) {\n      return;\n    }\n\n    // destroy all UBOs\n    (_this$layerModel = this.layerModel) === null || _this$layerModel === void 0 || _this$layerModel.uniformBuffers.forEach(buffer => {\n      buffer.destroy();\n    });\n\n    // remove child layer\n    this.layerChildren.map(child => child.destroy(false));\n    this.layerChildren = [];\n\n    // remove mask list maskfence 掩模需要销毁\n    const {\n      maskfence\n    } = this.getLayerConfig();\n    if (maskfence) {\n      this.masks.map(mask => mask.destroy(false));\n      this.masks = [];\n    }\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n    (_this$multiPassRender = this.multiPassRenderer) === null || _this$multiPassRender === void 0 || _this$multiPassRender.destroy();\n    this.textureService.destroy();\n\n    // 清除所有属性以及关联的 vao == 销毁所有 => model this.models.forEach((model) => model.destroy());\n    this.styleAttributeService.clearAllAttributes();\n\n    // 执行每个图层单独的 clearModels 方法 （清除一些额外的 texture、program、buffer 等）\n\n    this.hooks.afterDestroy.call();\n    // Tip: 清除各个图层自定义的 models 资源\n    (_this$layerModel2 = this.layerModel) === null || _this$layerModel2 === void 0 || _this$layerModel2.clearModels(refresh);\n    (_this$tileLayer = this.tileLayer) === null || _this$tileLayer === void 0 || _this$tileLayer.destroy();\n    this.models = [];\n    // 清除图层日志（如果有的话：非瓦片相关）\n    (_this$debugService2 = this.debugService) === null || _this$debugService2 === void 0 || _this$debugService2.removeLog(this.id);\n    this.emit('remove', {\n      target: this,\n      type: 'remove'\n    });\n    this.emit('destroy', {\n      target: this,\n      type: 'destroy'\n    });\n    this.removeAllListeners();\n    this.isDestroyed = true;\n  }\n  clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n  }\n  clearModels() {\n    var _this$layerModel3;\n    this.models.forEach(model => model.destroy());\n    (_this$layerModel3 = this.layerModel) === null || _this$layerModel3 === void 0 || _this$layerModel3.clearModels();\n    this.models = [];\n  }\n  isDirty() {\n    return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(attribute => attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices).length;\n  }\n  // 外部初始化Source\n  setSource(source) {\n    // 解除原 sources 事件\n    if (this.layerSource) {\n      this.layerSource.off('update', this.sourceEvent);\n    }\n    this.layerSource = source;\n    this.clusterZoom = 0;\n\n    // 已 inited 且启用聚合进行更新聚合数据\n    if (this.inited && this.layerSource.cluster) {\n      const zoom = this.mapService.getZoom();\n      this.layerSource.updateClusterData(zoom);\n    }\n    if (this.layerSource.inited) {\n      this.sourceEvent();\n    }\n    // this.layerSource.inited 为 true update 事件不会再触发\n    this.layerSource.on('update', ({\n      type\n    }) => {\n      if (this.coordCenter === undefined) {\n        const layerCenter = this.layerSource.center;\n        this.coordCenter = layerCenter;\n      }\n      if (type === 'update') {\n        if (this.tileLayer) {\n          // 瓦片图层独立更新\n          this.tileLayer.reload();\n          return;\n        }\n        // source 初始化不需要处理\n        this.sourceEvent();\n      }\n    });\n  }\n  getSource() {\n    return this.layerSource;\n  }\n  getScaleOptions() {\n    return this.scaleOptions;\n  }\n  setEncodedData(encodedData) {\n    this.encodedData = encodedData;\n    this.encodeDataLength = encodedData.length;\n  }\n  getEncodedData() {\n    return this.encodedData;\n  }\n  getScale(name) {\n    return this.styleAttributeService.getLayerAttributeScale(name);\n  }\n  getLegend(name) {\n    var _attribute$scale, _scales$, _attribute$scale2;\n    const attribute = this.styleAttributeService.getLayerStyleAttribute(name);\n    const scales = (attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];\n    return {\n      type: (_scales$ = scales[0]) === null || _scales$ === void 0 || (_scales$ = _scales$.option) === null || _scales$ === void 0 ? void 0 : _scales$.type,\n      field: attribute === null || attribute === void 0 || (_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.field,\n      items: this.getLegendItems(name)\n    };\n  }\n  getLegendItems(name) {\n    const scale = this.styleAttributeService.getLayerAttributeScale(name);\n    // 函数自定义映射，没有 scale 返回为空数组\n    if (!scale) {\n      return [];\n    }\n    if (scale.invertExtent) {\n      // 分段类型  Quantize、Quantile、Threshold\n      const items = scale.range().map(item => {\n        return {\n          value: scale.invertExtent(item),\n          [name]: item\n        };\n      });\n      return items;\n    } else if (scale.ticks) {\n      // 连续类型 Continuous (Linear, Power, Log, Identity, Time)\n      const items = scale.ticks().map(item => {\n        return {\n          value: item,\n          [name]: scale(item)\n        };\n      });\n      return items;\n    } else if (scale !== null && scale !== void 0 && scale.domain) {\n      // 枚举类型 Cat\n      const items = scale.domain().filter(item => !isUndefined(item)).map(item => {\n        return {\n          value: item,\n          [name]: scale(item)\n        };\n      });\n      return items;\n    }\n    return [];\n  }\n  pick({\n    x,\n    y\n  }) {\n    this.interactionService.triggerHover({\n      x,\n      y\n    });\n  }\n  boxSelect(box, cb) {\n    this.pickingService.boxPickLayer(this, box, cb);\n  }\n  buildLayerModel(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const {\n          moduleName,\n          vertexShader,\n          fragmentShader,\n          defines,\n          inject,\n          triangulation,\n          styleOption,\n          pickingEnabled = true\n        } = options,\n        rest = _objectWithoutProperties(options, _excluded2);\n      _this3.shaderModuleService.registerModule(moduleName, {\n        vs: vertexShader,\n        fs: fragmentShader,\n        defines,\n        inject\n      });\n      const {\n        vs,\n        fs,\n        uniforms\n      } = _this3.shaderModuleService.getModule(moduleName);\n      const {\n        createModel\n      } = _this3.rendererService;\n      return new Promise(resolve => {\n        const {\n          attributes,\n          elements,\n          count\n        } = _this3.styleAttributeService.createAttributesAndIndices(_this3.encodedData, triangulation, styleOption, _this3);\n        const uniformBuffers = [..._this3.layerModel.uniformBuffers, ..._this3.rendererService.uniformBuffers];\n        if (pickingEnabled) {\n          uniformBuffers.push(_this3.getPickingUniformBuffer());\n        }\n        const modelOptions = _objectSpread({\n          attributes,\n          uniforms,\n          fs,\n          vs,\n          elements,\n          blend: BlendTypes[BlendType.normal],\n          uniformBuffers,\n          textures: _this3.layerModel.textures\n        }, rest);\n        if (count) {\n          modelOptions.count = count;\n        }\n        const m = createModel(modelOptions);\n        resolve(m);\n      });\n    })();\n  }\n  createAttributes(options) {\n    const {\n      triangulation\n    } = options;\n    // @ts-ignore\n    const {\n      attributes\n    } = this.styleAttributeService.createAttributes(this.encodedData, triangulation);\n    return attributes;\n  }\n  getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  stopAnimate() {\n    if (this.animateStatus) {\n      this.layerService.stopAnimate();\n      this.animateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false\n        }\n      });\n    }\n  }\n  getLayerAnimateTime() {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n  needPick(type) {\n    const {\n      enableHighlight = true,\n      enableSelect = true\n    } = this.getLayerConfig();\n    // 判断layer是否监听事件;\n    let isPick = this.eventNames().indexOf(type) !== -1 || this.eventNames().indexOf('un' + type) !== -1;\n    if ((type === 'click' || type === 'dblclick') && enableSelect) {\n      isPick = true;\n    }\n    if (type === 'mousemove' && (enableHighlight || this.eventNames().indexOf('mouseenter') !== -1 || this.eventNames().indexOf('unmousemove') !== -1 || this.eventNames().indexOf('mouseout') !== -1)) {\n      isPick = true;\n    }\n    return this.isVisible() && isPick;\n  }\n  buildModels() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Method not implemented.');\n    })();\n  }\n  rebuildModels() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.buildModels();\n    })();\n  }\n  renderMulPass(multiPassRenderer) {\n    return _asyncToGenerator(function* () {\n      yield multiPassRenderer.render();\n    })();\n  }\n  renderModels(options = {}) {\n    // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      // 数据为空销毁model\n      this.clearModels();\n      return this;\n    }\n    this.hooks.beforeRender.call();\n    this.models.forEach(model => {\n      model.draw({\n        uniforms: this.layerModel.getUninforms(),\n        blend: this.layerModel.getBlend(),\n        stencil: this.layerModel.getStencil(options),\n        textures: this.layerModel.textures\n      }, (options === null || options === void 0 ? void 0 : options.ispick) || false);\n    });\n    this.hooks.afterRender.call();\n    return this;\n  }\n  updateStyleAttribute(type, field, values, updateOptions) {\n    // encode diff\n    const preAttribute = this.configService.getAttributeConfig(this.id) || {};\n    // @ts-ignore\n    if (isEqual(preAttribute[type], {\n      field,\n      values\n    })) {\n      // 检测是否发生更新\n      return false;\n    }\n\n    // 存储 Attribute 瓦片图层使用\n    if (['color', 'size', 'texture', 'rotate', 'filter', 'label', 'shape'].indexOf(type) !== -1) {\n      this.configService.setAttributeConfig(this.id, {\n        [type]: {\n          field,\n          values\n        }\n      });\n    }\n    if (!this.startInit) {\n      // 开始初始化执行\n      this.pendingStyleAttributes.push({\n        attributeName: type,\n        attributeField: field,\n        attributeValues: values,\n        updateOptions\n      });\n    } else {\n      this.styleAttributeService.updateStyleAttribute(type, {\n        // @ts-ignore\n        scale: _objectSpread({\n          field\n        }, this.splitValuesAndCallbackInAttribute(\n        // @ts-ignore\n        values,\n        // @ts-ignore\n        this.getLayerConfig()[field]))\n      },\n      // @ts-ignore\n      updateOptions);\n    }\n    return true;\n  }\n  getLayerAttributeConfig() {\n    return this.configService.getAttributeConfig(this.id);\n  }\n  getShaderPickStat() {\n    return this.layerService.getShaderPickStat();\n  }\n\n  /**\n   * 继承空方法\n   * @param time\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setEarthTime(time) {\n    console.warn('empty fn');\n  }\n\n  // 数据处理 在数据进行 mapping 生成 encodeData 之前对数据进行处理\n  // 在各个 layer 中继承\n  processData(filterData) {\n    return filterData;\n  }\n  getModelType() {\n    throw new Error('Method not implemented.');\n  }\n  getDefaultConfig() {\n    return {};\n  }\n  initLayerModels() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.models.forEach(model => model.destroy());\n      _this5.models = [];\n      _this5.uniformBuffers.forEach(buffer => {\n        buffer.destroy();\n      });\n      _this5.uniformBuffers = [];\n\n      // Picking Uniform\n      const pickingUniforms = _this5.rendererService.createBuffer({\n        data: new Float32Array(20).fill(0),\n        isUBO: true,\n        label: 'pickingUniforms'\n      });\n      _this5.uniformBuffers.push(pickingUniforms);\n      _this5.models = yield _this5.layerModel.initModels();\n    })();\n  }\n  getPickingUniformBuffer() {\n    return this.uniformBuffers[0];\n  }\n  reRender() {\n    if (this.inited) {\n      this.layerService.reRender();\n    }\n  }\n  splitValuesAndCallbackInAttribute(valuesOrCallback\n  // defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback) ? undefined : valuesOrCallback,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined\n    };\n  }\n}","map":{"version":3,"names":["_objectWithoutProperties","_asyncToGenerator","_objectSpread","_defineProperty","_excluded","_excluded2","AsyncSeriesBailHook","AsyncWaterfallHook","SyncBailHook","SyncHook","BlendType","IDebugLog","ILayerStage","globalConfigService","encodePickingColor","lodashUtil","EventEmitter","createPlugins","BlendTypes","createMultiPassRenderer","normalizePasses","LayerPickService","TextureService","isEqual","isFunction","isNumber","isObject","isPlainObject","isUndefined","layerIdCounter","BaseLayer","shaderModuleService","container","cameraService","coordinateService","coordinateSystemService","iconService","fontService","pickingService","rendererService","layerService","debugService","interactionService","mapService","_this$container","normalPassFactory","constructor","config","data","options","parser","type","dataSourceNeedUpdate","dataMappingNeedUpdate","filterNeedUpdate","featureScaleNeedUpdate","StyleAttrNeedUpdate","init","afterInit","beforeRender","beforeRenderData","afterRender","beforePickingEncode","afterPickingEncode","beforeHighlight","afterHighlight","beforeSelect","afterSelect","beforeDestroy","afterDestroy","enable","dataState","layerConfig","getLayerConfig","autoFit","fitBounds","fitBoundsOptions","autoRender","layerSource","getSourceCfg","setTimeout","reRender","name","id","zIndex","rawConfig","masks","maskLayers","addMask","layer","push","updateLayerConfig","enableMask","removeMask","layerIndex","indexOf","splice","disableMask","addMaskLayer","maskLayer","removeMaskLayer","destroy","getAttribute","styleAttributeService","getLayerStyleAttribute","configService","configToUpdate","Object","keys","map","key","startInit","needUpdateConfig","sceneId","setLayerConfig","setContainer","getContainer","addPlugin","plugin","plugins","_this","layerType","enableMultiPassRenderer","passes","length","on","renderLayers","postProcessingPassFactory","multiPassRenderer","setLayer","pendingStyleAttributes","forEach","attributeName","attributeField","attributeValues","updateOptions","updateStyleAttribute","scale","field","splitValuesAndCallbackInAttribute","undefined","apply","layerPickService","textureService","log","LayerInitStart","hooks","promise","LayerInitEnd","inited","emit","target","call","logType","step","_this$debugService","tileLayer","isTileLayer","values","updateModelData","attributes","elements","models","m","updateAttributesAndElements","console","warn","setLayerPickService","prepareBuildModel","animateOption","startAnimate","animateStatus","color","texture","rotate","size","filter","flag","shape","shapeOption","label","animate","rawAnimate","source","setSource","sourceOption","clusterZoom","setData","dataUpdatelog","SourceInitStart","UPDATE","once","SourceInitEnd","style","rest","pass","postProcessingPass","getPostProcessor","getPostProcessingPassByName","borderColor","stroke","borderWidth","strokeWidth","newOption","Array","isArray","value","encodeStyle","enableShaderEncodeStyles","enableDataEncodeStyles","includes","encodeStyleAttribute","cfg","preOption","scaleOptions","updateScaleAttribute","rendering","prerender","render","encodeDataLength","forceRender","renderModels","renderMultiPass","_this2","getRenderFlag","active","activeOption","enableHighlight","highlightColor","mix","activeMix","setActive","x","y","pick","pickedFeatureID","then","select","option","enableSelect","selectColor","selectMix","setSelect","setBlend","blend","show","visible","hide","setIndex","index","updateLayerRenderList","setCurrentPickId","currentPickId","getCurrentPickId","setCurrentSelectedId","selectedFeatureID","getCurrentSelectedId","isVisible","zoom","getZoom","minZoom","Infinity","maxZoom","setMultiPass","enableMultiPass","currentPasses","setRenderFlag","width","height","getViewportSize","resize","setMinZoom","getMinZoom","getMaxZoom","get","setMaxZoom","setAutoFit","getSource","extent","isValid","some","v","Math","abs","refresh","_this$layerModel","_this$multiPassRender","_this$layerModel2","_this$tileLayer","_this$debugService2","isDestroyed","layerModel","uniformBuffers","buffer","layerChildren","child","maskfence","mask","off","sourceEvent","clearAllAttributes","clearModels","removeLog","removeAllListeners","clear","_this$layerModel3","model","isDirty","getLayerStyleAttributes","attribute","needRescale","needRemapping","needRegenerateVertices","cluster","updateClusterData","coordCenter","layerCenter","center","reload","getScaleOptions","setEncodedData","encodedData","getEncodedData","getScale","getLayerAttributeScale","getLegend","_attribute$scale","_scales$","_attribute$scale2","scales","scalers","items","getLegendItems","invertExtent","range","item","ticks","domain","triggerHover","boxSelect","box","cb","boxPickLayer","buildLayerModel","_this3","moduleName","vertexShader","fragmentShader","defines","inject","triangulation","styleOption","pickingEnabled","registerModule","vs","fs","uniforms","getModule","createModel","Promise","resolve","count","createAttributesAndIndices","getPickingUniformBuffer","modelOptions","normal","textures","createAttributes","getTime","clock","getDelta","setAnimateStartTime","animateStartTime","getElapsedTime","stopAnimate","getLayerAnimateTime","needPick","isPick","eventNames","buildModels","Error","rebuildModels","_this4","renderMulPass","draw","getUninforms","getBlend","stencil","getStencil","ispick","preAttribute","getAttributeConfig","setAttributeConfig","getLayerAttributeConfig","getShaderPickStat","setEarthTime","time","processData","filterData","getModelType","getDefaultConfig","initLayerModels","_this5","pickingUniforms","createBuffer","Float32Array","fill","isUBO","initModels","valuesOrCallback","callback"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/core/BaseLayer.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst _excluded = [\"passes\"],\n  _excluded2 = [\"moduleName\", \"vertexShader\", \"fragmentShader\", \"defines\", \"inject\", \"triangulation\", \"styleOption\", \"pickingEnabled\"];\n// @ts-ignore\nimport { AsyncSeriesBailHook, AsyncWaterfallHook, SyncBailHook, SyncHook } from '@antv/async-hook';\nimport { BlendType, IDebugLog, ILayerStage, globalConfigService } from '@antv/l7-core';\nimport { encodePickingColor, lodashUtil } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { createPlugins } from \"../plugins\";\nimport { BlendTypes } from \"../utils/blend\";\nimport { createMultiPassRenderer, normalizePasses } from \"../utils/multiPassRender\";\nimport LayerPickService from \"./LayerPickService\";\nimport TextureService from \"./TextureService\";\nconst {\n  isEqual,\n  isFunction,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isUndefined\n} = lodashUtil;\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\nexport default class BaseLayer extends EventEmitter {\n  get shaderModuleService() {\n    return this.container.shaderModuleService;\n  }\n  get cameraService() {\n    return this.container.cameraService;\n  }\n  get coordinateService() {\n    return this.container.coordinateSystemService;\n  }\n  get iconService() {\n    return this.container.iconService;\n  }\n  get fontService() {\n    return this.container.fontService;\n  }\n  get pickingService() {\n    return this.container.pickingService;\n  }\n  get rendererService() {\n    return this.container.rendererService;\n  }\n  get layerService() {\n    return this.container.layerService;\n  }\n  get debugService() {\n    return this.container.debugService;\n  }\n  get interactionService() {\n    return this.container.interactionService;\n  }\n  get mapService() {\n    var _this$container;\n    return (_this$container = this.container) === null || _this$container === void 0 ? void 0 : _this$container.mapService;\n  }\n  get normalPassFactory() {\n    return this.container.normalPassFactory;\n  }\n  constructor(config = {}) {\n    super();\n    _defineProperty(this, \"id\", `${layerIdCounter++}`);\n    _defineProperty(this, \"name\", `${layerIdCounter}`);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"coordCenter\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"visible\", true);\n    _defineProperty(this, \"zIndex\", 0);\n    _defineProperty(this, \"minZoom\", void 0);\n    _defineProperty(this, \"maxZoom\", void 0);\n    _defineProperty(this, \"inited\", false);\n    _defineProperty(this, \"layerModelNeedUpdate\", false);\n    _defineProperty(this, \"pickedFeatureID\", null);\n    _defineProperty(this, \"selectedFeatureID\", null);\n    _defineProperty(this, \"styleNeedUpdate\", false);\n    _defineProperty(this, \"rendering\", void 0);\n    _defineProperty(this, \"forceRender\", false);\n    _defineProperty(this, \"clusterZoom\", 0);\n    // 聚合等级标记\n    _defineProperty(this, \"layerType\", void 0);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"layerPickService\", void 0);\n    _defineProperty(this, \"textureService\", void 0);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [],\n      options: {\n        parser: {\n          type: 'json'\n        }\n      }\n    });\n    _defineProperty(this, \"dataState\", {\n      dataSourceNeedUpdate: false,\n      dataMappingNeedUpdate: false,\n      filterNeedUpdate: false,\n      featureScaleNeedUpdate: false,\n      StyleAttrNeedUpdate: false\n    });\n    // 生命周期钩子\n    _defineProperty(this, \"hooks\", {\n      init: new AsyncSeriesBailHook(),\n      afterInit: new SyncBailHook(),\n      beforeRender: new SyncBailHook(),\n      beforeRenderData: new AsyncWaterfallHook(),\n      afterRender: new SyncHook(),\n      beforePickingEncode: new SyncHook(),\n      afterPickingEncode: new SyncHook(),\n      beforeHighlight: new SyncHook(['pickedColor']),\n      afterHighlight: new SyncHook(),\n      beforeSelect: new SyncHook(['pickedColor']),\n      afterSelect: new SyncHook(),\n      beforeDestroy: new SyncHook(),\n      afterDestroy: new SyncHook()\n    });\n    // 待渲染 model 列表\n    _defineProperty(this, \"models\", []);\n    // 每个 Layer 都有一个\n    _defineProperty(this, \"multiPassRenderer\", void 0);\n    // 注入插件\n    _defineProperty(this, \"plugins\", void 0);\n    _defineProperty(this, \"startInit\", false);\n    _defineProperty(this, \"sourceOption\", void 0);\n    _defineProperty(this, \"layerModel\", void 0);\n    _defineProperty(this, \"shapeOption\", void 0);\n    _defineProperty(this, \"tileLayer\", void 0);\n    // 用于保存子图层对象\n    _defineProperty(this, \"layerChildren\", []);\n    _defineProperty(this, \"masks\", []);\n    _defineProperty(this, \"configService\", globalConfigService);\n    _defineProperty(this, \"styleAttributeService\", void 0);\n    _defineProperty(this, \"layerSource\", void 0);\n    _defineProperty(this, \"postProcessingPassFactory\", void 0);\n    _defineProperty(this, \"animateOptions\", {\n      enable: false\n    });\n    /**\n     * 图层容器\n     */\n    _defineProperty(this, \"container\", void 0);\n    _defineProperty(this, \"encodedData\", void 0);\n    _defineProperty(this, \"currentPickId\", null);\n    _defineProperty(this, \"rawConfig\", void 0);\n    _defineProperty(this, \"needUpdateConfig\", void 0);\n    _defineProperty(this, \"encodeStyleAttribute\", {});\n    // Shader 的数据映射\n    _defineProperty(this, \"enableShaderEncodeStyles\", []);\n    // 数据层数据映射\n    _defineProperty(this, \"enableDataEncodeStyles\", []);\n    /**\n     * 待更新样式属性，在初始化阶段完成注册\n     */\n    _defineProperty(this, \"pendingStyleAttributes\", []);\n    _defineProperty(this, \"scaleOptions\", {});\n    _defineProperty(this, \"animateStartTime\", void 0);\n    _defineProperty(this, \"animateStatus\", false);\n    _defineProperty(this, \"isDestroyed\", false);\n    // private pickingPassRender: IPass<'pixelPicking'>;\n    _defineProperty(this, \"uniformBuffers\", []);\n    _defineProperty(this, \"encodeDataLength\", 0);\n    _defineProperty(this, \"sourceEvent\", () => {\n      this.dataState.dataSourceNeedUpdate = true;\n      const layerConfig = this.getLayerConfig();\n      if (layerConfig && layerConfig.autoFit) {\n        this.fitBounds(layerConfig.fitBoundsOptions);\n      }\n      const autoRender = this.layerSource.getSourceCfg().autoRender;\n      if (autoRender) {\n        setTimeout(() => {\n          this.reRender();\n        }, 10);\n      }\n    });\n    this.name = config.name || this.id;\n    this.zIndex = config.zIndex || 0;\n    this.rawConfig = config;\n    this.masks = config.maskLayers || [];\n  }\n  addMask(layer) {\n    this.masks.push(layer);\n    this.updateLayerConfig({\n      maskLayers: this.masks\n    });\n    this.enableMask();\n  }\n  removeMask(layer) {\n    const layerIndex = this.masks.indexOf(layer);\n    if (layerIndex > -1) {\n      this.masks.splice(layerIndex, 1);\n    }\n    this.updateLayerConfig({\n      maskLayers: this.masks\n    });\n  }\n  disableMask() {\n    this.updateLayerConfig({\n      enableMask: false\n    });\n  }\n  enableMask() {\n    this.updateLayerConfig({\n      enableMask: true\n    });\n  }\n\n  /**\n   * 将废弃\n   * @deprecated\n   */\n  addMaskLayer(maskLayer) {\n    this.masks.push(maskLayer);\n  }\n\n  /**\n   * 将废弃\n   * @deprecated\n   */\n  removeMaskLayer(maskLayer) {\n    const layerIndex = this.masks.indexOf(maskLayer);\n    if (layerIndex > -1) {\n      this.masks.splice(layerIndex, 1);\n    }\n    maskLayer.destroy();\n  }\n  getAttribute(name) {\n    return this.styleAttributeService.getLayerStyleAttribute(name);\n  }\n  getLayerConfig() {\n    return this.configService.getLayerConfig(this.id);\n  }\n  updateLayerConfig(configToUpdate) {\n    // 同步 rawConfig\n    Object.keys(configToUpdate).map(key => {\n      if (key in this.rawConfig) {\n        // @ts-ignore\n        this.rawConfig[key] = configToUpdate[key];\n      }\n    });\n    if (!this.startInit) {\n      this.needUpdateConfig = _objectSpread(_objectSpread({}, this.needUpdateConfig), configToUpdate);\n    } else {\n      const sceneId = this.container.id;\n      // @ts-ignore\n      // styleDataMapping(configToUpdate, this); // 处理 style 中进行数据映射的属性字段\n      this.configService.setLayerConfig(sceneId, this.id, _objectSpread(_objectSpread(_objectSpread({}, this.configService.getLayerConfig(this.id)), this.needUpdateConfig), configToUpdate));\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  setContainer(container) {\n    this.container = container;\n  }\n  getContainer() {\n    return this.container;\n  }\n  addPlugin(plugin) {\n    this.plugins.push(plugin);\n    return this;\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // 设置配置项\n      const sceneId = _this.container.id;\n      _this.startInit = true;\n      // 初始化图层配置项\n      // const { enableMultiPassRenderer = false } = this.rawConfig;\n      // this.configService.setLayerConfig(sceneId, this.id, {\n      //   enableMultiPassRenderer,\n      // });\n      _this.configService.setLayerConfig(sceneId, _this.id, _this.rawConfig);\n      _this.layerType = _this.rawConfig.layerType;\n\n      // 全局容器服务\n\n      // 场景容器服务\n      const {\n        enableMultiPassRenderer,\n        passes\n      } = _this.getLayerConfig();\n      if (enableMultiPassRenderer && passes !== null && passes !== void 0 && passes.length && passes.length > 0) {\n        // Tip: 兼容 multiPassRender 在 amap1 时存在的图层不同步问题 zoom\n        _this.mapService.on('mapAfterFrameChange', () => {\n          _this.renderLayers();\n        });\n      }\n      _this.postProcessingPassFactory = _this.container.postProcessingPassFactory;\n\n      // 图层容器服务\n      _this.styleAttributeService = _this.container.styleAttributeService;\n      if (enableMultiPassRenderer) {\n        // 按需初始化 瓦片频繁报错\n        _this.multiPassRenderer = _this.container.multiPassRenderer;\n        _this.multiPassRenderer.setLayer(_this);\n      }\n      // 完成样式服务注册完成前添加的属性\n      _this.pendingStyleAttributes.forEach(({\n        attributeName,\n        attributeField,\n        attributeValues,\n        updateOptions\n      }) => {\n        _this.styleAttributeService.updateStyleAttribute(attributeName, {\n          // @ts-ignore\n          scale: _objectSpread({\n            field: attributeField\n          }, _this.splitValuesAndCallbackInAttribute(\n          // @ts-ignore\n          attributeValues,\n          // @ts-ignore\n          attributeField ? undefined : _this.getLayerConfig()[attributeName] // 设置了字段不需要设置默认值\n          ))\n        },\n        // @ts-ignore\n        updateOptions);\n      });\n      _this.pendingStyleAttributes = [];\n\n      // 获取插件集\n      _this.plugins = createPlugins();\n      // 完成插件注册，传入场景和图层容器内的服务\n      for (const plugin of _this.plugins) {\n        plugin.apply(_this, _this.container);\n      }\n      // if (this.getSource().isTile) {\n      //   this.tileLayer = new TileLayer(this);\n      // }\n\n      // 初始化其他服务\n      _this.layerPickService = new LayerPickService(_this);\n\n      // 颜色纹理服务\n      _this.textureService = new TextureService(_this);\n      _this.log(IDebugLog.LayerInitStart);\n      // 触发 init 生命周期插件\n      yield _this.hooks.init.promise();\n      _this.log(IDebugLog.LayerInitEnd);\n      _this.inited = true;\n      // add mask layer\n      // 触发初始化完成事件;\n      _this.emit('inited', {\n        target: _this,\n        type: 'inited'\n      });\n      _this.emit('add', {\n        target: _this,\n        type: 'add'\n      });\n      _this.hooks.afterInit.call();\n    })();\n  }\n  log(logType, step = 'init') {\n    var _this$debugService;\n    // @ts-ignore 瓦片、瓦片图层目前不参与日志\n    if (this.tileLayer || this.isTileLayer) {\n      return;\n    }\n    const key = `${this.id}.${step}.${logType}`;\n    const values = {\n      id: this.id,\n      type: this.type\n    };\n    (_this$debugService = this.debugService) === null || _this$debugService === void 0 || _this$debugService.log(key, values);\n  }\n  updateModelData(data) {\n    if (data.attributes && data.elements) {\n      this.models.map(m => {\n        m.updateAttributesAndElements(data.attributes, data.elements);\n      });\n    } else {\n      console.warn('data error');\n    }\n  }\n  setLayerPickService(layerPickService) {\n    this.layerPickService = layerPickService;\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  prepareBuildModel() {\n    if (Object.keys(this.needUpdateConfig || {}).length !== 0) {\n      this.updateLayerConfig({});\n    }\n\n    // 启动动画\n    const {\n      animateOption\n    } = this.getLayerConfig();\n    if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {\n      this.layerService.startAnimate();\n      this.animateStatus = true;\n    }\n  }\n  color(field, values, updateOptions) {\n    this.updateStyleAttribute('color', field, values, updateOptions);\n    return this;\n  }\n\n  // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）\n  texture(field, values, updateOptions) {\n    this.updateStyleAttribute('texture', field, values, updateOptions);\n    return this;\n  }\n  rotate(field, values, updateOptions) {\n    this.updateStyleAttribute('rotate', field, values, updateOptions);\n    return this;\n  }\n  size(field, values, updateOptions) {\n    this.updateStyleAttribute('size', field, values, updateOptions);\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  filter(field, values, updateOptions) {\n    const flag = this.updateStyleAttribute('filter', field, values, updateOptions);\n    this.dataState.dataSourceNeedUpdate = flag && this.inited;\n    return this;\n  }\n  shape(field, values, updateOptions) {\n    this.shapeOption = {\n      field,\n      values\n    };\n    const flag = this.updateStyleAttribute('shape', field, values, updateOptions);\n    this.dataState.dataSourceNeedUpdate = flag && this.inited;\n    return this;\n  }\n  label(field, values, updateOptions) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions\n    });\n    return this;\n  }\n  animate(options) {\n    let rawAnimate = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = _objectSpread(_objectSpread({}, rawAnimate), options);\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate\n    });\n    return this;\n  }\n  source(data, options) {\n    if ((data === null || data === void 0 ? void 0 : data.type) === 'source') {\n      // 判断是否为source\n      this.setSource(data);\n      return this;\n    }\n    // 设置source 配置\n    this.sourceOption = {\n      data,\n      options\n    };\n    this.clusterZoom = 0;\n    return this;\n  }\n  setData(data, options) {\n    if (this.inited) {\n      this.dataUpdatelog();\n      this.layerSource.setData(data, options);\n    } else {\n      this.on('inited', () => {\n        this.dataUpdatelog();\n        this.layerSource.setData(data, options);\n      });\n    }\n    return this;\n  }\n  dataUpdatelog() {\n    this.log(IDebugLog.SourceInitStart, ILayerStage.UPDATE);\n    this.layerSource.once('update', () => {\n      this.log(IDebugLog.SourceInitEnd, ILayerStage.UPDATE);\n    });\n  }\n  style(options) {\n    const {\n        passes\n      } = options,\n      rest = _objectWithoutProperties(options, _excluded);\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(pass => {\n        const postProcessingPass = this.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);\n        if (postProcessingPass) {\n          postProcessingPass.updateOptions(pass[1]);\n        }\n      });\n    }\n    // 兼容 borderColor borderWidth\n    // @ts-ignore\n    if (rest.borderColor) {\n      // @ts-ignore\n      rest.stroke = rest.borderColor;\n    }\n    // @ts-ignore\n    if (rest.borderWidth) {\n      // @ts-ignore\n      rest.strokeWidth = rest.borderWidth;\n    }\n\n    // 兼容老版本的写法 ['field, 'value']\n    const newOption = rest;\n    Object.keys(rest).forEach(key => {\n      // @ts-ignore\n      const values = rest[key];\n      if (Array.isArray(values) && values.length === 2 && !isNumber(values[0]) && !isNumber(values[1])) {\n        newOption[key] = {\n          field: values[0],\n          value: values[1]\n        };\n      }\n    });\n    this.encodeStyle(newOption);\n    this.updateLayerConfig(newOption);\n    return this;\n  }\n\n  // 参与数据映射的字段 encodeing\n  encodeStyle(options) {\n    Object.keys(options).forEach(key => {\n      if (\n      // 需要数据映射\n      [...this.enableShaderEncodeStyles, ...this.enableDataEncodeStyles].includes(key) && isPlainObject(options[key]) && (options[key].field || options[key].value) && !isEqual(this.encodeStyleAttribute[key], options[key]) // 防止计算属性重复计算\n      ) {\n        this.encodeStyleAttribute[key] = options[key];\n        this.updateStyleAttribute(key, options[key].field, options[key].value);\n        if (this.inited) {\n          this.dataState.dataMappingNeedUpdate = true;\n        }\n      } else {\n        // 不需要数据映射\n        if (this.encodeStyleAttribute[key]) {\n          delete this.encodeStyleAttribute[key]; // 删除已经存在的属性\n          this.dataState.dataSourceNeedUpdate = true;\n        }\n      }\n    });\n  }\n  scale(field, cfg) {\n    const preOption = _objectSpread({}, this.scaleOptions);\n    if (isObject(field)) {\n      this.scaleOptions = _objectSpread(_objectSpread({}, this.scaleOptions), field);\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    if (this.styleAttributeService && !isEqual(preOption, this.scaleOptions)) {\n      const scaleOptions = isObject(field) ? field : {\n        [field]: cfg\n      };\n      this.styleAttributeService.updateScaleAttribute(scaleOptions);\n    }\n    return this;\n  }\n\n  /**\n   * 渲染所有的图层\n   */\n  renderLayers() {\n    this.rendering = true;\n    this.layerService.reRender();\n    this.rendering = false;\n  }\n  prerender() {}\n  render(options = {}) {\n    if (this.tileLayer) {\n      // 瓦片图层执行单独的 render 渲染队列\n      this.tileLayer.render();\n      return this;\n    }\n    this.layerService.beforeRenderData(this);\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      return this;\n    }\n    // Tip: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    this.renderModels(options);\n    return this;\n  }\n\n  /**\n   * renderMultiPass 专门用于渲染支持 multipass 的 layer\n   */\n  renderMultiPass() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.encodeDataLength <= 0 && !_this2.forceRender) {\n        return;\n      }\n      if (_this2.multiPassRenderer && _this2.multiPassRenderer.getRenderFlag()) {\n        // multi render 开始执行 multiPassRender 的渲染流程\n        yield _this2.multiPassRenderer.render();\n      } else {\n        _this2.renderModels();\n      }\n    })();\n  }\n  active(options) {\n    const activeOption = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n      if (options.mix) {\n        activeOption.activeMix = options.mix;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  setActive(id, options) {\n    if (isObject(id)) {\n      const {\n        x = 0,\n        y = 0\n      } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options) ? options.color : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options) ? options.mix : this.getLayerConfig().activeMix\n      });\n      this.pick({\n        x,\n        y\n      });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options) ? options.color : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options) ? options.mix : this.getLayerConfig().activeMix\n      });\n      this.hooks.beforeHighlight.call(encodePickingColor(id))\n      // @ts-ignore\n      .then(() => {\n        setTimeout(() => {\n          this.reRender();\n        }, 1);\n      });\n    }\n  }\n  select(option) {\n    const activeOption = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n      if (option.mix) {\n        activeOption.selectMix = option.mix;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  setSelect(id, options) {\n    if (isObject(id)) {\n      const {\n        x = 0,\n        y = 0\n      } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options) ? options.color : this.getLayerConfig().selectColor,\n        selectMix: isObject(options) ? options.mix : this.getLayerConfig().selectMix\n      });\n      this.pick({\n        x,\n        y\n      });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options) ? options.color : this.getLayerConfig().selectColor,\n        selectMix: isObject(options) ? options.mix : this.getLayerConfig().selectMix\n      });\n      this.hooks.beforeSelect.call(encodePickingColor(id))\n      // @ts-ignore\n      .then(() => {\n        setTimeout(() => {\n          this.reRender();\n        }, 1);\n      });\n    }\n  }\n  setBlend(type) {\n    this.updateLayerConfig({\n      blend: type\n    });\n    // this.layerModelNeedUpdate = true;\n    this.reRender();\n    return this;\n  }\n  show() {\n    this.updateLayerConfig({\n      visible: true\n    });\n    this.reRender();\n    this.emit('show');\n    return this;\n  }\n  hide() {\n    this.updateLayerConfig({\n      visible: false\n    });\n    this.reRender();\n    this.emit('hide');\n    return this;\n  }\n  setIndex(index) {\n    this.zIndex = index;\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    return this;\n  }\n  setCurrentPickId(id) {\n    this.currentPickId = id;\n  }\n  getCurrentPickId() {\n    return this.currentPickId;\n  }\n  setCurrentSelectedId(id) {\n    this.selectedFeatureID = id;\n  }\n  getCurrentSelectedId() {\n    return this.selectedFeatureID;\n  }\n  isVisible() {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom < maxZoom;\n  }\n  setMultiPass(enableMultiPass, currentPasses) {\n    this.updateLayerConfig({\n      enableMultiPassRenderer: enableMultiPass\n    });\n    if (currentPasses) {\n      this.updateLayerConfig({\n        passes: currentPasses\n      });\n    }\n    if (enableMultiPass) {\n      const {\n        passes = []\n      } = this.getLayerConfig();\n      this.multiPassRenderer = createMultiPassRenderer(this, passes, this.postProcessingPassFactory, this.normalPassFactory);\n      this.multiPassRenderer.setRenderFlag(true);\n      const {\n        width,\n        height\n      } = this.rendererService.getViewportSize();\n      this.multiPassRenderer.resize(width, height);\n    }\n    return this;\n  }\n  setMinZoom(minZoom) {\n    this.updateLayerConfig({\n      minZoom\n    });\n    return this;\n  }\n  getMinZoom() {\n    const {\n      minZoom\n    } = this.getLayerConfig();\n    return minZoom;\n  }\n  getMaxZoom() {\n    const {\n      maxZoom\n    } = this.getLayerConfig();\n    return maxZoom;\n  }\n  get(name) {\n    const cfg = this.getLayerConfig();\n    // @ts-ignore\n    return cfg[name];\n  }\n  setMaxZoom(maxZoom) {\n    this.updateLayerConfig({\n      maxZoom\n    });\n    return this;\n  }\n  setAutoFit(autoFit) {\n    this.updateLayerConfig({\n      autoFit\n    });\n    return this;\n  }\n\n  /**\n   * zoom to layer Bounds\n   */\n  fitBounds(fitBoundsOptions) {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    const isValid = extent.some(v => Math.abs(v) === Infinity);\n    if (isValid) {\n      return this;\n    }\n    this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]], fitBoundsOptions);\n    return this;\n  }\n  destroy(refresh = true) {\n    var _this$layerModel, _this$multiPassRender, _this$layerModel2, _this$tileLayer, _this$debugService2;\n    if (this.isDestroyed) {\n      return;\n    }\n\n    // destroy all UBOs\n    (_this$layerModel = this.layerModel) === null || _this$layerModel === void 0 || _this$layerModel.uniformBuffers.forEach(buffer => {\n      buffer.destroy();\n    });\n\n    // remove child layer\n    this.layerChildren.map(child => child.destroy(false));\n    this.layerChildren = [];\n\n    // remove mask list maskfence 掩模需要销毁\n    const {\n      maskfence\n    } = this.getLayerConfig();\n    if (maskfence) {\n      this.masks.map(mask => mask.destroy(false));\n      this.masks = [];\n    }\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n    (_this$multiPassRender = this.multiPassRenderer) === null || _this$multiPassRender === void 0 || _this$multiPassRender.destroy();\n    this.textureService.destroy();\n\n    // 清除所有属性以及关联的 vao == 销毁所有 => model this.models.forEach((model) => model.destroy());\n    this.styleAttributeService.clearAllAttributes();\n\n    // 执行每个图层单独的 clearModels 方法 （清除一些额外的 texture、program、buffer 等）\n\n    this.hooks.afterDestroy.call();\n    // Tip: 清除各个图层自定义的 models 资源\n    (_this$layerModel2 = this.layerModel) === null || _this$layerModel2 === void 0 || _this$layerModel2.clearModels(refresh);\n    (_this$tileLayer = this.tileLayer) === null || _this$tileLayer === void 0 || _this$tileLayer.destroy();\n    this.models = [];\n    // 清除图层日志（如果有的话：非瓦片相关）\n    (_this$debugService2 = this.debugService) === null || _this$debugService2 === void 0 || _this$debugService2.removeLog(this.id);\n    this.emit('remove', {\n      target: this,\n      type: 'remove'\n    });\n    this.emit('destroy', {\n      target: this,\n      type: 'destroy'\n    });\n    this.removeAllListeners();\n    this.isDestroyed = true;\n  }\n  clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n  }\n  clearModels() {\n    var _this$layerModel3;\n    this.models.forEach(model => model.destroy());\n    (_this$layerModel3 = this.layerModel) === null || _this$layerModel3 === void 0 || _this$layerModel3.clearModels();\n    this.models = [];\n  }\n  isDirty() {\n    return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(attribute => attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices).length;\n  }\n  // 外部初始化Source\n  setSource(source) {\n    // 解除原 sources 事件\n    if (this.layerSource) {\n      this.layerSource.off('update', this.sourceEvent);\n    }\n    this.layerSource = source;\n    this.clusterZoom = 0;\n\n    // 已 inited 且启用聚合进行更新聚合数据\n    if (this.inited && this.layerSource.cluster) {\n      const zoom = this.mapService.getZoom();\n      this.layerSource.updateClusterData(zoom);\n    }\n    if (this.layerSource.inited) {\n      this.sourceEvent();\n    }\n    // this.layerSource.inited 为 true update 事件不会再触发\n    this.layerSource.on('update', ({\n      type\n    }) => {\n      if (this.coordCenter === undefined) {\n        const layerCenter = this.layerSource.center;\n        this.coordCenter = layerCenter;\n      }\n      if (type === 'update') {\n        if (this.tileLayer) {\n          // 瓦片图层独立更新\n          this.tileLayer.reload();\n          return;\n        }\n        // source 初始化不需要处理\n        this.sourceEvent();\n      }\n    });\n  }\n  getSource() {\n    return this.layerSource;\n  }\n  getScaleOptions() {\n    return this.scaleOptions;\n  }\n  setEncodedData(encodedData) {\n    this.encodedData = encodedData;\n    this.encodeDataLength = encodedData.length;\n  }\n  getEncodedData() {\n    return this.encodedData;\n  }\n  getScale(name) {\n    return this.styleAttributeService.getLayerAttributeScale(name);\n  }\n  getLegend(name) {\n    var _attribute$scale, _scales$, _attribute$scale2;\n    const attribute = this.styleAttributeService.getLayerStyleAttribute(name);\n    const scales = (attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];\n    return {\n      type: (_scales$ = scales[0]) === null || _scales$ === void 0 || (_scales$ = _scales$.option) === null || _scales$ === void 0 ? void 0 : _scales$.type,\n      field: attribute === null || attribute === void 0 || (_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.field,\n      items: this.getLegendItems(name)\n    };\n  }\n  getLegendItems(name) {\n    const scale = this.styleAttributeService.getLayerAttributeScale(name);\n    // 函数自定义映射，没有 scale 返回为空数组\n    if (!scale) {\n      return [];\n    }\n    if (scale.invertExtent) {\n      // 分段类型  Quantize、Quantile、Threshold\n      const items = scale.range().map(item => {\n        return {\n          value: scale.invertExtent(item),\n          [name]: item\n        };\n      });\n      return items;\n    } else if (scale.ticks) {\n      // 连续类型 Continuous (Linear, Power, Log, Identity, Time)\n      const items = scale.ticks().map(item => {\n        return {\n          value: item,\n          [name]: scale(item)\n        };\n      });\n      return items;\n    } else if (scale !== null && scale !== void 0 && scale.domain) {\n      // 枚举类型 Cat\n      const items = scale.domain().filter(item => !isUndefined(item)).map(item => {\n        return {\n          value: item,\n          [name]: scale(item)\n        };\n      });\n      return items;\n    }\n    return [];\n  }\n  pick({\n    x,\n    y\n  }) {\n    this.interactionService.triggerHover({\n      x,\n      y\n    });\n  }\n  boxSelect(box, cb) {\n    this.pickingService.boxPickLayer(this, box, cb);\n  }\n  buildLayerModel(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const {\n          moduleName,\n          vertexShader,\n          fragmentShader,\n          defines,\n          inject,\n          triangulation,\n          styleOption,\n          pickingEnabled = true\n        } = options,\n        rest = _objectWithoutProperties(options, _excluded2);\n      _this3.shaderModuleService.registerModule(moduleName, {\n        vs: vertexShader,\n        fs: fragmentShader,\n        defines,\n        inject\n      });\n      const {\n        vs,\n        fs,\n        uniforms\n      } = _this3.shaderModuleService.getModule(moduleName);\n      const {\n        createModel\n      } = _this3.rendererService;\n      return new Promise(resolve => {\n        const {\n          attributes,\n          elements,\n          count\n        } = _this3.styleAttributeService.createAttributesAndIndices(_this3.encodedData, triangulation, styleOption, _this3);\n        const uniformBuffers = [..._this3.layerModel.uniformBuffers, ..._this3.rendererService.uniformBuffers];\n        if (pickingEnabled) {\n          uniformBuffers.push(_this3.getPickingUniformBuffer());\n        }\n        const modelOptions = _objectSpread({\n          attributes,\n          uniforms,\n          fs,\n          vs,\n          elements,\n          blend: BlendTypes[BlendType.normal],\n          uniformBuffers,\n          textures: _this3.layerModel.textures\n        }, rest);\n        if (count) {\n          modelOptions.count = count;\n        }\n        const m = createModel(modelOptions);\n        resolve(m);\n      });\n    })();\n  }\n  createAttributes(options) {\n    const {\n      triangulation\n    } = options;\n    // @ts-ignore\n    const {\n      attributes\n    } = this.styleAttributeService.createAttributes(this.encodedData, triangulation);\n    return attributes;\n  }\n  getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  stopAnimate() {\n    if (this.animateStatus) {\n      this.layerService.stopAnimate();\n      this.animateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false\n        }\n      });\n    }\n  }\n  getLayerAnimateTime() {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n  needPick(type) {\n    const {\n      enableHighlight = true,\n      enableSelect = true\n    } = this.getLayerConfig();\n    // 判断layer是否监听事件;\n    let isPick = this.eventNames().indexOf(type) !== -1 || this.eventNames().indexOf('un' + type) !== -1;\n    if ((type === 'click' || type === 'dblclick') && enableSelect) {\n      isPick = true;\n    }\n    if (type === 'mousemove' && (enableHighlight || this.eventNames().indexOf('mouseenter') !== -1 || this.eventNames().indexOf('unmousemove') !== -1 || this.eventNames().indexOf('mouseout') !== -1)) {\n      isPick = true;\n    }\n    return this.isVisible() && isPick;\n  }\n  buildModels() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Method not implemented.');\n    })();\n  }\n  rebuildModels() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.buildModels();\n    })();\n  }\n  renderMulPass(multiPassRenderer) {\n    return _asyncToGenerator(function* () {\n      yield multiPassRenderer.render();\n    })();\n  }\n  renderModels(options = {}) {\n    // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.encodeDataLength <= 0 && !this.forceRender) {\n      // 数据为空销毁model\n      this.clearModels();\n      return this;\n    }\n    this.hooks.beforeRender.call();\n    this.models.forEach(model => {\n      model.draw({\n        uniforms: this.layerModel.getUninforms(),\n        blend: this.layerModel.getBlend(),\n        stencil: this.layerModel.getStencil(options),\n        textures: this.layerModel.textures\n      }, (options === null || options === void 0 ? void 0 : options.ispick) || false);\n    });\n    this.hooks.afterRender.call();\n    return this;\n  }\n  updateStyleAttribute(type, field, values, updateOptions) {\n    // encode diff\n    const preAttribute = this.configService.getAttributeConfig(this.id) || {};\n    // @ts-ignore\n    if (isEqual(preAttribute[type], {\n      field,\n      values\n    })) {\n      // 检测是否发生更新\n      return false;\n    }\n\n    // 存储 Attribute 瓦片图层使用\n    if (['color', 'size', 'texture', 'rotate', 'filter', 'label', 'shape'].indexOf(type) !== -1) {\n      this.configService.setAttributeConfig(this.id, {\n        [type]: {\n          field,\n          values\n        }\n      });\n    }\n    if (!this.startInit) {\n      // 开始初始化执行\n      this.pendingStyleAttributes.push({\n        attributeName: type,\n        attributeField: field,\n        attributeValues: values,\n        updateOptions\n      });\n    } else {\n      this.styleAttributeService.updateStyleAttribute(type, {\n        // @ts-ignore\n        scale: _objectSpread({\n          field\n        }, this.splitValuesAndCallbackInAttribute(\n        // @ts-ignore\n        values,\n        // @ts-ignore\n        this.getLayerConfig()[field]))\n      },\n      // @ts-ignore\n      updateOptions);\n    }\n    return true;\n  }\n  getLayerAttributeConfig() {\n    return this.configService.getAttributeConfig(this.id);\n  }\n  getShaderPickStat() {\n    return this.layerService.getShaderPickStat();\n  }\n\n  /**\n   * 继承空方法\n   * @param time\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setEarthTime(time) {\n    console.warn('empty fn');\n  }\n\n  // 数据处理 在数据进行 mapping 生成 encodeData 之前对数据进行处理\n  // 在各个 layer 中继承\n  processData(filterData) {\n    return filterData;\n  }\n  getModelType() {\n    throw new Error('Method not implemented.');\n  }\n  getDefaultConfig() {\n    return {};\n  }\n  initLayerModels() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.models.forEach(model => model.destroy());\n      _this5.models = [];\n      _this5.uniformBuffers.forEach(buffer => {\n        buffer.destroy();\n      });\n      _this5.uniformBuffers = [];\n\n      // Picking Uniform\n      const pickingUniforms = _this5.rendererService.createBuffer({\n        data: new Float32Array(20).fill(0),\n        isUBO: true,\n        label: 'pickingUniforms'\n      });\n      _this5.uniformBuffers.push(pickingUniforms);\n      _this5.models = yield _this5.layerModel.initModels();\n    })();\n  }\n  getPickingUniformBuffer() {\n    return this.uniformBuffers[0];\n  }\n  reRender() {\n    if (this.inited) {\n      this.layerService.reRender();\n    }\n  }\n  splitValuesAndCallbackInAttribute(valuesOrCallback\n  // defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback) ? undefined : valuesOrCallback,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,wBAAwB,MAAM,oDAAoD;AACzF,OAAOC,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,eAAe,MAAM,2CAA2C;AACvE,MAAMC,SAAS,GAAG,CAAC,QAAQ,CAAC;EAC1BC,UAAU,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE,eAAe,EAAE,aAAa,EAAE,gBAAgB,CAAC;AACtI;AACA,SAASC,mBAAmB,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,kBAAkB;AAClG,SAASC,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAEC,mBAAmB,QAAQ,eAAe;AACtF,SAASC,kBAAkB,EAAEC,UAAU,QAAQ,gBAAgB;AAC/D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,uBAAuB,EAAEC,eAAe,QAAQ,0BAA0B;AACnF,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,MAAM;EACJC,OAAO;EACPC,UAAU;EACVC,QAAQ;EACRC,QAAQ;EACRC,aAAa;EACbC;AACF,CAAC,GAAGb,UAAU;AACd;AACA;AACA;AACA,IAAIc,cAAc,GAAG,CAAC;AACtB,eAAe,MAAMC,SAAS,SAASd,YAAY,CAAC;EAClD,IAAIe,mBAAmBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACC,SAAS,CAACD,mBAAmB;EAC3C;EACA,IAAIE,aAAaA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACD,SAAS,CAACC,aAAa;EACrC;EACA,IAAIC,iBAAiBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACF,SAAS,CAACG,uBAAuB;EAC/C;EACA,IAAIC,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACJ,SAAS,CAACI,WAAW;EACnC;EACA,IAAIC,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACL,SAAS,CAACK,WAAW;EACnC;EACA,IAAIC,cAAcA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACN,SAAS,CAACM,cAAc;EACtC;EACA,IAAIC,eAAeA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACP,SAAS,CAACO,eAAe;EACvC;EACA,IAAIC,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACR,SAAS,CAACQ,YAAY;EACpC;EACA,IAAIC,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACT,SAAS,CAACS,YAAY;EACpC;EACA,IAAIC,kBAAkBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACV,SAAS,CAACU,kBAAkB;EAC1C;EACA,IAAIC,UAAUA,CAAA,EAAG;IACf,IAAIC,eAAe;IACnB,OAAO,CAACA,eAAe,GAAG,IAAI,CAACZ,SAAS,MAAM,IAAI,IAAIY,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACD,UAAU;EACxH;EACA,IAAIE,iBAAiBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACb,SAAS,CAACa,iBAAiB;EACzC;EACAC,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,KAAK,CAAC,CAAC;IACP5C,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG0B,cAAc,EAAE,EAAE,CAAC;IAClD1B,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG0B,cAAc,EAAE,CAAC;IAClD1B,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvCA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACrCA,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;IACtCA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAClCA,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxCA,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxCA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC;IACtCA,eAAe,CAAC,IAAI,EAAE,sBAAsB,EAAE,KAAK,CAAC;IACpDA,eAAe,CAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAAC;IAC9CA,eAAe,CAAC,IAAI,EAAE,mBAAmB,EAAE,IAAI,CAAC;IAChDA,eAAe,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,CAAC;IAC/CA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC;IAC3CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;IACvC;IACAA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1CA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;IAC9CA,eAAe,CAAC,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACjDA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAC/CA,eAAe,CAAC,IAAI,EAAE,qBAAqB,EAAE;MAC3C6C,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,IAAI,EAAE;QACR;MACF;IACF,CAAC,CAAC;IACFhD,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE;MACjCiD,oBAAoB,EAAE,KAAK;MAC3BC,qBAAqB,EAAE,KAAK;MAC5BC,gBAAgB,EAAE,KAAK;MACvBC,sBAAsB,EAAE,KAAK;MAC7BC,mBAAmB,EAAE;IACvB,CAAC,CAAC;IACF;IACArD,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE;MAC7BsD,IAAI,EAAE,IAAInD,mBAAmB,CAAC,CAAC;MAC/BoD,SAAS,EAAE,IAAIlD,YAAY,CAAC,CAAC;MAC7BmD,YAAY,EAAE,IAAInD,YAAY,CAAC,CAAC;MAChCoD,gBAAgB,EAAE,IAAIrD,kBAAkB,CAAC,CAAC;MAC1CsD,WAAW,EAAE,IAAIpD,QAAQ,CAAC,CAAC;MAC3BqD,mBAAmB,EAAE,IAAIrD,QAAQ,CAAC,CAAC;MACnCsD,kBAAkB,EAAE,IAAItD,QAAQ,CAAC,CAAC;MAClCuD,eAAe,EAAE,IAAIvD,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MAC9CwD,cAAc,EAAE,IAAIxD,QAAQ,CAAC,CAAC;MAC9ByD,YAAY,EAAE,IAAIzD,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MAC3C0D,WAAW,EAAE,IAAI1D,QAAQ,CAAC,CAAC;MAC3B2D,aAAa,EAAE,IAAI3D,QAAQ,CAAC,CAAC;MAC7B4D,YAAY,EAAE,IAAI5D,QAAQ,CAAC;IAC7B,CAAC,CAAC;IACF;IACAN,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC;IACnC;IACAA,eAAe,CAAC,IAAI,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;IAClD;IACAA,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxCA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;IACzCA,eAAe,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAC7CA,eAAe,CAAC,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;IAC3CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1C;IACAA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC;IAC1CA,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;IAClCA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAEU,mBAAmB,CAAC;IAC3DV,eAAe,CAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;IACtDA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,2BAA2B,EAAE,KAAK,CAAC,CAAC;IAC1DA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE;MACtCmE,MAAM,EAAE;IACV,CAAC,CAAC;IACF;AACJ;AACA;IACInE,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1CA,eAAe,CAAC,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACjDA,eAAe,CAAC,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;IACjD;IACAA,eAAe,CAAC,IAAI,EAAE,0BAA0B,EAAE,EAAE,CAAC;IACrD;IACAA,eAAe,CAAC,IAAI,EAAE,wBAAwB,EAAE,EAAE,CAAC;IACnD;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,wBAAwB,EAAE,EAAE,CAAC;IACnDA,eAAe,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;IACzCA,eAAe,CAAC,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACjDA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,CAAC;IAC7CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC;IAC3C;IACAA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE,EAAE,CAAC;IAC3CA,eAAe,CAAC,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAC5CA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM;MACzC,IAAI,CAACoE,SAAS,CAACnB,oBAAoB,GAAG,IAAI;MAC1C,MAAMoB,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MACzC,IAAID,WAAW,IAAIA,WAAW,CAACE,OAAO,EAAE;QACtC,IAAI,CAACC,SAAS,CAACH,WAAW,CAACI,gBAAgB,CAAC;MAC9C;MACA,MAAMC,UAAU,GAAG,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC,CAAC,CAACF,UAAU;MAC7D,IAAIA,UAAU,EAAE;QACdG,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,QAAQ,CAAC,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,CAAC;IACF,IAAI,CAACC,IAAI,GAAGnC,MAAM,CAACmC,IAAI,IAAI,IAAI,CAACC,EAAE;IAClC,IAAI,CAACC,MAAM,GAAGrC,MAAM,CAACqC,MAAM,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,GAAGtC,MAAM;IACvB,IAAI,CAACuC,KAAK,GAAGvC,MAAM,CAACwC,UAAU,IAAI,EAAE;EACtC;EACAC,OAAOA,CAACC,KAAK,EAAE;IACb,IAAI,CAACH,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC;IACtB,IAAI,CAACE,iBAAiB,CAAC;MACrBJ,UAAU,EAAE,IAAI,CAACD;IACnB,CAAC,CAAC;IACF,IAAI,CAACM,UAAU,CAAC,CAAC;EACnB;EACAC,UAAUA,CAACJ,KAAK,EAAE;IAChB,MAAMK,UAAU,GAAG,IAAI,CAACR,KAAK,CAACS,OAAO,CAACN,KAAK,CAAC;IAC5C,IAAIK,UAAU,GAAG,CAAC,CAAC,EAAE;MACnB,IAAI,CAACR,KAAK,CAACU,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;IAClC;IACA,IAAI,CAACH,iBAAiB,CAAC;MACrBJ,UAAU,EAAE,IAAI,CAACD;IACnB,CAAC,CAAC;EACJ;EACAW,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACN,iBAAiB,CAAC;MACrBC,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;EACAA,UAAUA,CAAA,EAAG;IACX,IAAI,CAACD,iBAAiB,CAAC;MACrBC,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEM,YAAYA,CAACC,SAAS,EAAE;IACtB,IAAI,CAACb,KAAK,CAACI,IAAI,CAACS,SAAS,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;EACEC,eAAeA,CAACD,SAAS,EAAE;IACzB,MAAML,UAAU,GAAG,IAAI,CAACR,KAAK,CAACS,OAAO,CAACI,SAAS,CAAC;IAChD,IAAIL,UAAU,GAAG,CAAC,CAAC,EAAE;MACnB,IAAI,CAACR,KAAK,CAACU,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;IAClC;IACAK,SAAS,CAACE,OAAO,CAAC,CAAC;EACrB;EACAC,YAAYA,CAACpB,IAAI,EAAE;IACjB,OAAO,IAAI,CAACqB,qBAAqB,CAACC,sBAAsB,CAACtB,IAAI,CAAC;EAChE;EACAT,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACgC,aAAa,CAAChC,cAAc,CAAC,IAAI,CAACU,EAAE,CAAC;EACnD;EACAQ,iBAAiBA,CAACe,cAAc,EAAE;IAChC;IACAC,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,GAAG,CAACC,GAAG,IAAI;MACrC,IAAIA,GAAG,IAAI,IAAI,CAACzB,SAAS,EAAE;QACzB;QACA,IAAI,CAACA,SAAS,CAACyB,GAAG,CAAC,GAAGJ,cAAc,CAACI,GAAG,CAAC;MAC3C;IACF,CAAC,CAAC;IACF,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACC,gBAAgB,GAAG9G,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC8G,gBAAgB,CAAC,EAAEN,cAAc,CAAC;IACjG,CAAC,MAAM;MACL,MAAMO,OAAO,GAAG,IAAI,CAACjF,SAAS,CAACmD,EAAE;MACjC;MACA;MACA,IAAI,CAACsB,aAAa,CAACS,cAAc,CAACD,OAAO,EAAE,IAAI,CAAC9B,EAAE,EAAEjF,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAACuG,aAAa,CAAChC,cAAc,CAAC,IAAI,CAACU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC6B,gBAAgB,CAAC,EAAEN,cAAc,CAAC,CAAC;MACvL,IAAI,CAACM,gBAAgB,GAAG,CAAC,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,YAAYA,CAACnF,SAAS,EAAE;IACtB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;EACAoF,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACpF,SAAS;EACvB;EACAqF,SAASA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACC,OAAO,CAAC7B,IAAI,CAAC4B,MAAM,CAAC;IACzB,OAAO,IAAI;EACb;EACA7D,IAAIA,CAAA,EAAG;IACL,IAAI+D,KAAK,GAAG,IAAI;IAChB,OAAOvH,iBAAiB,CAAC,aAAa;MACpC;MACA,MAAMgH,OAAO,GAAGO,KAAK,CAACxF,SAAS,CAACmD,EAAE;MAClCqC,KAAK,CAACT,SAAS,GAAG,IAAI;MACtB;MACA;MACA;MACA;MACA;MACAS,KAAK,CAACf,aAAa,CAACS,cAAc,CAACD,OAAO,EAAEO,KAAK,CAACrC,EAAE,EAAEqC,KAAK,CAACnC,SAAS,CAAC;MACtEmC,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACnC,SAAS,CAACoC,SAAS;;MAE3C;;MAEA;MACA,MAAM;QACJC,uBAAuB;QACvBC;MACF,CAAC,GAAGH,KAAK,CAAC/C,cAAc,CAAC,CAAC;MAC1B,IAAIiD,uBAAuB,IAAIC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,IAAIA,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACzG;QACAJ,KAAK,CAAC7E,UAAU,CAACkF,EAAE,CAAC,qBAAqB,EAAE,MAAM;UAC/CL,KAAK,CAACM,YAAY,CAAC,CAAC;QACtB,CAAC,CAAC;MACJ;MACAN,KAAK,CAACO,yBAAyB,GAAGP,KAAK,CAACxF,SAAS,CAAC+F,yBAAyB;;MAE3E;MACAP,KAAK,CAACjB,qBAAqB,GAAGiB,KAAK,CAACxF,SAAS,CAACuE,qBAAqB;MACnE,IAAImB,uBAAuB,EAAE;QAC3B;QACAF,KAAK,CAACQ,iBAAiB,GAAGR,KAAK,CAACxF,SAAS,CAACgG,iBAAiB;QAC3DR,KAAK,CAACQ,iBAAiB,CAACC,QAAQ,CAACT,KAAK,CAAC;MACzC;MACA;MACAA,KAAK,CAACU,sBAAsB,CAACC,OAAO,CAAC,CAAC;QACpCC,aAAa;QACbC,cAAc;QACdC,eAAe;QACfC;MACF,CAAC,KAAK;QACJf,KAAK,CAACjB,qBAAqB,CAACiC,oBAAoB,CAACJ,aAAa,EAAE;UAC9D;UACAK,KAAK,EAAEvI,aAAa,CAAC;YACnBwI,KAAK,EAAEL;UACT,CAAC,EAAEb,KAAK,CAACmB,iCAAiC;UAC1C;UACAL,eAAe;UACf;UACAD,cAAc,GAAGO,SAAS,GAAGpB,KAAK,CAAC/C,cAAc,CAAC,CAAC,CAAC2D,aAAa,CAAC,CAAC;UACnE,CAAC;QACH,CAAC;QACD;QACAG,aAAa,CAAC;MAChB,CAAC,CAAC;MACFf,KAAK,CAACU,sBAAsB,GAAG,EAAE;;MAEjC;MACAV,KAAK,CAACD,OAAO,GAAGtG,aAAa,CAAC,CAAC;MAC/B;MACA,KAAK,MAAMqG,MAAM,IAAIE,KAAK,CAACD,OAAO,EAAE;QAClCD,MAAM,CAACuB,KAAK,CAACrB,KAAK,EAAEA,KAAK,CAACxF,SAAS,CAAC;MACtC;MACA;MACA;MACA;;MAEA;MACAwF,KAAK,CAACsB,gBAAgB,GAAG,IAAIzH,gBAAgB,CAACmG,KAAK,CAAC;;MAEpD;MACAA,KAAK,CAACuB,cAAc,GAAG,IAAIzH,cAAc,CAACkG,KAAK,CAAC;MAChDA,KAAK,CAACwB,GAAG,CAACrI,SAAS,CAACsI,cAAc,CAAC;MACnC;MACA,MAAMzB,KAAK,CAAC0B,KAAK,CAACzF,IAAI,CAAC0F,OAAO,CAAC,CAAC;MAChC3B,KAAK,CAACwB,GAAG,CAACrI,SAAS,CAACyI,YAAY,CAAC;MACjC5B,KAAK,CAAC6B,MAAM,GAAG,IAAI;MACnB;MACA;MACA7B,KAAK,CAAC8B,IAAI,CAAC,QAAQ,EAAE;QACnBC,MAAM,EAAE/B,KAAK;QACbrE,IAAI,EAAE;MACR,CAAC,CAAC;MACFqE,KAAK,CAAC8B,IAAI,CAAC,KAAK,EAAE;QAChBC,MAAM,EAAE/B,KAAK;QACbrE,IAAI,EAAE;MACR,CAAC,CAAC;MACFqE,KAAK,CAAC0B,KAAK,CAACxF,SAAS,CAAC8F,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC,CAAC;EACN;EACAR,GAAGA,CAACS,OAAO,EAAEC,IAAI,GAAG,MAAM,EAAE;IAC1B,IAAIC,kBAAkB;IACtB;IACA,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,CAACC,WAAW,EAAE;MACtC;IACF;IACA,MAAM/C,GAAG,GAAG,GAAG,IAAI,CAAC3B,EAAE,IAAIuE,IAAI,IAAID,OAAO,EAAE;IAC3C,MAAMK,MAAM,GAAG;MACb3E,EAAE,EAAE,IAAI,CAACA,EAAE;MACXhC,IAAI,EAAE,IAAI,CAACA;IACb,CAAC;IACD,CAACwG,kBAAkB,GAAG,IAAI,CAAClH,YAAY,MAAM,IAAI,IAAIkH,kBAAkB,KAAK,KAAK,CAAC,IAAIA,kBAAkB,CAACX,GAAG,CAAClC,GAAG,EAAEgD,MAAM,CAAC;EAC3H;EACAC,eAAeA,CAAC/G,IAAI,EAAE;IACpB,IAAIA,IAAI,CAACgH,UAAU,IAAIhH,IAAI,CAACiH,QAAQ,EAAE;MACpC,IAAI,CAACC,MAAM,CAACrD,GAAG,CAACsD,CAAC,IAAI;QACnBA,CAAC,CAACC,2BAA2B,CAACpH,IAAI,CAACgH,UAAU,EAAEhH,IAAI,CAACiH,QAAQ,CAAC;MAC/D,CAAC,CAAC;IACJ,CAAC,MAAM;MACLI,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;IAC5B;EACF;EACAC,mBAAmBA,CAACzB,gBAAgB,EAAE;IACpC,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EAC1C;EACA;AACF;AACA;EACE0B,iBAAiBA,CAAA,EAAG;IAClB,IAAI7D,MAAM,CAACC,IAAI,CAAC,IAAI,CAACI,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,KAAK,CAAC,EAAE;MACzD,IAAI,CAACjC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC5B;;IAEA;IACA,MAAM;MACJ8E;IACF,CAAC,GAAG,IAAI,CAAChG,cAAc,CAAC,CAAC;IACzB,IAAIgG,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAACnG,MAAM,EAAE;MAC9E,IAAI,CAAC9B,YAAY,CAACkI,YAAY,CAAC,CAAC;MAChC,IAAI,CAACC,aAAa,GAAG,IAAI;IAC3B;EACF;EACAC,KAAKA,CAAClC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IAClC,IAAI,CAACC,oBAAoB,CAAC,OAAO,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IAChE,OAAO,IAAI;EACb;;EAEA;EACAsC,OAAOA,CAACnC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IACpC,IAAI,CAACC,oBAAoB,CAAC,SAAS,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IAClE,OAAO,IAAI;EACb;EACAuC,MAAMA,CAACpC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IACnC,IAAI,CAACC,oBAAoB,CAAC,QAAQ,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IACjE,OAAO,IAAI;EACb;EACAwC,IAAIA,CAACrC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IACjC,IAAI,CAACC,oBAAoB,CAAC,MAAM,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IAC/D,OAAO,IAAI;EACb;EACA;EACAyC,MAAMA,CAACtC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IACnC,MAAM0C,IAAI,GAAG,IAAI,CAACzC,oBAAoB,CAAC,QAAQ,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IAC9E,IAAI,CAAChE,SAAS,CAACnB,oBAAoB,GAAG6H,IAAI,IAAI,IAAI,CAAC5B,MAAM;IACzD,OAAO,IAAI;EACb;EACA6B,KAAKA,CAACxC,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IAClC,IAAI,CAAC4C,WAAW,GAAG;MACjBzC,KAAK;MACLoB;IACF,CAAC;IACD,MAAMmB,IAAI,GAAG,IAAI,CAACzC,oBAAoB,CAAC,OAAO,EAAEE,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,CAAC;IAC7E,IAAI,CAAChE,SAAS,CAACnB,oBAAoB,GAAG6H,IAAI,IAAI,IAAI,CAAC5B,MAAM;IACzD,OAAO,IAAI;EACb;EACA+B,KAAKA,CAAC1C,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IAClC,IAAI,CAACL,sBAAsB,CAACxC,IAAI,CAAC;MAC/B0C,aAAa,EAAE,OAAO;MACtBC,cAAc,EAAEK,KAAK;MACrBJ,eAAe,EAAEwB,MAAM;MACvBvB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA8C,OAAOA,CAACpI,OAAO,EAAE;IACf,IAAIqI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI5J,QAAQ,CAACuB,OAAO,CAAC,EAAE;MACrBqI,UAAU,CAAChH,MAAM,GAAG,IAAI;MACxBgH,UAAU,GAAGpL,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEoL,UAAU,CAAC,EAAErI,OAAO,CAAC;IACpE,CAAC,MAAM;MACLqI,UAAU,CAAChH,MAAM,GAAGrB,OAAO;IAC7B;IACA,IAAI,CAAC0C,iBAAiB,CAAC;MACrB8E,aAAa,EAAEa;IACjB,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAC,MAAMA,CAACvI,IAAI,EAAEC,OAAO,EAAE;IACpB,IAAI,CAACD,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACG,IAAI,MAAM,QAAQ,EAAE;MACxE;MACA,IAAI,CAACqI,SAAS,CAACxI,IAAI,CAAC;MACpB,OAAO,IAAI;IACb;IACA;IACA,IAAI,CAACyI,YAAY,GAAG;MAClBzI,IAAI;MACJC;IACF,CAAC;IACD,IAAI,CAACyI,WAAW,GAAG,CAAC;IACpB,OAAO,IAAI;EACb;EACAC,OAAOA,CAAC3I,IAAI,EAAEC,OAAO,EAAE;IACrB,IAAI,IAAI,CAACoG,MAAM,EAAE;MACf,IAAI,CAACuC,aAAa,CAAC,CAAC;MACpB,IAAI,CAAC9G,WAAW,CAAC6G,OAAO,CAAC3I,IAAI,EAAEC,OAAO,CAAC;IACzC,CAAC,MAAM;MACL,IAAI,CAAC4E,EAAE,CAAC,QAAQ,EAAE,MAAM;QACtB,IAAI,CAAC+D,aAAa,CAAC,CAAC;QACpB,IAAI,CAAC9G,WAAW,CAAC6G,OAAO,CAAC3I,IAAI,EAAEC,OAAO,CAAC;MACzC,CAAC,CAAC;IACJ;IACA,OAAO,IAAI;EACb;EACA2I,aAAaA,CAAA,EAAG;IACd,IAAI,CAAC5C,GAAG,CAACrI,SAAS,CAACkL,eAAe,EAAEjL,WAAW,CAACkL,MAAM,CAAC;IACvD,IAAI,CAAChH,WAAW,CAACiH,IAAI,CAAC,QAAQ,EAAE,MAAM;MACpC,IAAI,CAAC/C,GAAG,CAACrI,SAAS,CAACqL,aAAa,EAAEpL,WAAW,CAACkL,MAAM,CAAC;IACvD,CAAC,CAAC;EACJ;EACAG,KAAKA,CAAChJ,OAAO,EAAE;IACb,MAAM;QACF0E;MACF,CAAC,GAAG1E,OAAO;MACXiJ,IAAI,GAAGlM,wBAAwB,CAACiD,OAAO,EAAE7C,SAAS,CAAC;IACrD;IACA,IAAIuH,MAAM,EAAE;MACVvG,eAAe,CAACuG,MAAM,CAAC,CAACQ,OAAO,CAACgE,IAAI,IAAI;QACtC,MAAMC,kBAAkB,GAAG,IAAI,CAACpE,iBAAiB,CAACqE,gBAAgB,CAAC,CAAC,CAACC,2BAA2B,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;QACzG,IAAIC,kBAAkB,EAAE;UACtBA,kBAAkB,CAAC7D,aAAa,CAAC4D,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C;MACF,CAAC,CAAC;IACJ;IACA;IACA;IACA,IAAID,IAAI,CAACK,WAAW,EAAE;MACpB;MACAL,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACK,WAAW;IAChC;IACA;IACA,IAAIL,IAAI,CAACO,WAAW,EAAE;MACpB;MACAP,IAAI,CAACQ,WAAW,GAAGR,IAAI,CAACO,WAAW;IACrC;;IAEA;IACA,MAAME,SAAS,GAAGT,IAAI;IACtBvF,MAAM,CAACC,IAAI,CAACsF,IAAI,CAAC,CAAC/D,OAAO,CAACrB,GAAG,IAAI;MAC/B;MACA,MAAMgD,MAAM,GAAGoC,IAAI,CAACpF,GAAG,CAAC;MACxB,IAAI8F,KAAK,CAACC,OAAO,CAAC/C,MAAM,CAAC,IAAIA,MAAM,CAAClC,MAAM,KAAK,CAAC,IAAI,CAACnG,QAAQ,CAACqI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAACrI,QAAQ,CAACqI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QAChG6C,SAAS,CAAC7F,GAAG,CAAC,GAAG;UACf4B,KAAK,EAAEoB,MAAM,CAAC,CAAC,CAAC;UAChBgD,KAAK,EAAEhD,MAAM,CAAC,CAAC;QACjB,CAAC;MACH;IACF,CAAC,CAAC;IACF,IAAI,CAACiD,WAAW,CAACJ,SAAS,CAAC;IAC3B,IAAI,CAAChH,iBAAiB,CAACgH,SAAS,CAAC;IACjC,OAAO,IAAI;EACb;;EAEA;EACAI,WAAWA,CAAC9J,OAAO,EAAE;IACnB0D,MAAM,CAACC,IAAI,CAAC3D,OAAO,CAAC,CAACkF,OAAO,CAACrB,GAAG,IAAI;MAClC;MACA;MACA,CAAC,GAAG,IAAI,CAACkG,wBAAwB,EAAE,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAACC,QAAQ,CAACpG,GAAG,CAAC,IAAInF,aAAa,CAACsB,OAAO,CAAC6D,GAAG,CAAC,CAAC,KAAK7D,OAAO,CAAC6D,GAAG,CAAC,CAAC4B,KAAK,IAAIzF,OAAO,CAAC6D,GAAG,CAAC,CAACgG,KAAK,CAAC,IAAI,CAACvL,OAAO,CAAC,IAAI,CAAC4L,oBAAoB,CAACrG,GAAG,CAAC,EAAE7D,OAAO,CAAC6D,GAAG,CAAC,CAAC,CAAC;MAAA,EACtN;QACA,IAAI,CAACqG,oBAAoB,CAACrG,GAAG,CAAC,GAAG7D,OAAO,CAAC6D,GAAG,CAAC;QAC7C,IAAI,CAAC0B,oBAAoB,CAAC1B,GAAG,EAAE7D,OAAO,CAAC6D,GAAG,CAAC,CAAC4B,KAAK,EAAEzF,OAAO,CAAC6D,GAAG,CAAC,CAACgG,KAAK,CAAC;QACtE,IAAI,IAAI,CAACzD,MAAM,EAAE;UACf,IAAI,CAAC9E,SAAS,CAAClB,qBAAqB,GAAG,IAAI;QAC7C;MACF,CAAC,MAAM;QACL;QACA,IAAI,IAAI,CAAC8J,oBAAoB,CAACrG,GAAG,CAAC,EAAE;UAClC,OAAO,IAAI,CAACqG,oBAAoB,CAACrG,GAAG,CAAC,CAAC,CAAC;UACvC,IAAI,CAACvC,SAAS,CAACnB,oBAAoB,GAAG,IAAI;QAC5C;MACF;IACF,CAAC,CAAC;EACJ;EACAqF,KAAKA,CAACC,KAAK,EAAE0E,GAAG,EAAE;IAChB,MAAMC,SAAS,GAAGnN,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAACoN,YAAY,CAAC;IACtD,IAAI5L,QAAQ,CAACgH,KAAK,CAAC,EAAE;MACnB,IAAI,CAAC4E,YAAY,GAAGpN,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAACoN,YAAY,CAAC,EAAE5E,KAAK,CAAC;IAChF,CAAC,MAAM;MACL,IAAI,CAAC4E,YAAY,CAAC5E,KAAK,CAAC,GAAG0E,GAAG;IAChC;IACA,IAAI,IAAI,CAAC7G,qBAAqB,IAAI,CAAChF,OAAO,CAAC8L,SAAS,EAAE,IAAI,CAACC,YAAY,CAAC,EAAE;MACxE,MAAMA,YAAY,GAAG5L,QAAQ,CAACgH,KAAK,CAAC,GAAGA,KAAK,GAAG;QAC7C,CAACA,KAAK,GAAG0E;MACX,CAAC;MACD,IAAI,CAAC7G,qBAAqB,CAACgH,oBAAoB,CAACD,YAAY,CAAC;IAC/D;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACExF,YAAYA,CAAA,EAAG;IACb,IAAI,CAAC0F,SAAS,GAAG,IAAI;IACrB,IAAI,CAAChL,YAAY,CAACyC,QAAQ,CAAC,CAAC;IAC5B,IAAI,CAACuI,SAAS,GAAG,KAAK;EACxB;EACAC,SAASA,CAAA,EAAG,CAAC;EACbC,MAAMA,CAACzK,OAAO,GAAG,CAAC,CAAC,EAAE;IACnB,IAAI,IAAI,CAAC2G,SAAS,EAAE;MAClB;MACA,IAAI,CAACA,SAAS,CAAC8D,MAAM,CAAC,CAAC;MACvB,OAAO,IAAI;IACb;IACA,IAAI,CAAClL,YAAY,CAACoB,gBAAgB,CAAC,IAAI,CAAC;IACxC,IAAI,IAAI,CAAC+J,gBAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnD,OAAO,IAAI;IACb;IACA;IACA,IAAI,CAACC,YAAY,CAAC5K,OAAO,CAAC;IAC1B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACE6K,eAAeA,CAAA,EAAG;IAChB,IAAIC,MAAM,GAAG,IAAI;IACjB,OAAO9N,iBAAiB,CAAC,aAAa;MACpC,IAAI8N,MAAM,CAACJ,gBAAgB,IAAI,CAAC,IAAI,CAACI,MAAM,CAACH,WAAW,EAAE;QACvD;MACF;MACA,IAAIG,MAAM,CAAC/F,iBAAiB,IAAI+F,MAAM,CAAC/F,iBAAiB,CAACgG,aAAa,CAAC,CAAC,EAAE;QACxE;QACA,MAAMD,MAAM,CAAC/F,iBAAiB,CAAC0F,MAAM,CAAC,CAAC;MACzC,CAAC,MAAM;QACLK,MAAM,CAACF,YAAY,CAAC,CAAC;MACvB;IACF,CAAC,CAAC,CAAC,CAAC;EACN;EACAI,MAAMA,CAAChL,OAAO,EAAE;IACd,MAAMiL,YAAY,GAAG,CAAC,CAAC;IACvBA,YAAY,CAACC,eAAe,GAAGzM,QAAQ,CAACuB,OAAO,CAAC,GAAG,IAAI,GAAGA,OAAO;IACjE,IAAIvB,QAAQ,CAACuB,OAAO,CAAC,EAAE;MACrBiL,YAAY,CAACC,eAAe,GAAG,IAAI;MACnC,IAAIlL,OAAO,CAAC2H,KAAK,EAAE;QACjBsD,YAAY,CAACE,cAAc,GAAGnL,OAAO,CAAC2H,KAAK;MAC7C;MACA,IAAI3H,OAAO,CAACoL,GAAG,EAAE;QACfH,YAAY,CAACI,SAAS,GAAGrL,OAAO,CAACoL,GAAG;MACtC;IACF,CAAC,MAAM;MACLH,YAAY,CAACC,eAAe,GAAG,CAAC,CAAClL,OAAO;IAC1C;IACA,IAAI,CAAC0C,iBAAiB,CAACuI,YAAY,CAAC;IACpC,OAAO,IAAI;EACb;EACAK,SAASA,CAACpJ,EAAE,EAAElC,OAAO,EAAE;IACrB,IAAIvB,QAAQ,CAACyD,EAAE,CAAC,EAAE;MAChB,MAAM;QACJqJ,CAAC,GAAG,CAAC;QACLC,CAAC,GAAG;MACN,CAAC,GAAGtJ,EAAE;MACN,IAAI,CAACQ,iBAAiB,CAAC;QACrByI,cAAc,EAAE1M,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAAC2H,KAAK,GAAG,IAAI,CAACnG,cAAc,CAAC,CAAC,CAAC2J,cAAc;QACxFE,SAAS,EAAE5M,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAACoL,GAAG,GAAG,IAAI,CAAC5J,cAAc,CAAC,CAAC,CAAC6J;MACrE,CAAC,CAAC;MACF,IAAI,CAACI,IAAI,CAAC;QACRF,CAAC;QACDC;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAAC9I,iBAAiB,CAAC;QACrBgJ,eAAe,EAAExJ,EAAE;QACnBiJ,cAAc,EAAE1M,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAAC2H,KAAK,GAAG,IAAI,CAACnG,cAAc,CAAC,CAAC,CAAC2J,cAAc;QACxFE,SAAS,EAAE5M,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAACoL,GAAG,GAAG,IAAI,CAAC5J,cAAc,CAAC,CAAC,CAAC6J;MACrE,CAAC,CAAC;MACF,IAAI,CAACpF,KAAK,CAAClF,eAAe,CAACwF,IAAI,CAAC1I,kBAAkB,CAACqE,EAAE,CAAC;MACtD;MAAA,CACCyJ,IAAI,CAAC,MAAM;QACV5J,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,QAAQ,CAAC,CAAC;QACjB,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,CAAC;IACJ;EACF;EACA4J,MAAMA,CAACC,MAAM,EAAE;IACb,MAAMZ,YAAY,GAAG,CAAC,CAAC;IACvBA,YAAY,CAACa,YAAY,GAAGrN,QAAQ,CAACoN,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;IAC5D,IAAIpN,QAAQ,CAACoN,MAAM,CAAC,EAAE;MACpBZ,YAAY,CAACa,YAAY,GAAG,IAAI;MAChC,IAAID,MAAM,CAAClE,KAAK,EAAE;QAChBsD,YAAY,CAACc,WAAW,GAAGF,MAAM,CAAClE,KAAK;MACzC;MACA,IAAIkE,MAAM,CAACT,GAAG,EAAE;QACdH,YAAY,CAACe,SAAS,GAAGH,MAAM,CAACT,GAAG;MACrC;IACF,CAAC,MAAM;MACLH,YAAY,CAACa,YAAY,GAAG,CAAC,CAACD,MAAM;IACtC;IACA,IAAI,CAACnJ,iBAAiB,CAACuI,YAAY,CAAC;IACpC,OAAO,IAAI;EACb;EACAgB,SAASA,CAAC/J,EAAE,EAAElC,OAAO,EAAE;IACrB,IAAIvB,QAAQ,CAACyD,EAAE,CAAC,EAAE;MAChB,MAAM;QACJqJ,CAAC,GAAG,CAAC;QACLC,CAAC,GAAG;MACN,CAAC,GAAGtJ,EAAE;MACN,IAAI,CAACQ,iBAAiB,CAAC;QACrBqJ,WAAW,EAAEtN,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAAC2H,KAAK,GAAG,IAAI,CAACnG,cAAc,CAAC,CAAC,CAACuK,WAAW;QAClFC,SAAS,EAAEvN,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAACoL,GAAG,GAAG,IAAI,CAAC5J,cAAc,CAAC,CAAC,CAACwK;MACrE,CAAC,CAAC;MACF,IAAI,CAACP,IAAI,CAAC;QACRF,CAAC;QACDC;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAAC9I,iBAAiB,CAAC;QACrBgJ,eAAe,EAAExJ,EAAE;QACnB6J,WAAW,EAAEtN,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAAC2H,KAAK,GAAG,IAAI,CAACnG,cAAc,CAAC,CAAC,CAACuK,WAAW;QAClFC,SAAS,EAAEvN,QAAQ,CAACuB,OAAO,CAAC,GAAGA,OAAO,CAACoL,GAAG,GAAG,IAAI,CAAC5J,cAAc,CAAC,CAAC,CAACwK;MACrE,CAAC,CAAC;MACF,IAAI,CAAC/F,KAAK,CAAChF,YAAY,CAACsF,IAAI,CAAC1I,kBAAkB,CAACqE,EAAE,CAAC;MACnD;MAAA,CACCyJ,IAAI,CAAC,MAAM;QACV5J,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,QAAQ,CAAC,CAAC;QACjB,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,CAAC;IACJ;EACF;EACAkK,QAAQA,CAAChM,IAAI,EAAE;IACb,IAAI,CAACwC,iBAAiB,CAAC;MACrByJ,KAAK,EAAEjM;IACT,CAAC,CAAC;IACF;IACA,IAAI,CAAC8B,QAAQ,CAAC,CAAC;IACf,OAAO,IAAI;EACb;EACAoK,IAAIA,CAAA,EAAG;IACL,IAAI,CAAC1J,iBAAiB,CAAC;MACrB2J,OAAO,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACrK,QAAQ,CAAC,CAAC;IACf,IAAI,CAACqE,IAAI,CAAC,MAAM,CAAC;IACjB,OAAO,IAAI;EACb;EACAiG,IAAIA,CAAA,EAAG;IACL,IAAI,CAAC5J,iBAAiB,CAAC;MACrB2J,OAAO,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACrK,QAAQ,CAAC,CAAC;IACf,IAAI,CAACqE,IAAI,CAAC,MAAM,CAAC;IACjB,OAAO,IAAI;EACb;EACAkG,QAAQA,CAACC,KAAK,EAAE;IACd,IAAI,CAACrK,MAAM,GAAGqK,KAAK;IACnB,IAAI,CAACjN,YAAY,CAACkN,qBAAqB,CAAC,CAAC;IACzC,IAAI,CAAClN,YAAY,CAACsF,YAAY,CAAC,CAAC;IAChC,OAAO,IAAI;EACb;EACA6H,gBAAgBA,CAACxK,EAAE,EAAE;IACnB,IAAI,CAACyK,aAAa,GAAGzK,EAAE;EACzB;EACA0K,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACD,aAAa;EAC3B;EACAE,oBAAoBA,CAAC3K,EAAE,EAAE;IACvB,IAAI,CAAC4K,iBAAiB,GAAG5K,EAAE;EAC7B;EACA6K,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACD,iBAAiB;EAC/B;EACAE,SAASA,CAAA,EAAG;IACV,MAAMC,IAAI,GAAG,IAAI,CAACvN,UAAU,CAACwN,OAAO,CAAC,CAAC;IACtC,MAAM;MACJb,OAAO;MACPc,OAAO,GAAG,CAACC,QAAQ;MACnBC,OAAO,GAAGD;IACZ,CAAC,GAAG,IAAI,CAAC5L,cAAc,CAAC,CAAC;IACzB,OAAO,CAAC,CAAC6K,OAAO,IAAIY,IAAI,IAAIE,OAAO,IAAIF,IAAI,GAAGI,OAAO;EACvD;EACAC,YAAYA,CAACC,eAAe,EAAEC,aAAa,EAAE;IAC3C,IAAI,CAAC9K,iBAAiB,CAAC;MACrB+B,uBAAuB,EAAE8I;IAC3B,CAAC,CAAC;IACF,IAAIC,aAAa,EAAE;MACjB,IAAI,CAAC9K,iBAAiB,CAAC;QACrBgC,MAAM,EAAE8I;MACV,CAAC,CAAC;IACJ;IACA,IAAID,eAAe,EAAE;MACnB,MAAM;QACJ7I,MAAM,GAAG;MACX,CAAC,GAAG,IAAI,CAAClD,cAAc,CAAC,CAAC;MACzB,IAAI,CAACuD,iBAAiB,GAAG7G,uBAAuB,CAAC,IAAI,EAAEwG,MAAM,EAAE,IAAI,CAACI,yBAAyB,EAAE,IAAI,CAAClF,iBAAiB,CAAC;MACtH,IAAI,CAACmF,iBAAiB,CAAC0I,aAAa,CAAC,IAAI,CAAC;MAC1C,MAAM;QACJC,KAAK;QACLC;MACF,CAAC,GAAG,IAAI,CAACrO,eAAe,CAACsO,eAAe,CAAC,CAAC;MAC1C,IAAI,CAAC7I,iBAAiB,CAAC8I,MAAM,CAACH,KAAK,EAAEC,MAAM,CAAC;IAC9C;IACA,OAAO,IAAI;EACb;EACAG,UAAUA,CAACX,OAAO,EAAE;IAClB,IAAI,CAACzK,iBAAiB,CAAC;MACrByK;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAY,UAAUA,CAAA,EAAG;IACX,MAAM;MACJZ;IACF,CAAC,GAAG,IAAI,CAAC3L,cAAc,CAAC,CAAC;IACzB,OAAO2L,OAAO;EAChB;EACAa,UAAUA,CAAA,EAAG;IACX,MAAM;MACJX;IACF,CAAC,GAAG,IAAI,CAAC7L,cAAc,CAAC,CAAC;IACzB,OAAO6L,OAAO;EAChB;EACAY,GAAGA,CAAChM,IAAI,EAAE;IACR,MAAMkI,GAAG,GAAG,IAAI,CAAC3I,cAAc,CAAC,CAAC;IACjC;IACA,OAAO2I,GAAG,CAAClI,IAAI,CAAC;EAClB;EACAiM,UAAUA,CAACb,OAAO,EAAE;IAClB,IAAI,CAAC3K,iBAAiB,CAAC;MACrB2K;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAc,UAAUA,CAAC1M,OAAO,EAAE;IAClB,IAAI,CAACiB,iBAAiB,CAAC;MACrBjB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEC,SAASA,CAACC,gBAAgB,EAAE;IAC1B,IAAI,CAAC,IAAI,CAACyE,MAAM,EAAE;MAChB,IAAI,CAAC1D,iBAAiB,CAAC;QACrBjB,OAAO,EAAE;MACX,CAAC,CAAC;MACF,OAAO,IAAI;IACb;IACA,MAAM6G,MAAM,GAAG,IAAI,CAAC8F,SAAS,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG/F,MAAM,CAAC+F,MAAM;IAC5B,MAAMC,OAAO,GAAGD,MAAM,CAACE,IAAI,CAACC,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACF,CAAC,CAAC,KAAKpB,QAAQ,CAAC;IAC1D,IAAIkB,OAAO,EAAE;MACX,OAAO,IAAI;IACb;IACA,IAAI,CAAC5O,UAAU,CAACgC,SAAS,CAAC,CAAC,CAAC2M,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE1M,gBAAgB,CAAC;IAC7F,OAAO,IAAI;EACb;EACAyB,OAAOA,CAACuL,OAAO,GAAG,IAAI,EAAE;IACtB,IAAIC,gBAAgB,EAAEC,qBAAqB,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,mBAAmB;IACpG,IAAI,IAAI,CAACC,WAAW,EAAE;MACpB;IACF;;IAEA;IACA,CAACL,gBAAgB,GAAG,IAAI,CAACM,UAAU,MAAM,IAAI,IAAIN,gBAAgB,KAAK,KAAK,CAAC,IAAIA,gBAAgB,CAACO,cAAc,CAACjK,OAAO,CAACkK,MAAM,IAAI;MAChIA,MAAM,CAAChM,OAAO,CAAC,CAAC;IAClB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACiM,aAAa,CAACzL,GAAG,CAAC0L,KAAK,IAAIA,KAAK,CAAClM,OAAO,CAAC,KAAK,CAAC,CAAC;IACrD,IAAI,CAACiM,aAAa,GAAG,EAAE;;IAEvB;IACA,MAAM;MACJE;IACF,CAAC,GAAG,IAAI,CAAC/N,cAAc,CAAC,CAAC;IACzB,IAAI+N,SAAS,EAAE;MACb,IAAI,CAAClN,KAAK,CAACuB,GAAG,CAAC4L,IAAI,IAAIA,IAAI,CAACpM,OAAO,CAAC,KAAK,CAAC,CAAC;MAC3C,IAAI,CAACf,KAAK,GAAG,EAAE;IACjB;IACA,IAAI,CAAC4D,KAAK,CAAC9E,aAAa,CAACoF,IAAI,CAAC,CAAC;IAC/B;IACA,IAAI,CAAC1E,WAAW,CAAC4N,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACC,WAAW,CAAC;IAChD,CAACb,qBAAqB,GAAG,IAAI,CAAC9J,iBAAiB,MAAM,IAAI,IAAI8J,qBAAqB,KAAK,KAAK,CAAC,IAAIA,qBAAqB,CAACzL,OAAO,CAAC,CAAC;IAChI,IAAI,CAAC0C,cAAc,CAAC1C,OAAO,CAAC,CAAC;;IAE7B;IACA,IAAI,CAACE,qBAAqB,CAACqM,kBAAkB,CAAC,CAAC;;IAE/C;;IAEA,IAAI,CAAC1J,KAAK,CAAC7E,YAAY,CAACmF,IAAI,CAAC,CAAC;IAC9B;IACA,CAACuI,iBAAiB,GAAG,IAAI,CAACI,UAAU,MAAM,IAAI,IAAIJ,iBAAiB,KAAK,KAAK,CAAC,IAAIA,iBAAiB,CAACc,WAAW,CAACjB,OAAO,CAAC;IACxH,CAACI,eAAe,GAAG,IAAI,CAACpI,SAAS,MAAM,IAAI,IAAIoI,eAAe,KAAK,KAAK,CAAC,IAAIA,eAAe,CAAC3L,OAAO,CAAC,CAAC;IACtG,IAAI,CAAC6D,MAAM,GAAG,EAAE;IAChB;IACA,CAAC+H,mBAAmB,GAAG,IAAI,CAACxP,YAAY,MAAM,IAAI,IAAIwP,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAACa,SAAS,CAAC,IAAI,CAAC3N,EAAE,CAAC;IAC9H,IAAI,CAACmE,IAAI,CAAC,QAAQ,EAAE;MAClBC,MAAM,EAAE,IAAI;MACZpG,IAAI,EAAE;IACR,CAAC,CAAC;IACF,IAAI,CAACmG,IAAI,CAAC,SAAS,EAAE;MACnBC,MAAM,EAAE,IAAI;MACZpG,IAAI,EAAE;IACR,CAAC,CAAC;IACF,IAAI,CAAC4P,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACb,WAAW,GAAG,IAAI;EACzB;EACAc,KAAKA,CAAA,EAAG;IACN,IAAI,CAACzM,qBAAqB,CAACqM,kBAAkB,CAAC,CAAC;IAC/C;EACF;EACAC,WAAWA,CAAA,EAAG;IACZ,IAAII,iBAAiB;IACrB,IAAI,CAAC/I,MAAM,CAAC/B,OAAO,CAAC+K,KAAK,IAAIA,KAAK,CAAC7M,OAAO,CAAC,CAAC,CAAC;IAC7C,CAAC4M,iBAAiB,GAAG,IAAI,CAACd,UAAU,MAAM,IAAI,IAAIc,iBAAiB,KAAK,KAAK,CAAC,IAAIA,iBAAiB,CAACJ,WAAW,CAAC,CAAC;IACjH,IAAI,CAAC3I,MAAM,GAAG,EAAE;EAClB;EACAiJ,OAAOA,CAAA,EAAG;IACR,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC5M,qBAAqB,CAAC6M,uBAAuB,CAAC,CAAC,IAAI,EAAE,EAAEpI,MAAM,CAACqI,SAAS,IAAIA,SAAS,CAACC,WAAW,IAAID,SAAS,CAACE,aAAa,IAAIF,SAAS,CAACG,sBAAsB,CAAC,CAAC5L,MAAM;EACxL;EACA;EACA4D,SAASA,CAACD,MAAM,EAAE;IAChB;IACA,IAAI,IAAI,CAACzG,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC4N,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACC,WAAW,CAAC;IAClD;IACA,IAAI,CAAC7N,WAAW,GAAGyG,MAAM;IACzB,IAAI,CAACG,WAAW,GAAG,CAAC;;IAEpB;IACA,IAAI,IAAI,CAACrC,MAAM,IAAI,IAAI,CAACvE,WAAW,CAAC2O,OAAO,EAAE;MAC3C,MAAMvD,IAAI,GAAG,IAAI,CAACvN,UAAU,CAACwN,OAAO,CAAC,CAAC;MACtC,IAAI,CAACrL,WAAW,CAAC4O,iBAAiB,CAACxD,IAAI,CAAC;IAC1C;IACA,IAAI,IAAI,CAACpL,WAAW,CAACuE,MAAM,EAAE;MAC3B,IAAI,CAACsJ,WAAW,CAAC,CAAC;IACpB;IACA;IACA,IAAI,CAAC7N,WAAW,CAAC+C,EAAE,CAAC,QAAQ,EAAE,CAAC;MAC7B1E;IACF,CAAC,KAAK;MACJ,IAAI,IAAI,CAACwQ,WAAW,KAAK/K,SAAS,EAAE;QAClC,MAAMgL,WAAW,GAAG,IAAI,CAAC9O,WAAW,CAAC+O,MAAM;QAC3C,IAAI,CAACF,WAAW,GAAGC,WAAW;MAChC;MACA,IAAIzQ,IAAI,KAAK,QAAQ,EAAE;QACrB,IAAI,IAAI,CAACyG,SAAS,EAAE;UAClB;UACA,IAAI,CAACA,SAAS,CAACkK,MAAM,CAAC,CAAC;UACvB;QACF;QACA;QACA,IAAI,CAACnB,WAAW,CAAC,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;EACAtB,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACvM,WAAW;EACzB;EACAiP,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACzG,YAAY;EAC1B;EACA0G,cAAcA,CAACC,WAAW,EAAE;IAC1B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACtG,gBAAgB,GAAGsG,WAAW,CAACrM,MAAM;EAC5C;EACAsM,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACD,WAAW;EACzB;EACAE,QAAQA,CAACjP,IAAI,EAAE;IACb,OAAO,IAAI,CAACqB,qBAAqB,CAAC6N,sBAAsB,CAAClP,IAAI,CAAC;EAChE;EACAmP,SAASA,CAACnP,IAAI,EAAE;IACd,IAAIoP,gBAAgB,EAAEC,QAAQ,EAAEC,iBAAiB;IACjD,MAAMnB,SAAS,GAAG,IAAI,CAAC9M,qBAAqB,CAACC,sBAAsB,CAACtB,IAAI,CAAC;IACzE,MAAMuP,MAAM,GAAG,CAACpB,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,IAAI,CAACiB,gBAAgB,GAAGjB,SAAS,CAAC5K,KAAK,MAAM,IAAI,IAAI6L,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACI,OAAO,KAAK,EAAE;IACrL,OAAO;MACLvR,IAAI,EAAE,CAACoR,QAAQ,GAAGE,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIF,QAAQ,KAAK,KAAK,CAAC,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAACzF,MAAM,MAAM,IAAI,IAAIyF,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACpR,IAAI;MACrJuF,KAAK,EAAE2K,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,IAAI,CAACmB,iBAAiB,GAAGnB,SAAS,CAAC5K,KAAK,MAAM,IAAI,IAAI+L,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAC9L,KAAK;MACtKiM,KAAK,EAAE,IAAI,CAACC,cAAc,CAAC1P,IAAI;IACjC,CAAC;EACH;EACA0P,cAAcA,CAAC1P,IAAI,EAAE;IACnB,MAAMuD,KAAK,GAAG,IAAI,CAAClC,qBAAqB,CAAC6N,sBAAsB,CAAClP,IAAI,CAAC;IACrE;IACA,IAAI,CAACuD,KAAK,EAAE;MACV,OAAO,EAAE;IACX;IACA,IAAIA,KAAK,CAACoM,YAAY,EAAE;MACtB;MACA,MAAMF,KAAK,GAAGlM,KAAK,CAACqM,KAAK,CAAC,CAAC,CAACjO,GAAG,CAACkO,IAAI,IAAI;QACtC,OAAO;UACLjI,KAAK,EAAErE,KAAK,CAACoM,YAAY,CAACE,IAAI,CAAC;UAC/B,CAAC7P,IAAI,GAAG6P;QACV,CAAC;MACH,CAAC,CAAC;MACF,OAAOJ,KAAK;IACd,CAAC,MAAM,IAAIlM,KAAK,CAACuM,KAAK,EAAE;MACtB;MACA,MAAML,KAAK,GAAGlM,KAAK,CAACuM,KAAK,CAAC,CAAC,CAACnO,GAAG,CAACkO,IAAI,IAAI;QACtC,OAAO;UACLjI,KAAK,EAAEiI,IAAI;UACX,CAAC7P,IAAI,GAAGuD,KAAK,CAACsM,IAAI;QACpB,CAAC;MACH,CAAC,CAAC;MACF,OAAOJ,KAAK;IACd,CAAC,MAAM,IAAIlM,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,IAAIA,KAAK,CAACwM,MAAM,EAAE;MAC7D;MACA,MAAMN,KAAK,GAAGlM,KAAK,CAACwM,MAAM,CAAC,CAAC,CAACjK,MAAM,CAAC+J,IAAI,IAAI,CAACnT,WAAW,CAACmT,IAAI,CAAC,CAAC,CAAClO,GAAG,CAACkO,IAAI,IAAI;QAC1E,OAAO;UACLjI,KAAK,EAAEiI,IAAI;UACX,CAAC7P,IAAI,GAAGuD,KAAK,CAACsM,IAAI;QACpB,CAAC;MACH,CAAC,CAAC;MACF,OAAOJ,KAAK;IACd;IACA,OAAO,EAAE;EACX;EACAjG,IAAIA,CAAC;IACHF,CAAC;IACDC;EACF,CAAC,EAAE;IACD,IAAI,CAAC/L,kBAAkB,CAACwS,YAAY,CAAC;MACnC1G,CAAC;MACDC;IACF,CAAC,CAAC;EACJ;EACA0G,SAASA,CAACC,GAAG,EAAEC,EAAE,EAAE;IACjB,IAAI,CAAC/S,cAAc,CAACgT,YAAY,CAAC,IAAI,EAAEF,GAAG,EAAEC,EAAE,CAAC;EACjD;EACAE,eAAeA,CAACtS,OAAO,EAAE;IACvB,IAAIuS,MAAM,GAAG,IAAI;IACjB,OAAOvV,iBAAiB,CAAC,aAAa;MACpC,MAAM;UACFwV,UAAU;UACVC,YAAY;UACZC,cAAc;UACdC,OAAO;UACPC,MAAM;UACNC,aAAa;UACbC,WAAW;UACXC,cAAc,GAAG;QACnB,CAAC,GAAG/S,OAAO;QACXiJ,IAAI,GAAGlM,wBAAwB,CAACiD,OAAO,EAAE5C,UAAU,CAAC;MACtDmV,MAAM,CAACzT,mBAAmB,CAACkU,cAAc,CAACR,UAAU,EAAE;QACpDS,EAAE,EAAER,YAAY;QAChBS,EAAE,EAAER,cAAc;QAClBC,OAAO;QACPC;MACF,CAAC,CAAC;MACF,MAAM;QACJK,EAAE;QACFC,EAAE;QACFC;MACF,CAAC,GAAGZ,MAAM,CAACzT,mBAAmB,CAACsU,SAAS,CAACZ,UAAU,CAAC;MACpD,MAAM;QACJa;MACF,CAAC,GAAGd,MAAM,CAACjT,eAAe;MAC1B,OAAO,IAAIgU,OAAO,CAACC,OAAO,IAAI;QAC5B,MAAM;UACJxM,UAAU;UACVC,QAAQ;UACRwM;QACF,CAAC,GAAGjB,MAAM,CAACjP,qBAAqB,CAACmQ,0BAA0B,CAAClB,MAAM,CAACvB,WAAW,EAAE6B,aAAa,EAAEC,WAAW,EAAEP,MAAM,CAAC;QACnH,MAAMpD,cAAc,GAAG,CAAC,GAAGoD,MAAM,CAACrD,UAAU,CAACC,cAAc,EAAE,GAAGoD,MAAM,CAACjT,eAAe,CAAC6P,cAAc,CAAC;QACtG,IAAI4D,cAAc,EAAE;UAClB5D,cAAc,CAAC1M,IAAI,CAAC8P,MAAM,CAACmB,uBAAuB,CAAC,CAAC,CAAC;QACvD;QACA,MAAMC,YAAY,GAAG1W,aAAa,CAAC;UACjC8J,UAAU;UACVoM,QAAQ;UACRD,EAAE;UACFD,EAAE;UACFjM,QAAQ;UACRmF,KAAK,EAAElO,UAAU,CAACR,SAAS,CAACmW,MAAM,CAAC;UACnCzE,cAAc;UACd0E,QAAQ,EAAEtB,MAAM,CAACrD,UAAU,CAAC2E;QAC9B,CAAC,EAAE5K,IAAI,CAAC;QACR,IAAIuK,KAAK,EAAE;UACTG,YAAY,CAACH,KAAK,GAAGA,KAAK;QAC5B;QACA,MAAMtM,CAAC,GAAGmM,WAAW,CAACM,YAAY,CAAC;QACnCJ,OAAO,CAACrM,CAAC,CAAC;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;EACN;EACA4M,gBAAgBA,CAAC9T,OAAO,EAAE;IACxB,MAAM;MACJ6S;IACF,CAAC,GAAG7S,OAAO;IACX;IACA,MAAM;MACJ+G;IACF,CAAC,GAAG,IAAI,CAACzD,qBAAqB,CAACwQ,gBAAgB,CAAC,IAAI,CAAC9C,WAAW,EAAE6B,aAAa,CAAC;IAChF,OAAO9L,UAAU;EACnB;EACAgN,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACxU,YAAY,CAACyU,KAAK,CAACC,QAAQ,CAAC,CAAC;EAC3C;EACAC,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAAC5U,YAAY,CAACyU,KAAK,CAACI,cAAc,CAAC,CAAC;EAClE;EACAC,WAAWA,CAAA,EAAG;IACZ,IAAI,IAAI,CAAC3M,aAAa,EAAE;MACtB,IAAI,CAACnI,YAAY,CAAC8U,WAAW,CAAC,CAAC;MAC/B,IAAI,CAAC3M,aAAa,GAAG,KAAK;MAC1B,IAAI,CAAChF,iBAAiB,CAAC;QACrB8E,aAAa,EAAE;UACbnG,MAAM,EAAE;QACV;MACF,CAAC,CAAC;IACJ;EACF;EACAiT,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAAC/U,YAAY,CAACyU,KAAK,CAACI,cAAc,CAAC,CAAC,GAAG,IAAI,CAACD,gBAAgB;EACzE;EACAI,QAAQA,CAACrU,IAAI,EAAE;IACb,MAAM;MACJgL,eAAe,GAAG,IAAI;MACtBY,YAAY,GAAG;IACjB,CAAC,GAAG,IAAI,CAACtK,cAAc,CAAC,CAAC;IACzB;IACA,IAAIgT,MAAM,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC3R,OAAO,CAAC5C,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAACuU,UAAU,CAAC,CAAC,CAAC3R,OAAO,CAAC,IAAI,GAAG5C,IAAI,CAAC,KAAK,CAAC,CAAC;IACpG,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,UAAU,KAAK4L,YAAY,EAAE;MAC7D0I,MAAM,GAAG,IAAI;IACf;IACA,IAAItU,IAAI,KAAK,WAAW,KAAKgL,eAAe,IAAI,IAAI,CAACuJ,UAAU,CAAC,CAAC,CAAC3R,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC2R,UAAU,CAAC,CAAC,CAAC3R,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC2R,UAAU,CAAC,CAAC,CAAC3R,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;MAClM0R,MAAM,GAAG,IAAI;IACf;IACA,OAAO,IAAI,CAACxH,SAAS,CAAC,CAAC,IAAIwH,MAAM;EACnC;EACAE,WAAWA,CAAA,EAAG;IACZ,OAAO1X,iBAAiB,CAAC,aAAa;MACpC,MAAM,IAAI2X,KAAK,CAAC,yBAAyB,CAAC;IAC5C,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,aAAaA,CAAA,EAAG;IACd,IAAIC,MAAM,GAAG,IAAI;IACjB,OAAO7X,iBAAiB,CAAC,aAAa;MACpC,MAAM6X,MAAM,CAACH,WAAW,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;EACN;EACAI,aAAaA,CAAC/P,iBAAiB,EAAE;IAC/B,OAAO/H,iBAAiB,CAAC,aAAa;MACpC,MAAM+H,iBAAiB,CAAC0F,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,CAAC;EACN;EACAG,YAAYA,CAAC5K,OAAO,GAAG,CAAC,CAAC,EAAE;IACzB;IACA,IAAI,IAAI,CAAC0K,gBAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnD;MACA,IAAI,CAACiF,WAAW,CAAC,CAAC;MAClB,OAAO,IAAI;IACb;IACA,IAAI,CAAC3J,KAAK,CAACvF,YAAY,CAAC6F,IAAI,CAAC,CAAC;IAC9B,IAAI,CAACU,MAAM,CAAC/B,OAAO,CAAC+K,KAAK,IAAI;MAC3BA,KAAK,CAAC8E,IAAI,CAAC;QACT5B,QAAQ,EAAE,IAAI,CAACjE,UAAU,CAAC8F,YAAY,CAAC,CAAC;QACxC7I,KAAK,EAAE,IAAI,CAAC+C,UAAU,CAAC+F,QAAQ,CAAC,CAAC;QACjCC,OAAO,EAAE,IAAI,CAAChG,UAAU,CAACiG,UAAU,CAACnV,OAAO,CAAC;QAC5C6T,QAAQ,EAAE,IAAI,CAAC3E,UAAU,CAAC2E;MAC5B,CAAC,EAAE,CAAC7T,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACoV,MAAM,KAAK,KAAK,CAAC;IACjF,CAAC,CAAC;IACF,IAAI,CAACnP,KAAK,CAACrF,WAAW,CAAC2F,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI;EACb;EACAhB,oBAAoBA,CAACrF,IAAI,EAAEuF,KAAK,EAAEoB,MAAM,EAAEvB,aAAa,EAAE;IACvD;IACA,MAAM+P,YAAY,GAAG,IAAI,CAAC7R,aAAa,CAAC8R,kBAAkB,CAAC,IAAI,CAACpT,EAAE,CAAC,IAAI,CAAC,CAAC;IACzE;IACA,IAAI5D,OAAO,CAAC+W,YAAY,CAACnV,IAAI,CAAC,EAAE;MAC9BuF,KAAK;MACLoB;IACF,CAAC,CAAC,EAAE;MACF;MACA,OAAO,KAAK;IACd;;IAEA;IACA,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC/D,OAAO,CAAC5C,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MAC3F,IAAI,CAACsD,aAAa,CAAC+R,kBAAkB,CAAC,IAAI,CAACrT,EAAE,EAAE;QAC7C,CAAChC,IAAI,GAAG;UACNuF,KAAK;UACLoB;QACF;MACF,CAAC,CAAC;IACJ;IACA,IAAI,CAAC,IAAI,CAAC/C,SAAS,EAAE;MACnB;MACA,IAAI,CAACmB,sBAAsB,CAACxC,IAAI,CAAC;QAC/B0C,aAAa,EAAEjF,IAAI;QACnBkF,cAAc,EAAEK,KAAK;QACrBJ,eAAe,EAAEwB,MAAM;QACvBvB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAAChC,qBAAqB,CAACiC,oBAAoB,CAACrF,IAAI,EAAE;QACpD;QACAsF,KAAK,EAAEvI,aAAa,CAAC;UACnBwI;QACF,CAAC,EAAE,IAAI,CAACC,iCAAiC;QACzC;QACAmB,MAAM;QACN;QACA,IAAI,CAACrF,cAAc,CAAC,CAAC,CAACiE,KAAK,CAAC,CAAC;MAC/B,CAAC;MACD;MACAH,aAAa,CAAC;IAChB;IACA,OAAO,IAAI;EACb;EACAkQ,uBAAuBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAAChS,aAAa,CAAC8R,kBAAkB,CAAC,IAAI,CAACpT,EAAE,CAAC;EACvD;EACAuT,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAClW,YAAY,CAACkW,iBAAiB,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;EACE;EACAC,YAAYA,CAACC,IAAI,EAAE;IACjBvO,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC;EAC1B;;EAEA;EACA;EACAuO,WAAWA,CAACC,UAAU,EAAE;IACtB,OAAOA,UAAU;EACnB;EACAC,YAAYA,CAAA,EAAG;IACb,MAAM,IAAInB,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAoB,gBAAgBA,CAAA,EAAG;IACjB,OAAO,CAAC,CAAC;EACX;EACAC,eAAeA,CAAA,EAAG;IAChB,IAAIC,MAAM,GAAG,IAAI;IACjB,OAAOjZ,iBAAiB,CAAC,aAAa;MACpCiZ,MAAM,CAAChP,MAAM,CAAC/B,OAAO,CAAC+K,KAAK,IAAIA,KAAK,CAAC7M,OAAO,CAAC,CAAC,CAAC;MAC/C6S,MAAM,CAAChP,MAAM,GAAG,EAAE;MAClBgP,MAAM,CAAC9G,cAAc,CAACjK,OAAO,CAACkK,MAAM,IAAI;QACtCA,MAAM,CAAChM,OAAO,CAAC,CAAC;MAClB,CAAC,CAAC;MACF6S,MAAM,CAAC9G,cAAc,GAAG,EAAE;;MAE1B;MACA,MAAM+G,eAAe,GAAGD,MAAM,CAAC3W,eAAe,CAAC6W,YAAY,CAAC;QAC1DpW,IAAI,EAAE,IAAIqW,YAAY,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QAClCC,KAAK,EAAE,IAAI;QACXnO,KAAK,EAAE;MACT,CAAC,CAAC;MACF8N,MAAM,CAAC9G,cAAc,CAAC1M,IAAI,CAACyT,eAAe,CAAC;MAC3CD,MAAM,CAAChP,MAAM,GAAG,MAAMgP,MAAM,CAAC/G,UAAU,CAACqH,UAAU,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC,CAAC;EACN;EACA7C,uBAAuBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACvE,cAAc,CAAC,CAAC,CAAC;EAC/B;EACAnN,QAAQA,CAAA,EAAG;IACT,IAAI,IAAI,CAACoE,MAAM,EAAE;MACf,IAAI,CAAC7G,YAAY,CAACyC,QAAQ,CAAC,CAAC;IAC9B;EACF;EACA0D,iCAAiCA,CAAC8Q;EAClC;EAAA,EACE;IACA,OAAO;MACL3P,MAAM,EAAEtI,UAAU,CAACiY,gBAAgB,CAAC,GAAG7Q,SAAS,GAAG6Q,gBAAgB;MACnEC,QAAQ,EAAElY,UAAU,CAACiY,gBAAgB,CAAC,GAAGA,gBAAgB,GAAG7Q;IAC9D,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}