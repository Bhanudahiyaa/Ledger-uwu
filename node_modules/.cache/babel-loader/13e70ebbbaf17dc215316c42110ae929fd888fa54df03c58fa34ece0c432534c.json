{"ast":null,"code":"// src/env.ts\nfunction isImageBitmap(image) {\n  return typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap;\n}\nfunction isWorker() {\n  return typeof importScripts === \"function\";\n}\nvar getReferrer = isWorker() ? () => self.worker && self.worker.referrer : () => (window.location.protocol === \"blob:\" ? window.parent : window).location.href;\nvar userAgent = navigator == null ? void 0 : navigator.userAgent;\nvar isiOS = !!userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\nvar isAndroid = userAgent.indexOf(\"Android\") > -1 || userAgent.indexOf(\"Adr\") > -1;\nfunction isPC() {\n  const userAgentInfo = userAgent;\n  const Agents = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\n  let flag = true;\n  for (const v of Agents) {\n    if (userAgentInfo.indexOf(v) > 0) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\nexport { getReferrer, isAndroid, isImageBitmap, isPC, isWorker, isiOS };","map":{"version":3,"names":["isImageBitmap","image","ImageBitmap","isWorker","importScripts","getReferrer","self","worker","referrer","window","location","protocol","parent","href","userAgent","navigator","isiOS","match","isAndroid","indexOf","isPC","userAgentInfo","Agents","flag","v"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-utils/es/env.js"],"sourcesContent":["// src/env.ts\nfunction isImageBitmap(image) {\n  return typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap;\n}\nfunction isWorker() {\n  return typeof importScripts === \"function\";\n}\nvar getReferrer = isWorker() ? () => self.worker && self.worker.referrer : () => (window.location.protocol === \"blob:\" ? window.parent : window).location.href;\nvar userAgent = navigator == null ? void 0 : navigator.userAgent;\nvar isiOS = !!userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\nvar isAndroid = userAgent.indexOf(\"Android\") > -1 || userAgent.indexOf(\"Adr\") > -1;\nfunction isPC() {\n  const userAgentInfo = userAgent;\n  const Agents = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\n  let flag = true;\n  for (const v of Agents) {\n    if (userAgentInfo.indexOf(v) > 0) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\nexport {\n  getReferrer,\n  isAndroid,\n  isImageBitmap,\n  isPC,\n  isWorker,\n  isiOS\n};\n"],"mappings":"AAAA;AACA,SAASA,aAAaA,CAACC,KAAK,EAAE;EAC5B,OAAO,OAAOC,WAAW,KAAK,WAAW,IAAID,KAAK,YAAYC,WAAW;AAC3E;AACA,SAASC,QAAQA,CAAA,EAAG;EAClB,OAAO,OAAOC,aAAa,KAAK,UAAU;AAC5C;AACA,IAAIC,WAAW,GAAGF,QAAQ,CAAC,CAAC,GAAG,MAAMG,IAAI,CAACC,MAAM,IAAID,IAAI,CAACC,MAAM,CAACC,QAAQ,GAAG,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,GAAGF,MAAM,CAACG,MAAM,GAAGH,MAAM,EAAEC,QAAQ,CAACG,IAAI;AAC9J,IAAIC,SAAS,GAAGC,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACD,SAAS;AAChE,IAAIE,KAAK,GAAG,CAAC,CAACF,SAAS,CAACG,KAAK,CAAC,+BAA+B,CAAC;AAC9D,IAAIC,SAAS,GAAGJ,SAAS,CAACK,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAIL,SAAS,CAACK,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClF,SAASC,IAAIA,CAAA,EAAG;EACd,MAAMC,aAAa,GAAGP,SAAS;EAC/B,MAAMQ,MAAM,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,CAAC;EAClF,IAAIC,IAAI,GAAG,IAAI;EACf,KAAK,MAAMC,CAAC,IAAIF,MAAM,EAAE;IACtB,IAAID,aAAa,CAACF,OAAO,CAACK,CAAC,CAAC,GAAG,CAAC,EAAE;MAChCD,IAAI,GAAG,KAAK;MACZ;IACF;EACF;EACA,OAAOA,IAAI;AACb;AACA,SACElB,WAAW,EACXa,SAAS,EACTlB,aAAa,EACboB,IAAI,EACJjB,QAAQ,EACRa,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}