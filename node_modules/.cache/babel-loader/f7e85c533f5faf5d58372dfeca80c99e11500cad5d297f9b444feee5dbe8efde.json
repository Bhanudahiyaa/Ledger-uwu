{"ast":null,"code":"import { isObject } from './object';\nexport const getEdgeTerminal = (edge, type) => {\n  const terminal = edge[type];\n  if (isObject(terminal)) {\n    return terminal.cell;\n  }\n  return terminal;\n};\nexport const getDegree = (n, nodeIdxMap, edges) => {\n  const degrees = [];\n  for (let i = 0; i < n; i++) {\n    degrees[i] = 0;\n  }\n  if (!edges) return degrees;\n  edges.forEach(e => {\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    if (source) {\n      degrees[nodeIdxMap[source]] += 1;\n    }\n    if (target) {\n      degrees[nodeIdxMap[target]] += 1;\n    }\n  });\n  return degrees;\n};\nexport const floydWarshall = adjMatrix => {\n  // initialize\n  const dist = [];\n  const size = adjMatrix.length;\n  for (let i = 0; i < size; i += 1) {\n    dist[i] = [];\n    for (let j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjMatrix[i][j] === 0 || !adjMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjMatrix[i][j];\n      }\n    }\n  }\n  // floyd\n  for (let k = 0; k < size; k += 1) {\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n  return dist;\n};\nexport const getAdjMatrix = (data, directed) => {\n  const {\n    nodes,\n    edges\n  } = data;\n  const matrix = [];\n  // map node with index in data.nodes\n  const nodeMap = {};\n  if (!nodes) {\n    throw new Error('invalid nodes data!');\n  }\n  if (nodes) {\n    nodes.forEach((node, i) => {\n      nodeMap[node.id] = i;\n      const row = [];\n      matrix.push(row);\n    });\n  }\n  if (edges) {\n    edges.forEach(e => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      const sIndex = nodeMap[source];\n      const tIndex = nodeMap[target];\n      matrix[sIndex][tIndex] = 1;\n      if (!directed) {\n        matrix[tIndex][sIndex] = 1;\n      }\n    });\n  }\n  return matrix;\n};\n/**\n * scale matrix\n * @param matrix [ [], [], [] ]\n * @param ratio\n */\nexport const scaleMatrix = (matrix, ratio) => {\n  const result = [];\n  matrix.forEach(row => {\n    const newRow = [];\n    row.forEach(v => {\n      newRow.push(v * ratio);\n    });\n    result.push(newRow);\n  });\n  return result;\n};\n/**\n * depth first traverse, from leaves to root, children in inverse order\n *  if the fn returns false, terminate the traverse\n */\nconst traverseUp = (data, fn) => {\n  if (data && data.children) {\n    for (let i = data.children.length - 1; i >= 0; i--) {\n      if (!traverseUp(data.children[i], fn)) return;\n    }\n  }\n  if (!fn(data)) {\n    return false;\n  }\n  return true;\n};\n/**\n * depth first traverse, from leaves to root, children in inverse order\n * if the fn returns false, terminate the traverse\n */\nexport const traverseTreeUp = (data, fn) => {\n  if (typeof fn !== 'function') {\n    return;\n  }\n  traverseUp(data, fn);\n};","map":{"version":3,"names":["isObject","getEdgeTerminal","edge","type","terminal","cell","getDegree","n","nodeIdxMap","edges","degrees","i","forEach","e","source","target","floydWarshall","adjMatrix","dist","size","length","j","Infinity","k","getAdjMatrix","data","directed","nodes","matrix","nodeMap","Error","node","id","row","push","sIndex","tIndex","scaleMatrix","ratio","result","newRow","v","traverseUp","fn","children","traverseTreeUp"],"sources":["../../src/util/math.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}