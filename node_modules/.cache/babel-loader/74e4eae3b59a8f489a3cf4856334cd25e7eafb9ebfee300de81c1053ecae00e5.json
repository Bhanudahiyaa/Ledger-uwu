{"ast":null,"code":"/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nconst resolveConflicts = (entries, cg) => {\n  var _a, _b, _c;\n  const mappedEntries = {};\n  entries === null || entries === void 0 ? void 0 : entries.forEach((entry, i) => {\n    const tmp = mappedEntries[entry.v] = {\n      i,\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v]\n    };\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n  (_a = cg.edges()) === null || _a === void 0 ? void 0 : _a.forEach(e => {\n    const entryV = mappedEntries[e.v];\n    const entryW = mappedEntries[e.w];\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n  // @ts-ignore\n  const sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, entry => !entry.indegree);\n  return doResolveConflicts(sourceSet);\n};\nconst doResolveConflicts = sourceSet => {\n  var _a, _b;\n  const entries = [];\n  const handleIn = vEntry => {\n    return uEntry => {\n      if (uEntry.merged) return;\n      if (uEntry.barycenter === undefined || vEntry.barycenter === undefined || uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  };\n  const handleOut = vEntry => {\n    return wEntry => {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  };\n  while (sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length) {\n    const entry = sourceSet.pop();\n    entries.push(entry);\n    (_a = entry[\"in\"].reverse()) === null || _a === void 0 ? void 0 : _a.forEach(e => handleIn(entry)(e));\n    (_b = entry.out) === null || _b === void 0 ? void 0 : _b.forEach(e => handleOut(entry)(e));\n  }\n  const filtered = entries.filter(entry => !entry.merged);\n  const keys = [\"vs\", \"i\", \"barycenter\", \"weight\"];\n  return filtered.map(entry => {\n    const picked = {};\n    keys === null || keys === void 0 ? void 0 : keys.forEach(key => {\n      if (entry[key] === undefined) return;\n      picked[key] = entry[key];\n    });\n    return picked;\n  });\n};\nconst mergeEntries = (target, source) => {\n  var _a;\n  let sum = 0;\n  let weight = 0;\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n  target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n};\nexport default resolveConflicts;","map":{"version":3,"names":["resolveConflicts","entries","cg","mappedEntries","forEach","entry","i","tmp","v","indegree","out","vs","barycenter","undefined","weight","_a","edges","e","entryV","entryW","w","push","sourceSet","_c","_b","Object","values","filter","call","doResolveConflicts","handleIn","vEntry","uEntry","merged","mergeEntries","handleOut","wEntry","length","pop","reverse","filtered","keys","map","picked","key","target","source","sum","concat","Math","min"],"sources":["../../../../../src/layout/dagre/src/order/resolve-conflicts.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}