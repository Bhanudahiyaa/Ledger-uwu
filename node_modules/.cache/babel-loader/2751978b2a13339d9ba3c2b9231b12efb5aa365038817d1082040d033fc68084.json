{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Util } from '../../global';\nimport { Rectangle, Angle } from '../../geometry';\nimport { ObjectExt, StringExt, FunctionExt } from '../../util';\nimport { Cell } from '../../model/cell';\nimport { Collection } from '../../model/collection';\nimport { View } from '../../view/view';\nimport { notify } from '../transform/util';\nimport { Handle } from '../common';\nexport class Selection extends View {\n  constructor(options) {\n    super();\n    this.options = ObjectExt.merge({}, Private.defaultOptions, options);\n    if (this.options.model) {\n      this.options.collection = this.options.model.collection;\n    }\n    if (this.options.collection) {\n      this.collection = this.options.collection;\n    } else {\n      this.collection = new Collection([], {\n        comparator: Private.depthComparator\n      });\n      this.options.collection = this.collection;\n    }\n    this.boxCount = 0;\n    this.createContainer();\n    this.initHandles();\n    this.startListening();\n  }\n  get graph() {\n    return this.options.graph;\n  }\n  get boxClassName() {\n    return this.prefixClassName(Private.classNames.box);\n  }\n  get $boxes() {\n    return this.$container.children(`.${this.boxClassName}`);\n  }\n  get handleOptions() {\n    return this.options;\n  }\n  startListening() {\n    const graph = this.graph;\n    const collection = this.collection;\n    this.delegateEvents({\n      [`mousedown .${this.boxClassName}`]: 'onSelectionBoxMouseDown',\n      [`touchstart .${this.boxClassName}`]: 'onSelectionBoxMouseDown'\n    }, true);\n    graph.on('scale', this.onGraphTransformed, this);\n    graph.on('translate', this.onGraphTransformed, this);\n    graph.model.on('updated', this.onModelUpdated, this);\n    collection.on('added', this.onCellAdded, this);\n    collection.on('removed', this.onCellRemoved, this);\n    collection.on('reseted', this.onReseted, this);\n    collection.on('updated', this.onCollectionUpdated, this);\n    collection.on('node:change:position', this.onNodePositionChanged, this);\n    collection.on('cell:changed', this.onCellChanged, this);\n  }\n  stopListening() {\n    const graph = this.graph;\n    const collection = this.collection;\n    this.undelegateEvents();\n    graph.off('scale', this.onGraphTransformed, this);\n    graph.off('translate', this.onGraphTransformed, this);\n    graph.model.off('updated', this.onModelUpdated, this);\n    collection.off('added', this.onCellAdded, this);\n    collection.off('removed', this.onCellRemoved, this);\n    collection.off('reseted', this.onReseted, this);\n    collection.off('updated', this.onCollectionUpdated, this);\n    collection.off('node:change:position', this.onNodePositionChanged, this);\n    collection.off('cell:changed', this.onCellChanged, this);\n  }\n  onRemove() {\n    this.stopListening();\n  }\n  onGraphTransformed() {\n    this.updateSelectionBoxes({\n      async: false\n    });\n  }\n  onCellChanged() {\n    this.updateSelectionBoxes();\n  }\n  onNodePositionChanged({\n    node,\n    options\n  }) {\n    const {\n      showNodeSelectionBox,\n      pointerEvents\n    } = this.options;\n    const {\n      ui,\n      selection,\n      translateBy,\n      snapped\n    } = options;\n    const allowTranslating = (showNodeSelectionBox !== true || pointerEvents === 'none') && !this.translating && !selection;\n    const translateByUi = ui && translateBy && node.id === translateBy;\n    if (allowTranslating && (translateByUi || snapped)) {\n      this.translating = true;\n      const current = node.position();\n      const previous = node.previous('position');\n      const dx = current.x - previous.x;\n      const dy = current.y - previous.y;\n      if (dx !== 0 || dy !== 0) {\n        this.translateSelectedNodes(dx, dy, node, options);\n      }\n      this.translating = false;\n    }\n  }\n  onModelUpdated({\n    removed\n  }) {\n    if (removed && removed.length) {\n      this.unselect(removed);\n    }\n  }\n  isEmpty() {\n    return this.length <= 0;\n  }\n  isSelected(cell) {\n    return this.collection.has(cell);\n  }\n  get length() {\n    return this.collection.length;\n  }\n  get cells() {\n    return this.collection.toArray();\n  }\n  select(cells, options = {}) {\n    options.dryrun = true;\n    const items = this.filter(Array.isArray(cells) ? cells : [cells]);\n    this.collection.add(items, options);\n    return this;\n  }\n  unselect(cells, options = {}) {\n    // dryrun to prevent cell be removed from graph\n    options.dryrun = true;\n    this.collection.remove(Array.isArray(cells) ? cells : [cells], options);\n    return this;\n  }\n  reset(cells, options = {}) {\n    if (cells) {\n      if (options.batch) {\n        const filterCells = this.filter(Array.isArray(cells) ? cells : [cells]);\n        this.collection.reset(filterCells, Object.assign(Object.assign({}, options), {\n          ui: true\n        }));\n        return this;\n      }\n      const prev = this.cells;\n      const next = this.filter(Array.isArray(cells) ? cells : [cells]);\n      const prevMap = {};\n      const nextMap = {};\n      prev.forEach(cell => prevMap[cell.id] = cell);\n      next.forEach(cell => nextMap[cell.id] = cell);\n      const added = [];\n      const removed = [];\n      next.forEach(cell => {\n        if (!prevMap[cell.id]) {\n          added.push(cell);\n        }\n      });\n      prev.forEach(cell => {\n        if (!nextMap[cell.id]) {\n          removed.push(cell);\n        }\n      });\n      if (removed.length) {\n        this.unselect(removed, Object.assign(Object.assign({}, options), {\n          ui: true\n        }));\n      }\n      if (added.length) {\n        this.select(added, Object.assign(Object.assign({}, options), {\n          ui: true\n        }));\n      }\n      if (removed.length === 0 && added.length === 0) {\n        this.updateContainer();\n      }\n      return this;\n    }\n    return this.clean(options);\n  }\n  clean(options = {}) {\n    if (this.length) {\n      if (options.batch === false) {\n        this.unselect(this.cells, options);\n      } else {\n        this.collection.reset([], Object.assign(Object.assign({}, options), {\n          ui: true\n        }));\n      }\n    }\n    return this;\n  }\n  setFilter(filter) {\n    this.options.filter = filter;\n  }\n  setContent(content) {\n    this.options.content = content;\n  }\n  startSelecting(evt) {\n    // Flow: startSelecting => adjustSelection => stopSelecting\n    evt = this.normalizeEvent(evt); // eslint-disable-line\n    this.clean();\n    let x;\n    let y;\n    const graphContainer = this.graph.container;\n    if (evt.offsetX != null && evt.offsetY != null && graphContainer.contains(evt.target)) {\n      x = evt.offsetX;\n      y = evt.offsetY;\n    } else {\n      const offset = this.$(graphContainer).offset();\n      const scrollLeft = graphContainer.scrollLeft;\n      const scrollTop = graphContainer.scrollTop;\n      x = evt.clientX - offset.left + window.pageXOffset + scrollLeft;\n      y = evt.clientY - offset.top + window.pageYOffset + scrollTop;\n    }\n    this.$container.css({\n      top: y,\n      left: x,\n      width: 1,\n      height: 1\n    });\n    this.setEventData(evt, {\n      action: 'selecting',\n      clientX: evt.clientX,\n      clientY: evt.clientY,\n      offsetX: x,\n      offsetY: y,\n      scrollerX: 0,\n      scrollerY: 0,\n      moving: false\n    });\n    this.delegateDocumentEvents(Private.documentEvents, evt.data);\n  }\n  filter(cells) {\n    const filter = this.options.filter;\n    if (Array.isArray(filter)) {\n      return cells.filter(cell => !filter.includes(cell) && !filter.includes(cell.shape));\n    }\n    if (typeof filter === 'function') {\n      return cells.filter(cell => FunctionExt.call(filter, this.graph, cell));\n    }\n    return cells;\n  }\n  stopSelecting(evt) {\n    const graph = this.graph;\n    const eventData = this.getEventData(evt);\n    const action = eventData.action;\n    switch (action) {\n      case 'selecting':\n        {\n          let width = this.$container.width();\n          let height = this.$container.height();\n          const offset = this.$container.offset();\n          const origin = graph.pageToLocal(offset.left, offset.top);\n          const scale = graph.transform.getScale();\n          width /= scale.sx;\n          height /= scale.sy;\n          const rect = new Rectangle(origin.x, origin.y, width, height);\n          const cells = this.getCellViewsInArea(rect).map(view => view.cell);\n          this.reset(cells, {\n            batch: true\n          });\n          this.hideRubberband();\n          break;\n        }\n      case 'translating':\n        {\n          const client = graph.snapToGrid(evt.clientX, evt.clientY);\n          if (!this.options.following) {\n            const data = eventData;\n            this.updateSelectedNodesPosition({\n              dx: data.clientX - data.originX,\n              dy: data.clientY - data.originY\n            });\n          }\n          this.graph.model.stopBatch('move-selection');\n          this.notifyBoxEvent('box:mouseup', evt, client.x, client.y);\n          break;\n        }\n      default:\n        {\n          this.clean();\n          break;\n        }\n    }\n  }\n  onMouseUp(evt) {\n    const action = this.getEventData(evt).action;\n    if (action) {\n      this.stopSelecting(evt);\n      this.undelegateDocumentEvents();\n    }\n  }\n  onSelectionBoxMouseDown(evt) {\n    if (!this.options.following) {\n      evt.stopPropagation();\n    }\n    const e = this.normalizeEvent(evt);\n    if (this.options.movable) {\n      this.startTranslating(e);\n    }\n    const activeView = this.getCellViewFromElem(e.target);\n    this.setEventData(e, {\n      activeView\n    });\n    const client = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.notifyBoxEvent('box:mousedown', e, client.x, client.y);\n    this.delegateDocumentEvents(Private.documentEvents, e.data);\n  }\n  startTranslating(evt) {\n    this.graph.model.startBatch('move-selection');\n    const client = this.graph.snapToGrid(evt.clientX, evt.clientY);\n    this.setEventData(evt, {\n      action: 'translating',\n      clientX: client.x,\n      clientY: client.y,\n      originX: client.x,\n      originY: client.y\n    });\n  }\n  getSelectionOffset(client, data) {\n    let dx = client.x - data.clientX;\n    let dy = client.y - data.clientY;\n    const restrict = this.graph.hook.getRestrictArea();\n    if (restrict) {\n      const cells = this.collection.toArray();\n      const totalBBox = Cell.getCellsBBox(cells, {\n        deep: true\n      }) || Rectangle.create();\n      const minDx = restrict.x - totalBBox.x;\n      const minDy = restrict.y - totalBBox.y;\n      const maxDx = restrict.x + restrict.width - (totalBBox.x + totalBBox.width);\n      const maxDy = restrict.y + restrict.height - (totalBBox.y + totalBBox.height);\n      if (dx < minDx) {\n        dx = minDx;\n      }\n      if (dy < minDy) {\n        dy = minDy;\n      }\n      if (maxDx < dx) {\n        dx = maxDx;\n      }\n      if (maxDy < dy) {\n        dy = maxDy;\n      }\n      if (!this.options.following) {\n        const offsetX = client.x - data.originX;\n        const offsetY = client.y - data.originY;\n        dx = offsetX <= minDx || offsetX >= maxDx ? 0 : dx;\n        dy = offsetY <= minDy || offsetY >= maxDy ? 0 : dy;\n      }\n    }\n    return {\n      dx,\n      dy\n    };\n  }\n  updateSelectedNodesPosition(offset) {\n    const {\n      dx,\n      dy\n    } = offset;\n    if (dx || dy) {\n      if (this.translateSelectedNodes(dx, dy), this.boxesUpdated) {\n        if (this.collection.length > 1) {\n          this.updateSelectionBoxes();\n        }\n      } else {\n        const scale = this.graph.transform.getScale();\n        this.$boxes.add(this.$selectionContainer).css({\n          left: `+=${dx * scale.sx}`,\n          top: `+=${dy * scale.sy}`\n        });\n      }\n    }\n  }\n  autoScrollGraph(x, y) {\n    const scroller = this.graph.scroller.widget;\n    if (scroller) {\n      return scroller.autoScroll(x, y);\n    }\n    return {\n      scrollerX: 0,\n      scrollerY: 0\n    };\n  }\n  adjustSelection(evt) {\n    const e = this.normalizeEvent(evt);\n    const eventData = this.getEventData(e);\n    const action = eventData.action;\n    switch (action) {\n      case 'selecting':\n        {\n          const data = eventData;\n          if (data.moving !== true) {\n            this.$container.appendTo(this.graph.container);\n            this.showRubberband();\n            data.moving = true;\n          }\n          const {\n            scrollerX,\n            scrollerY\n          } = this.autoScrollGraph(e.clientX, e.clientY);\n          data.scrollerX += scrollerX;\n          data.scrollerY += scrollerY;\n          const dx = e.clientX - data.clientX + data.scrollerX;\n          const dy = e.clientY - data.clientY + data.scrollerY;\n          const left = parseInt(this.$container.css('left'), 10);\n          const top = parseInt(this.$container.css('top'), 10);\n          this.$container.css({\n            left: dx < 0 ? data.offsetX + dx : left,\n            top: dy < 0 ? data.offsetY + dy : top,\n            width: Math.abs(dx),\n            height: Math.abs(dy)\n          });\n          break;\n        }\n      case 'translating':\n        {\n          const client = this.graph.snapToGrid(e.clientX, e.clientY);\n          const data = eventData;\n          const offset = this.getSelectionOffset(client, data);\n          if (this.options.following) {\n            this.updateSelectedNodesPosition(offset);\n          } else {\n            this.updateContainerPosition(offset);\n          }\n          if (offset.dx) {\n            data.clientX = client.x;\n          }\n          if (offset.dy) {\n            data.clientY = client.y;\n          }\n          this.notifyBoxEvent('box:mousemove', evt, client.x, client.y);\n          break;\n        }\n      default:\n        break;\n    }\n    this.boxesUpdated = false;\n  }\n  translateSelectedNodes(dx, dy, exclude, otherOptions) {\n    const map = {};\n    const excluded = [];\n    if (exclude) {\n      map[exclude.id] = true;\n    }\n    this.collection.toArray().forEach(cell => {\n      cell.getDescendants({\n        deep: true\n      }).forEach(child => {\n        map[child.id] = true;\n      });\n    });\n    if (otherOptions && otherOptions.translateBy) {\n      const currentCell = this.graph.getCellById(otherOptions.translateBy);\n      if (currentCell) {\n        map[currentCell.id] = true;\n        currentCell.getDescendants({\n          deep: true\n        }).forEach(child => {\n          map[child.id] = true;\n        });\n        excluded.push(currentCell);\n      }\n    }\n    this.collection.toArray().forEach(cell => {\n      if (!map[cell.id]) {\n        const options = Object.assign(Object.assign({}, otherOptions), {\n          selection: this.cid,\n          exclude: excluded\n        });\n        cell.translate(dx, dy, options);\n        this.graph.model.getConnectedEdges(cell).forEach(edge => {\n          if (!map[edge.id]) {\n            edge.translate(dx, dy, options);\n            map[edge.id] = true;\n          }\n        });\n      }\n    });\n  }\n  getCellViewsInArea(rect) {\n    const graph = this.graph;\n    const options = {\n      strict: this.options.strict\n    };\n    let views = [];\n    if (this.options.rubberNode) {\n      if (this.options.useCellGeometry) {\n        views = views.concat(graph.model.getNodesInArea(rect, options).map(node => graph.renderer.findViewByCell(node)).filter(view => view != null));\n      } else {\n        views = views.concat(graph.renderer.findViewsInArea(rect, options));\n      }\n    }\n    if (this.options.rubberEdge) {\n      if (this.options.useCellGeometry) {\n        views = views.concat(graph.model.getEdgesInArea(rect, options).map(edge => graph.renderer.findViewByCell(edge)).filter(view => view != null));\n      } else {\n        views = views.concat(graph.renderer.findEdgeViewsInArea(rect, options));\n      }\n    }\n    return views;\n  }\n  notifyBoxEvent(name, e, x, y) {\n    const data = this.getEventData(e);\n    const view = data.activeView;\n    this.trigger(name, {\n      e,\n      view,\n      x,\n      y,\n      cell: view.cell\n    });\n  }\n  getSelectedClassName(cell) {\n    return this.prefixClassName(`${cell.isNode() ? 'node' : 'edge'}-selected`);\n  }\n  addCellSelectedClassName(cell) {\n    const view = this.graph.renderer.findViewByCell(cell);\n    if (view) {\n      view.addClass(this.getSelectedClassName(cell));\n    }\n  }\n  removeCellUnSelectedClassName(cell) {\n    const view = this.graph.renderer.findViewByCell(cell);\n    if (view) {\n      view.removeClass(this.getSelectedClassName(cell));\n    }\n  }\n  destroySelectionBox(cell) {\n    this.removeCellUnSelectedClassName(cell);\n    if (this.canShowSelectionBox(cell)) {\n      this.$container.find(`[data-cell-id=\"${cell.id}\"]`).remove();\n      if (this.$boxes.length === 0) {\n        this.hide();\n      }\n      this.boxCount = Math.max(0, this.boxCount - 1);\n    }\n  }\n  destroyAllSelectionBoxes(cells) {\n    cells.forEach(cell => this.removeCellUnSelectedClassName(cell));\n    this.hide();\n    this.$boxes.remove();\n    this.boxCount = 0;\n  }\n  hide() {\n    this.$container.removeClass(this.prefixClassName(Private.classNames.rubberband)).removeClass(this.prefixClassName(Private.classNames.selected));\n  }\n  showRubberband() {\n    this.$container.addClass(this.prefixClassName(Private.classNames.rubberband));\n  }\n  hideRubberband() {\n    this.$container.removeClass(this.prefixClassName(Private.classNames.rubberband));\n  }\n  showSelected() {\n    this.$container.removeAttr('style').addClass(this.prefixClassName(Private.classNames.selected));\n  }\n  createContainer() {\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container);\n    this.$container.addClass(this.prefixClassName(Private.classNames.root));\n    if (this.options.className) {\n      this.$container.addClass(this.options.className);\n    }\n    this.$selectionContainer = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.inner));\n    this.$selectionContent = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.content));\n    this.$selectionContainer.append(this.$selectionContent);\n    this.$selectionContainer.attr('data-selection-length', this.collection.length);\n    this.$container.prepend(this.$selectionContainer);\n    this.$handleContainer = this.$selectionContainer;\n  }\n  updateContainerPosition(offset) {\n    if (offset.dx || offset.dy) {\n      this.$selectionContainer.css({\n        left: `+=${offset.dx}`,\n        top: `+=${offset.dy}`\n      });\n    }\n  }\n  updateContainer() {\n    const origin = {\n      x: Infinity,\n      y: Infinity\n    };\n    const corner = {\n      x: 0,\n      y: 0\n    };\n    const cells = this.collection.toArray().filter(cell => this.canShowSelectionBox(cell));\n    cells.forEach(cell => {\n      const view = this.graph.renderer.findViewByCell(cell);\n      if (view) {\n        const bbox = view.getBBox({\n          useCellGeometry: this.options.useCellGeometry\n        });\n        origin.x = Math.min(origin.x, bbox.x);\n        origin.y = Math.min(origin.y, bbox.y);\n        corner.x = Math.max(corner.x, bbox.x + bbox.width);\n        corner.y = Math.max(corner.y, bbox.y + bbox.height);\n      }\n    });\n    this.$selectionContainer.css({\n      position: 'absolute',\n      pointerEvents: 'none',\n      left: origin.x,\n      top: origin.y,\n      width: corner.x - origin.x,\n      height: corner.y - origin.y\n    }).attr('data-selection-length', this.collection.length);\n    const boxContent = this.options.content;\n    if (boxContent) {\n      if (typeof boxContent === 'function') {\n        const content = FunctionExt.call(boxContent, this.graph, this, this.$selectionContent[0]);\n        if (content) {\n          this.$selectionContent.html(content);\n        }\n      } else {\n        this.$selectionContent.html(boxContent);\n      }\n    }\n    if (this.collection.length > 0 && !this.container.parentNode) {\n      this.$container.appendTo(this.graph.container);\n    } else if (this.collection.length <= 0 && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n  }\n  canShowSelectionBox(cell) {\n    return cell.isNode() && this.options.showNodeSelectionBox === true || cell.isEdge() && this.options.showEdgeSelectionBox === true;\n  }\n  createSelectionBox(cell) {\n    this.addCellSelectedClassName(cell);\n    if (this.canShowSelectionBox(cell)) {\n      const view = this.graph.renderer.findViewByCell(cell);\n      if (view) {\n        const bbox = view.getBBox({\n          useCellGeometry: this.options.useCellGeometry\n        });\n        const className = this.boxClassName;\n        this.$('<div/>').addClass(className).addClass(`${className}-${cell.isNode() ? 'node' : 'edge'}`).attr('data-cell-id', cell.id).css({\n          position: 'absolute',\n          left: bbox.x,\n          top: bbox.y,\n          width: bbox.width,\n          height: bbox.height,\n          pointerEvents: this.options.pointerEvents || 'auto'\n        }).appendTo(this.container);\n        this.showSelected();\n        this.boxCount += 1;\n      }\n    }\n  }\n  updateSelectionBoxes(options = {}) {\n    if (this.collection.length > 0) {\n      this.boxesUpdated = true;\n      this.graph.renderer.requestViewUpdate(this, 1, 2, options);\n    }\n  }\n  confirmUpdate() {\n    if (this.boxCount) {\n      this.hide();\n      this.$boxes.each((_, elem) => {\n        const cellId = this.$(elem).remove().attr('data-cell-id');\n        const cell = this.collection.get(cellId);\n        if (cell) {\n          this.createSelectionBox(cell);\n        }\n      });\n      this.updateContainer();\n    }\n    return 0;\n  }\n  getCellViewFromElem(elem) {\n    const id = elem.getAttribute('data-cell-id');\n    if (id) {\n      const cell = this.collection.get(id);\n      if (cell) {\n        return this.graph.renderer.findViewByCell(cell);\n      }\n    }\n    return null;\n  }\n  onCellRemoved({\n    cell\n  }) {\n    this.destroySelectionBox(cell);\n    this.updateContainer();\n  }\n  onReseted({\n    previous,\n    current\n  }) {\n    this.destroyAllSelectionBoxes(previous);\n    current.forEach(cell => {\n      this.listenCellRemoveEvent(cell);\n      this.createSelectionBox(cell);\n    });\n    this.updateContainer();\n  }\n  onCellAdded({\n    cell\n  }) {\n    // The collection do not known the cell was removed when cell was\n    // removed by interaction(such as, by \"delete\" shortcut), so we should\n    // manually listen to cell's remove evnet.\n    this.listenCellRemoveEvent(cell);\n    this.createSelectionBox(cell);\n    this.updateContainer();\n  }\n  listenCellRemoveEvent(cell) {\n    cell.off('removed', this.onCellRemoved, this);\n    cell.on('removed', this.onCellRemoved, this);\n  }\n  onCollectionUpdated({\n    added,\n    removed,\n    options\n  }) {\n    added.forEach(cell => {\n      this.trigger('cell:selected', {\n        cell,\n        options\n      });\n      this.graph.trigger('cell:selected', {\n        cell,\n        options\n      });\n      if (cell.isNode()) {\n        this.trigger('node:selected', {\n          cell,\n          options,\n          node: cell\n        });\n        this.graph.trigger('node:selected', {\n          cell,\n          options,\n          node: cell\n        });\n      } else if (cell.isEdge()) {\n        this.trigger('edge:selected', {\n          cell,\n          options,\n          edge: cell\n        });\n        this.graph.trigger('edge:selected', {\n          cell,\n          options,\n          edge: cell\n        });\n      }\n    });\n    removed.forEach(cell => {\n      this.trigger('cell:unselected', {\n        cell,\n        options\n      });\n      this.graph.trigger('cell:unselected', {\n        cell,\n        options\n      });\n      if (cell.isNode()) {\n        this.trigger('node:unselected', {\n          cell,\n          options,\n          node: cell\n        });\n        this.graph.trigger('node:unselected', {\n          cell,\n          options,\n          node: cell\n        });\n      } else if (cell.isEdge()) {\n        this.trigger('edge:unselected', {\n          cell,\n          options,\n          edge: cell\n        });\n        this.graph.trigger('edge:unselected', {\n          cell,\n          options,\n          edge: cell\n        });\n      }\n    });\n    const args = {\n      added,\n      removed,\n      options,\n      selected: this.cells.filter(cell => !!this.graph.getCellById(cell.id))\n    };\n    this.trigger('selection:changed', args);\n    this.graph.trigger('selection:changed', args);\n  }\n  // #region handle\n  deleteSelectedCells() {\n    const cells = this.collection.toArray();\n    this.clean();\n    this.graph.model.removeCells(cells, {\n      selection: this.cid\n    });\n  }\n  startRotate({\n    e\n  }) {\n    const cells = this.collection.toArray();\n    const center = Cell.getCellsBBox(cells).getCenter();\n    const client = this.graph.snapToGrid(e.clientX, e.clientY);\n    const angles = cells.reduce((memo, cell) => {\n      memo[cell.id] = Angle.normalize(cell.getAngle());\n      return memo;\n    }, {});\n    this.setEventData(e, {\n      center,\n      angles,\n      start: client.theta(center)\n    });\n  }\n  doRotate({\n    e\n  }) {\n    const data = this.getEventData(e);\n    const grid = this.graph.options.rotating.grid;\n    const gridSize = typeof grid === 'function' ? FunctionExt.call(grid, this.graph, null) : grid;\n    const client = this.graph.snapToGrid(e.clientX, e.clientY);\n    const delta = data.start - client.theta(data.center);\n    if (!data.rotated) {\n      data.rotated = true;\n    }\n    if (Math.abs(delta) > 0.001) {\n      this.collection.toArray().forEach(node => {\n        const angle = Util.snapToGrid(data.angles[node.id] + delta, gridSize || 15);\n        node.rotate(angle, {\n          absolute: true,\n          center: data.center,\n          selection: this.cid\n        });\n      });\n      this.updateSelectionBoxes();\n    }\n  }\n  stopRotate({\n    e\n  }) {\n    const data = this.getEventData(e);\n    if (data.rotated) {\n      data.rotated = false;\n      this.collection.toArray().forEach(node => {\n        notify('node:rotated', e, this.graph.findViewByCell(node));\n      });\n    }\n  }\n  startResize({\n    e\n  }) {\n    const gridSize = this.graph.getGridSize();\n    const cells = this.collection.toArray();\n    const bbox = Cell.getCellsBBox(cells);\n    const bboxes = cells.map(cell => cell.getBBox());\n    const maxWidth = bboxes.reduce((maxWidth, bbox) => {\n      return bbox.width < maxWidth ? bbox.width : maxWidth;\n    }, Infinity);\n    const maxHeight = bboxes.reduce((maxHeight, bbox) => {\n      return bbox.height < maxHeight ? bbox.height : maxHeight;\n    }, Infinity);\n    this.setEventData(e, {\n      bbox,\n      cells: this.graph.model.getSubGraph(cells),\n      minWidth: gridSize * bbox.width / maxWidth,\n      minHeight: gridSize * bbox.height / maxHeight\n    });\n  }\n  doResize({\n    e,\n    dx,\n    dy\n  }) {\n    const data = this.eventData(e);\n    const bbox = data.bbox;\n    const width = bbox.width;\n    const height = bbox.height;\n    const newWidth = Math.max(width + dx, data.minWidth);\n    const newHeight = Math.max(height + dy, data.minHeight);\n    if (!data.resized) {\n      data.resized = true;\n    }\n    if (Math.abs(width - newWidth) > 0.001 || Math.abs(height - newHeight) > 0.001) {\n      this.graph.model.resizeCells(newWidth, newHeight, data.cells, {\n        selection: this.cid\n      });\n      bbox.width = newWidth;\n      bbox.height = newHeight;\n      this.updateSelectionBoxes();\n    }\n  }\n  stopResize({\n    e\n  }) {\n    const data = this.eventData(e);\n    if (data.resized) {\n      data.resized = false;\n      this.collection.toArray().forEach(node => {\n        notify('node:resized', e, this.graph.findViewByCell(node));\n      });\n    }\n  }\n  // #endregion\n  dispose() {\n    this.clean();\n    this.remove();\n  }\n}\n__decorate([View.dispose()], Selection.prototype, \"dispose\", null);\nObjectExt.applyMixins(Selection, Handle);\n// private\n// -------\nvar Private;\n(function (Private) {\n  const base = 'widget-selection';\n  Private.classNames = {\n    root: base,\n    inner: `${base}-inner`,\n    box: `${base}-box`,\n    content: `${base}-content`,\n    rubberband: `${base}-rubberband`,\n    selected: `${base}-selected`\n  };\n  Private.documentEvents = {\n    mousemove: 'adjustSelection',\n    touchmove: 'adjustSelection',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n    touchcancel: 'onMouseUp'\n  };\n  Private.defaultOptions = {\n    movable: true,\n    following: true,\n    strict: false,\n    useCellGeometry: false,\n    content(selection) {\n      return StringExt.template('<%= length %> node<%= length > 1 ? \"s\":\"\" %> selected.')({\n        length: selection.length\n      });\n    },\n    handles: [{\n      name: 'remove',\n      position: 'nw',\n      events: {\n        mousedown: 'deleteSelectedCells'\n      }\n    }, {\n      name: 'rotate',\n      position: 'sw',\n      events: {\n        mousedown: 'startRotate',\n        mousemove: 'doRotate',\n        mouseup: 'stopRotate'\n      }\n    }, {\n      name: 'resize',\n      position: 'se',\n      events: {\n        mousedown: 'startResize',\n        mousemove: 'doResize',\n        mouseup: 'stopResize'\n      }\n    }]\n  };\n  function depthComparator(cell) {\n    return cell.getAncestors().length;\n  }\n  Private.depthComparator = depthComparator;\n})(Private || (Private = {}));","map":{"version":3,"names":["Util","Rectangle","Angle","ObjectExt","StringExt","FunctionExt","Cell","Collection","View","notify","Handle","Selection","constructor","options","merge","Private","defaultOptions","model","collection","comparator","depthComparator","boxCount","createContainer","initHandles","startListening","graph","boxClassName","prefixClassName","classNames","box","$boxes","$container","children","handleOptions","delegateEvents","on","onGraphTransformed","onModelUpdated","onCellAdded","onCellRemoved","onReseted","onCollectionUpdated","onNodePositionChanged","onCellChanged","stopListening","undelegateEvents","off","onRemove","updateSelectionBoxes","async","node","showNodeSelectionBox","pointerEvents","ui","selection","translateBy","snapped","allowTranslating","translating","translateByUi","id","current","position","previous","dx","x","dy","y","translateSelectedNodes","removed","length","unselect","isEmpty","isSelected","cell","has","cells","toArray","select","dryrun","items","filter","Array","isArray","add","remove","reset","batch","filterCells","Object","assign","prev","next","prevMap","nextMap","forEach","added","push","updateContainer","clean","setFilter","setContent","content","startSelecting","evt","normalizeEvent","graphContainer","container","offsetX","offsetY","contains","target","offset","$","scrollLeft","scrollTop","clientX","left","window","pageXOffset","clientY","top","pageYOffset","css","width","height","setEventData","action","scrollerX","scrollerY","moving","delegateDocumentEvents","documentEvents","data","includes","shape","call","stopSelecting","eventData","getEventData","origin","pageToLocal","scale","transform","getScale","sx","sy","rect","getCellViewsInArea","map","view","hideRubberband","client","snapToGrid","following","updateSelectedNodesPosition","originX","originY","stopBatch","notifyBoxEvent","onMouseUp","undelegateDocumentEvents","onSelectionBoxMouseDown","stopPropagation","e","movable","startTranslating","activeView","getCellViewFromElem","startBatch","getSelectionOffset","restrict","hook","getRestrictArea","totalBBox","getCellsBBox","deep","create","minDx","minDy","maxDx","maxDy","boxesUpdated","$selectionContainer","autoScrollGraph","scroller","widget","autoScroll","adjustSelection","appendTo","showRubberband","parseInt","Math","abs","updateContainerPosition","exclude","otherOptions","excluded","getDescendants","child","currentCell","getCellById","cid","translate","getConnectedEdges","edge","strict","views","rubberNode","useCellGeometry","concat","getNodesInArea","renderer","findViewByCell","findViewsInArea","rubberEdge","getEdgesInArea","findEdgeViewsInArea","name","trigger","getSelectedClassName","isNode","addCellSelectedClassName","addClass","removeCellUnSelectedClassName","removeClass","destroySelectionBox","canShowSelectionBox","find","hide","max","destroyAllSelectionBoxes","rubberband","selected","showSelected","removeAttr","document","createElement","root","className","inner","$selectionContent","append","attr","prepend","$handleContainer","Infinity","corner","bbox","getBBox","min","boxContent","html","parentNode","removeChild","isEdge","showEdgeSelectionBox","createSelectionBox","requestViewUpdate","confirmUpdate","each","_","elem","cellId","get","getAttribute","listenCellRemoveEvent","args","deleteSelectedCells","removeCells","startRotate","center","getCenter","angles","reduce","memo","normalize","getAngle","start","theta","doRotate","grid","rotating","gridSize","delta","rotated","angle","rotate","absolute","stopRotate","startResize","getGridSize","bboxes","maxWidth","maxHeight","getSubGraph","minWidth","minHeight","doResize","newWidth","newHeight","resized","resizeCells","stopResize","dispose","__decorate","applyMixins","base","mousemove","touchmove","mouseup","touchend","touchcancel","template","handles","events","mousedown","getAncestors"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/selection/index.ts"],"sourcesContent":["import { Util } from '../../global'\nimport { KeyValue } from '../../types'\nimport { Rectangle, Angle, Point } from '../../geometry'\nimport { ObjectExt, StringExt, FunctionExt } from '../../util'\nimport { Cell } from '../../model/cell'\nimport { Node } from '../../model/node'\nimport { Edge } from '../../model/edge'\nimport { Model } from '../../model/model'\nimport { Collection } from '../../model/collection'\nimport { View } from '../../view/view'\nimport { CellView } from '../../view/cell'\nimport { NodeView } from '../../view/node'\nimport { Graph } from '../../graph/graph'\nimport { Renderer } from '../../graph/renderer'\nimport { notify } from '../transform/util'\nimport { Handle } from '../common'\n\nexport class Selection extends View<Selection.EventArgs> {\n  public readonly options: Selection.Options\n  protected readonly collection: Collection\n  protected $container: JQuery<HTMLElement>\n  protected $selectionContainer: JQuery<HTMLElement>\n  protected $selectionContent: JQuery<HTMLElement>\n  protected boxCount: number\n  protected boxesUpdated: boolean\n\n  public get graph() {\n    return this.options.graph\n  }\n\n  protected get boxClassName() {\n    return this.prefixClassName(Private.classNames.box)\n  }\n\n  protected get $boxes() {\n    return this.$container.children(`.${this.boxClassName}`)\n  }\n\n  protected get handleOptions() {\n    return this.options\n  }\n\n  constructor(options: Selection.Options) {\n    super()\n    this.options = ObjectExt.merge({}, Private.defaultOptions, options)\n\n    if (this.options.model) {\n      this.options.collection = this.options.model.collection\n    }\n\n    if (this.options.collection) {\n      this.collection = this.options.collection\n    } else {\n      this.collection = new Collection([], {\n        comparator: Private.depthComparator,\n      })\n      this.options.collection = this.collection\n    }\n\n    this.boxCount = 0\n\n    this.createContainer()\n    this.initHandles()\n    this.startListening()\n  }\n\n  protected startListening() {\n    const graph = this.graph\n    const collection = this.collection\n\n    this.delegateEvents(\n      {\n        [`mousedown .${this.boxClassName}`]: 'onSelectionBoxMouseDown',\n        [`touchstart .${this.boxClassName}`]: 'onSelectionBoxMouseDown',\n      },\n      true,\n    )\n\n    graph.on('scale', this.onGraphTransformed, this)\n    graph.on('translate', this.onGraphTransformed, this)\n    graph.model.on('updated', this.onModelUpdated, this)\n\n    collection.on('added', this.onCellAdded, this)\n    collection.on('removed', this.onCellRemoved, this)\n    collection.on('reseted', this.onReseted, this)\n    collection.on('updated', this.onCollectionUpdated, this)\n    collection.on('node:change:position', this.onNodePositionChanged, this)\n    collection.on('cell:changed', this.onCellChanged, this)\n  }\n\n  protected stopListening() {\n    const graph = this.graph\n    const collection = this.collection\n\n    this.undelegateEvents()\n\n    graph.off('scale', this.onGraphTransformed, this)\n    graph.off('translate', this.onGraphTransformed, this)\n    graph.model.off('updated', this.onModelUpdated, this)\n\n    collection.off('added', this.onCellAdded, this)\n    collection.off('removed', this.onCellRemoved, this)\n    collection.off('reseted', this.onReseted, this)\n    collection.off('updated', this.onCollectionUpdated, this)\n    collection.off('node:change:position', this.onNodePositionChanged, this)\n    collection.off('cell:changed', this.onCellChanged, this)\n  }\n\n  protected onRemove() {\n    this.stopListening()\n  }\n\n  protected onGraphTransformed() {\n    this.updateSelectionBoxes({ async: false })\n  }\n\n  protected onCellChanged() {\n    this.updateSelectionBoxes()\n  }\n\n  protected translating: boolean\n\n  protected onNodePositionChanged({\n    node,\n    options,\n  }: Collection.EventArgs['node:change:position']) {\n    const { showNodeSelectionBox, pointerEvents } = this.options\n    const { ui, selection, translateBy, snapped } = options\n\n    const allowTranslating =\n      (showNodeSelectionBox !== true || pointerEvents === 'none') &&\n      !this.translating &&\n      !selection\n\n    const translateByUi = ui && translateBy && node.id === translateBy\n\n    if (allowTranslating && (translateByUi || snapped)) {\n      this.translating = true\n      const current = node.position()\n      const previous = node.previous('position')!\n      const dx = current.x - previous.x\n      const dy = current.y - previous.y\n\n      if (dx !== 0 || dy !== 0) {\n        this.translateSelectedNodes(dx, dy, node, options)\n      }\n      this.translating = false\n    }\n  }\n\n  protected onModelUpdated({ removed }: Collection.EventArgs['updated']) {\n    if (removed && removed.length) {\n      this.unselect(removed)\n    }\n  }\n\n  isEmpty() {\n    return this.length <= 0\n  }\n\n  isSelected(cell: Cell | string) {\n    return this.collection.has(cell)\n  }\n\n  get length() {\n    return this.collection.length\n  }\n\n  get cells() {\n    return this.collection.toArray()\n  }\n\n  select(cells: Cell | Cell[], options: Selection.AddOptions = {}) {\n    options.dryrun = true\n    const items = this.filter(Array.isArray(cells) ? cells : [cells])\n    this.collection.add(items, options)\n    return this\n  }\n\n  unselect(cells: Cell | Cell[], options: Selection.RemoveOptions = {}) {\n    // dryrun to prevent cell be removed from graph\n    options.dryrun = true\n    this.collection.remove(Array.isArray(cells) ? cells : [cells], options)\n    return this\n  }\n\n  reset(cells?: Cell | Cell[], options: Selection.SetOptions = {}) {\n    if (cells) {\n      if (options.batch) {\n        const filterCells = this.filter(Array.isArray(cells) ? cells : [cells])\n        this.collection.reset(filterCells, { ...options, ui: true })\n        return this\n      }\n\n      const prev = this.cells\n      const next = this.filter(Array.isArray(cells) ? cells : [cells])\n      const prevMap: KeyValue<Cell> = {}\n      const nextMap: KeyValue<Cell> = {}\n      prev.forEach((cell) => (prevMap[cell.id] = cell))\n      next.forEach((cell) => (nextMap[cell.id] = cell))\n      const added: Cell[] = []\n      const removed: Cell[] = []\n      next.forEach((cell) => {\n        if (!prevMap[cell.id]) {\n          added.push(cell)\n        }\n      })\n      prev.forEach((cell) => {\n        if (!nextMap[cell.id]) {\n          removed.push(cell)\n        }\n      })\n\n      if (removed.length) {\n        this.unselect(removed, { ...options, ui: true })\n      }\n\n      if (added.length) {\n        this.select(added, { ...options, ui: true })\n      }\n\n      if (removed.length === 0 && added.length === 0) {\n        this.updateContainer()\n      }\n\n      return this\n    }\n\n    return this.clean(options)\n  }\n\n  clean(options: Selection.SetOptions = {}) {\n    if (this.length) {\n      if (options.batch === false) {\n        this.unselect(this.cells, options)\n      } else {\n        this.collection.reset([], { ...options, ui: true })\n      }\n    }\n    return this\n  }\n\n  setFilter(filter?: Selection.Filter) {\n    this.options.filter = filter\n  }\n\n  setContent(content?: Selection.Content) {\n    this.options.content = content\n  }\n\n  startSelecting(evt: JQuery.MouseDownEvent) {\n    // Flow: startSelecting => adjustSelection => stopSelecting\n\n    evt = this.normalizeEvent(evt) // eslint-disable-line\n    this.clean()\n    let x\n    let y\n    const graphContainer = this.graph.container\n    if (\n      evt.offsetX != null &&\n      evt.offsetY != null &&\n      graphContainer.contains(evt.target)\n    ) {\n      x = evt.offsetX\n      y = evt.offsetY\n    } else {\n      const offset = this.$(graphContainer).offset()!\n      const scrollLeft = graphContainer.scrollLeft\n      const scrollTop = graphContainer.scrollTop\n      x = evt.clientX - offset.left + window.pageXOffset + scrollLeft\n      y = evt.clientY - offset.top + window.pageYOffset + scrollTop\n    }\n\n    this.$container.css({\n      top: y,\n      left: x,\n      width: 1,\n      height: 1,\n    })\n\n    this.setEventData<EventData.Selecting>(evt, {\n      action: 'selecting',\n      clientX: evt.clientX,\n      clientY: evt.clientY,\n      offsetX: x,\n      offsetY: y,\n      scrollerX: 0,\n      scrollerY: 0,\n      moving: false,\n    })\n\n    this.delegateDocumentEvents(Private.documentEvents, evt.data)\n  }\n\n  filter(cells: Cell[]) {\n    const filter = this.options.filter\n    if (Array.isArray(filter)) {\n      return cells.filter(\n        (cell) => !filter.includes(cell) && !filter.includes(cell.shape),\n      )\n    }\n\n    if (typeof filter === 'function') {\n      return cells.filter((cell) => FunctionExt.call(filter, this.graph, cell))\n    }\n\n    return cells\n  }\n\n  protected stopSelecting(evt: JQuery.MouseUpEvent) {\n    const graph = this.graph\n    const eventData = this.getEventData<EventData.Common>(evt)\n    const action = eventData.action\n    switch (action) {\n      case 'selecting': {\n        let width = this.$container.width()!\n        let height = this.$container.height()!\n        const offset = this.$container.offset()!\n        const origin = graph.pageToLocal(offset.left, offset.top)\n        const scale = graph.transform.getScale()\n        width /= scale.sx\n        height /= scale.sy\n        const rect = new Rectangle(origin.x, origin.y, width, height)\n        const cells = this.getCellViewsInArea(rect).map((view) => view.cell)\n        this.reset(cells, { batch: true })\n        this.hideRubberband()\n        break\n      }\n\n      case 'translating': {\n        const client = graph.snapToGrid(evt.clientX, evt.clientY)\n        if (!this.options.following) {\n          const data = eventData as EventData.Translating\n          this.updateSelectedNodesPosition({\n            dx: data.clientX - data.originX,\n            dy: data.clientY - data.originY,\n          })\n        }\n        this.graph.model.stopBatch('move-selection')\n        this.notifyBoxEvent('box:mouseup', evt, client.x, client.y)\n        break\n      }\n\n      default: {\n        this.clean()\n        break\n      }\n    }\n  }\n\n  protected onMouseUp(evt: JQuery.MouseUpEvent) {\n    const action = this.getEventData<EventData.Common>(evt).action\n    if (action) {\n      this.stopSelecting(evt)\n      this.undelegateDocumentEvents()\n    }\n  }\n\n  protected onSelectionBoxMouseDown(evt: JQuery.MouseDownEvent) {\n    if (!this.options.following) {\n      evt.stopPropagation()\n    }\n\n    const e = this.normalizeEvent(evt)\n\n    if (this.options.movable) {\n      this.startTranslating(e)\n    }\n\n    const activeView = this.getCellViewFromElem(e.target)!\n    this.setEventData<EventData.SelectionBox>(e, { activeView })\n    const client = this.graph.snapToGrid(e.clientX, e.clientY)\n    this.notifyBoxEvent('box:mousedown', e, client.x, client.y)\n    this.delegateDocumentEvents(Private.documentEvents, e.data)\n  }\n\n  protected startTranslating(evt: JQuery.MouseDownEvent) {\n    this.graph.model.startBatch('move-selection')\n    const client = this.graph.snapToGrid(evt.clientX, evt.clientY)\n    this.setEventData<EventData.Translating>(evt, {\n      action: 'translating',\n      clientX: client.x,\n      clientY: client.y,\n      originX: client.x,\n      originY: client.y,\n    })\n  }\n\n  protected getSelectionOffset(client: Point, data: EventData.Translating) {\n    let dx = client.x - data.clientX\n    let dy = client.y - data.clientY\n    const restrict = this.graph.hook.getRestrictArea()\n    if (restrict) {\n      const cells = this.collection.toArray()\n      const totalBBox =\n        Cell.getCellsBBox(cells, { deep: true }) || Rectangle.create()\n      const minDx = restrict.x - totalBBox.x\n      const minDy = restrict.y - totalBBox.y\n      const maxDx =\n        restrict.x + restrict.width - (totalBBox.x + totalBBox.width)\n      const maxDy =\n        restrict.y + restrict.height - (totalBBox.y + totalBBox.height)\n\n      if (dx < minDx) {\n        dx = minDx\n      }\n      if (dy < minDy) {\n        dy = minDy\n      }\n      if (maxDx < dx) {\n        dx = maxDx\n      }\n      if (maxDy < dy) {\n        dy = maxDy\n      }\n\n      if (!this.options.following) {\n        const offsetX = client.x - data.originX\n        const offsetY = client.y - data.originY\n        dx = offsetX <= minDx || offsetX >= maxDx ? 0 : dx\n        dy = offsetY <= minDy || offsetY >= maxDy ? 0 : dy\n      }\n    }\n\n    return {\n      dx,\n      dy,\n    }\n  }\n\n  protected updateSelectedNodesPosition(offset: { dx: number; dy: number }) {\n    const { dx, dy } = offset\n    if (dx || dy) {\n      if ((this.translateSelectedNodes(dx, dy), this.boxesUpdated)) {\n        if (this.collection.length > 1) {\n          this.updateSelectionBoxes()\n        }\n      } else {\n        const scale = this.graph.transform.getScale()\n        this.$boxes.add(this.$selectionContainer).css({\n          left: `+=${dx * scale.sx}`,\n          top: `+=${dy * scale.sy}`,\n        })\n      }\n    }\n  }\n\n  protected autoScrollGraph(x: number, y: number) {\n    const scroller = this.graph.scroller.widget\n    if (scroller) {\n      return scroller.autoScroll(x, y)\n    }\n    return { scrollerX: 0, scrollerY: 0 }\n  }\n\n  protected adjustSelection(evt: JQuery.MouseMoveEvent) {\n    const e = this.normalizeEvent(evt)\n    const eventData = this.getEventData<EventData.Common>(e)\n    const action = eventData.action\n    switch (action) {\n      case 'selecting': {\n        const data = eventData as EventData.Selecting\n        if (data.moving !== true) {\n          this.$container.appendTo(this.graph.container)\n          this.showRubberband()\n          data.moving = true\n        }\n\n        const { scrollerX, scrollerY } = this.autoScrollGraph(\n          e.clientX,\n          e.clientY,\n        )\n        data.scrollerX += scrollerX\n        data.scrollerY += scrollerY\n\n        const dx = e.clientX - data.clientX + data.scrollerX\n        const dy = e.clientY - data.clientY + data.scrollerY\n\n        const left = parseInt(this.$container.css('left'), 10)\n        const top = parseInt(this.$container.css('top'), 10)\n        this.$container.css({\n          left: dx < 0 ? data.offsetX + dx : left,\n          top: dy < 0 ? data.offsetY + dy : top,\n          width: Math.abs(dx),\n          height: Math.abs(dy),\n        })\n        break\n      }\n\n      case 'translating': {\n        const client = this.graph.snapToGrid(e.clientX, e.clientY)\n        const data = eventData as EventData.Translating\n        const offset = this.getSelectionOffset(client, data)\n        if (this.options.following) {\n          this.updateSelectedNodesPosition(offset)\n        } else {\n          this.updateContainerPosition(offset)\n        }\n        if (offset.dx) {\n          data.clientX = client.x\n        }\n        if (offset.dy) {\n          data.clientY = client.y\n        }\n        this.notifyBoxEvent('box:mousemove', evt, client.x, client.y)\n        break\n      }\n\n      default:\n        break\n    }\n\n    this.boxesUpdated = false\n  }\n\n  protected translateSelectedNodes(\n    dx: number,\n    dy: number,\n    exclude?: Cell,\n    otherOptions?: KeyValue,\n  ) {\n    const map: { [id: string]: boolean } = {}\n    const excluded: Cell[] = []\n\n    if (exclude) {\n      map[exclude.id] = true\n    }\n\n    this.collection.toArray().forEach((cell) => {\n      cell.getDescendants({ deep: true }).forEach((child) => {\n        map[child.id] = true\n      })\n    })\n    if (otherOptions && otherOptions.translateBy) {\n      const currentCell = this.graph.getCellById(otherOptions.translateBy)\n      if (currentCell) {\n        map[currentCell.id] = true\n        currentCell.getDescendants({ deep: true }).forEach((child) => {\n          map[child.id] = true\n        })\n        excluded.push(currentCell)\n      }\n    }\n\n    this.collection.toArray().forEach((cell) => {\n      if (!map[cell.id]) {\n        const options = {\n          ...otherOptions,\n          selection: this.cid,\n          exclude: excluded,\n        }\n        cell.translate(dx, dy, options)\n        this.graph.model.getConnectedEdges(cell).forEach((edge) => {\n          if (!map[edge.id]) {\n            edge.translate(dx, dy, options)\n            map[edge.id] = true\n          }\n        })\n      }\n    })\n  }\n\n  protected getCellViewsInArea(rect: Rectangle) {\n    const graph = this.graph\n    const options = {\n      strict: this.options.strict,\n    }\n    let views: CellView[] = []\n\n    if (this.options.rubberNode) {\n      if (this.options.useCellGeometry) {\n        views = views.concat(\n          graph.model\n            .getNodesInArea(rect, options)\n            .map((node) => graph.renderer.findViewByCell(node))\n            .filter((view) => view != null) as CellView[],\n        )\n      } else {\n        views = views.concat(graph.renderer.findViewsInArea(rect, options))\n      }\n    }\n\n    if (this.options.rubberEdge) {\n      if (this.options.useCellGeometry) {\n        views = views.concat(\n          graph.model\n            .getEdgesInArea(rect, options)\n            .map((edge) => graph.renderer.findViewByCell(edge))\n            .filter((view) => view != null) as CellView[],\n        )\n      } else {\n        views = views.concat(graph.renderer.findEdgeViewsInArea(rect, options))\n      }\n    }\n\n    return views\n  }\n\n  protected notifyBoxEvent<\n    K extends keyof Selection.BoxEventArgs,\n    T extends JQuery.TriggeredEvent,\n  >(name: K, e: T, x: number, y: number) {\n    const data = this.getEventData<EventData.SelectionBox>(e)\n    const view = data.activeView\n    this.trigger(name, { e, view, x, y, cell: view.cell })\n  }\n\n  protected getSelectedClassName(cell: Cell) {\n    return this.prefixClassName(`${cell.isNode() ? 'node' : 'edge'}-selected`)\n  }\n\n  protected addCellSelectedClassName(cell: Cell) {\n    const view = this.graph.renderer.findViewByCell(cell)\n    if (view) {\n      view.addClass(this.getSelectedClassName(cell))\n    }\n  }\n\n  protected removeCellUnSelectedClassName(cell: Cell) {\n    const view = this.graph.renderer.findViewByCell(cell)\n    if (view) {\n      view.removeClass(this.getSelectedClassName(cell))\n    }\n  }\n\n  protected destroySelectionBox(cell: Cell) {\n    this.removeCellUnSelectedClassName(cell)\n\n    if (this.canShowSelectionBox(cell)) {\n      this.$container.find(`[data-cell-id=\"${cell.id}\"]`).remove()\n      if (this.$boxes.length === 0) {\n        this.hide()\n      }\n      this.boxCount = Math.max(0, this.boxCount - 1)\n    }\n  }\n\n  protected destroyAllSelectionBoxes(cells: Cell[]) {\n    cells.forEach((cell) => this.removeCellUnSelectedClassName(cell))\n\n    this.hide()\n    this.$boxes.remove()\n    this.boxCount = 0\n  }\n\n  hide() {\n    this.$container\n      .removeClass(this.prefixClassName(Private.classNames.rubberband))\n      .removeClass(this.prefixClassName(Private.classNames.selected))\n  }\n\n  protected showRubberband() {\n    this.$container.addClass(\n      this.prefixClassName(Private.classNames.rubberband),\n    )\n  }\n\n  protected hideRubberband() {\n    this.$container.removeClass(\n      this.prefixClassName(Private.classNames.rubberband),\n    )\n  }\n\n  protected showSelected() {\n    this.$container\n      .removeAttr('style')\n      .addClass(this.prefixClassName(Private.classNames.selected))\n  }\n\n  protected createContainer() {\n    this.container = document.createElement('div')\n    this.$container = this.$(this.container)\n    this.$container.addClass(this.prefixClassName(Private.classNames.root))\n    if (this.options.className) {\n      this.$container.addClass(this.options.className)\n    }\n\n    this.$selectionContainer = this.$('<div/>').addClass(\n      this.prefixClassName(Private.classNames.inner),\n    )\n\n    this.$selectionContent = this.$('<div/>').addClass(\n      this.prefixClassName(Private.classNames.content),\n    )\n\n    this.$selectionContainer.append(this.$selectionContent)\n    this.$selectionContainer.attr(\n      'data-selection-length',\n      this.collection.length,\n    )\n\n    this.$container.prepend(this.$selectionContainer)\n    this.$handleContainer = this.$selectionContainer\n  }\n\n  protected updateContainerPosition(offset: { dx: number; dy: number }) {\n    if (offset.dx || offset.dy) {\n      this.$selectionContainer.css({\n        left: `+=${offset.dx}`,\n        top: `+=${offset.dy}`,\n      })\n    }\n  }\n\n  protected updateContainer() {\n    const origin = { x: Infinity, y: Infinity }\n    const corner = { x: 0, y: 0 }\n    const cells = this.collection\n      .toArray()\n      .filter((cell) => this.canShowSelectionBox(cell))\n\n    cells.forEach((cell) => {\n      const view = this.graph.renderer.findViewByCell(cell)\n      if (view) {\n        const bbox = view.getBBox({\n          useCellGeometry: this.options.useCellGeometry,\n        })\n        origin.x = Math.min(origin.x, bbox.x)\n        origin.y = Math.min(origin.y, bbox.y)\n        corner.x = Math.max(corner.x, bbox.x + bbox.width)\n        corner.y = Math.max(corner.y, bbox.y + bbox.height)\n      }\n    })\n\n    this.$selectionContainer\n      .css({\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: origin.x,\n        top: origin.y,\n        width: corner.x - origin.x,\n        height: corner.y - origin.y,\n      })\n      .attr('data-selection-length', this.collection.length)\n\n    const boxContent = this.options.content\n    if (boxContent) {\n      if (typeof boxContent === 'function') {\n        const content = FunctionExt.call(\n          boxContent,\n          this.graph,\n          this,\n          this.$selectionContent[0],\n        )\n        if (content) {\n          this.$selectionContent.html(content)\n        }\n      } else {\n        this.$selectionContent.html(boxContent)\n      }\n    }\n\n    if (this.collection.length > 0 && !this.container.parentNode) {\n      this.$container.appendTo(this.graph.container)\n    } else if (this.collection.length <= 0 && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container)\n    }\n  }\n\n  protected canShowSelectionBox(cell: Cell) {\n    return (\n      (cell.isNode() && this.options.showNodeSelectionBox === true) ||\n      (cell.isEdge() && this.options.showEdgeSelectionBox === true)\n    )\n  }\n\n  protected createSelectionBox(cell: Cell) {\n    this.addCellSelectedClassName(cell)\n\n    if (this.canShowSelectionBox(cell)) {\n      const view = this.graph.renderer.findViewByCell(cell)\n      if (view) {\n        const bbox = view.getBBox({\n          useCellGeometry: this.options.useCellGeometry,\n        })\n\n        const className = this.boxClassName\n        this.$('<div/>')\n          .addClass(className)\n          .addClass(`${className}-${cell.isNode() ? 'node' : 'edge'}`)\n          .attr('data-cell-id', cell.id)\n          .css({\n            position: 'absolute',\n            left: bbox.x,\n            top: bbox.y,\n            width: bbox.width,\n            height: bbox.height,\n            pointerEvents: this.options.pointerEvents || 'auto',\n          })\n          .appendTo(this.container)\n        this.showSelected()\n        this.boxCount += 1\n      }\n    }\n  }\n\n  protected updateSelectionBoxes(\n    options: Renderer.RequestViewUpdateOptions = {},\n  ) {\n    if (this.collection.length > 0) {\n      this.boxesUpdated = true\n      this.graph.renderer.requestViewUpdate(this as any, 1, 2, options)\n    }\n  }\n\n  confirmUpdate() {\n    if (this.boxCount) {\n      this.hide()\n      this.$boxes.each((_, elem) => {\n        const cellId = this.$(elem).remove().attr('data-cell-id')\n        const cell = this.collection.get(cellId)\n        if (cell) {\n          this.createSelectionBox(cell)\n        }\n      })\n\n      this.updateContainer()\n    }\n    return 0\n  }\n\n  protected getCellViewFromElem(elem: Element) {\n    const id = elem.getAttribute('data-cell-id')\n    if (id) {\n      const cell = this.collection.get(id)\n      if (cell) {\n        return this.graph.renderer.findViewByCell(cell)\n      }\n    }\n    return null\n  }\n\n  protected onCellRemoved({ cell }: Collection.EventArgs['removed']) {\n    this.destroySelectionBox(cell)\n    this.updateContainer()\n  }\n\n  protected onReseted({ previous, current }: Collection.EventArgs['reseted']) {\n    this.destroyAllSelectionBoxes(previous)\n    current.forEach((cell) => {\n      this.listenCellRemoveEvent(cell)\n      this.createSelectionBox(cell)\n    })\n    this.updateContainer()\n  }\n\n  protected onCellAdded({ cell }: Collection.EventArgs['added']) {\n    // The collection do not known the cell was removed when cell was\n    // removed by interaction(such as, by \"delete\" shortcut), so we should\n    // manually listen to cell's remove evnet.\n    this.listenCellRemoveEvent(cell)\n    this.createSelectionBox(cell)\n    this.updateContainer()\n  }\n\n  protected listenCellRemoveEvent(cell: Cell) {\n    cell.off('removed', this.onCellRemoved, this)\n    cell.on('removed', this.onCellRemoved, this)\n  }\n\n  protected onCollectionUpdated({\n    added,\n    removed,\n    options,\n  }: Collection.EventArgs['updated']) {\n    added.forEach((cell) => {\n      this.trigger('cell:selected', { cell, options })\n      this.graph.trigger('cell:selected', { cell, options })\n      if (cell.isNode()) {\n        this.trigger('node:selected', { cell, options, node: cell })\n        this.graph.trigger('node:selected', { cell, options, node: cell })\n      } else if (cell.isEdge()) {\n        this.trigger('edge:selected', { cell, options, edge: cell })\n        this.graph.trigger('edge:selected', { cell, options, edge: cell })\n      }\n    })\n\n    removed.forEach((cell) => {\n      this.trigger('cell:unselected', { cell, options })\n      this.graph.trigger('cell:unselected', { cell, options })\n      if (cell.isNode()) {\n        this.trigger('node:unselected', { cell, options, node: cell })\n        this.graph.trigger('node:unselected', { cell, options, node: cell })\n      } else if (cell.isEdge()) {\n        this.trigger('edge:unselected', { cell, options, edge: cell })\n        this.graph.trigger('edge:unselected', { cell, options, edge: cell })\n      }\n    })\n\n    const args = {\n      added,\n      removed,\n      options,\n      selected: this.cells.filter((cell) => !!this.graph.getCellById(cell.id)),\n    }\n    this.trigger('selection:changed', args)\n    this.graph.trigger('selection:changed', args)\n  }\n\n  // #region handle\n\n  protected deleteSelectedCells() {\n    const cells = this.collection.toArray()\n    this.clean()\n    this.graph.model.removeCells(cells, { selection: this.cid })\n  }\n\n  protected startRotate({ e }: Handle.EventArgs) {\n    const cells = this.collection.toArray()\n    const center = Cell.getCellsBBox(cells)!.getCenter()\n    const client = this.graph.snapToGrid(e.clientX!, e.clientY!)\n    const angles = cells.reduce<{ [id: string]: number }>(\n      (memo, cell: Node) => {\n        memo[cell.id] = Angle.normalize(cell.getAngle())\n        return memo\n      },\n      {},\n    )\n\n    this.setEventData<EventData.Rotation>(e, {\n      center,\n      angles,\n      start: client.theta(center),\n    })\n  }\n\n  protected doRotate({ e }: Handle.EventArgs) {\n    const data = this.getEventData<EventData.Rotation>(e)\n    const grid = this.graph.options.rotating.grid\n    const gridSize =\n      typeof grid === 'function'\n        ? FunctionExt.call(grid, this.graph, null as any)\n        : grid\n    const client = this.graph.snapToGrid(e.clientX!, e.clientY!)\n    const delta = data.start - client.theta(data.center)\n\n    if (!data.rotated) {\n      data.rotated = true\n    }\n\n    if (Math.abs(delta) > 0.001) {\n      this.collection.toArray().forEach((node: Node) => {\n        const angle = Util.snapToGrid(\n          data.angles[node.id] + delta,\n          gridSize || 15,\n        )\n        node.rotate(angle, {\n          absolute: true,\n          center: data.center,\n          selection: this.cid,\n        })\n      })\n      this.updateSelectionBoxes()\n    }\n  }\n\n  protected stopRotate({ e }: Handle.EventArgs) {\n    const data = this.getEventData<EventData.Rotation>(e)\n    if (data.rotated) {\n      data.rotated = false\n      this.collection.toArray().forEach((node: Node) => {\n        notify(\n          'node:rotated',\n          e as JQuery.MouseUpEvent,\n          this.graph.findViewByCell(node) as NodeView,\n        )\n      })\n    }\n  }\n\n  protected startResize({ e }: Handle.EventArgs) {\n    const gridSize = this.graph.getGridSize()\n    const cells = this.collection.toArray()\n    const bbox = Cell.getCellsBBox(cells)!\n    const bboxes = cells.map((cell) => cell.getBBox())\n    const maxWidth = bboxes.reduce((maxWidth, bbox) => {\n      return bbox.width < maxWidth ? bbox.width : maxWidth\n    }, Infinity)\n    const maxHeight = bboxes.reduce((maxHeight, bbox) => {\n      return bbox.height < maxHeight ? bbox.height : maxHeight\n    }, Infinity)\n\n    this.setEventData<EventData.Resizing>(e, {\n      bbox,\n      cells: this.graph.model.getSubGraph(cells),\n      minWidth: (gridSize * bbox.width) / maxWidth,\n      minHeight: (gridSize * bbox.height) / maxHeight,\n    })\n  }\n\n  protected doResize({ e, dx, dy }: Handle.EventArgs) {\n    const data = this.eventData<EventData.Resizing>(e)\n    const bbox = data.bbox\n    const width = bbox.width\n    const height = bbox.height\n    const newWidth = Math.max(width + dx, data.minWidth)\n    const newHeight = Math.max(height + dy, data.minHeight)\n\n    if (!data.resized) {\n      data.resized = true\n    }\n\n    if (\n      Math.abs(width - newWidth) > 0.001 ||\n      Math.abs(height - newHeight) > 0.001\n    ) {\n      this.graph.model.resizeCells(newWidth, newHeight, data.cells, {\n        selection: this.cid,\n      })\n      bbox.width = newWidth\n      bbox.height = newHeight\n      this.updateSelectionBoxes()\n    }\n  }\n\n  protected stopResize({ e }: Handle.EventArgs) {\n    const data = this.eventData<EventData.Resizing>(e)\n    if (data.resized) {\n      data.resized = false\n      this.collection.toArray().forEach((node: Node) => {\n        notify(\n          'node:resized',\n          e as JQuery.MouseUpEvent,\n          this.graph.findViewByCell(node) as NodeView,\n        )\n      })\n    }\n  }\n\n  // #endregion\n\n  @View.dispose()\n  dispose() {\n    this.clean()\n    this.remove()\n  }\n}\n\nexport namespace Selection {\n  export interface CommonOptions extends Handle.Options {\n    model?: Model\n    collection?: Collection\n    className?: string\n    strict?: boolean\n    filter?: Filter\n\n    showEdgeSelectionBox?: boolean\n    showNodeSelectionBox?: boolean\n    movable?: boolean\n    following?: boolean\n    useCellGeometry?: boolean\n    content?: Content\n\n    // Can select node or edge when rubberband\n    rubberNode?: boolean\n    rubberEdge?: boolean\n\n    // Whether to respond event on the selectionBox\n    pointerEvents?: 'none' | 'auto'\n  }\n\n  export interface Options extends CommonOptions {\n    graph: Graph\n  }\n\n  export type Content =\n    | null\n    | false\n    | string\n    | ((\n        this: Graph,\n        selection: Selection,\n        contentElement: HTMLElement,\n      ) => string)\n\n  export type Filter =\n    | null\n    | (string | { id: string })[]\n    | ((this: Graph, cell: Cell) => boolean)\n\n  export interface SetOptions extends Collection.SetOptions {\n    batch?: boolean\n  }\n\n  export interface AddOptions extends Collection.AddOptions {}\n\n  export interface RemoveOptions extends Collection.RemoveOptions {}\n}\n\nexport namespace Selection {\n  interface SelectionBoxEventArgs<T> {\n    e: T\n    view: CellView\n    cell: Cell\n    x: number\n    y: number\n  }\n\n  export interface BoxEventArgs {\n    'box:mousedown': SelectionBoxEventArgs<JQuery.MouseDownEvent>\n    'box:mousemove': SelectionBoxEventArgs<JQuery.MouseMoveEvent>\n    'box:mouseup': SelectionBoxEventArgs<JQuery.MouseUpEvent>\n  }\n\n  export interface SelectionEventArgs {\n    'cell:selected': { cell: Cell; options: Model.SetOptions }\n    'node:selected': { cell: Cell; node: Node; options: Model.SetOptions }\n    'edge:selected': { cell: Cell; edge: Edge; options: Model.SetOptions }\n    'cell:unselected': { cell: Cell; options: Model.SetOptions }\n    'node:unselected': { cell: Cell; node: Node; options: Model.SetOptions }\n    'edge:unselected': { cell: Cell; edge: Edge; options: Model.SetOptions }\n    'selection:changed': {\n      added: Cell[]\n      removed: Cell[]\n      selected: Cell[]\n      options: Model.SetOptions\n    }\n  }\n\n  export interface EventArgs extends BoxEventArgs, SelectionEventArgs {}\n}\n\nexport interface Selection extends Handle {}\n\nObjectExt.applyMixins(Selection, Handle)\n\n// private\n// -------\nnamespace Private {\n  const base = 'widget-selection'\n\n  export const classNames = {\n    root: base,\n    inner: `${base}-inner`,\n    box: `${base}-box`,\n    content: `${base}-content`,\n    rubberband: `${base}-rubberband`,\n    selected: `${base}-selected`,\n  }\n\n  export const documentEvents = {\n    mousemove: 'adjustSelection',\n    touchmove: 'adjustSelection',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n    touchcancel: 'onMouseUp',\n  }\n\n  export const defaultOptions: Partial<Selection.Options> = {\n    movable: true,\n    following: true,\n    strict: false,\n    useCellGeometry: false,\n    content(selection) {\n      return StringExt.template(\n        '<%= length %> node<%= length > 1 ? \"s\":\"\" %> selected.',\n      )({ length: selection.length })\n    },\n    handles: [\n      {\n        name: 'remove',\n        position: 'nw',\n        events: {\n          mousedown: 'deleteSelectedCells',\n        },\n      },\n      {\n        name: 'rotate',\n        position: 'sw',\n        events: {\n          mousedown: 'startRotate',\n          mousemove: 'doRotate',\n          mouseup: 'stopRotate',\n        },\n      },\n      {\n        name: 'resize',\n        position: 'se',\n        events: {\n          mousedown: 'startResize',\n          mousemove: 'doResize',\n          mouseup: 'stopResize',\n        },\n      },\n    ],\n  }\n\n  export function depthComparator(cell: Cell) {\n    return cell.getAncestors().length\n  }\n}\n\nnamespace EventData {\n  export interface Common {\n    action: 'selecting' | 'translating'\n  }\n\n  export interface Selecting extends Common {\n    action: 'selecting'\n    moving?: boolean\n    clientX: number\n    clientY: number\n    offsetX: number\n    offsetY: number\n    scrollerX: number\n    scrollerY: number\n  }\n\n  export interface Translating extends Common {\n    action: 'translating'\n    clientX: number\n    clientY: number\n    originX: number\n    originY: number\n  }\n\n  export interface SelectionBox {\n    activeView: CellView\n  }\n\n  export interface Rotation {\n    rotated?: boolean\n    center: Point.PointLike\n    start: number\n    angles: { [id: string]: number }\n  }\n\n  export interface Resizing {\n    resized?: boolean\n    bbox: Rectangle\n    cells: Cell[]\n    minWidth: number\n    minHeight: number\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}