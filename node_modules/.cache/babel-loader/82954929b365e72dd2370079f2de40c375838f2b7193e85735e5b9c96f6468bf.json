{"ast":null,"code":"import { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class ToolsView extends View {\n  constructor(options = {}) {\n    super();\n    this.svgContainer = this.createContainer(true, options);\n    this.htmlContainer = this.createContainer(false, options);\n    this.config(options);\n  }\n  get name() {\n    return this.options.name;\n  }\n  get graph() {\n    return this.cellView.graph;\n  }\n  get cell() {\n    return this.cellView.cell;\n  }\n  get [Symbol.toStringTag]() {\n    return ToolsView.toStringTag;\n  }\n  createContainer(svg, options) {\n    const container = svg ? View.createElement('g', true) : View.createElement('div', false);\n    Dom.addClass(container, this.prefixClassName('cell-tools'));\n    if (options.className) {\n      Dom.addClass(container, options.className);\n    }\n    return container;\n  }\n  config(options) {\n    this.options = Object.assign(Object.assign({}, this.options), options);\n    if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n      return this;\n    }\n    this.cellView = options.view;\n    if (this.cell.isEdge()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n    } else if (this.cell.isNode()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n    }\n    this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n    this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n    if (this.name) {\n      this.svgContainer.setAttribute('data-tools-name', this.name);\n      this.htmlContainer.setAttribute('data-tools-name', this.name);\n    }\n    const tools = this.options.items;\n    if (!Array.isArray(tools)) {\n      return this;\n    }\n    this.tools = [];\n    const normalizedTools = [];\n    tools.forEach(meta => {\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        if (meta.name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n        if (name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      }\n    });\n    for (let i = 0; i < normalizedTools.length; i += 1) {\n      const meta = normalizedTools[i];\n      let tool;\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        tool = meta;\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n        const args = typeof meta === 'object' ? meta.args || {} : {};\n        if (name) {\n          if (this.cell.isNode()) {\n            const ctor = NodeTool.registry.get(name);\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return NodeTool.registry.onNotFound(name);\n            }\n          } else if (this.cell.isEdge()) {\n            const ctor = EdgeTool.registry.get(name);\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return EdgeTool.registry.onNotFound(name);\n            }\n          }\n        }\n      }\n      if (tool) {\n        tool.config(this.cellView, this);\n        tool.render();\n        const container = tool.options.isSVGElement !== false ? this.svgContainer : this.htmlContainer;\n        container.appendChild(tool.container);\n        this.tools.push(tool);\n      }\n    }\n    return this;\n  }\n  update(options = {}) {\n    const tools = this.tools;\n    if (tools) {\n      tools.forEach(tool => {\n        if (options.toolId !== tool.cid && tool.isVisible()) {\n          tool.update();\n        }\n      });\n    }\n    return this;\n  }\n  focus(focusedTool) {\n    const tools = this.tools;\n    if (tools) {\n      tools.forEach(tool => {\n        if (focusedTool === tool) {\n          tool.show();\n        } else {\n          tool.hide();\n        }\n      });\n    }\n    return this;\n  }\n  blur(blurredTool) {\n    const tools = this.tools;\n    if (tools) {\n      tools.forEach(tool => {\n        if (tool !== blurredTool && !tool.isVisible()) {\n          tool.show();\n          tool.update();\n        }\n      });\n    }\n    return this;\n  }\n  hide() {\n    return this.focus(null);\n  }\n  show() {\n    return this.blur(null);\n  }\n  remove() {\n    const tools = this.tools;\n    if (tools) {\n      tools.forEach(tool => tool.remove());\n      this.tools = null;\n    }\n    Dom.remove(this.svgContainer);\n    Dom.remove(this.htmlContainer);\n    return super.remove();\n  }\n  mount() {\n    const tools = this.tools;\n    const cellView = this.cellView;\n    if (cellView && tools) {\n      const hasSVG = tools.some(tool => tool.options.isSVGElement !== false);\n      const hasHTML = tools.some(tool => tool.options.isSVGElement === false);\n      if (hasSVG) {\n        const parent = this.options.local ? cellView.container : cellView.graph.view.decorator;\n        parent.appendChild(this.svgContainer);\n      }\n      if (hasHTML) {\n        this.graph.container.appendChild(this.htmlContainer);\n      }\n    }\n    return this;\n  }\n}\n(function (ToolsView) {\n  ToolsView.toStringTag = `X6.${ToolsView.name}`;\n  function isToolsView(instance) {\n    if (instance == null) {\n      return false;\n    }\n    if (instance instanceof ToolsView) {\n      return true;\n    }\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n    if ((tag == null || tag === ToolsView.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function') {\n      return true;\n    }\n    return false;\n  }\n  ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n(function (ToolsView) {\n  class ToolItem extends View {\n    constructor(options = {}) {\n      super();\n      this.visible = true;\n      this.options = this.getOptions(options);\n      this.container = View.createElement(this.options.tagName || 'g', this.options.isSVGElement !== false);\n      Dom.addClass(this.container, this.prefixClassName('cell-tool'));\n      if (typeof this.options.className === 'string') {\n        Dom.addClass(this.container, this.options.className);\n      }\n      this.init();\n    }\n    static getDefaults() {\n      return this.defaults;\n    }\n    static config(options) {\n      this.defaults = this.getOptions(options);\n    }\n    static getOptions(options) {\n      return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n    }\n    get graph() {\n      return this.cellView.graph;\n    }\n    get cell() {\n      return this.cellView.cell;\n    }\n    get name() {\n      return this.options.name;\n    }\n    get [Symbol.toStringTag]() {\n      return ToolItem.toStringTag;\n    }\n    init() {}\n    getOptions(options) {\n      const ctor = this.constructor;\n      return ctor.getOptions(options);\n    }\n    delegateEvents() {\n      if (this.options.events) {\n        super.delegateEvents(this.options.events);\n      }\n      return this;\n    }\n    config(view, toolsView) {\n      this.cellView = view;\n      this.parent = toolsView;\n      this.stamp(this.container);\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.container, this.prefixClassName('node-tool'));\n      }\n      if (this.name) {\n        this.container.setAttribute('data-tool-name', this.name);\n      }\n      this.delegateEvents();\n      return this;\n    }\n    render() {\n      this.empty();\n      const markup = this.options.markup;\n      if (markup) {\n        const meta = Markup.isStringMarkup(markup) ? Markup.parseStringMarkup(markup) : Markup.parseJSONMarkup(markup);\n        this.container.appendChild(meta.fragment);\n        this.childNodes = meta.selectors;\n      }\n      this.onRender();\n      return this;\n    }\n    onRender() {}\n    update() {\n      return this;\n    }\n    stamp(elem) {\n      if (elem) {\n        elem.setAttribute('data-cell-id', this.cellView.cell.id);\n      }\n    }\n    show() {\n      this.container.style.display = '';\n      this.visible = true;\n      return this;\n    }\n    hide() {\n      this.container.style.display = 'none';\n      this.visible = false;\n      return this;\n    }\n    isVisible() {\n      return !!this.visible;\n    }\n    focus() {\n      const opacity = this.options.focusOpacity;\n      if (opacity != null && Number.isFinite(opacity)) {\n        this.container.style.opacity = `${opacity}`;\n      }\n      this.parent.focus(this);\n      return this;\n    }\n    blur() {\n      this.container.style.opacity = '';\n      this.parent.blur(this);\n      return this;\n    }\n    guard(evt) {\n      if (this.graph == null || this.cellView == null) {\n        return true;\n      }\n      return this.graph.view.guard(evt, this.cellView);\n    }\n  }\n  // #region static\n  ToolItem.defaults = {\n    isSVGElement: true,\n    tagName: 'g'\n  };\n  ToolsView.ToolItem = ToolItem;\n  (function (ToolItem) {\n    let counter = 0;\n    function getClassName(name) {\n      if (name) {\n        return StringExt.pascalCase(name);\n      }\n      counter += 1;\n      return `CustomTool${counter}`;\n    }\n    function define(options) {\n      const tool = ObjectExt.createClass(getClassName(options.name), this);\n      tool.config(options);\n      return tool;\n    }\n    ToolItem.define = define;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n  (function (ToolItem) {\n    ToolItem.toStringTag = `X6.${ToolItem.name}`;\n    function isToolItem(instance) {\n      if (instance == null) {\n        return false;\n      }\n      if (instance instanceof ToolItem) {\n        return true;\n      }\n      const tag = instance[Symbol.toStringTag];\n      const view = instance;\n      if ((tag == null || tag === ToolItem.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function' && typeof view.isVisible === 'function') {\n        return true;\n      }\n      return false;\n    }\n    ToolItem.isToolItem = isToolItem;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));","map":{"version":3,"names":["Dom","ObjectExt","StringExt","NodeTool","EdgeTool","View","CellView","Markup","ToolsView","constructor","options","svgContainer","createContainer","htmlContainer","config","name","graph","cellView","cell","Symbol","toStringTag","svg","container","createElement","addClass","prefixClassName","className","Object","assign","isCellView","view","isEdge","isNode","setAttribute","id","tools","items","Array","isArray","normalizedTools","forEach","meta","ToolItem","isToolItem","unshift","push","i","length","tool","args","ctor","registry","get","onNotFound","render","isSVGElement","appendChild","update","toolId","cid","isVisible","focus","focusedTool","show","hide","blur","blurredTool","remove","mount","hasSVG","some","hasHTML","parent","local","decorator","isToolsView","instance","tag","visible","getOptions","tagName","init","getDefaults","defaults","merge","cloneDeep","delegateEvents","events","toolsView","stamp","empty","markup","isStringMarkup","parseStringMarkup","parseJSONMarkup","fragment","childNodes","selectors","onRender","elem","style","display","opacity","focusOpacity","Number","isFinite","guard","evt","counter","getClassName","pascalCase","define","createClass"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/view/tool.ts"],"sourcesContent":["import { KeyValue } from '../types'\nimport { Dom, ObjectExt, StringExt } from '../util'\nimport { NodeTool, EdgeTool } from '../registry/tool'\nimport { View } from './view'\nimport { CellView } from './cell'\nimport { Markup } from './markup'\n\nexport class ToolsView extends View {\n  public tools: ToolsView.ToolItem[] | null\n  public options: ToolsView.Options\n  public cellView: CellView\n  public svgContainer: SVGGElement\n  public htmlContainer: HTMLDivElement\n\n  public get name() {\n    return this.options.name\n  }\n\n  public get graph() {\n    return this.cellView.graph\n  }\n\n  public get cell() {\n    return this.cellView.cell\n  }\n\n  protected get [Symbol.toStringTag]() {\n    return ToolsView.toStringTag\n  }\n\n  constructor(options: ToolsView.Options = {}) {\n    super()\n    this.svgContainer = this.createContainer(true, options) as SVGGElement\n    this.htmlContainer = this.createContainer(false, options) as HTMLDivElement\n    this.config(options)\n  }\n\n  protected createContainer(svg: boolean, options: ToolsView.Options) {\n    const container = svg\n      ? View.createElement('g', true)\n      : View.createElement('div', false)\n    Dom.addClass(container, this.prefixClassName('cell-tools'))\n    if (options.className) {\n      Dom.addClass(container, options.className)\n    }\n    return container\n  }\n\n  config(options: ToolsView.ConfigOptions) {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n      return this\n    }\n\n    this.cellView = options.view\n\n    if (this.cell.isEdge()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'))\n      Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'))\n    } else if (this.cell.isNode()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'))\n      Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'))\n    }\n\n    this.svgContainer.setAttribute('data-cell-id', this.cell.id)\n    this.htmlContainer.setAttribute('data-cell-id', this.cell.id)\n\n    if (this.name) {\n      this.svgContainer.setAttribute('data-tools-name', this.name)\n      this.htmlContainer.setAttribute('data-tools-name', this.name)\n    }\n\n    const tools = this.options.items\n    if (!Array.isArray(tools)) {\n      return this\n    }\n\n    this.tools = []\n\n    const normalizedTools: typeof tools = []\n\n    tools.forEach((meta) => {\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        if (meta.name === 'vertices') {\n          normalizedTools.unshift(meta)\n        } else {\n          normalizedTools.push(meta)\n        }\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta\n        if (name === 'vertices') {\n          normalizedTools.unshift(meta)\n        } else {\n          normalizedTools.push(meta)\n        }\n      }\n    })\n\n    for (let i = 0; i < normalizedTools.length; i += 1) {\n      const meta = normalizedTools[i]\n      let tool: ToolsView.ToolItem | undefined\n\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        tool = meta\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta\n        const args = typeof meta === 'object' ? meta.args || {} : {}\n        if (name) {\n          if (this.cell.isNode()) {\n            const ctor = NodeTool.registry.get(name)\n            if (ctor) {\n              tool = new ctor(args) // eslint-disable-line\n            } else {\n              return NodeTool.registry.onNotFound(name)\n            }\n          } else if (this.cell.isEdge()) {\n            const ctor = EdgeTool.registry.get(name)\n            if (ctor) {\n              tool = new ctor(args) // eslint-disable-line\n            } else {\n              return EdgeTool.registry.onNotFound(name)\n            }\n          }\n        }\n      }\n\n      if (tool) {\n        tool.config(this.cellView, this)\n        tool.render()\n        const container =\n          tool.options.isSVGElement !== false\n            ? this.svgContainer\n            : this.htmlContainer\n        container.appendChild(tool.container)\n        this.tools.push(tool)\n      }\n    }\n\n    return this\n  }\n\n  update(options: ToolsView.UpdateOptions = {}) {\n    const tools = this.tools\n    if (tools) {\n      tools.forEach((tool) => {\n        if (options.toolId !== tool.cid && tool.isVisible()) {\n          tool.update()\n        }\n      })\n    }\n    return this\n  }\n\n  focus(focusedTool: ToolsView.ToolItem | null) {\n    const tools = this.tools\n    if (tools) {\n      tools.forEach((tool) => {\n        if (focusedTool === tool) {\n          tool.show()\n        } else {\n          tool.hide()\n        }\n      })\n    }\n\n    return this\n  }\n\n  blur(blurredTool: ToolsView.ToolItem | null) {\n    const tools = this.tools\n    if (tools) {\n      tools.forEach((tool) => {\n        if (tool !== blurredTool && !tool.isVisible()) {\n          tool.show()\n          tool.update()\n        }\n      })\n    }\n\n    return this\n  }\n\n  hide() {\n    return this.focus(null)\n  }\n\n  show() {\n    return this.blur(null)\n  }\n\n  remove() {\n    const tools = this.tools\n    if (tools) {\n      tools.forEach((tool) => tool.remove())\n      this.tools = null\n    }\n\n    Dom.remove(this.svgContainer)\n    Dom.remove(this.htmlContainer)\n    return super.remove()\n  }\n\n  mount() {\n    const tools = this.tools\n    const cellView = this.cellView\n    if (cellView && tools) {\n      const hasSVG = tools.some((tool) => tool.options.isSVGElement !== false)\n      const hasHTML = tools.some((tool) => tool.options.isSVGElement === false)\n      if (hasSVG) {\n        const parent = this.options.local\n          ? cellView.container\n          : cellView.graph.view.decorator\n        parent.appendChild(this.svgContainer)\n      }\n\n      if (hasHTML) {\n        this.graph.container.appendChild(this.htmlContainer)\n      }\n    }\n    return this\n  }\n}\n\nexport namespace ToolsView {\n  export interface Options extends ConfigOptions {\n    className?: string\n  }\n\n  export interface ConfigOptions {\n    view?: CellView\n    name?: string\n    local?: boolean\n    items?:\n      | (\n          | ToolItem\n          | string\n          | NodeTool.NativeNames\n          | NodeTool.NativeItem\n          | NodeTool.ManaualItem\n          | EdgeTool.NativeNames\n          | EdgeTool.NativeItem\n          | EdgeTool.ManaualItem\n        )[]\n      | null\n  }\n\n  export interface UpdateOptions {\n    toolId?: string\n  }\n}\n\nexport namespace ToolsView {\n  export const toStringTag = `X6.${ToolsView.name}`\n\n  export function isToolsView(instance: any): instance is ToolsView {\n    if (instance == null) {\n      return false\n    }\n\n    if (instance instanceof ToolsView) {\n      return true\n    }\n\n    const tag = instance[Symbol.toStringTag]\n    const view = instance as ToolsView\n\n    if (\n      (tag == null || tag === toStringTag) &&\n      view.graph != null &&\n      view.cell != null &&\n      typeof view.config === 'function' &&\n      typeof view.update === 'function' &&\n      typeof view.focus === 'function' &&\n      typeof view.blur === 'function' &&\n      typeof view.show === 'function' &&\n      typeof view.hide === 'function'\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n\nexport namespace ToolsView {\n  export class ToolItem<\n    TargetView extends CellView = CellView,\n    Options extends ToolItem.Options = ToolItem.Options,\n  > extends View {\n    // #region static\n\n    protected static defaults: ToolItem.Options = {\n      isSVGElement: true,\n      tagName: 'g',\n    }\n\n    public static getDefaults<T extends ToolItem.Options>() {\n      return this.defaults as T\n    }\n\n    public static config<T extends ToolItem.Options = ToolItem.Options>(\n      options: Partial<T>,\n    ) {\n      this.defaults = this.getOptions(options)\n    }\n\n    public static getOptions<T extends ToolItem.Options = ToolItem.Options>(\n      options: Partial<T>,\n    ): T {\n      return ObjectExt.merge(\n        ObjectExt.cloneDeep(this.getDefaults()),\n        options,\n      ) as T\n    }\n\n    // #endregion\n\n    public readonly options: Options\n\n    public container: HTMLElement | SVGElement\n\n    public parent: ToolsView\n\n    protected cellView: TargetView\n\n    protected visible = true\n\n    protected childNodes: KeyValue<Element>\n\n    public get graph() {\n      return this.cellView.graph\n    }\n\n    public get cell() {\n      return this.cellView.cell\n    }\n\n    public get name() {\n      return this.options.name\n    }\n\n    protected get [Symbol.toStringTag]() {\n      return ToolItem.toStringTag\n    }\n\n    constructor(options: Partial<Options> = {}) {\n      super()\n\n      this.options = this.getOptions(options)\n      this.container = View.createElement(\n        this.options.tagName || 'g',\n        this.options.isSVGElement !== false,\n      )\n\n      Dom.addClass(this.container, this.prefixClassName('cell-tool'))\n\n      if (typeof this.options.className === 'string') {\n        Dom.addClass(this.container, this.options.className)\n      }\n\n      this.init()\n    }\n\n    protected init() {}\n\n    protected getOptions(options: Partial<Options>): Options {\n      const ctor = this.constructor as any as ToolItem\n      return ctor.getOptions(options) as Options\n    }\n\n    delegateEvents() {\n      if (this.options.events) {\n        super.delegateEvents(this.options.events)\n      }\n      return this\n    }\n\n    config(view: CellView, toolsView: ToolsView) {\n      this.cellView = view as TargetView\n      this.parent = toolsView\n      this.stamp(this.container)\n\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.container, this.prefixClassName('edge-tool'))\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.container, this.prefixClassName('node-tool'))\n      }\n\n      if (this.name) {\n        this.container.setAttribute('data-tool-name', this.name)\n      }\n\n      this.delegateEvents()\n\n      return this\n    }\n\n    render() {\n      this.empty()\n\n      const markup = this.options.markup\n      if (markup) {\n        const meta = Markup.isStringMarkup(markup)\n          ? Markup.parseStringMarkup(markup)\n          : Markup.parseJSONMarkup(markup)\n        this.container.appendChild(meta.fragment)\n        this.childNodes = meta.selectors as KeyValue<Element>\n      }\n\n      this.onRender()\n      return this\n    }\n\n    protected onRender() {}\n\n    update() {\n      return this\n    }\n\n    protected stamp(elem: Element) {\n      if (elem) {\n        elem.setAttribute('data-cell-id', this.cellView.cell.id)\n      }\n    }\n\n    show() {\n      this.container.style.display = ''\n      this.visible = true\n      return this\n    }\n\n    hide() {\n      this.container.style.display = 'none'\n      this.visible = false\n      return this\n    }\n\n    isVisible() {\n      return !!this.visible\n    }\n\n    focus() {\n      const opacity = this.options.focusOpacity\n      if (opacity != null && Number.isFinite(opacity)) {\n        this.container.style.opacity = `${opacity}`\n      }\n      this.parent.focus(this)\n      return this\n    }\n\n    blur() {\n      this.container.style.opacity = ''\n      this.parent.blur(this)\n      return this\n    }\n\n    protected guard(evt: JQuery.TriggeredEvent) {\n      if (this.graph == null || this.cellView == null) {\n        return true\n      }\n\n      return this.graph.view.guard(evt, this.cellView)\n    }\n  }\n\n  export namespace ToolItem {\n    export interface Options {\n      name?: string\n      tagName?: string\n      isSVGElement?: boolean\n      className?: string\n      markup?: Markup\n      events?: View.Events | null\n      documentEvents?: View.Events | null\n      focusOpacity?: number\n    }\n  }\n\n  export namespace ToolItem {\n    export type Definition =\n      | typeof ToolItem\n      | (new (options: ToolItem.Options) => ToolItem)\n\n    let counter = 0\n    function getClassName(name?: string) {\n      if (name) {\n        return StringExt.pascalCase(name)\n      }\n      counter += 1\n      return `CustomTool${counter}`\n    }\n\n    export function define<T extends Options>(options: T) {\n      const tool = ObjectExt.createClass<Definition>(\n        getClassName(options.name),\n        this as Definition,\n      ) as typeof ToolItem\n\n      tool.config(options)\n      return tool\n    }\n  }\n\n  export namespace ToolItem {\n    export const toStringTag = `X6.${ToolItem.name}`\n\n    export function isToolItem(instance: any): instance is ToolItem {\n      if (instance == null) {\n        return false\n      }\n\n      if (instance instanceof ToolItem) {\n        return true\n      }\n\n      const tag = instance[Symbol.toStringTag]\n      const view = instance as ToolItem\n\n      if (\n        (tag == null || tag === toStringTag) &&\n        view.graph != null &&\n        view.cell != null &&\n        typeof view.config === 'function' &&\n        typeof view.update === 'function' &&\n        typeof view.focus === 'function' &&\n        typeof view.blur === 'function' &&\n        typeof view.show === 'function' &&\n        typeof view.hide === 'function' &&\n        typeof view.isVisible === 'function'\n      ) {\n        return true\n      }\n\n      return false\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}