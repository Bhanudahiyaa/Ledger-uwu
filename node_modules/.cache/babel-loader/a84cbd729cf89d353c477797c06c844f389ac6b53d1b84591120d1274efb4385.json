{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { gl } from '../gl';\nexport var RenderPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.GeometryComponentManager), _dec4 = inject(IDENTIFIER.MaterialComponentManager), _dec5 = inject(IDENTIFIER.CullableComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec7 = inject(IDENTIFIER.HierarchyComponentManager), _dec8 = inject(IDENTIFIER.Systems), _dec9 = named(IDENTIFIER.FrameGraphSystem), _dec10 = inject(IDENTIFIER.RenderEngine), _dec11 = inject(IDENTIFIER.ResourcePool), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function RenderPass() {\n    var _this = this;\n    _classCallCheck(this, RenderPass);\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n    _initializerDefineProperty(this, \"geometry\", _descriptor2, this);\n    _initializerDefineProperty(this, \"material\", _descriptor3, this);\n    _initializerDefineProperty(this, \"cullable\", _descriptor4, this);\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor6, this);\n    _initializerDefineProperty(this, \"frameGraphSystem\", _descriptor7, this);\n    _initializerDefineProperty(this, \"engine\", _descriptor8, this);\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor9, this);\n    this.modelCache = {};\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'color buffer', {\n        width: 1,\n        height: 1,\n        usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      };\n    };\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var resourceNode, framebuffer, _iterator, _step, view, canvas;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resourceNode = fg.getResourceNode(pass.data.output);\n                framebuffer = _this.resourcePool.getOrCreateResource(resourceNode.resource); // initialize model of each mesh\n\n                _iterator = _createForOfIteratorHelper(views);\n                _context.prev = 3;\n                _iterator.s();\n              case 5:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 11;\n                  break;\n                }\n                view = _step.value;\n                _context.next = 9;\n                return _this.initView(view);\n              case 9:\n                _context.next = 5;\n                break;\n              case 11:\n                _context.next = 16;\n                break;\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](3);\n                _iterator.e(_context.t0);\n              case 16:\n                _context.prev = 16;\n                _iterator.f();\n                return _context.finish(16);\n              case 19:\n                canvas = _this.engine.getCanvas();\n                framebuffer.resize({\n                  width: canvas.width,\n                  height: canvas.height\n                });\n                _this.engine.setScissor({\n                  enable: false\n                });\n                _this.engine.clear({\n                  framebuffer: framebuffer,\n                  color: views[0].getClearColor(),\n                  // TODO: use clearColor defined in view\n                  depth: 1\n                });\n                _this.engine.useFramebuffer(framebuffer, function () {\n                  var _iterator2 = _createForOfIteratorHelper(views),\n                    _step2;\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var view = _step2.value;\n\n                      // must do rendering in a sync way\n                      _this.renderView(view);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                });\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 13, 16, 19]]);\n      }));\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  _createClass(RenderPass, [{\n    key: \"renderView\",\n    value: function renderView(view) {\n      var scene = view.getScene();\n      var camera = view.getCamera(); // get VP matrix from camera\n\n      var viewMatrix = camera.getViewTransform();\n      var viewProjectionMatrix = mat4.multiply(mat4.create(), camera.getPerspective(), viewMatrix); // TODO: use cached planes if camera was not changed\n\n      camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n      var _view$getViewport = view.getViewport(),\n        x = _view$getViewport.x,\n        y = _view$getViewport.y,\n        width = _view$getViewport.width,\n        height = _view$getViewport.height;\n      this.engine.viewport({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }); // this.engine.setScissor({\n      //   enable: true,\n      //   box: { x, y, width, height },\n      // });\n      // this.engine.clear({\n      //   // framebuffer,\n      //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n      //   depth: 1,\n      // });\n\n      var _iterator3 = _createForOfIteratorHelper(scene.getEntities()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var meshEntity = _step3.value;\n          this.renderMesh(meshEntity, {\n            camera: camera,\n            view: view,\n            viewMatrix: viewMatrix\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"renderMesh\",\n    value: function renderMesh(meshEntity, _ref2) {\n      var camera = _ref2.camera,\n        view = _ref2.view,\n        viewMatrix = _ref2.viewMatrix;\n      var mesh = this.mesh.getComponentByEntity(meshEntity);\n      if (!mesh || !mesh.visible) {\n        return;\n      } // filter meshes with frustum culling\n      // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n      //   return;\n      // }\n\n      var material = mesh.material;\n      var geometry = mesh.geometry; // geometry 在自己的 System 中完成脏检查后的更新\n\n      if (!geometry || geometry.dirty || !material) {\n        return;\n      } // get model matrix from mesh\n\n      var transform = this.transform.getComponentByEntity(meshEntity);\n      var modelViewMatrix = mat4.multiply(mat4.create(), viewMatrix, transform.worldTransform);\n      var _view$getViewport2 = view.getViewport(),\n        width = _view$getViewport2.width,\n        height = _view$getViewport2.height; // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n\n      material.setUniform({\n        projectionMatrix: camera.getPerspective(),\n        modelViewMatrix: modelViewMatrix,\n        modelMatrix: transform.worldTransform,\n        viewMatrix: viewMatrix,\n        cameraPosition: camera.getPosition(),\n        u_viewport: [width, height]\n      });\n      if (mesh.model) {\n        mesh.model.draw({\n          uniforms: material.uniforms.reduce(function (cur, prev) {\n            cur[prev.name] = prev.data;\n            return cur;\n          }, {})\n        });\n        material.uniforms.forEach(function (u) {\n          u.dirty = false;\n        });\n        material.dirty = false;\n      }\n    }\n  }, {\n    key: \"initMesh\",\n    value: function () {\n      var _initMesh = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(meshEntity, view) {\n        var mesh, material, geometry, modelCacheKey, _this$engine, createModel, createAttribute, modelInitializationOptions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                mesh = this.mesh.getComponentByEntity(meshEntity);\n                if (mesh) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 3:\n                material = mesh.material;\n                geometry = mesh.geometry;\n                if (!(!geometry || geometry.dirty || !material)) {\n                  _context2.next = 7;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 7:\n                if (mesh.model) {\n                  _context2.next = 24;\n                  break;\n                }\n                modelCacheKey = \"m-\".concat(material.entity, \"-g-\").concat(geometry.entity);\n                if (!this.modelCache[modelCacheKey]) {\n                  _context2.next = 12;\n                  break;\n                }\n                mesh.model = this.modelCache[modelCacheKey];\n                return _context2.abrupt(\"return\");\n              case 12:\n                material.setUniform({\n                  projectionMatrix: 1,\n                  modelViewMatrix: 1,\n                  modelMatrix: 1,\n                  viewMatrix: 1,\n                  cameraPosition: 1,\n                  u_viewport: 1\n                });\n                _this$engine = this.engine, createModel = _this$engine.createModel, createAttribute = _this$engine.createAttribute;\n                modelInitializationOptions = {\n                  vs: material.vertexShaderGLSL,\n                  fs: material.fragmentShaderGLSL,\n                  defines: material.defines,\n                  attributes: geometry.attributes.reduce(function (cur, prev) {\n                    if (prev.data && prev.buffer) {\n                      cur[prev.name] = createAttribute({\n                        buffer: prev.buffer,\n                        attributes: prev.attributes,\n                        arrayStride: prev.arrayStride,\n                        stepMode: prev.stepMode,\n                        divisor: prev.stepMode === 'vertex' ? 0 : 1\n                      });\n                    }\n                    return cur;\n                  }, {}),\n                  uniforms: material.uniforms.reduce(function (cur, prev) {\n                    cur[prev.name] = prev.data;\n                    return cur;\n                  }, {}),\n                  scissor: {\n                    enable: true,\n                    // @ts-ignore\n                    box: function box() {\n                      return view.getViewport();\n                    }\n                  }\n                };\n                if (material.cull) {\n                  modelInitializationOptions.cull = material.cull;\n                }\n                if (material.depth) {\n                  modelInitializationOptions.depth = material.depth;\n                }\n                if (material.blend) {\n                  modelInitializationOptions.blend = material.blend;\n                }\n                if (geometry.indicesBuffer) {\n                  modelInitializationOptions.elements = geometry.indicesBuffer;\n                }\n                if (geometry.maxInstancedCount) {\n                  modelInitializationOptions.instances = geometry.maxInstancedCount;\n                  modelInitializationOptions.count = geometry.vertexCount || 3;\n                }\n                _context2.next = 22;\n                return createModel(modelInitializationOptions);\n              case 22:\n                mesh.model = _context2.sent;\n                this.modelCache[modelCacheKey] = mesh.model;\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function initMesh(_x4, _x5) {\n        return _initMesh.apply(this, arguments);\n      }\n      return initMesh;\n    }()\n  }, {\n    key: \"initView\",\n    value: function () {\n      var _initView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(view) {\n        var scene, _iterator4, _step4, meshEntity;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                scene = view.getScene();\n                _iterator4 = _createForOfIteratorHelper(scene.getEntities());\n                _context3.prev = 2;\n                _iterator4.s();\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 10;\n                  break;\n                }\n                meshEntity = _step4.value;\n                _context3.next = 8;\n                return this.initMesh(meshEntity, view);\n              case 8:\n                _context3.next = 4;\n                break;\n              case 10:\n                _context3.next = 15;\n                break;\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](2);\n                _iterator4.e(_context3.t0);\n              case 15:\n                _context3.prev = 15;\n                _iterator4.f();\n                return _context3.finish(15);\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 12, 15, 18]]);\n      }));\n      function initView(_x6) {\n        return _initView.apply(this, arguments);\n      }\n      return initView;\n    }()\n  }]);\n  return RenderPass;\n}(), _class3.IDENTIFIER = 'Render Pass', _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"frameGraphSystem\", [_dec8, _dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec10], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["mat4","inject","injectable","named","IDENTIFIER","gl","RenderPass","_dec","_dec2","MeshComponentManager","_dec3","GeometryComponentManager","_dec4","MaterialComponentManager","_dec5","CullableComponentManager","_dec6","TransformComponentManager","_dec7","HierarchyComponentManager","_dec8","Systems","_dec9","FrameGraphSystem","_dec10","RenderEngine","_dec11","ResourcePool","_class","_class2","_temp","_class3","_this","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","modelCache","setup","fg","passNode","pass","output","createRenderTarget","width","height","usage","RENDER_ATTACHMENT","SAMPLED","COPY_SRC","data","write","execute","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","views","resourceNode","framebuffer","_iterator","_step","view","canvas","wrap","_callee$","_context","prev","next","getResourceNode","resourcePool","getOrCreateResource","resource","_createForOfIteratorHelper","s","n","done","value","initView","t0","e","f","finish","engine","getCanvas","resize","setScissor","enable","clear","color","getClearColor","depth","useFramebuffer","_iterator2","_step2","renderView","err","stop","_x","_x2","_x3","apply","arguments","_createClass","key","scene","getScene","camera","getCamera","viewMatrix","getViewTransform","viewProjectionMatrix","multiply","create","getPerspective","getFrustum","extractFromVPMatrix","_view$getViewport","getViewport","x","y","viewport","_iterator3","getEntities","_step3","meshEntity","renderMesh","_ref2","mesh","getComponentByEntity","visible","material","geometry","dirty","transform","modelViewMatrix","worldTransform","_view$getViewport2","setUniform","projectionMatrix","modelMatrix","cameraPosition","getPosition","u_viewport","model","draw","uniforms","reduce","cur","name","forEach","u","_initMesh","_callee2","modelCacheKey","_this$engine","createModel","createAttribute","modelInitializationOptions","_callee2$","_context2","abrupt","concat","entity","vs","vertexShaderGLSL","fs","fragmentShaderGLSL","defines","attributes","buffer","arrayStride","stepMode","divisor","scissor","box","cull","blend","indicesBuffer","elements","maxInstancedCount","instances","count","vertexCount","sent","initMesh","_x4","_x5","_initView","_callee3","_iterator4","_step4","_callee3$","_context3","_x6","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/renderer/passes/RenderPass.ts"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { Entity } from '../../..';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { GeometryComponent } from '../../geometry/GeometryComponent';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { CullableComponent } from '../../mesh/CullableComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { HierarchyComponent } from '../../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../../scenegraph/TransformComponent';\nimport { gl } from '../gl';\nimport { IAttribute } from '../IAttribute';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { ICamera, IRendererService, IView } from '../IRendererService';\nimport { IUniform } from '../IUniform';\nimport { IRenderPass } from './IRenderPass';\n\nexport interface RenderPassData {\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class RenderPass implements IRenderPass<RenderPassData> {\n  public static IDENTIFIER = 'Render Pass';\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private modelCache: Record<string, IModel> = {};\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<RenderPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'color buffer', {\n      width: 1,\n      height: 1,\n      usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<RenderPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    const resourceNode = fg.getResourceNode(pass.data.output);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    // initialize model of each mesh\n    for (const view of views) {\n      await this.initView(view);\n    }\n\n    const canvas = this.engine.getCanvas();\n    framebuffer.resize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    this.engine.setScissor({\n      enable: false,\n    });\n    this.engine.clear({\n      framebuffer,\n      color: views[0].getClearColor(), // TODO: use clearColor defined in view\n      depth: 1,\n    });\n\n    this.engine.useFramebuffer(framebuffer, () => {\n      for (const view of views) {\n        // must do rendering in a sync way\n        this.renderView(view);\n      }\n    });\n  };\n\n  public renderView(view: IView) {\n    const scene = view.getScene();\n    const camera = view.getCamera();\n\n    // get VP matrix from camera\n    const viewMatrix = camera.getViewTransform()!;\n    const viewProjectionMatrix = mat4.multiply(\n      mat4.create(),\n      camera.getPerspective(),\n      viewMatrix,\n    );\n    // TODO: use cached planes if camera was not changed\n    camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n    const { x, y, width, height } = view.getViewport();\n    this.engine.viewport({\n      x,\n      y,\n      width,\n      height,\n    });\n    // this.engine.setScissor({\n    //   enable: true,\n    //   box: { x, y, width, height },\n    // });\n    // this.engine.clear({\n    //   // framebuffer,\n    //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n    //   depth: 1,\n    // });\n\n    for (const meshEntity of scene.getEntities()) {\n      this.renderMesh(meshEntity, {\n        camera,\n        view,\n        viewMatrix,\n      });\n    }\n  }\n\n  private renderMesh(\n    meshEntity: Entity,\n    {\n      camera,\n      view,\n      viewMatrix,\n    }: {\n      camera: ICamera;\n      view: IView;\n      viewMatrix: mat4;\n    },\n  ) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh || !mesh.visible) {\n      return;\n    }\n\n    // filter meshes with frustum culling\n    // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n    //   return;\n    // }\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // geometry 在自己的 System 中完成脏检查后的更新\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    // get model matrix from mesh\n    const transform = this.transform.getComponentByEntity(meshEntity)!;\n\n    const modelViewMatrix = mat4.multiply(\n      mat4.create(),\n      viewMatrix,\n      transform.worldTransform,\n    );\n    const { width, height } = view.getViewport();\n\n    // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n    material.setUniform({\n      projectionMatrix: camera.getPerspective(),\n      modelViewMatrix,\n      modelMatrix: transform.worldTransform,\n      viewMatrix,\n      cameraPosition: camera.getPosition(),\n      u_viewport: [width, height],\n    });\n\n    if (mesh.model) {\n      mesh.model.draw({\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n      });\n\n      material.uniforms.forEach((u) => {\n        u.dirty = false;\n      });\n      material.dirty = false;\n    }\n  }\n\n  private async initMesh(meshEntity: Entity, view: IView) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh) {\n      return;\n    }\n\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    if (!mesh.model) {\n      const modelCacheKey = `m-${material.entity}-g-${geometry.entity}`;\n      if (this.modelCache[modelCacheKey]) {\n        mesh.model = this.modelCache[modelCacheKey];\n        return;\n      }\n\n      material.setUniform({\n        projectionMatrix: 1,\n        modelViewMatrix: 1,\n        modelMatrix: 1,\n        viewMatrix: 1,\n        cameraPosition: 1,\n        u_viewport: 1,\n      });\n\n      const { createModel, createAttribute } = this.engine;\n      const modelInitializationOptions: IModelInitializationOptions = {\n        vs: material.vertexShaderGLSL,\n        fs: material.fragmentShaderGLSL,\n        defines: material.defines,\n        attributes: geometry.attributes.reduce(\n          (cur: { [key: string]: IAttribute }, prev) => {\n            if (prev.data && prev.buffer) {\n              cur[prev.name] = createAttribute({\n                buffer: prev.buffer,\n                attributes: prev.attributes,\n                arrayStride: prev.arrayStride,\n                stepMode: prev.stepMode,\n                divisor: prev.stepMode === 'vertex' ? 0 : 1,\n              });\n            }\n            return cur;\n          },\n          {},\n        ),\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n        scissor: {\n          enable: true,\n          // @ts-ignore\n          box: () => view.getViewport(),\n        },\n      };\n\n      if (material.cull) {\n        modelInitializationOptions.cull = material.cull;\n      }\n      if (material.depth) {\n        modelInitializationOptions.depth = material.depth;\n      }\n      if (material.blend) {\n        modelInitializationOptions.blend = material.blend;\n      }\n\n      if (geometry.indicesBuffer) {\n        modelInitializationOptions.elements = geometry.indicesBuffer;\n      }\n\n      if (geometry.maxInstancedCount) {\n        modelInitializationOptions.instances = geometry.maxInstancedCount;\n        modelInitializationOptions.count = geometry.vertexCount || 3;\n      }\n\n      mesh.model = await createModel(modelInitializationOptions);\n      this.modelCache[modelCacheKey] = mesh.model;\n    }\n  }\n\n  private async initView(view: IView) {\n    const scene = view.getScene();\n    for (const meshEntity of scene.getEntities()) {\n      await this.initMesh(meshEntity, view);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}