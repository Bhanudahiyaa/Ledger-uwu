{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel, NsModel } from '../common/rx-model';\nimport { Deferred } from '../common/deferred';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelOptionProvider, IModelService, IModelContribution } from './interface';\nimport { contrib, Contribution, singleton, inject } from 'mana-syringe';\nlet ModelRegistry = class ModelRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** Deferred Model Map */\n    this.deferredModelMap = new Map();\n    /**\n     * 注册model\n     * @param options IModelOptions<T>\n     */\n    this.registerModel = options => {\n      const {\n        id,\n        getInitialValue,\n        modelFactory\n      } = options;\n      const toDispose = new DisposableCollection();\n      const defer = this.ensureModel(id);\n      if (defer.isResolved) {\n        console.error(options, 'model has been registerd');\n        return;\n      }\n      const initialValue = getInitialValue ? getInitialValue() : NsModel.EMPTY_VALUE;\n      const model = modelFactory ? modelFactory() : new RxModel(initialValue);\n      if (NsModel.isValidValue(initialValue)) {\n        defer.resolve(model);\n      }\n      if (options.watchChange) {\n        /** 绑定watch事件 */\n        options.watchChange(model, this).then(d => {\n          /** createModel 后 resolve */\n          if (!defer.isResolved) {\n            defer.resolve(model);\n          }\n          this.toDispose.pushAll([d, toDispose]);\n          toDispose.push(d);\n        });\n      }\n      return toDispose;\n    };\n    /**\n     * 查找 model\n     * @param token: Token<T>\n     */\n    this.findDeferredModel = token => {\n      return this.deferredModelMap.get(token);\n    };\n    /**\n     *  消费Model: await model resolve\n     * @param token: Token<T>\n     */\n    this.awaitModel = token => {\n      const defer = this.ensureModel(token);\n      return defer.promise;\n    };\n    /**\n     * 注册 定义在IModelOptionProvider中的Model\n     */\n    this.registerRuntimeModel = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        modelRegisterFunc\n      } = yield this.modelOptionProvider.getOption();\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      if (modelRegisterFunc) {\n        modelRegisterFunc(this, graphInstance);\n      }\n    });\n    /**\n     * 确保调用时有可用的Model\n     * @param id ModelId\n     */\n    this.ensureModel = token => {\n      const existDeferred = this.deferredModelMap.get(token);\n      if (existDeferred) {\n        return existDeferred;\n      }\n      /** 注册ModelDeferred */\n      const newDeferred = new Deferred();\n      this.deferredModelMap.set(token, newDeferred);\n      this.toDispose.push(Disposable.create(() => this.deferredModelMap.delete(token)));\n      return newDeferred;\n    };\n  }\n  /** app启动时，收集Model扩展点的注册项 */\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n    for (const contribution of contributions) {\n      contribution.registerModel(this);\n    }\n    this.registerRuntimeModel();\n  }\n  /** app停止的逻辑 */\n  onStop() {\n    this.toDispose.dispose();\n  }\n};\n__decorate([contrib(IModelContribution), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"contributionProvider\", void 0);\n__decorate([inject(IModelOptionProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"modelOptionProvider\", void 0);\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"graphProvider\", void 0);\nModelRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IModelService]\n})], ModelRegistry);\nexport { ModelRegistry };","map":{"version":3,"names":["DisposableCollection","Disposable","IFrontendApplicationContribution","RxModel","NsModel","Deferred","IGraphProvider","IModelOptionProvider","IModelService","IModelContribution","contrib","Contribution","singleton","inject","ModelRegistry","constructor","toDispose","deferredModelMap","Map","registerModel","options","id","getInitialValue","modelFactory","defer","ensureModel","isResolved","console","error","initialValue","EMPTY_VALUE","model","isValidValue","resolve","watchChange","then","d","pushAll","push","findDeferredModel","token","get","awaitModel","promise","registerRuntimeModel","__awaiter","modelRegisterFunc","modelOptionProvider","getOption","graphInstance","graphProvider","getGraphInstance","existDeferred","newDeferred","set","create","delete","onStart","contributions","contributionProvider","getContributions","contribution","onStop","dispose","__decorate"],"sources":["../../src/model-service/model-registry.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,oBAAoB,EAAEC,UAAU,QAAQ,sBAAsB;AACvE,SAASC,gCAAgC,QAAQ,yBAAyB;AAC1E,SAASC,OAAO,EAAEC,OAAO,QAAQ,oBAAoB;AACrD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,oBAAoB,EAAEC,aAAa,EAAEC,kBAAkB,QAAQ,aAAa;AACrF,SAASC,OAAO,EAAEC,YAAY,EAAEC,SAAS,EAAEC,MAAM,QAAQ,cAAc;AAKhE,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC,YAAA;IACL;IACQ,KAAAC,SAAS,GAAG,IAAIhB,oBAAoB,EAAE;IAC9C;IACQ,KAAAiB,gBAAgB,GAAG,IAAIC,GAAG,EAA6C;IAgB/E;;;;IAIA,KAAAC,aAAa,GAAOC,OAAyB,IAAI;MAC/C,MAAM;QAAEC,EAAE;QAAEC,eAAe;QAAEC;MAAY,CAAE,GAAGH,OAAO;MACrD,MAAMJ,SAAS,GAAG,IAAIhB,oBAAoB,EAAE;MAC5C,MAAMwB,KAAK,GAAG,IAAI,CAACC,WAAW,CAACJ,EAAE,CAAC;MAClC,IAAIG,KAAK,CAACE,UAAU,EAAE;QACpBC,OAAO,CAACC,KAAK,CAACR,OAAO,EAAE,0BAA0B,CAAC;QAClD;;MAEF,MAAMS,YAAY,GAAGP,eAAe,GAAGA,eAAe,EAAE,GAAGlB,OAAO,CAAC0B,WAAW;MAC9E,MAAMC,KAAK,GAAGR,YAAY,GACtBA,YAAY,EAAE,GACb,IAAIpB,OAAO,CAAI0B,YAAY,CAAuB;MACvD,IAAIzB,OAAO,CAAC4B,YAAY,CAAIH,YAAY,CAAC,EAAE;QACzCL,KAAK,CAACS,OAAO,CAACF,KAAK,CAAC;;MAEtB,IAAIX,OAAO,CAACc,WAAW,EAAE;QACvB;QACAd,OAAO,CAACc,WAAW,CAACH,KAAK,EAAE,IAAI,CAAC,CAACI,IAAI,CAACC,CAAC,IAAG;UACxC;UACA,IAAI,CAACZ,KAAK,CAACE,UAAU,EAAE;YACrBF,KAAK,CAACS,OAAO,CAACF,KAAK,CAAC;;UAEtB,IAAI,CAACf,SAAS,CAACqB,OAAO,CAAC,CAACD,CAAC,EAAEpB,SAAS,CAAC,CAAC;UACtCA,SAAS,CAACsB,IAAI,CAACF,CAAC,CAAC;QACnB,CAAC,CAAC;;MAEJ,OAAOpB,SAAS;IAClB,CAAC;IACD;;;;IAIA,KAAAuB,iBAAiB,GAAaC,KAAe,IAAI;MAC/C,OAAO,IAAI,CAACvB,gBAAgB,CAACwB,GAAG,CAACD,KAAK,CAAC;IACzC,CAAC;IACD;;;;IAIA,KAAAE,UAAU,GAAaF,KAAe,IAAI;MACxC,MAAMhB,KAAK,GAAG,IAAI,CAACC,WAAW,CAACe,KAAK,CAAC;MACrC,OAAOhB,KAAK,CAACmB,OAA8B;IAC7C,CAAC;IAID;;;IAGA,KAAAC,oBAAoB,GAAG,MAAWC,SAAA;MAChC,MAAM;QAAEC;MAAiB,CAAE,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACC,SAAS,EAAE;MACxE,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACC,aAAa,CAACC,gBAAgB,EAAE;MAEjE,IAAIL,iBAAiB,EAAE;QACrBA,iBAAiB,CAAC,IAAI,EAAEG,aAAa,CAAC;;IAE1C,CAAC;IACD;;;;IAIQ,KAAAxB,WAAW,GAAOe,KAAe,IAAI;MAC3C,MAAMY,aAAa,GAAG,IAAI,CAACnC,gBAAgB,CAACwB,GAAG,CAACD,KAAK,CAAC;MACtD,IAAIY,aAAa,EAAE;QACjB,OAAOA,aAAa;;MAEtB;MACA,MAAMC,WAAW,GAAG,IAAIhD,QAAQ,EAAW;MAC3C,IAAI,CAACY,gBAAgB,CAACqC,GAAG,CAACd,KAAK,EAAEa,WAAW,CAAC;MAC7C,IAAI,CAACrC,SAAS,CAACsB,IAAI,CAACrC,UAAU,CAACsD,MAAM,CAAC,MAAM,IAAI,CAACtC,gBAAgB,CAACuC,MAAM,CAAChB,KAAK,CAAC,CAAC,CAAC;MACjF,OAAOa,WAAW;IACpB,CAAC;EAIH;EA3FE;EACAI,OAAOA,CAAA;IACL,MAAMC,aAAa,GAAG,IAAI,CAACC,oBAAoB,CAACC,gBAAgB,EAAE;IAClE,KAAK,MAAMC,YAAY,IAAIH,aAAa,EAAE;MACxCG,YAAY,CAAC1C,aAAa,CAAC,IAAI,CAAC;;IAElC,IAAI,CAACyB,oBAAoB,EAAE;EAC7B;EACA;EACAkB,MAAMA,CAAA;IACJ,IAAI,CAAC9C,SAAS,CAAC+C,OAAO,EAAE;EAC1B;CAgFD;AA7FCC,UAAA,EAACtD,OAAO,CAACD,kBAAkB,CAAC,E,4FACsD;AA6DlFuD,UAAA,EAACnD,MAAM,CAACN,oBAAoB,CAAC,E,2FACoB;AA4BjDyD,UAAA,EAACnD,MAAM,CAACP,cAAc,CAAC,E,qFACyB;AAlGrCQ,aAAa,GAAAkD,UAAA,EADzBpD,SAAS,CAAC;EAAEF,OAAO,EAAE,CAACR,gCAAgC,EAAEM,aAAa;AAAC,CAAE,CAAC,C,EAC7DM,aAAa,CAmGzB;SAnGYA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}