{"ast":null,"code":"import { Registry } from '../../registry';\nimport { Markup } from '../../view';\nimport { Node } from '../../model/node';\nimport { NodeView } from '../../view/node';\nimport { Base } from '../base';\nexport class HTML extends Base {\n  get html() {\n    return this.getHTML();\n  }\n  set html(val) {\n    this.setHTML(val);\n  }\n  getHTML() {\n    return this.store.get('html');\n  }\n  setHTML(html, options = {}) {\n    if (html == null) {\n      this.removeHTML(options);\n    } else {\n      this.store.set('html', html, options);\n    }\n    return this;\n  }\n  removeHTML(options = {}) {\n    return this.store.remove('html', options);\n  }\n}\n(function (HTML) {\n  class View extends NodeView {\n    init() {\n      super.init();\n      this.cell.on('change:*', () => {\n        const shouldUpdate = this.graph.hook.shouldUpdateHTMLComponent(this.cell);\n        if (shouldUpdate) {\n          this.renderHTMLComponent();\n        }\n      });\n    }\n    confirmUpdate(flag) {\n      const ret = super.confirmUpdate(flag);\n      return this.handleAction(ret, View.action, () => this.renderHTMLComponent());\n    }\n    renderHTMLComponent() {\n      const container = this.selectors && this.selectors.foContent;\n      if (container) {\n        const $wrap = this.$(container).empty();\n        const component = this.graph.hook.getHTMLComponent(this.cell);\n        if (component) {\n          if (typeof component === 'string') {\n            $wrap.html(component);\n          } else {\n            $wrap.append(component);\n          }\n        }\n      }\n    }\n  }\n  HTML.View = View;\n  (function (View) {\n    View.action = 'html';\n    View.config({\n      bootstrap: [View.action],\n      actions: {\n        html: View.action\n      }\n    });\n    NodeView.registry.register('html-view', View);\n  })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n(function (HTML) {\n  HTML.config({\n    view: 'html-view',\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, Object.assign({}, Markup.getForeignObjectMarkup()), {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      }\n    }\n  });\n  Node.registry.register('html', HTML);\n})(HTML || (HTML = {}));\n(function (HTML) {\n  HTML.componentRegistry = Registry.create({\n    type: 'html componnet'\n  });\n})(HTML || (HTML = {}));","map":{"version":3,"names":["Registry","Markup","Node","NodeView","Base","HTML","html","getHTML","val","setHTML","store","get","options","removeHTML","set","remove","View","init","cell","on","shouldUpdate","graph","hook","shouldUpdateHTMLComponent","renderHTMLComponent","confirmUpdate","flag","ret","handleAction","action","container","selectors","foContent","$wrap","$","empty","component","getHTMLComponent","append","config","bootstrap","actions","registry","register","view","markup","tagName","selector","getForeignObjectMarkup","attrs","body","fill","stroke","refWidth","refHeight","fo","componentRegistry","create","type"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/shape/standard/html.ts"],"sourcesContent":["import { Registry } from '../../registry'\nimport { Markup } from '../../view'\nimport { Node } from '../../model/node'\nimport { NodeView } from '../../view/node'\nimport { Graph } from '../../graph/graph'\nimport { Base } from '../base'\n\nexport class HTML<\n  Properties extends HTML.Properties = HTML.Properties,\n> extends Base<Properties> {\n  get html() {\n    return this.getHTML()\n  }\n\n  set html(val: HTML.Component | HTML.UpdatableComponent | null | undefined) {\n    this.setHTML(val)\n  }\n\n  getHTML() {\n    return this.store.get<\n      HTML.Component | HTML.UpdatableComponent | null | undefined\n    >('html')\n  }\n\n  setHTML(\n    html: HTML.Component | HTML.UpdatableComponent | null | undefined,\n    options: Node.SetOptions = {},\n  ) {\n    if (html == null) {\n      this.removeHTML(options)\n    } else {\n      this.store.set('html', html, options)\n    }\n\n    return this\n  }\n\n  removeHTML(options: Node.SetOptions = {}) {\n    return this.store.remove('html', options)\n  }\n}\n\nexport namespace HTML {\n  export type Elem = string | HTMLElement | null | undefined\n  export type UnionElem = Elem | ((this: Graph, node: Node) => Elem)\n  export interface Properties extends Node.Properties {\n    html?:\n      | UnionElem\n      | {\n          render: UnionElem\n          shouldComponentUpdate?:\n            | boolean\n            | ((this: Graph, node: Node) => boolean)\n        }\n  }\n}\n\nexport namespace HTML {\n  export class View extends NodeView<HTML> {\n    protected init() {\n      super.init()\n      this.cell.on('change:*', () => {\n        const shouldUpdate = this.graph.hook.shouldUpdateHTMLComponent(\n          this.cell,\n        )\n        if (shouldUpdate) {\n          this.renderHTMLComponent()\n        }\n      })\n    }\n\n    confirmUpdate(flag: number) {\n      const ret = super.confirmUpdate(flag)\n      return this.handleAction(ret, View.action, () =>\n        this.renderHTMLComponent(),\n      )\n    }\n\n    protected renderHTMLComponent() {\n      const container = this.selectors && this.selectors.foContent\n      if (container) {\n        const $wrap = this.$(container).empty()\n        const component = this.graph.hook.getHTMLComponent(this.cell)\n        if (component) {\n          if (typeof component === 'string') {\n            $wrap.html(component)\n          } else {\n            $wrap.append(component)\n          }\n        }\n      }\n    }\n  }\n\n  export namespace View {\n    export const action = 'html' as any\n\n    View.config({\n      bootstrap: [action],\n      actions: {\n        html: action,\n      },\n    })\n\n    NodeView.registry.register('html-view', View)\n  }\n}\n\nexport namespace HTML {\n  HTML.config({\n    view: 'html-view',\n    markup: [\n      {\n        tagName: 'rect',\n        selector: 'body',\n      },\n      {\n        ...Markup.getForeignObjectMarkup(),\n      },\n      {\n        tagName: 'text',\n        selector: 'label',\n      },\n    ],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n    },\n  })\n\n  Node.registry.register('html', HTML)\n}\n\nexport namespace HTML {\n  export type Component =\n    | HTMLElement\n    | string\n    | ((this: Graph, node: HTML) => HTMLElement | string)\n\n  export type UpdatableComponent = {\n    render: Component\n    shouldComponentUpdate: boolean | ((this: Graph, node: HTML) => boolean)\n  }\n\n  export const componentRegistry = Registry.create<\n    Component | UpdatableComponent\n  >({\n    type: 'html componnet',\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}