{"ast":null,"code":"/**\n * @fileOverview Combo force layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { isArray, isNumber, isFunction, traverseTreeUp, isObject, getEdgeTerminal } from \"../util\";\n/**\n * force layout for graph with combos\n */\nexport class ComboForceLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局中心 */\n    this.center = [0, 0];\n    /** 停止迭代的最大迭代数 */\n    this.maxIteration = 100;\n    /** 重力大小，影响图的紧凑程度 */\n    this.gravity = 10;\n    /** 群组中心力大小 */\n    this.comboGravity = 10;\n    /** 默认边长度 */\n    this.linkDistance = 10;\n    /** 每次迭代位移的衰减相关参数 */\n    this.alpha = 1;\n    this.alphaMin = 0.001;\n    this.alphaDecay = 1 - Math.pow(this.alphaMin, 1 / 300);\n    this.alphaTarget = 0;\n    /** 节点运动速度衰减参数 */\n    this.velocityDecay = 0.6;\n    /** 边引力大小 */\n    this.edgeStrength = 0.6;\n    /** 节点引力大小 */\n    this.nodeStrength = 30;\n    /** 是否开启防止重叠 */\n    this.preventOverlap = false;\n    /** 是否开启节点之间的防止重叠 */\n    this.preventNodeOverlap = false;\n    /** 是否开启 Combo 之间的防止重叠 */\n    this.preventComboOverlap = false;\n    /** 防止重叠的碰撞力大小 */\n    this.collideStrength = undefined;\n    /** 防止重叠的碰撞力大小 */\n    this.nodeCollideStrength = 0.5;\n    /** 防止重叠的碰撞力大小 */\n    this.comboCollideStrength = 0.5;\n    /** Combo 最小间距，防止重叠时的间隙 */\n    this.comboSpacing = 20;\n    /** Combo 内部的 padding */\n    this.comboPadding = 10;\n    /** 优化计算斥力的速度，两节点间距超过 optimizeRangeFactor * width 则不再计算斥力和重叠斥力 */\n    this.optimizeRangeFactor = 1;\n    /** 每次迭代的回调函数 */\n    this.onTick = () => {};\n    /** 迭代结束的回调函数 */\n    this.onLayoutEnd = () => {};\n    /** 根据边两端节点层级差距的调整引力系数的因子，取值范围 [0, 1]。层级差距越大，引力越小 */\n    this.depthAttractiveForceScale = 1;\n    /** 根据边两端节点层级差距的调整斥力系数的因子，取值范围 [1, Infinity]。层级差距越大，斥力越大 */\n    this.depthRepulsiveForceScale = 2;\n    /** 内部计算参数 */\n    this.nodes = [];\n    this.edges = [];\n    this.combos = [];\n    this.comboTrees = [];\n    this.width = 300;\n    this.height = 300;\n    this.bias = [];\n    this.nodeMap = {};\n    this.oriComboMap = {};\n    this.indexMap = {};\n    this.comboMap = {};\n    this.previousLayouted = false;\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      maxIteration: 100,\n      center: [0, 0],\n      gravity: 10,\n      speed: 1,\n      comboGravity: 30,\n      preventOverlap: false,\n      preventComboOverlap: true,\n      preventNodeOverlap: true,\n      nodeSpacing: undefined,\n      collideStrength: undefined,\n      nodeCollideStrength: 0.5,\n      comboCollideStrength: 0.5,\n      comboSpacing: 20,\n      comboPadding: 10,\n      edgeStrength: 0.6,\n      nodeStrength: 30,\n      linkDistance: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const center = self.center;\n    self.comboTree = {\n      id: \"comboTreeRoot\",\n      depth: -1,\n      children: self.comboTrees\n    };\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    self.initVals();\n    // layout\n    self.run();\n    if (self.onLayoutEnd) self.onLayoutEnd();\n  }\n  run() {\n    const self = this;\n    const nodes = self.nodes;\n    const maxIteration = self.previousLayouted ? self.maxIteration / 5 : self.maxIteration;\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    const center = self.center;\n    const velocityDecay = self.velocityDecay;\n    // init the positions to make the nodes with same combo gather around the combo\n    const comboMap = self.comboMap;\n    if (!self.previousLayouted) self.initPos(comboMap);\n    // iterate\n    for (let i = 0; i < maxIteration; i++) {\n      const displacements = [];\n      nodes.forEach((_, j) => {\n        displacements[j] = {\n          x: 0,\n          y: 0\n        };\n      });\n      self.applyCalculate(displacements);\n      // gravity for combos\n      self.applyComboCenterForce(displacements);\n      // move\n      nodes.forEach((n, j) => {\n        if (!isNumber(n.x) || !isNumber(n.y)) return;\n        n.x += displacements[j].x * velocityDecay;\n        n.y += displacements[j].y * velocityDecay;\n      });\n      self.alpha += (self.alphaTarget - self.alpha) * self.alphaDecay;\n      self.onTick();\n    }\n    // move to center\n    const meanCenter = [0, 0];\n    nodes.forEach(n => {\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      meanCenter[0] += n.x;\n      meanCenter[1] += n.y;\n    });\n    meanCenter[0] /= nodes.length;\n    meanCenter[1] /= nodes.length;\n    const centerOffset = [center[0] - meanCenter[0], center[1] - meanCenter[1]];\n    nodes.forEach((n, j) => {\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      n.x += centerOffset[0];\n      n.y += centerOffset[1];\n    });\n    // arrange the empty combo\n    self.combos.forEach(combo => {\n      const mapped = comboMap[combo.id];\n      if (mapped && mapped.empty) {\n        combo.x = mapped.cx || combo.x;\n        combo.y = mapped.cy || combo.y;\n      }\n    });\n    self.previousLayouted = true;\n  }\n  initVals() {\n    const self = this;\n    const edges = self.edges;\n    const nodes = self.nodes;\n    const combos = self.combos;\n    const count = {};\n    const nodeMap = {};\n    const indexMap = {};\n    nodes.forEach((node, i) => {\n      nodeMap[node.id] = node;\n      indexMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.indexMap = indexMap;\n    const oriComboMap = {};\n    combos.forEach(combo => {\n      oriComboMap[combo.id] = combo;\n    });\n    self.oriComboMap = oriComboMap;\n    self.comboMap = self.getComboMap();\n    const preventOverlap = self.preventOverlap;\n    self.preventComboOverlap = self.preventComboOverlap || preventOverlap;\n    self.preventNodeOverlap = self.preventNodeOverlap || preventOverlap;\n    const collideStrength = self.collideStrength;\n    if (collideStrength) {\n      self.comboCollideStrength = collideStrength;\n      self.nodeCollideStrength = collideStrength;\n    }\n    self.comboCollideStrength = self.comboCollideStrength ? self.comboCollideStrength : 0;\n    self.nodeCollideStrength = self.nodeCollideStrength ? self.nodeCollideStrength : 0;\n    // get edge bias\n    for (let i = 0; i < edges.length; ++i) {\n      const source = getEdgeTerminal(edges[i], 'source');\n      const target = getEdgeTerminal(edges[i], 'target');\n      if (count[source]) count[source]++;else count[source] = 1;\n      if (count[target]) count[target]++;else count[target] = 1;\n    }\n    const bias = [];\n    for (let i = 0; i < edges.length; ++i) {\n      const source = getEdgeTerminal(edges[i], 'source');\n      const target = getEdgeTerminal(edges[i], 'target');\n      bias[i] = count[source] / (count[source] + count[target]);\n    }\n    this.bias = bias;\n    const nodeSize = self.nodeSize;\n    const nodeSpacing = self.nodeSpacing;\n    let nodeSizeFunc;\n    let nodeSpacingFunc;\n    // nodeSpacing to function\n    if (isNumber(nodeSpacing)) {\n      nodeSpacingFunc = () => nodeSpacing;\n    } else if (isFunction(nodeSpacing)) {\n      nodeSpacingFunc = nodeSpacing;\n    } else {\n      nodeSpacingFunc = () => 0;\n    }\n    this.nodeSpacing = nodeSpacingFunc;\n    // nodeSize to function\n    if (!nodeSize) {\n      nodeSizeFunc = d => {\n        if (d.size) {\n          if (isArray(d.size)) {\n            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return res / 2;\n          }\n          if (isObject(d.size)) {\n            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n            return res / 2;\n          }\n          return d.size / 2;\n        }\n        return 10;\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = d => {\n        return nodeSize(d);\n      };\n    } else if (isArray(nodeSize)) {\n      const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      const radius = larger / 2;\n      nodeSizeFunc = d => radius;\n    } else {\n      // number type\n      const radius = nodeSize / 2;\n      nodeSizeFunc = d => radius;\n    }\n    this.nodeSize = nodeSizeFunc;\n    // comboSpacing to function\n    const comboSpacing = self.comboSpacing;\n    let comboSpacingFunc;\n    if (isNumber(comboSpacing)) {\n      comboSpacingFunc = () => comboSpacing;\n    } else if (isFunction(comboSpacing)) {\n      comboSpacingFunc = comboSpacing;\n    } else {\n      // null type\n      comboSpacingFunc = () => 0;\n    }\n    this.comboSpacing = comboSpacingFunc;\n    // comboPadding to function\n    const comboPadding = self.comboPadding;\n    let comboPaddingFunc;\n    if (isNumber(comboPadding)) {\n      comboPaddingFunc = () => comboPadding;\n    } else if (isArray(comboPadding)) {\n      comboPaddingFunc = () => Math.max.apply(null, comboPadding);\n    } else if (isFunction(comboPadding)) {\n      comboPaddingFunc = comboPadding;\n    } else {\n      // null type\n      comboPaddingFunc = () => 0;\n    }\n    this.comboPadding = comboPaddingFunc;\n    // linkDistance to function\n    let linkDistance = this.linkDistance;\n    let linkDistanceFunc;\n    if (!linkDistance) {\n      linkDistance = 10;\n    }\n    if (isNumber(linkDistance)) {\n      linkDistanceFunc = d => {\n        return linkDistance;\n      };\n    } else {\n      linkDistanceFunc = linkDistance;\n    }\n    this.linkDistance = linkDistanceFunc;\n    // linkStrength to function\n    let edgeStrength = this.edgeStrength;\n    let edgeStrengthFunc;\n    if (!edgeStrength) {\n      edgeStrength = 1;\n    }\n    if (isNumber(edgeStrength)) {\n      edgeStrengthFunc = d => {\n        return edgeStrength;\n      };\n    } else {\n      edgeStrengthFunc = edgeStrength;\n    }\n    this.edgeStrength = edgeStrengthFunc;\n    // nodeStrength to function\n    let nodeStrength = this.nodeStrength;\n    let nodeStrengthFunc;\n    if (!nodeStrength) {\n      nodeStrength = 30;\n    }\n    if (isNumber(nodeStrength)) {\n      nodeStrengthFunc = d => {\n        return nodeStrength;\n      };\n    } else {\n      nodeStrengthFunc = nodeStrength;\n    }\n    this.nodeStrength = nodeStrengthFunc;\n  }\n  initPos(comboMap) {\n    const self = this;\n    const nodes = self.nodes;\n    nodes.forEach((node, i) => {\n      const comboId = node.comboId;\n      const combo = comboMap[comboId];\n      if (comboId && combo) {\n        node.x = combo.cx + 100 / (i + 1);\n        node.y = combo.cy + 100 / (i + 1);\n      } else {\n        node.x = 100 / (i + 1);\n        node.y = 100 / (i + 1);\n      }\n    });\n  }\n  getComboMap() {\n    const self = this;\n    const nodeMap = self.nodeMap;\n    const comboTrees = self.comboTrees;\n    const oriComboMap = self.oriComboMap;\n    const comboMap = {};\n    (comboTrees || []).forEach(ctree => {\n      const treeChildren = [];\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n        if (!oriComboMap[treeNode.id]) return true; // means it is hidden, skip it\n        if (comboMap[treeNode.id] === undefined) {\n          const combo = {\n            id: treeNode.id,\n            name: treeNode.id,\n            cx: 0,\n            cy: 0,\n            count: 0,\n            depth: self.oriComboMap[treeNode.id].depth || 0,\n            children: []\n          };\n          comboMap[treeNode.id] = combo;\n        }\n        const children = treeNode.children;\n        if (children) {\n          children.forEach(child => {\n            if (!comboMap[child.id] && !nodeMap[child.id]) return true; // means it is hidden\n            treeChildren.push(child);\n          });\n        }\n        const c = comboMap[treeNode.id];\n        c.cx = 0;\n        c.cy = 0;\n        if (treeChildren.length === 0) {\n          c.empty = true;\n          const oriCombo = oriComboMap[treeNode.id];\n          c.cx = oriCombo.x;\n          c.cy = oriCombo.y;\n        }\n        treeChildren.forEach(child => {\n          c.count++;\n          if (child.itemType !== \"node\") {\n            const childCombo = comboMap[child.id];\n            if (isNumber(childCombo.cx)) c.cx += childCombo.cx;\n            if (isNumber(childCombo.cy)) c.cy += childCombo.cy;\n            return;\n          }\n          const node = nodeMap[child.id];\n          // means the node is hidden, skip it\n          if (!node) return;\n          if (isNumber(node.x)) {\n            c.cx += node.x;\n          }\n          if (isNumber(node.y)) {\n            c.cy += node.y;\n          }\n        });\n        c.cx /= c.count || 1;\n        c.cy /= c.count || 1;\n        c.children = treeChildren;\n        return true;\n      });\n    });\n    return comboMap;\n  }\n  applyComboCenterForce(displacements) {\n    const self = this;\n    const gravity = self.gravity;\n    const comboGravity = self.comboGravity || gravity;\n    const alpha = this.alpha;\n    const comboTrees = self.comboTrees;\n    const indexMap = self.indexMap;\n    const nodeMap = self.nodeMap;\n    const comboMap = self.comboMap;\n    (comboTrees || []).forEach(ctree => {\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n        const combo = comboMap[treeNode.id];\n        // means the combo is hidden, skip it\n        if (!combo) return true;\n        const c = comboMap[treeNode.id];\n        // higher depth the combo, larger the gravity\n        const gravityScale = (c.depth + 1) / 10 * 0.5;\n        // apply combo center force for all the descend nodes in this combo\n        // and update the center position and count for this combo\n        const comboX = c.cx;\n        const comboY = c.cy;\n        c.cx = 0;\n        c.cy = 0;\n        c.children.forEach(child => {\n          if (child.itemType !== \"node\") {\n            const childCombo = comboMap[child.id];\n            if (childCombo && isNumber(childCombo.cx)) c.cx += childCombo.cx;\n            if (childCombo && isNumber(childCombo.cy)) c.cy += childCombo.cy;\n            return;\n          }\n          const node = nodeMap[child.id];\n          const vecX = node.x - comboX || 0.005;\n          const vecY = node.y - comboY || 0.005;\n          const l = Math.sqrt(vecX * vecX + vecY * vecY);\n          const childIdx = indexMap[node.id];\n          const params = comboGravity * alpha / l * gravityScale;\n          displacements[childIdx].x -= vecX * params;\n          displacements[childIdx].y -= vecY * params;\n          if (isNumber(node.x)) c.cx += node.x;\n          if (isNumber(node.y)) c.cy += node.y;\n        });\n        c.cx /= c.count || 1;\n        c.cy /= c.count || 1;\n        return true;\n      });\n    });\n  }\n  applyCalculate(displacements) {\n    const self = this;\n    const comboMap = self.comboMap;\n    const nodes = self.nodes;\n    // store the vx, vy, and distance to reduce dulplicate calculation\n    const vecMap = {};\n    nodes.forEach((v, i) => {\n      nodes.forEach((u, j) => {\n        if (i < j) return;\n        const vx = v.x - u.x || 0.005;\n        const vy = v.y - u.y || 0.005;\n        let vl2 = vx * vx + vy * vy;\n        const vl = Math.sqrt(vl2);\n        if (vl2 < 1) vl2 = vl;\n        vecMap[`${v.id}-${u.id}`] = {\n          vx,\n          vy,\n          vl2,\n          vl\n        };\n        vecMap[`${u.id}-${v.id}`] = {\n          vl2,\n          vl,\n          vx: -vx,\n          vy: -vy\n        };\n      });\n    });\n    // get the sizes of the combos\n    self.updateComboSizes(comboMap);\n    self.calRepulsive(displacements, vecMap);\n    self.calAttractive(displacements, vecMap);\n    const preventComboOverlap = self.preventComboOverlap;\n    if (preventComboOverlap) self.comboNonOverlapping(displacements, comboMap);\n  }\n  /**\n   * Update the sizes of the combos according to their children\n   * Used for combos nonoverlap, but not re-render the combo shapes\n   */\n  updateComboSizes(comboMap) {\n    const self = this;\n    const comboTrees = self.comboTrees;\n    const nodeMap = self.nodeMap;\n    const nodeSize = self.nodeSize;\n    const comboSpacing = self.comboSpacing;\n    const comboPadding = self.comboPadding;\n    (comboTrees || []).forEach(ctree => {\n      const treeChildren = [];\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n        const c = comboMap[treeNode.id];\n        // means the combo is hidden, skip it\n        if (!c) return false;\n        const children = treeNode.children;\n        if (children) {\n          children.forEach(child => {\n            // means the combo is hidden.\n            if (!comboMap[child.id] && !nodeMap[child.id]) return;\n            treeChildren.push(child);\n          });\n        }\n        c.minX = Infinity;\n        c.minY = Infinity;\n        c.maxX = -Infinity;\n        c.maxY = -Infinity;\n        treeChildren.forEach(child => {\n          if (child.itemType !== \"node\") return true; // skip it\n          const node = nodeMap[child.id];\n          if (!node) return true; // means it is hidden\n          const r = nodeSize(node);\n          const nodeMinX = node.x - r;\n          const nodeMinY = node.y - r;\n          const nodeMaxX = node.x + r;\n          const nodeMaxY = node.y + r;\n          if (c.minX > nodeMinX) c.minX = nodeMinX;\n          if (c.minY > nodeMinY) c.minY = nodeMinY;\n          if (c.maxX < nodeMaxX) c.maxX = nodeMaxX;\n          if (c.maxY < nodeMaxY) c.maxY = nodeMaxY;\n        });\n        let minSize = self.oriComboMap[treeNode.id].size || 10;\n        if (isArray(minSize)) minSize = minSize[0];\n        const maxLength = Math.max(c.maxX - c.minX, c.maxY - c.minY, minSize);\n        c.r = maxLength / 2 + comboSpacing(c) / 2 + comboPadding(c);\n        return true;\n      });\n    });\n  }\n  /**\n   * prevent the overlappings among combos\n   */\n  comboNonOverlapping(displacements, comboMap) {\n    const self = this;\n    const comboTree = self.comboTree;\n    const comboCollideStrength = self.comboCollideStrength;\n    const indexMap = self.indexMap;\n    const nodeMap = self.nodeMap;\n    traverseTreeUp(comboTree, treeNode => {\n      if (!comboMap[treeNode.id] && !nodeMap[treeNode.id] && treeNode.id !== \"comboTreeRoot\") {\n        return false;\n      } // means it is hidden\n      const children = treeNode.children;\n      // 同个子树下的子 combo 间两两对比\n      if (children && children.length > 1) {\n        children.forEach((v, i) => {\n          if (v.itemType === \"node\") return false; // skip it\n          const cv = comboMap[v.id];\n          if (!cv) return; // means it is hidden, skip it\n          children.forEach((u, j) => {\n            if (i <= j) return false;\n            if (u.itemType === \"node\") return false; // skip it\n            const cu = comboMap[u.id];\n            if (!cu) return false; // means it is hidden, skip it\n            const vx = cv.cx - cu.cx || 0.005;\n            const vy = cv.cy - cu.cy || 0.005;\n            const l = vx * vx + vy * vy;\n            const rv = cv.r || 1;\n            const ru = cu.r || 1;\n            const r = rv + ru;\n            const ru2 = ru * ru;\n            const rv2 = rv * rv;\n            // overlapping\n            if (l < r * r) {\n              const vnodes = v.children;\n              if (!vnodes || vnodes.length === 0) return false; // skip it\n              const unodes = u.children;\n              if (!unodes || unodes.length === 0) return false; // skip it\n              const sqrtl = Math.sqrt(l);\n              const ll = (r - sqrtl) / sqrtl * comboCollideStrength;\n              const xl = vx * ll;\n              const yl = vy * ll;\n              const rratio = ru2 / (rv2 + ru2);\n              const irratio = 1 - rratio;\n              // 两兄弟 combo 的子节点上施加斥力\n              vnodes.forEach(vn => {\n                if (vn.itemType !== \"node\") return false; // skip it\n                if (!nodeMap[vn.id]) return; // means it is hidden, skip it\n                const vindex = indexMap[vn.id];\n                unodes.forEach(un => {\n                  if (un.itemType !== \"node\") return false;\n                  if (!nodeMap[un.id]) return false; // means it is hidden, skip it\n                  const uindex = indexMap[un.id];\n                  displacements[vindex].x += xl * rratio;\n                  displacements[vindex].y += yl * rratio;\n                  displacements[uindex].x -= xl * irratio;\n                  displacements[uindex].y -= yl * irratio;\n                });\n              });\n            }\n          });\n        });\n      }\n      return true;\n    });\n  }\n  /**\n   * Calculate the repulsive force between each node pair\n   * @param displacements The array stores the displacements for nodes\n   * @param vecMap The map stores vector between each node pair\n   */\n  calRepulsive(displacements, vecMap) {\n    const self = this;\n    const nodes = self.nodes;\n    const max = self.width * self.optimizeRangeFactor;\n    const nodeStrength = self.nodeStrength;\n    const alpha = self.alpha;\n    const nodeCollideStrength = self.nodeCollideStrength;\n    const preventNodeOverlap = self.preventNodeOverlap;\n    const nodeSizeFunc = self.nodeSize;\n    const nodeSpacingFunc = self.nodeSpacing;\n    const scale = self.depthRepulsiveForceScale;\n    const center = self.center;\n    nodes.forEach((v, i) => {\n      if (!v.x || !v.y) return;\n      // center gravity\n      if (center) {\n        const gravity = self.gravity;\n        const vecX = v.x - center[0] || 0.005;\n        const vecY = v.y - center[1] || 0.005;\n        const l = Math.sqrt(vecX * vecX + vecY * vecY);\n        displacements[i].x -= vecX * gravity * alpha / l;\n        displacements[i].y -= vecY * gravity * alpha / l;\n      }\n      nodes.forEach((u, j) => {\n        if (i === j) {\n          return;\n        }\n        if (!u.x || !u.y) return;\n        const {\n          vl2,\n          vl\n        } = vecMap[`${v.id}-${u.id}`];\n        if (vl > max) return;\n        const {\n          vx,\n          vy\n        } = vecMap[`${v.id}-${u.id}`];\n        let depthDiff = Math.log(Math.abs(u.depth - v.depth) / 10) + 1 || 1;\n        depthDiff = depthDiff < 1 ? 1 : depthDiff;\n        if (u.comboId !== v.comboId) depthDiff += 1;\n        const depthParam = depthDiff ? Math.pow(scale, depthDiff) : 1;\n        const params = nodeStrength(u) * alpha / vl2 * depthParam;\n        displacements[i].x += vx * params;\n        displacements[i].y += vy * params;\n        // prevent node overlappings\n        if (i < j && preventNodeOverlap) {\n          const ri = nodeSizeFunc(v) + nodeSpacingFunc(v) || 1;\n          const rj = nodeSizeFunc(u) + nodeSpacingFunc(u) || 1;\n          const r = ri + rj;\n          if (vl2 < r * r) {\n            const ll = (r - vl) / vl * nodeCollideStrength;\n            const rj2 = rj * rj;\n            let rratio = rj2 / (ri * ri + rj2);\n            const xl = vx * ll;\n            const yl = vy * ll;\n            displacements[i].x += xl * rratio;\n            displacements[i].y += yl * rratio;\n            rratio = 1 - rratio;\n            displacements[j].x -= xl * rratio;\n            displacements[j].y -= yl * rratio;\n          }\n        }\n      });\n    });\n  }\n  /**\n   * Calculate the attractive force between the node pair with edge\n   * @param displacements The array stores the displacements for nodes\n   * @param vecMap The map stores vector between each node pair\n   */\n  calAttractive(displacements, vecMap) {\n    const self = this;\n    const edges = self.edges;\n    const linkDistance = self.linkDistance;\n    const alpha = self.alpha;\n    const edgeStrength = self.edgeStrength;\n    const bias = self.bias;\n    const scale = self.depthAttractiveForceScale;\n    edges.forEach((e, i) => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      if (!source || !target || source === target) return;\n      const uIndex = self.indexMap[source];\n      const vIndex = self.indexMap[target];\n      const u = self.nodeMap[source];\n      const v = self.nodeMap[target];\n      if (!u || !v) return;\n      let depthDiff = u.depth === v.depth ? 0 : Math.log(Math.abs(u.depth - v.depth) / 10);\n      if (u.comboId === v.comboId) {\n        depthDiff = depthDiff / 2;\n      }\n      let depthParam = depthDiff ? Math.pow(scale, depthDiff) : 1;\n      if (u.comboId !== v.comboId && depthParam === 1) {\n        depthParam = scale / 2;\n      } else if (u.comboId === v.comboId) {\n        depthParam = 2;\n      }\n      if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n        return;\n      }\n      const {\n        vl,\n        vx,\n        vy\n      } = vecMap[`${target}-${source}`];\n      const l = (vl - linkDistance(e)) / vl * alpha * edgeStrength(e) * depthParam;\n      const vecX = vx * l;\n      const vecY = vy * l;\n      const b = bias[i];\n      displacements[vIndex].x -= vecX * b;\n      displacements[vIndex].y -= vecY * b;\n      displacements[uIndex].x += vecX * (1 - b);\n      displacements[uIndex].y += vecY * (1 - b);\n    });\n  }\n  getType() {\n    return \"comboForce\";\n  }\n}","map":{"version":3,"names":["Base","isArray","isNumber","isFunction","traverseTreeUp","isObject","getEdgeTerminal","ComboForceLayout","constructor","options","center","maxIteration","gravity","comboGravity","linkDistance","alpha","alphaMin","alphaDecay","Math","pow","alphaTarget","velocityDecay","edgeStrength","nodeStrength","preventOverlap","preventNodeOverlap","preventComboOverlap","collideStrength","undefined","nodeCollideStrength","comboCollideStrength","comboSpacing","comboPadding","optimizeRangeFactor","onTick","onLayoutEnd","depthAttractiveForceScale","depthRepulsiveForceScale","nodes","edges","combos","comboTrees","width","height","bias","nodeMap","oriComboMap","indexMap","comboMap","previousLayouted","updateCfg","getDefaultCfg","speed","nodeSpacing","execute","self","comboTree","id","depth","children","length","x","y","initVals","run","window","innerWidth","innerHeight","initPos","i","displacements","forEach","_","j","applyCalculate","applyComboCenterForce","n","meanCenter","centerOffset","combo","mapped","empty","cx","cy","count","node","getComboMap","source","target","nodeSize","nodeSizeFunc","nodeSpacingFunc","d","size","res","larger","radius","comboSpacingFunc","comboPaddingFunc","max","apply","linkDistanceFunc","edgeStrengthFunc","nodeStrengthFunc","comboId","ctree","treeChildren","treeNode","itemType","name","child","push","c","oriCombo","childCombo","gravityScale","comboX","comboY","vecX","vecY","l","sqrt","childIdx","params","vecMap","v","u","vx","vy","vl2","vl","updateComboSizes","calRepulsive","calAttractive","comboNonOverlapping","minX","Infinity","minY","maxX","maxY","r","nodeMinX","nodeMinY","nodeMaxX","nodeMaxY","minSize","maxLength","cv","cu","rv","ru","ru2","rv2","vnodes","unodes","sqrtl","ll","xl","yl","rratio","irratio","vn","vindex","un","uindex","scale","depthDiff","log","abs","depthParam","ri","rj","rj2","e","uIndex","vIndex","b","getType"],"sources":["../../src/layout/comboForce.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}