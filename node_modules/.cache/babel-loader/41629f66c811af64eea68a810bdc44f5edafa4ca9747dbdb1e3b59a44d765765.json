{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LRUCache } from '@antv/l7-utils';\n// @ts-ignore\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { EventEmitter } from 'eventemitter3';\nimport { buildMapping } from \"../../utils/font_util\";\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'sans-serif';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 24;\nexport const DEFAULT_BUFFER = 3;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 8;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 1.0;\nconst HEIGHT_SCALE = 1.0;\nconst CACHE_LIMIT = 3;\nexport const VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n  // ctx.textAlign = 'left';\n}\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\nexport default class FontService extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"fontAtlas\", void 0);\n    // iconFontMap 记录用户设置的 iconfont unicode 和名称的键值关系\n    _defineProperty(this, \"iconFontMap\", void 0);\n    _defineProperty(this, \"iconFontGlyphs\", {});\n    _defineProperty(this, \"fontOptions\", void 0);\n    _defineProperty(this, \"key\", void 0);\n    _defineProperty(this, \"cache\", new LRUCache(CACHE_LIMIT));\n  }\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n  get canvas() {\n    const data = this.cache.get(this.key);\n    return data && data.data;\n  }\n  get mapping() {\n    const data = this.cache.get(this.key);\n    return data && data.mapping || {};\n  }\n  getCanvasByKey(key) {\n    const data = this.cache.get(key);\n    return data && data.data;\n  }\n  getMappingByKey(key) {\n    const data = this.cache.get(key);\n    return data && data.mapping || {};\n  }\n  init() {\n    this.cache.clear();\n    this.fontOptions = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: true,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS,\n      iconfont: false\n    };\n    this.key = '';\n    this.iconFontMap = new Map();\n  }\n  addIconGlyphs(glyphs) {\n    glyphs.forEach(glyph => {\n      this.iconFontGlyphs[glyph.name] = glyph.unicode;\n    });\n  }\n\n  /**\n   * 添加对 iconfont unicode 的映射\n   * @param fontUnicode\n   * @param name\n   */\n  addIconFont(name, fontUnicode) {\n    this.iconFontMap.set(name, fontUnicode);\n  }\n\n  /**\n   * 获取自定义 iconfont 别称对应的 unicode 编码，若是当前的 map 中没有对应的键值对，那么就返回原值\n   * @param name\n   * @returns\n   */\n  getIconFontKey(name) {\n    return this.iconFontMap.get(name) || name;\n  }\n  getGlyph(name) {\n    if (this.iconFontGlyphs[name]) {\n      return String.fromCharCode(parseInt(this.iconFontGlyphs[name], 16));\n    }\n    return '';\n  }\n  setFontOptions(option) {\n    this.fontOptions = _objectSpread(_objectSpread({}, this.fontOptions), option);\n    this.key = this.getKey();\n    const charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n    const cachedFontAtlas = this.cache.get(this.key);\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      return;\n    }\n    // update fontAtlas with new settings\n    const fontAtlas = this.generateFontAtlas(this.key, charSet, cachedFontAtlas);\n    this.fontAtlas = fontAtlas;\n\n    // update cache\n    this.cache.set(this.key, fontAtlas);\n  }\n  /**\n   * 用户自定义添加第三方字体 （用户使用 layer/point/text/iconfont 的前提需要加载第三方字体文件）\n   * @param fontFamily\n   * @param fontPath\n   */\n  addFontFace(fontFamily, fontPath) {\n    const style = document.createElement('style');\n    style.type = 'text/css';\n    style.innerText = `\n        @font-face{\n            font-family: '${fontFamily}';\n            src: url('${fontPath}') format('woff2'),\n            url('${fontPath}') format('woff'),\n            url('${fontPath}') format('truetype');\n        }`;\n    style.onload = () => {\n      if (document.fonts) {\n        try {\n          // @ts-ignore\n          document.fonts.load(`24px ${fontFamily}`, 'L7text');\n          document.fonts.ready.then(() => {\n            this.emit('fontloaded', {\n              fontFamily\n            });\n          });\n        } catch (e) {\n          console.warn('当前环境不支持 document.fonts !');\n          console.warn('当前环境不支持 iconfont !');\n          console.warn(e);\n        }\n      }\n    };\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n  destroy() {\n    this.cache.clear();\n    this.iconFontMap.clear();\n  }\n  generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n      iconfont\n    } = this.fontOptions;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = window.document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {\n      mapping,\n      canvasHeight,\n      xOffset,\n      yOffset\n    } = buildMapping(_objectSpread({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH\n    }, cachedFontAtlas && {\n      mapping: cachedFontAtlas.mapping,\n      xOffset: cachedFontAtlas.xOffset,\n      yOffset: cachedFontAtlas.yOffset\n    }));\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    // TODO safari 不能正常更新\n    const copyImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.height = canvasHeight;\n    ctx.putImageData(copyImageData, 0, 0);\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n      for (const char of characterSet) {\n        if (iconfont) {\n          // @ts-ignore\n          // const icon = eval(\n          //   '(\"' + char.replace('&#x', '\\\\u').replace(';', '') + '\")',\n          // );\n\n          const icon = String.fromCharCode(parseInt(char.replace('&#x', '').replace(';', ''), 16));\n          const iconData = tinySDF.draw(icon);\n          populateAlphaChannel(iconData, imageData);\n        } else {\n          populateAlphaChannel(tinySDF.draw(char), imageData);\n        }\n        // populateAlphaChannel(tinySDF.draw(char), imageData);\n\n        // 考虑到描边，需要保留 sdf 的 buffer，不能像 deck.gl 一样直接减去\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n  getKey() {\n    const {\n      fontFamily,\n      fontWeight\n    } = this.fontOptions;\n    return `${fontFamily}_${fontWeight}`;\n  }\n\n  /**\n   *\n   * @param key\n   * @param characterSet\n   * @returns\n   * 若是相同的 key，那么将字符存储到同同一个字符列表中\n   */\n  getNewChars(key, characterSet) {\n    const cachedFontAtlas = this.cache.get(key);\n    if (!cachedFontAtlas) {\n      return characterSet;\n    }\n    const newChars = [];\n    const cachedMapping = cachedFontAtlas.mapping;\n    const cachedCharSet = new Set(Object.keys(cachedMapping));\n    const charSet = new Set(characterSet);\n    charSet.forEach(char => {\n      if (!cachedCharSet.has(char)) {\n        newChars.push(char);\n      }\n    });\n    return newChars;\n  }\n}","map":{"version":3,"names":["_objectSpread","_defineProperty","LRUCache","TinySDF","EventEmitter","buildMapping","DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","VALID_PROPS","charSet","i","push","String","fromCharCode","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","populateAlphaChannel","alphaChannel","imageData","length","data","FontService","constructor","args","scale","canvas","cache","get","key","mapping","getCanvasByKey","getMappingByKey","init","clear","fontOptions","characterSet","buffer","sdf","cutoff","radius","iconfont","iconFontMap","Map","addIconGlyphs","glyphs","forEach","glyph","iconFontGlyphs","name","unicode","addIconFont","fontUnicode","set","getIconFontKey","getGlyph","parseInt","setFontOptions","option","getKey","getNewChars","cachedFontAtlas","fontAtlas","generateFontAtlas","addFontFace","fontPath","style","document","createElement","type","innerText","onload","fonts","load","ready","then","emit","e","console","warn","getElementsByTagName","appendChild","destroy","window","width","getContext","willReadFrequently","canvasHeight","xOffset","yOffset","getFontWidth","char","measureText","fontHeight","maxCanvasWidth","copyImageData","getImageData","height","putImageData","tinySDF","size","icon","replace","iconData","draw","x","y","fillText","newChars","cachedMapping","cachedCharSet","Set","Object","keys","has"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/asset/FontService.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LRUCache } from '@antv/l7-utils';\n// @ts-ignore\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { EventEmitter } from 'eventemitter3';\nimport { buildMapping } from \"../../utils/font_util\";\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'sans-serif';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 24;\nexport const DEFAULT_BUFFER = 3;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 8;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 1.0;\nconst HEIGHT_SCALE = 1.0;\nconst CACHE_LIMIT = 3;\nexport const VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n  // ctx.textAlign = 'left';\n}\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\nexport default class FontService extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"fontAtlas\", void 0);\n    // iconFontMap 记录用户设置的 iconfont unicode 和名称的键值关系\n    _defineProperty(this, \"iconFontMap\", void 0);\n    _defineProperty(this, \"iconFontGlyphs\", {});\n    _defineProperty(this, \"fontOptions\", void 0);\n    _defineProperty(this, \"key\", void 0);\n    _defineProperty(this, \"cache\", new LRUCache(CACHE_LIMIT));\n  }\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n  get canvas() {\n    const data = this.cache.get(this.key);\n    return data && data.data;\n  }\n  get mapping() {\n    const data = this.cache.get(this.key);\n    return data && data.mapping || {};\n  }\n  getCanvasByKey(key) {\n    const data = this.cache.get(key);\n    return data && data.data;\n  }\n  getMappingByKey(key) {\n    const data = this.cache.get(key);\n    return data && data.mapping || {};\n  }\n  init() {\n    this.cache.clear();\n    this.fontOptions = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: true,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS,\n      iconfont: false\n    };\n    this.key = '';\n    this.iconFontMap = new Map();\n  }\n  addIconGlyphs(glyphs) {\n    glyphs.forEach(glyph => {\n      this.iconFontGlyphs[glyph.name] = glyph.unicode;\n    });\n  }\n\n  /**\n   * 添加对 iconfont unicode 的映射\n   * @param fontUnicode\n   * @param name\n   */\n  addIconFont(name, fontUnicode) {\n    this.iconFontMap.set(name, fontUnicode);\n  }\n\n  /**\n   * 获取自定义 iconfont 别称对应的 unicode 编码，若是当前的 map 中没有对应的键值对，那么就返回原值\n   * @param name\n   * @returns\n   */\n  getIconFontKey(name) {\n    return this.iconFontMap.get(name) || name;\n  }\n  getGlyph(name) {\n    if (this.iconFontGlyphs[name]) {\n      return String.fromCharCode(parseInt(this.iconFontGlyphs[name], 16));\n    }\n    return '';\n  }\n  setFontOptions(option) {\n    this.fontOptions = _objectSpread(_objectSpread({}, this.fontOptions), option);\n    this.key = this.getKey();\n    const charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n    const cachedFontAtlas = this.cache.get(this.key);\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      return;\n    }\n    // update fontAtlas with new settings\n    const fontAtlas = this.generateFontAtlas(this.key, charSet, cachedFontAtlas);\n    this.fontAtlas = fontAtlas;\n\n    // update cache\n    this.cache.set(this.key, fontAtlas);\n  }\n  /**\n   * 用户自定义添加第三方字体 （用户使用 layer/point/text/iconfont 的前提需要加载第三方字体文件）\n   * @param fontFamily\n   * @param fontPath\n   */\n  addFontFace(fontFamily, fontPath) {\n    const style = document.createElement('style');\n    style.type = 'text/css';\n    style.innerText = `\n        @font-face{\n            font-family: '${fontFamily}';\n            src: url('${fontPath}') format('woff2'),\n            url('${fontPath}') format('woff'),\n            url('${fontPath}') format('truetype');\n        }`;\n    style.onload = () => {\n      if (document.fonts) {\n        try {\n          // @ts-ignore\n          document.fonts.load(`24px ${fontFamily}`, 'L7text');\n          document.fonts.ready.then(() => {\n            this.emit('fontloaded', {\n              fontFamily\n            });\n          });\n        } catch (e) {\n          console.warn('当前环境不支持 document.fonts !');\n          console.warn('当前环境不支持 iconfont !');\n          console.warn(e);\n        }\n      }\n    };\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n  destroy() {\n    this.cache.clear();\n    this.iconFontMap.clear();\n  }\n  generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n      iconfont\n    } = this.fontOptions;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = window.document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {\n      mapping,\n      canvasHeight,\n      xOffset,\n      yOffset\n    } = buildMapping(_objectSpread({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH\n    }, cachedFontAtlas && {\n      mapping: cachedFontAtlas.mapping,\n      xOffset: cachedFontAtlas.xOffset,\n      yOffset: cachedFontAtlas.yOffset\n    }));\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    // TODO safari 不能正常更新\n    const copyImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.height = canvasHeight;\n    ctx.putImageData(copyImageData, 0, 0);\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n      for (const char of characterSet) {\n        if (iconfont) {\n          // @ts-ignore\n          // const icon = eval(\n          //   '(\"' + char.replace('&#x', '\\\\u').replace(';', '') + '\")',\n          // );\n\n          const icon = String.fromCharCode(parseInt(char.replace('&#x', '').replace(';', ''), 16));\n          const iconData = tinySDF.draw(icon);\n          populateAlphaChannel(iconData, imageData);\n        } else {\n          populateAlphaChannel(tinySDF.draw(char), imageData);\n        }\n        // populateAlphaChannel(tinySDF.draw(char), imageData);\n\n        // 考虑到描边，需要保留 sdf 的 buffer，不能像 deck.gl 一样直接减去\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n  getKey() {\n    const {\n      fontFamily,\n      fontWeight\n    } = this.fontOptions;\n    return `${fontFamily}_${fontWeight}`;\n  }\n\n  /**\n   *\n   * @param key\n   * @param characterSet\n   * @returns\n   * 若是相同的 key，那么将字符存储到同同一个字符列表中\n   */\n  getNewChars(key, characterSet) {\n    const cachedFontAtlas = this.cache.get(key);\n    if (!cachedFontAtlas) {\n      return characterSet;\n    }\n    const newChars = [];\n    const cachedMapping = cachedFontAtlas.mapping;\n    const cachedCharSet = new Set(Object.keys(cachedMapping));\n    const charSet = new Set(characterSet);\n    charSet.forEach(char => {\n      if (!cachedCharSet.has(char)) {\n        newChars.push(char);\n      }\n    });\n    return newChars;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}