{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, TextureUsage, gl } from '@antv/l7-core';\nimport { generateColorRamp, lodashUtil } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport BaseModel from \"../../core/BaseModel\";\nimport { HeatmapTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_frag.glsl' */\nconst heatmap_3d_frag = \"layout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nin vec2 v_texCoord;\\nin float v_intensity;\\nout vec4 outputColor;\\n\\nvoid main(){\\n   \\n    float intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture),vec2(intensity, 0));\\n    outputColor = color;\\n    // gl_FragColor.a = color.a * smoothstep(0.1,0.2,intensity)* u_opacity;\\n   outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_vert.glsl' */\nconst heatmap_3d_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 10) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nout vec2 v_texCoord;\\nout float v_intensity;\\n\\nvec2 toBezier(float t, vec2 P0, vec2 P1, vec2 P2, vec2 P3) {\\n  float t2 = t * t;\\n  float one_minus_t = 1.0 - t;\\n  float one_minus_t2 = one_minus_t * one_minus_t;\\n  return P0 * one_minus_t2 * one_minus_t +\\n  P1 * 3.0 * t * one_minus_t2 +\\n  P2 * 3.0 * t2 * one_minus_t +\\n  P3 * t2 * t;\\n}\\nvec2 toBezier(float t, vec4 p) {\\n  return toBezier(t, vec2(0.0, 0.0), vec2(p.x, p.y), vec2(p.z, p.w), vec2(1.0, 1.0));\\n}\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n\\nvoid main() {\\n  v_texCoord = a_Uv;\\n\\n  vec2 pos = a_Uv * vec2(2.0) - vec2(1.0); // \\u5C06\\u539F\\u672C 0 -> 1 \\u7684 uv \\u8F6C\\u6362\\u4E3A -1 -> 1 \\u7684\\u6807\\u51C6\\u5750\\u6807\\u7A7A\\u95F4\\uFF08NDC\\uFF09\\n\\n  vec4 p1 = vec4(pos, 0.0, 1.0); // x/y \\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF08z == 0\\uFF09\\u53EF\\u4EE5\\u8BA4\\u4E3A\\u662F\\u4E09\\u7EF4\\u4E0A\\u7684\\u70B9\\u88AB\\u6295\\u5F71\\u5230\\u5E73\\u9762\\u540E\\u7684\\u70B9\\n  vec4 p2 = vec4(pos, 1.0, 1.0); // \\u5E73\\u884C\\u4E8Ex/y\\u5E73\\u9762\\u3001z==1 \\u7684\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\n\\n  vec4 inverseP1 = u_InverseViewProjectionMatrix * p1; // \\u6839\\u636E\\u89C6\\u56FE\\u6295\\u5F71\\u77E9\\u9635\\u7684\\u9006\\u77E9\\u9635\\u5E73\\u9762\\u4E0A\\u7684\\u53CD\\u7B97\\u51FA\\u4E09\\u7EF4\\u7A7A\\u95F4\\u4E2D\\u7684\\u70B9\\uFF08p1\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF09\\n  vec4 inverseP2 = u_InverseViewProjectionMatrix * p2;\\n\\n  inverseP1 = inverseP1 / inverseP1.w; // \\u5F52\\u4E00\\u5316\\u64CD\\u4F5C\\uFF08\\u5F52\\u4E00\\u5316\\u540E\\u4E3A\\u4E16\\u754C\\u5750\\u6807\\uFF09\\n  inverseP2 = inverseP2 / inverseP2.w;\\n\\n  float zPos = (0.0 - inverseP1.z) / (inverseP2.z - inverseP1.z); // ??\\n  vec4 position = inverseP1 + zPos * (inverseP2 - inverseP1);\\n\\n  vec4 b = vec4(0.5, 0.0, 1.0, 0.5);\\n  float fh;\\n\\n  v_intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n  fh = toBezier(v_intensity, b).y;\\n  gl_Position = u_ViewProjectionMatrixUncentered * vec4(position.xy, fh * project_pixel(50.0), 1.0);\\n\\n}\\n\"; // 绘制平面热力的 shader\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_frag.glsl' */\nconst heatmap_frag = \"uniform sampler2D u_texture;        // \\u70ED\\u529B\\u5F3A\\u5EA6\\u56FE\\nuniform sampler2D u_colorTexture;   // \\u6839\\u636E\\u5F3A\\u5EA6\\u5206\\u5E03\\u7684\\u8272\\u5E26\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\nin vec2 v_texCoord;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nfloat getBlurIndusty() {\\n    float vW = 2.0/ u_ViewportSize.x;\\n    float vH = 2.0/ u_ViewportSize.y;\\n    vec2 vUv = v_texCoord;\\n    float i11 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i12 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i13 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n\\n    float i21 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y) ).r;\\n    float i22 = texture(SAMPLER_2D(u_texture), vec2( vUv.x , vUv.y) ).r;\\n    float i23 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y) ).r;\\n\\n    float i31 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i32 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i33 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y-1.0*vH) ).r;\\n\\n    return(\\n        i11 + \\n        i12 + \\n        i13 + \\n        i21 + \\n        i21 + \\n        i22 + \\n        i23 + \\n        i31 + \\n        i32 + \\n        i33\\n        )/9.0;\\n}\\n\\n\\nvoid main(){\\n    // float intensity = texture(u_texture, v_texCoord).r;\\n    float intensity = getBlurIndusty();\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture), vec2(intensity, 0.0));\\n    outputColor = color;\\n    outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_vert.glsl' */\nconst heatmap_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 10) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nvoid main() {\\n  v_texCoord = a_Uv;\\n  #ifdef VIEWPORT_ORIGIN_TL\\n  v_texCoord.y = 1.0 - v_texCoord.y;\\n  #endif\\n\\n  gl_Position = vec4(a_Position.xy, 0, 1.0);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_frag.glsl' */\nconst heatmap_framebuffer_frag = \"layout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nin vec2 v_extrude;\\nin float v_weight;\\nout vec4 outputColor;\\n#define GAUSS_COEF  0.3989422804014327\\n\\nvoid main(){\\n    float d = -0.5 * 3.0 * 3.0 * dot(v_extrude, v_extrude);\\n    float val = v_weight * u_intensity * GAUSS_COEF * exp(d);\\n    outputColor = vec4(val, 1., 1., 1.);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_vert.glsl' */\nconst heatmap_framebuffer_vert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_DIR) in vec2 a_Dir;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nout vec2 v_extrude;\\nout float v_weight;\\n\\n#define GAUSS_COEF (0.3989422804014327)\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  vec3 picking_color_placeholder = u_PickingColor;\\n\\n  v_weight = a_Size;\\n  float ZERO = 1.0 / 255.0 / 16.0;\\n  float extrude_x = a_Dir.x * 2.0 - 1.0;\\n  float extrude_y = a_Dir.y * 2.0 - 1.0;\\n  vec2 extrude_dir = normalize(vec2(extrude_x, extrude_y));\\n  float S = sqrt(-2.0 * log(ZERO / a_Size / u_intensity / GAUSS_COEF)) / 2.5;\\n  v_extrude = extrude_dir * S;\\n\\n  vec2 offset = project_pixel(v_extrude * u_radius);\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n}\\n\";\nimport { heatMap3DTriangulation } from \"../triangulation\";\nconst {\n  isEqual\n} = lodashUtil;\nexport default class HeatMapModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"colorTexture\", void 0);\n    _defineProperty(this, \"heatmapFramerBuffer\", void 0);\n    _defineProperty(this, \"heatmapTexture\", void 0);\n    _defineProperty(this, \"intensityModel\", void 0);\n    _defineProperty(this, \"colorModel\", void 0);\n    _defineProperty(this, \"shapeType\", void 0);\n    _defineProperty(this, \"preRampColors\", void 0);\n    _defineProperty(this, \"colorModelUniformBuffer\", []);\n    _defineProperty(this, \"heat3DModelUniformBuffer\", []);\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      UV: 10,\n      DIR: 11\n    });\n  }\n  prerender() {\n    const {\n      clear,\n      useFramebuffer\n    } = this.rendererService;\n    useFramebuffer(this.heatmapFramerBuffer, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.heatmapFramerBuffer\n      });\n      this.drawIntensityMode(); // 密度图\n    });\n  }\n  render(options) {\n    const {\n      rampColors\n    } = this.layer.getLayerConfig();\n    if (!isEqual(this.preRampColors, rampColors)) {\n      this.updateColorTexture();\n    }\n    this.shapeType === 'heatmap' ? this.drawHeatMap(options) // 2D\n    : this.draw3DHeatMap(options); // 3D\n  }\n  getUninforms() {\n    throw new Error('Method not implemented.');\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _shapeAttr$scale;\n      const {\n        createFramebuffer,\n        getViewportSize,\n        createTexture2D\n      } = _this.rendererService;\n      const shapeAttr = _this.styleAttributeService.getLayerStyleAttribute('shape');\n      const shapeType = (shapeAttr === null || shapeAttr === void 0 || (_shapeAttr$scale = shapeAttr.scale) === null || _shapeAttr$scale === void 0 ? void 0 : _shapeAttr$scale.field) || 'heatmap';\n      _this.shapeType = shapeType;\n      // 生成热力图密度图\n      _this.intensityModel = yield _this.buildHeatMapIntensity();\n      // 渲染到屏幕\n      _this.colorModel = shapeType === 'heatmap' ? _this.buildHeatmap() // 2D\n      : _this.build3dHeatMap(); // 3D\n\n      const {\n        width,\n        height\n      } = getViewportSize();\n\n      // 初始化密度图纹理\n      _this.heatmapTexture = createTexture2D({\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n        usage: TextureUsage.RENDER_TARGET\n      });\n      _this.heatmapFramerBuffer = createFramebuffer({\n        color: _this.heatmapTexture,\n        depth: true,\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4)\n      });\n      _this.updateColorTexture();\n      return [_this.intensityModel, _this.colorModel];\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.initModels();\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'dir',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Dir',\n        shaderLocation: this.attributeLocation.DIR,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4]];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return [size];\n        }\n      }\n    });\n  }\n\n  /**\n   * 热力图密度图\n   */\n  buildHeatMapIntensity() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.uniformBuffers = [_this3.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      _this3.layer.triangulation = HeatmapTriangulation;\n      const model = yield _this3.layer.buildLayerModel({\n        moduleName: 'heatmapIntensity',\n        vertexShader: heatmap_framebuffer_vert,\n        fragmentShader: heatmap_framebuffer_frag,\n        triangulation: HeatmapTriangulation,\n        defines: _this3.getDefines(),\n        depth: {\n          enable: false\n        },\n        cull: {\n          enable: true,\n          face: gl.FRONT\n        }\n      });\n      return model;\n    })();\n  }\n  buildHeatmap() {\n    this.shaderModuleService.registerModule('heatmapColor', {\n      vs: heatmap_vert,\n      fs: heatmap_frag\n    });\n    this.colorModelUniformBuffer = [this.rendererService.createBuffer({\n      // opacity\n      data: new Float32Array(4).fill(0),\n      // 长度需要大于等于 4\n      isUBO: true\n    })];\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('heatmapColor');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      uniformBuffers: [...this.colorModelUniformBuffer, ...this.rendererService.uniformBuffers],\n      attributes: {\n        a_Position: createAttribute({\n          shaderLocation: this.attributeLocation.POSITION,\n          buffer: createBuffer({\n            data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n            type: gl.FLOAT\n          }),\n          size: 3\n        }),\n        a_Uv: createAttribute({\n          shaderLocation: this.attributeLocation.UV,\n          buffer: createBuffer({\n            data: [0, 1, 1, 1, 0, 0, 1, 0],\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      uniforms: _objectSpread({}, uniforms),\n      depth: {\n        enable: false\n      },\n      elements: createElements({\n        data: [0, 2, 1, 2, 3, 1],\n        type: gl.UNSIGNED_INT,\n        count: 6\n      })\n    });\n  }\n  build3dHeatMap() {\n    const {\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    const triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n    this.shaderModuleService.registerModule('heatmap3dColor', {\n      vs: heatmap_3d_vert,\n      fs: heatmap_3d_frag\n    });\n    this.heat3DModelUniformBuffer = [this.rendererService.createBuffer({\n      // opacity\n      data: new Float32Array(16 * 2 + 4).fill(0),\n      // 长度需要大于等于 4\n      isUBO: true\n    })];\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('heatmap3dColor');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          shaderLocation: this.attributeLocation.POSITION,\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT\n          }),\n          size: 3\n        }),\n        a_Uv: createAttribute({\n          shaderLocation: this.attributeLocation.UV,\n          buffer: createBuffer({\n            data: triangulation.uvs,\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      primitive: gl.TRIANGLES,\n      uniformBuffers: [...this.heat3DModelUniformBuffer, ...this.rendererService.uniformBuffers],\n      uniforms: _objectSpread({}, uniforms),\n      depth: {\n        enable: true\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1\n        }\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length\n      })\n    });\n  }\n\n  // 绘制密度图\n  drawIntensityMode() {\n    var _this$intensityModel;\n    const {\n      intensity = 10,\n      radius = 5\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_radius: radius,\n      u_intensity: intensity\n    };\n    this.uniformBuffers[0].subData({\n      offset: 0,\n      data: [radius, intensity]\n    });\n    this.layerService.beforeRenderData(this.layer);\n    this.layer.hooks.beforeRender.call();\n\n    // 绘制密度图\n    (_this$intensityModel = this.intensityModel) === null || _this$intensityModel === void 0 || _this$intensityModel.draw({\n      uniforms: commonOptions,\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          srcAlpha: 1,\n          dstRGB: gl.ONE,\n          dstAlpha: 1\n        }\n      },\n      stencil: {\n        enable: false,\n        mask: 0xff,\n        func: {\n          cmp: 514,\n          // gl.EQUAL,\n          ref: 1,\n          mask: 0xff\n        }\n      }\n    });\n    this.layer.hooks.afterRender.call();\n  }\n  drawHeatMap(options) {\n    var _this$colorModel;\n    const {\n      opacity = 1.0\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_opacity: opacity,\n      u_colorTexture: this.colorTexture,\n      u_texture: this.heatmapFramerBuffer\n    };\n    const textures = [this.heatmapTexture, this.colorTexture];\n    this.colorModelUniformBuffer[0].subData({\n      offset: 0,\n      data: [opacity]\n    });\n    (_this$colorModel = this.colorModel) === null || _this$colorModel === void 0 || _this$colorModel.draw({\n      uniforms: commonOptions,\n      textures,\n      blend: this.getBlend(),\n      stencil: this.getStencil(options)\n    });\n  }\n  draw3DHeatMap(options) {\n    var _this$colorModel2;\n    const {\n      opacity = 1.0\n    } = this.layer.getLayerConfig();\n    const invert = mat4.create();\n    mat4.invert(invert, this.cameraService.getViewProjectionMatrixUncentered());\n    const commonOptions = {\n      u_opacity: opacity,\n      u_colorTexture: this.colorTexture,\n      u_texture: this.heatmapFramerBuffer,\n      u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n      u_InverseViewProjectionMatrix: [...invert]\n    };\n    this.heat3DModelUniformBuffer[0].subData({\n      offset: 0,\n      data: [...commonOptions.u_ViewProjectionMatrixUncentered, ...commonOptions.u_InverseViewProjectionMatrix, opacity]\n    });\n    const textures = [this.heatmapTexture, this.colorTexture];\n    (_this$colorModel2 = this.colorModel) === null || _this$colorModel2 === void 0 || _this$colorModel2.draw({\n      uniforms: commonOptions,\n      textures,\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1\n        }\n      },\n      stencil: this.getStencil(options)\n    });\n  }\n  updateColorTexture() {\n    const {\n      createTexture2D\n    } = this.rendererService;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n    const {\n      rampColors\n    } = this.layer.getLayerConfig();\n    const imageData = generateColorRamp(rampColors);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      usage: TextureUsage.SAMPLED,\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n      unorm: true\n    });\n    this.preRampColors = rampColors;\n  }\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_defineProperty","AttributeType","TextureUsage","gl","generateColorRamp","lodashUtil","mat4","BaseModel","HeatmapTriangulation","heatmap_3d_frag","heatmap_3d_vert","heatmap_frag","heatmap_vert","heatmap_framebuffer_frag","heatmap_framebuffer_vert","heatMap3DTriangulation","isEqual","HeatMapModel","constructor","args","attributeLocation","Object","assign","MAX","SIZE","UV","DIR","prerender","clear","useFramebuffer","rendererService","heatmapFramerBuffer","color","depth","stencil","framebuffer","drawIntensityMode","render","options","rampColors","layer","getLayerConfig","preRampColors","updateColorTexture","shapeType","drawHeatMap","draw3DHeatMap","getUninforms","Error","initModels","_this","_shapeAttr$scale","createFramebuffer","getViewportSize","createTexture2D","shapeAttr","styleAttributeService","getLayerStyleAttribute","scale","field","intensityModel","buildHeatMapIntensity","colorModel","buildHeatmap","build3dHeatMap","width","height","heatmapTexture","Math","floor","wrapS","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","usage","RENDER_TARGET","buildModels","_this2","registerBuiltinAttributes","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","_this3","uniformBuffers","createBuffer","Float32Array","fill","isUBO","triangulation","model","buildLayerModel","moduleName","vertexShader","fragmentShader","defines","getDefines","enable","cull","face","FRONT","shaderModuleService","registerModule","vs","fs","colorModelUniformBuffer","uniforms","getModule","createAttribute","createElements","createModel","attributes","a_Position","POSITION","a_Uv","elements","UNSIGNED_INT","count","heat3DModelUniformBuffer","vertices","uvs","primitive","TRIANGLES","blend","func","srcRGB","SRC_ALPHA","srcAlpha","dstRGB","ONE_MINUS_SRC_ALPHA","dstAlpha","indices","length","_this$intensityModel","intensity","radius","commonOptions","u_radius","u_intensity","subData","offset","layerService","beforeRenderData","hooks","beforeRender","call","draw","ONE","mask","cmp","ref","afterRender","_this$colorModel","opacity","u_opacity","u_colorTexture","colorTexture","u_texture","textures","getBlend","getStencil","_this$colorModel2","invert","create","cameraService","getViewProjectionMatrixUncentered","u_ViewProjectionMatrixUncentered","u_InverseViewProjectionMatrix","texture","destroy","imageData","SAMPLED","NEAREST","flipY","unorm"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/heatmap/models/heatmap.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, TextureUsage, gl } from '@antv/l7-core';\nimport { generateColorRamp, lodashUtil } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport BaseModel from \"../../core/BaseModel\";\nimport { HeatmapTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_frag.glsl' */\nconst heatmap_3d_frag = \"layout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nin vec2 v_texCoord;\\nin float v_intensity;\\nout vec4 outputColor;\\n\\nvoid main(){\\n   \\n    float intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture),vec2(intensity, 0));\\n    outputColor = color;\\n    // gl_FragColor.a = color.a * smoothstep(0.1,0.2,intensity)* u_opacity;\\n   outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_vert.glsl' */\nconst heatmap_3d_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 10) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nout vec2 v_texCoord;\\nout float v_intensity;\\n\\nvec2 toBezier(float t, vec2 P0, vec2 P1, vec2 P2, vec2 P3) {\\n  float t2 = t * t;\\n  float one_minus_t = 1.0 - t;\\n  float one_minus_t2 = one_minus_t * one_minus_t;\\n  return P0 * one_minus_t2 * one_minus_t +\\n  P1 * 3.0 * t * one_minus_t2 +\\n  P2 * 3.0 * t2 * one_minus_t +\\n  P3 * t2 * t;\\n}\\nvec2 toBezier(float t, vec4 p) {\\n  return toBezier(t, vec2(0.0, 0.0), vec2(p.x, p.y), vec2(p.z, p.w), vec2(1.0, 1.0));\\n}\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n\\nvoid main() {\\n  v_texCoord = a_Uv;\\n\\n  vec2 pos = a_Uv * vec2(2.0) - vec2(1.0); // \\u5C06\\u539F\\u672C 0 -> 1 \\u7684 uv \\u8F6C\\u6362\\u4E3A -1 -> 1 \\u7684\\u6807\\u51C6\\u5750\\u6807\\u7A7A\\u95F4\\uFF08NDC\\uFF09\\n\\n  vec4 p1 = vec4(pos, 0.0, 1.0); // x/y \\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF08z == 0\\uFF09\\u53EF\\u4EE5\\u8BA4\\u4E3A\\u662F\\u4E09\\u7EF4\\u4E0A\\u7684\\u70B9\\u88AB\\u6295\\u5F71\\u5230\\u5E73\\u9762\\u540E\\u7684\\u70B9\\n  vec4 p2 = vec4(pos, 1.0, 1.0); // \\u5E73\\u884C\\u4E8Ex/y\\u5E73\\u9762\\u3001z==1 \\u7684\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\n\\n  vec4 inverseP1 = u_InverseViewProjectionMatrix * p1; // \\u6839\\u636E\\u89C6\\u56FE\\u6295\\u5F71\\u77E9\\u9635\\u7684\\u9006\\u77E9\\u9635\\u5E73\\u9762\\u4E0A\\u7684\\u53CD\\u7B97\\u51FA\\u4E09\\u7EF4\\u7A7A\\u95F4\\u4E2D\\u7684\\u70B9\\uFF08p1\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF09\\n  vec4 inverseP2 = u_InverseViewProjectionMatrix * p2;\\n\\n  inverseP1 = inverseP1 / inverseP1.w; // \\u5F52\\u4E00\\u5316\\u64CD\\u4F5C\\uFF08\\u5F52\\u4E00\\u5316\\u540E\\u4E3A\\u4E16\\u754C\\u5750\\u6807\\uFF09\\n  inverseP2 = inverseP2 / inverseP2.w;\\n\\n  float zPos = (0.0 - inverseP1.z) / (inverseP2.z - inverseP1.z); // ??\\n  vec4 position = inverseP1 + zPos * (inverseP2 - inverseP1);\\n\\n  vec4 b = vec4(0.5, 0.0, 1.0, 0.5);\\n  float fh;\\n\\n  v_intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n  fh = toBezier(v_intensity, b).y;\\n  gl_Position = u_ViewProjectionMatrixUncentered * vec4(position.xy, fh * project_pixel(50.0), 1.0);\\n\\n}\\n\"; // 绘制平面热力的 shader\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_frag.glsl' */\nconst heatmap_frag = \"uniform sampler2D u_texture;        // \\u70ED\\u529B\\u5F3A\\u5EA6\\u56FE\\nuniform sampler2D u_colorTexture;   // \\u6839\\u636E\\u5F3A\\u5EA6\\u5206\\u5E03\\u7684\\u8272\\u5E26\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\nin vec2 v_texCoord;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nfloat getBlurIndusty() {\\n    float vW = 2.0/ u_ViewportSize.x;\\n    float vH = 2.0/ u_ViewportSize.y;\\n    vec2 vUv = v_texCoord;\\n    float i11 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i12 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i13 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n\\n    float i21 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y) ).r;\\n    float i22 = texture(SAMPLER_2D(u_texture), vec2( vUv.x , vUv.y) ).r;\\n    float i23 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y) ).r;\\n\\n    float i31 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i32 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i33 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y-1.0*vH) ).r;\\n\\n    return(\\n        i11 + \\n        i12 + \\n        i13 + \\n        i21 + \\n        i21 + \\n        i22 + \\n        i23 + \\n        i31 + \\n        i32 + \\n        i33\\n        )/9.0;\\n}\\n\\n\\nvoid main(){\\n    // float intensity = texture(u_texture, v_texCoord).r;\\n    float intensity = getBlurIndusty();\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture), vec2(intensity, 0.0));\\n    outputColor = color;\\n    outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_vert.glsl' */\nconst heatmap_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 10) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nvoid main() {\\n  v_texCoord = a_Uv;\\n  #ifdef VIEWPORT_ORIGIN_TL\\n  v_texCoord.y = 1.0 - v_texCoord.y;\\n  #endif\\n\\n  gl_Position = vec4(a_Position.xy, 0, 1.0);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_frag.glsl' */\nconst heatmap_framebuffer_frag = \"layout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nin vec2 v_extrude;\\nin float v_weight;\\nout vec4 outputColor;\\n#define GAUSS_COEF  0.3989422804014327\\n\\nvoid main(){\\n    float d = -0.5 * 3.0 * 3.0 * dot(v_extrude, v_extrude);\\n    float val = v_weight * u_intensity * GAUSS_COEF * exp(d);\\n    outputColor = vec4(val, 1., 1., 1.);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_vert.glsl' */\nconst heatmap_framebuffer_vert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_DIR) in vec2 a_Dir;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nout vec2 v_extrude;\\nout float v_weight;\\n\\n#define GAUSS_COEF (0.3989422804014327)\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  vec3 picking_color_placeholder = u_PickingColor;\\n\\n  v_weight = a_Size;\\n  float ZERO = 1.0 / 255.0 / 16.0;\\n  float extrude_x = a_Dir.x * 2.0 - 1.0;\\n  float extrude_y = a_Dir.y * 2.0 - 1.0;\\n  vec2 extrude_dir = normalize(vec2(extrude_x, extrude_y));\\n  float S = sqrt(-2.0 * log(ZERO / a_Size / u_intensity / GAUSS_COEF)) / 2.5;\\n  v_extrude = extrude_dir * S;\\n\\n  vec2 offset = project_pixel(v_extrude * u_radius);\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n}\\n\";\nimport { heatMap3DTriangulation } from \"../triangulation\";\nconst {\n  isEqual\n} = lodashUtil;\nexport default class HeatMapModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"colorTexture\", void 0);\n    _defineProperty(this, \"heatmapFramerBuffer\", void 0);\n    _defineProperty(this, \"heatmapTexture\", void 0);\n    _defineProperty(this, \"intensityModel\", void 0);\n    _defineProperty(this, \"colorModel\", void 0);\n    _defineProperty(this, \"shapeType\", void 0);\n    _defineProperty(this, \"preRampColors\", void 0);\n    _defineProperty(this, \"colorModelUniformBuffer\", []);\n    _defineProperty(this, \"heat3DModelUniformBuffer\", []);\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      UV: 10,\n      DIR: 11\n    });\n  }\n  prerender() {\n    const {\n      clear,\n      useFramebuffer\n    } = this.rendererService;\n    useFramebuffer(this.heatmapFramerBuffer, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.heatmapFramerBuffer\n      });\n      this.drawIntensityMode(); // 密度图\n    });\n  }\n  render(options) {\n    const {\n      rampColors\n    } = this.layer.getLayerConfig();\n    if (!isEqual(this.preRampColors, rampColors)) {\n      this.updateColorTexture();\n    }\n    this.shapeType === 'heatmap' ? this.drawHeatMap(options) // 2D\n    : this.draw3DHeatMap(options); // 3D\n  }\n  getUninforms() {\n    throw new Error('Method not implemented.');\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _shapeAttr$scale;\n      const {\n        createFramebuffer,\n        getViewportSize,\n        createTexture2D\n      } = _this.rendererService;\n      const shapeAttr = _this.styleAttributeService.getLayerStyleAttribute('shape');\n      const shapeType = (shapeAttr === null || shapeAttr === void 0 || (_shapeAttr$scale = shapeAttr.scale) === null || _shapeAttr$scale === void 0 ? void 0 : _shapeAttr$scale.field) || 'heatmap';\n      _this.shapeType = shapeType;\n      // 生成热力图密度图\n      _this.intensityModel = yield _this.buildHeatMapIntensity();\n      // 渲染到屏幕\n      _this.colorModel = shapeType === 'heatmap' ? _this.buildHeatmap() // 2D\n      : _this.build3dHeatMap(); // 3D\n\n      const {\n        width,\n        height\n      } = getViewportSize();\n\n      // 初始化密度图纹理\n      _this.heatmapTexture = createTexture2D({\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n        usage: TextureUsage.RENDER_TARGET\n      });\n      _this.heatmapFramerBuffer = createFramebuffer({\n        color: _this.heatmapTexture,\n        depth: true,\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4)\n      });\n      _this.updateColorTexture();\n      return [_this.intensityModel, _this.colorModel];\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.initModels();\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'dir',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Dir',\n        shaderLocation: this.attributeLocation.DIR,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4]];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return [size];\n        }\n      }\n    });\n  }\n\n  /**\n   * 热力图密度图\n   */\n  buildHeatMapIntensity() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.uniformBuffers = [_this3.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      _this3.layer.triangulation = HeatmapTriangulation;\n      const model = yield _this3.layer.buildLayerModel({\n        moduleName: 'heatmapIntensity',\n        vertexShader: heatmap_framebuffer_vert,\n        fragmentShader: heatmap_framebuffer_frag,\n        triangulation: HeatmapTriangulation,\n        defines: _this3.getDefines(),\n        depth: {\n          enable: false\n        },\n        cull: {\n          enable: true,\n          face: gl.FRONT\n        }\n      });\n      return model;\n    })();\n  }\n  buildHeatmap() {\n    this.shaderModuleService.registerModule('heatmapColor', {\n      vs: heatmap_vert,\n      fs: heatmap_frag\n    });\n    this.colorModelUniformBuffer = [this.rendererService.createBuffer({\n      // opacity\n      data: new Float32Array(4).fill(0),\n      // 长度需要大于等于 4\n      isUBO: true\n    })];\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('heatmapColor');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      uniformBuffers: [...this.colorModelUniformBuffer, ...this.rendererService.uniformBuffers],\n      attributes: {\n        a_Position: createAttribute({\n          shaderLocation: this.attributeLocation.POSITION,\n          buffer: createBuffer({\n            data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n            type: gl.FLOAT\n          }),\n          size: 3\n        }),\n        a_Uv: createAttribute({\n          shaderLocation: this.attributeLocation.UV,\n          buffer: createBuffer({\n            data: [0, 1, 1, 1, 0, 0, 1, 0],\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      uniforms: _objectSpread({}, uniforms),\n      depth: {\n        enable: false\n      },\n      elements: createElements({\n        data: [0, 2, 1, 2, 3, 1],\n        type: gl.UNSIGNED_INT,\n        count: 6\n      })\n    });\n  }\n  build3dHeatMap() {\n    const {\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    const triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n    this.shaderModuleService.registerModule('heatmap3dColor', {\n      vs: heatmap_3d_vert,\n      fs: heatmap_3d_frag\n    });\n    this.heat3DModelUniformBuffer = [this.rendererService.createBuffer({\n      // opacity\n      data: new Float32Array(16 * 2 + 4).fill(0),\n      // 长度需要大于等于 4\n      isUBO: true\n    })];\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('heatmap3dColor');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          shaderLocation: this.attributeLocation.POSITION,\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT\n          }),\n          size: 3\n        }),\n        a_Uv: createAttribute({\n          shaderLocation: this.attributeLocation.UV,\n          buffer: createBuffer({\n            data: triangulation.uvs,\n            type: gl.FLOAT\n          }),\n          size: 2\n        })\n      },\n      primitive: gl.TRIANGLES,\n      uniformBuffers: [...this.heat3DModelUniformBuffer, ...this.rendererService.uniformBuffers],\n      uniforms: _objectSpread({}, uniforms),\n      depth: {\n        enable: true\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1\n        }\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length\n      })\n    });\n  }\n\n  // 绘制密度图\n  drawIntensityMode() {\n    var _this$intensityModel;\n    const {\n      intensity = 10,\n      radius = 5\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_radius: radius,\n      u_intensity: intensity\n    };\n    this.uniformBuffers[0].subData({\n      offset: 0,\n      data: [radius, intensity]\n    });\n    this.layerService.beforeRenderData(this.layer);\n    this.layer.hooks.beforeRender.call();\n\n    // 绘制密度图\n    (_this$intensityModel = this.intensityModel) === null || _this$intensityModel === void 0 || _this$intensityModel.draw({\n      uniforms: commonOptions,\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          srcAlpha: 1,\n          dstRGB: gl.ONE,\n          dstAlpha: 1\n        }\n      },\n      stencil: {\n        enable: false,\n        mask: 0xff,\n        func: {\n          cmp: 514,\n          // gl.EQUAL,\n          ref: 1,\n          mask: 0xff\n        }\n      }\n    });\n    this.layer.hooks.afterRender.call();\n  }\n  drawHeatMap(options) {\n    var _this$colorModel;\n    const {\n      opacity = 1.0\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_opacity: opacity,\n      u_colorTexture: this.colorTexture,\n      u_texture: this.heatmapFramerBuffer\n    };\n    const textures = [this.heatmapTexture, this.colorTexture];\n    this.colorModelUniformBuffer[0].subData({\n      offset: 0,\n      data: [opacity]\n    });\n    (_this$colorModel = this.colorModel) === null || _this$colorModel === void 0 || _this$colorModel.draw({\n      uniforms: commonOptions,\n      textures,\n      blend: this.getBlend(),\n      stencil: this.getStencil(options)\n    });\n  }\n  draw3DHeatMap(options) {\n    var _this$colorModel2;\n    const {\n      opacity = 1.0\n    } = this.layer.getLayerConfig();\n    const invert = mat4.create();\n    mat4.invert(invert, this.cameraService.getViewProjectionMatrixUncentered());\n    const commonOptions = {\n      u_opacity: opacity,\n      u_colorTexture: this.colorTexture,\n      u_texture: this.heatmapFramerBuffer,\n      u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n      u_InverseViewProjectionMatrix: [...invert]\n    };\n    this.heat3DModelUniformBuffer[0].subData({\n      offset: 0,\n      data: [...commonOptions.u_ViewProjectionMatrixUncentered, ...commonOptions.u_InverseViewProjectionMatrix, opacity]\n    });\n    const textures = [this.heatmapTexture, this.colorTexture];\n    (_this$colorModel2 = this.colorModel) === null || _this$colorModel2 === void 0 || _this$colorModel2.draw({\n      uniforms: commonOptions,\n      textures,\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1\n        }\n      },\n      stencil: this.getStencil(options)\n    });\n  }\n  updateColorTexture() {\n    const {\n      createTexture2D\n    } = this.rendererService;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n    const {\n      rampColors\n    } = this.layer.getLayerConfig();\n    const imageData = generateColorRamp(rampColors);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      usage: TextureUsage.SAMPLED,\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n      unorm: true\n    });\n    this.preRampColors = rampColors;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}