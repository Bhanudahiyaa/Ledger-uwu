{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { fp64LowPart, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/arc/line_arc_frag.glsl' */\nconst arc_line_frag = \"\\n#define Animate 0.0\\n#define LineTexture 1.0\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array;\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_lineDir: 1.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_blur : 0.9;\\n  float u_line_type: 0.0;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\nin vec4 v_color;\\nin vec2 v_iconMapUV;\\nin vec4 v_lineData;\\n//dash\\nin vec4 v_dash_array;\\nin float v_distance_ratio;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  if(u_dash_array!=vec4(0.0)){\\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(!(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z))) {\\n      discard;\\n    };\\n  }\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  outputColor = v_color;\\n  if(u_animate.x == Animate && u_line_texture != LineTexture) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- v_lineData.b, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      outputColor.a *= alpha;\\n  }\\n\\n  // \\u5F53\\u5B58\\u5728\\u8D34\\u56FE\\u65F6\\u5728\\u5E95\\u8272\\u4E0A\\u8D34\\u4E0A\\u8D34\\u56FE\\n  if(u_line_texture == LineTexture) { // while load texture\\n    float arcRadio = smoothstep( 0.0, 1.0, (v_lineData.r / segmentNumber));\\n    // float arcRadio = smoothstep( 0.0, 1.0, d_distance_ratio);\\n\\n    float count = v_lineData.g; // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float time = 0.0;\\n    if(u_animate.x == Animate) {\\n      time = u_time / u_animate.y;\\n    }\\n    float redioCount = arcRadio * count;\\n\\n    float u = fract(redioCount - time);\\n    float v = v_lineData.a; // \\u6A2A\\u5411 v\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    if(u_animate.x == Animate) {\\n      float currentPlane = floor(redioCount - time);\\n      float textureStep = floor(count * u_animate.z);\\n      float a = mod(currentPlane, textureStep);\\n      if(a < textureStep - 1.0) {\\n        pattern = vec4(0.0);\\n      }\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n    \\n  } else {\\n     outputColor = filterColor(outputColor);\\n  }\\n}\";\n/* babel-plugin-inline-import '../shaders/arc/line_arc_vert.glsl' */\nconst arc_line_vert = \"#define Animate (0.0)\\n#define LineTexture (1.0)\\n\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE) in vec4 a_Instance;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE_64LOW) in vec4 a_Instance64Low;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_iconMapUV;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array;\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_lineDir: 1.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_blur : 0.9;\\n  float u_line_type: 0.0;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\nout vec4 v_color;\\nout vec2 v_iconMapUV;\\nout vec4 v_lineData;\\n//dash\\nout vec4 v_dash_array;\\nout float v_distance_ratio;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat bezier3(vec3 arr, float t) {\\n  float ut = 1.0 - t;\\n  return (arr.x * ut + arr.y * t) * ut + (arr.y * ut + arr.z * t) * t;\\n}\\nvec2 midPoint(vec2 source, vec2 target, float arcThetaOffset) {\\n  vec2 center = target - source;\\n  float r = length(center);\\n  float theta = atan(center.y, center.x);\\n  float thetaOffset = arcThetaOffset;\\n  float r2 = r / 2.0 / cos(thetaOffset);\\n  float theta2 = theta + thetaOffset;\\n  vec2 mid = vec2(r2 * cos(theta2) + source.x, r2 * sin(theta2) + source.y);\\n  if (u_lineDir == 1.0) {\\n    // \\u6B63\\u5411\\n    return mid;\\n  } else {\\n    // \\u9006\\u5411\\n    // (mid + vmin)/2 = (s + t)/2\\n    vec2 vmid = source + target - mid;\\n    return vmid;\\n  }\\n  // return mid;\\n}\\nfloat getSegmentRatio(float index) {\\n  // dash: index / (segmentNumber - 1.);\\n  // normal: smoothstep(0.0, 1.0, index / (segmentNumber - 1.));\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n  //  return index / (segmentNumber - 1.);\\n}\\nvec2 interpolate(vec2 source, vec2 target, float t, float arcThetaOffset) {\\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\\n  vec2 mid = midPoint(source, target, arcThetaOffset);\\n  vec3 x = vec3(source.x, mid.x, target.x);\\n  vec3 y = vec3(source.y, mid.y, target.y);\\n  return vec2(bezier3(x, t), bezier3(y, t));\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n   dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n   return dir_screenspace.xy * sign(offset_direction);\\n}\\n\\nvoid main() {\\n  //vs\\u4E2D\\u8BA1\\u7B97\\u6E10\\u53D8\\u8272\\n  if (u_linearColor == 1.0) {\\n    float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n    v_color = mix(u_sourceColor, u_targetColor, d_segmentIndex / segmentNumber);\\n  } else {\\n    v_color = a_Color;\\n  }\\n  v_color.a = v_color.a * opacity;\\n\\n  vec2 source_world = a_Instance.rg; // \\u8D77\\u59CB\\u70B9\\n  vec2 target_world = a_Instance.ba; // \\u7EC8\\u70B9\\n\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n\\n  // \\u8BA1\\u7B97 dashArray \\u548C distanceRatio \\u8F93\\u51FA\\u5230\\u7247\\u5143\\n  float total_Distance = pixelDistance(source_world, target_world) / 2.0 * PI;\\n  v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / total_Distance;\\n  v_distance_ratio = segmentIndex / segmentNumber;\\n\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  float d_distance_ratio;\\n\\n  if(u_animate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n      if(u_lineDir != 1.0) {\\n        d_distance_ratio = 1.0 - d_distance_ratio;\\n      }\\n  }\\n\\n  v_lineData.b = d_distance_ratio;\\n\\n  vec4 source = project_position(vec4(source_world, 0, 1.), a_Instance64Low.xy);\\n  vec4 target = project_position(vec4(target_world, 0, 1.), a_Instance64Low.zw);\\n\\n  vec2 currPos = interpolate(source.xy, target.xy, segmentRatio, thetaOffset);\\n  vec2 nextPos = interpolate(source.xy, target.xy, nextSegmentRatio, thetaOffset);\\n\\n  vec2 offset = project_pixel(\\n    getExtrusionOffset((nextPos.xy - currPos.xy) * indexDir, a_Position.y)\\n  );\\n\\n  float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n  v_lineData.r = d_segmentIndex;\\n\\n  if(LineTexture == u_line_texture) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F\\n    float arcDistrance = length(source - target); // \\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u70B9\\u7684\\u8DDD\\u79BB\\n    arcDistrance = project_pixel(arcDistrance);\\n\\n    v_iconMapUV = a_iconMapUV;\\n\\n    float pixelLen = project_pixel_texture(u_icon_step); // \\u8D34\\u56FE\\u6CBF\\u5F27\\u7EBF\\u65B9\\u5411\\u7684\\u957F\\u5EA6 - \\u968F\\u5730\\u56FE\\u7F29\\u653E\\u6539\\u53D8\\n    float texCount = floor(arcDistrance / pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n    v_lineData.g = texCount;\\n\\n    float lineOffsetWidth = length(offset + offset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size); // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\n    v_lineData.a = lineOffsetWidth / linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(currPos.xy + offset, 0, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nconst lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nexport default class ArcModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"updateTexture\", () => {\n      const {\n        createTexture2D\n      } = this.rendererService;\n      if (this.texture) {\n        this.texture.update({\n          data: this.iconService.getCanvas()\n        });\n        this.layer.render();\n        return;\n      }\n      this.texture = createTexture2D({\n        data: this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: this.iconService.canvasHeight || 128\n      });\n      this.textures = [this.texture];\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      INSTANCE: 10,\n      INSTANCE_64LOW: 11,\n      UV: 12,\n      THETA_OFFSET: 13\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5],\n      forward = true,\n      lineTexture = false,\n      iconStep = 100,\n      segmentNumber = 30\n      // thetaOffset = 0.314,\n    } = this.layer.getLayerConfig();\n    const {\n      animateOption\n    } = this.layer.getLayerConfig();\n    let u_dash_array = dashArray;\n    if (lineType !== 'dash') {\n      u_dash_array = [0, 0];\n    }\n    if (u_dash_array.length === 2) {\n      u_dash_array.push(0, 0);\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n    if (this.rendererService.getDirty()) {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.bind();\n    }\n    const commonOptions = {\n      u_animate: this.animateOption2Array(animateOption),\n      u_dash_array,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      segmentNumber,\n      u_lineDir: forward ? 1 : -1,\n      u_icon_step: iconStep,\n      u_line_texture: lineTexture ? 1.0 : 0.0,\n      // 传入线的标识\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      u_blur: 0.9,\n      u_line_type: lineStyleObj[lineType || 'solid'],\n      u_time: this.layer.getLayerAnimateTime() || 0,\n      // // 纹理支持参数\n      // u_texture: this.texture, // 贴图\n      // 渐变色支持参数\n      u_linearColor: useLinearColor\n    };\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n\n  // public getAnimateUniforms(): IModelUniform {\n  //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n  //   return {\n  //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n  //     u_time: this.layer.getLayerAnimateTime(),\n  //   };\n  // }\n\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.updateTexture();\n      _this.iconService.on('imageUpdate', _this.updateTexture);\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    var _this$texture2;\n    (_this$texture2 = this.texture) === null || _this$texture2 === void 0 || _this$texture2.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n  getShaders() {\n    return {\n      frag: arc_line_frag,\n      vert: arc_line_vert,\n      type: ''\n    };\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.initUniformsBuffer();\n      const {\n        segmentNumber = 30\n      } = _this2.layer.getLayerConfig();\n      const {\n        frag,\n        vert,\n        type\n      } = _this2.getShaders();\n      //\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'lineArc2d' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        triangulation: LineArcTriangulation,\n        depth: {\n          enable: false\n        },\n        styleOption: {\n          segmentNumber\n        }\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return Array.isArray(size) ? [size[0]] : [size];\n        }\n      }\n    });\n\n    // 弧线起始点信息\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance',\n        shaderLocation: this.attributeLocation.INSTANCE,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4], vertex[5], vertex[6]];\n        }\n      }\n    });\n\n    // save low part for enabled double precision INSTANCE attribute\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance64Low',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance64Low',\n        shaderLocation: this.attributeLocation.INSTANCE_64LOW,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [fp64LowPart(vertex[3]), fp64LowPart(vertex[4]), fp64LowPart(vertex[5]), fp64LowPart(vertex[6])];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: feature => {\n          const iconMap = this.iconService.getIconMap();\n          const {\n            texture\n          } = feature;\n          const {\n            x,\n            y\n          } = iconMap[texture] || {\n            x: 0,\n            y: 0\n          };\n          return [x, y];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'thetaOffset',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_ThetaOffset',\n        shaderLocation: this.attributeLocation.THETA_OFFSET,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            thetaOffset: op = 1\n          } = feature;\n          return [op];\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","AttributeType","gl","fp64LowPart","rgb2arr","BaseModel","LineArcTriangulation","arc_line_frag","arc_line_vert","lineStyleObj","solid","dash","ArcModel","constructor","args","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","layer","render","mag","NEAREST","min","premultiplyAlpha","width","height","canvasHeight","textures","attributeLocation","Object","assign","MAX","SIZE","INSTANCE","INSTANCE_64LOW","UV","THETA_OFFSET","getCommonUniformsInfo","sourceColor","targetColor","textureBlend","lineType","dashArray","forward","lineTexture","iconStep","segmentNumber","getLayerConfig","animateOption","u_dash_array","length","push","useLinearColor","sourceColorArr","targetColorArr","getDirty","_this$texture","bind","commonOptions","u_animate","animateOption2Array","u_sourceColor","u_targetColor","u_textSize","u_lineDir","u_icon_step","u_line_texture","u_textureBlend","u_blur","u_line_type","u_time","getLayerAnimateTime","u_linearColor","commonBufferInfo","getUniformsBufferInfo","initModels","_this","updateTexture","on","buildModels","clearModels","_this$texture2","destroy","off","getShaders","frag","vert","type","_this2","initUniformsBuffer","model","buildLayerModel","moduleName","vertexShader","fragmentShader","defines","getDefines","inject","getInject","triangulation","depth","enable","styleOption","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","shaderLocation","buffer","usage","DYNAMIC_DRAW","FLOAT","size","feature","Array","isArray","STATIC_DRAW","featureIdx","vertex","iconMap","getIconMap","x","y","thetaOffset","op"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/line/models/arc.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { fp64LowPart, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/arc/line_arc_frag.glsl' */\nconst arc_line_frag = \"\\n#define Animate 0.0\\n#define LineTexture 1.0\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array;\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_lineDir: 1.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_blur : 0.9;\\n  float u_line_type: 0.0;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\nin vec4 v_color;\\nin vec2 v_iconMapUV;\\nin vec4 v_lineData;\\n//dash\\nin vec4 v_dash_array;\\nin float v_distance_ratio;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  if(u_dash_array!=vec4(0.0)){\\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(!(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z))) {\\n      discard;\\n    };\\n  }\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  outputColor = v_color;\\n  if(u_animate.x == Animate && u_line_texture != LineTexture) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- v_lineData.b, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      outputColor.a *= alpha;\\n  }\\n\\n  // \\u5F53\\u5B58\\u5728\\u8D34\\u56FE\\u65F6\\u5728\\u5E95\\u8272\\u4E0A\\u8D34\\u4E0A\\u8D34\\u56FE\\n  if(u_line_texture == LineTexture) { // while load texture\\n    float arcRadio = smoothstep( 0.0, 1.0, (v_lineData.r / segmentNumber));\\n    // float arcRadio = smoothstep( 0.0, 1.0, d_distance_ratio);\\n\\n    float count = v_lineData.g; // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float time = 0.0;\\n    if(u_animate.x == Animate) {\\n      time = u_time / u_animate.y;\\n    }\\n    float redioCount = arcRadio * count;\\n\\n    float u = fract(redioCount - time);\\n    float v = v_lineData.a; // \\u6A2A\\u5411 v\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    if(u_animate.x == Animate) {\\n      float currentPlane = floor(redioCount - time);\\n      float textureStep = floor(count * u_animate.z);\\n      float a = mod(currentPlane, textureStep);\\n      if(a < textureStep - 1.0) {\\n        pattern = vec4(0.0);\\n      }\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n    \\n  } else {\\n     outputColor = filterColor(outputColor);\\n  }\\n}\";\n/* babel-plugin-inline-import '../shaders/arc/line_arc_vert.glsl' */\nconst arc_line_vert = \"#define Animate (0.0)\\n#define LineTexture (1.0)\\n\\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE) in vec4 a_Instance;\\nlayout(location = ATTRIBUTE_LOCATION_INSTANCE_64LOW) in vec4 a_Instance64Low;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_iconMapUV;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array;\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float segmentNumber;\\n  float u_lineDir: 1.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_blur : 0.9;\\n  float u_line_type: 0.0;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\nout vec4 v_color;\\nout vec2 v_iconMapUV;\\nout vec4 v_lineData;\\n//dash\\nout vec4 v_dash_array;\\nout float v_distance_ratio;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat bezier3(vec3 arr, float t) {\\n  float ut = 1.0 - t;\\n  return (arr.x * ut + arr.y * t) * ut + (arr.y * ut + arr.z * t) * t;\\n}\\nvec2 midPoint(vec2 source, vec2 target, float arcThetaOffset) {\\n  vec2 center = target - source;\\n  float r = length(center);\\n  float theta = atan(center.y, center.x);\\n  float thetaOffset = arcThetaOffset;\\n  float r2 = r / 2.0 / cos(thetaOffset);\\n  float theta2 = theta + thetaOffset;\\n  vec2 mid = vec2(r2 * cos(theta2) + source.x, r2 * sin(theta2) + source.y);\\n  if (u_lineDir == 1.0) {\\n    // \\u6B63\\u5411\\n    return mid;\\n  } else {\\n    // \\u9006\\u5411\\n    // (mid + vmin)/2 = (s + t)/2\\n    vec2 vmid = source + target - mid;\\n    return vmid;\\n  }\\n  // return mid;\\n}\\nfloat getSegmentRatio(float index) {\\n  // dash: index / (segmentNumber - 1.);\\n  // normal: smoothstep(0.0, 1.0, index / (segmentNumber - 1.));\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n  //  return index / (segmentNumber - 1.);\\n}\\nvec2 interpolate(vec2 source, vec2 target, float t, float arcThetaOffset) {\\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\\n  vec2 mid = midPoint(source, target, arcThetaOffset);\\n  vec3 x = vec3(source.x, mid.x, target.x);\\n  vec3 y = vec3(source.y, mid.y, target.y);\\n  return vec2(bezier3(x, t), bezier3(y, t));\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n   dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n   return dir_screenspace.xy * sign(offset_direction);\\n}\\n\\nvoid main() {\\n  //vs\\u4E2D\\u8BA1\\u7B97\\u6E10\\u53D8\\u8272\\n  if (u_linearColor == 1.0) {\\n    float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n    v_color = mix(u_sourceColor, u_targetColor, d_segmentIndex / segmentNumber);\\n  } else {\\n    v_color = a_Color;\\n  }\\n  v_color.a = v_color.a * opacity;\\n\\n  vec2 source_world = a_Instance.rg; // \\u8D77\\u59CB\\u70B9\\n  vec2 target_world = a_Instance.ba; // \\u7EC8\\u70B9\\n\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n\\n  // \\u8BA1\\u7B97 dashArray \\u548C distanceRatio \\u8F93\\u51FA\\u5230\\u7247\\u5143\\n  float total_Distance = pixelDistance(source_world, target_world) / 2.0 * PI;\\n  v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / total_Distance;\\n  v_distance_ratio = segmentIndex / segmentNumber;\\n\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  float d_distance_ratio;\\n\\n  if(u_animate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n      if(u_lineDir != 1.0) {\\n        d_distance_ratio = 1.0 - d_distance_ratio;\\n      }\\n  }\\n\\n  v_lineData.b = d_distance_ratio;\\n\\n  vec4 source = project_position(vec4(source_world, 0, 1.), a_Instance64Low.xy);\\n  vec4 target = project_position(vec4(target_world, 0, 1.), a_Instance64Low.zw);\\n\\n  vec2 currPos = interpolate(source.xy, target.xy, segmentRatio, thetaOffset);\\n  vec2 nextPos = interpolate(source.xy, target.xy, nextSegmentRatio, thetaOffset);\\n\\n  vec2 offset = project_pixel(\\n    getExtrusionOffset((nextPos.xy - currPos.xy) * indexDir, a_Position.y)\\n  );\\n\\n  float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n  v_lineData.r = d_segmentIndex;\\n\\n  if(LineTexture == u_line_texture) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F\\n    float arcDistrance = length(source - target); // \\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u70B9\\u7684\\u8DDD\\u79BB\\n    arcDistrance = project_pixel(arcDistrance);\\n\\n    v_iconMapUV = a_iconMapUV;\\n\\n    float pixelLen = project_pixel_texture(u_icon_step); // \\u8D34\\u56FE\\u6CBF\\u5F27\\u7EBF\\u65B9\\u5411\\u7684\\u957F\\u5EA6 - \\u968F\\u5730\\u56FE\\u7F29\\u653E\\u6539\\u53D8\\n    float texCount = floor(arcDistrance / pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n    v_lineData.g = texCount;\\n\\n    float lineOffsetWidth = length(offset + offset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size); // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\n    v_lineData.a = lineOffsetWidth / linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(currPos.xy + offset, 0, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nconst lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nexport default class ArcModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"updateTexture\", () => {\n      const {\n        createTexture2D\n      } = this.rendererService;\n      if (this.texture) {\n        this.texture.update({\n          data: this.iconService.getCanvas()\n        });\n        this.layer.render();\n        return;\n      }\n      this.texture = createTexture2D({\n        data: this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: this.iconService.canvasHeight || 128\n      });\n      this.textures = [this.texture];\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      SIZE: 9,\n      INSTANCE: 10,\n      INSTANCE_64LOW: 11,\n      UV: 12,\n      THETA_OFFSET: 13\n    });\n  }\n  getCommonUniformsInfo() {\n    const {\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5],\n      forward = true,\n      lineTexture = false,\n      iconStep = 100,\n      segmentNumber = 30\n      // thetaOffset = 0.314,\n    } = this.layer.getLayerConfig();\n    const {\n      animateOption\n    } = this.layer.getLayerConfig();\n    let u_dash_array = dashArray;\n    if (lineType !== 'dash') {\n      u_dash_array = [0, 0];\n    }\n    if (u_dash_array.length === 2) {\n      u_dash_array.push(0, 0);\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n    if (this.rendererService.getDirty()) {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.bind();\n    }\n    const commonOptions = {\n      u_animate: this.animateOption2Array(animateOption),\n      u_dash_array,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      segmentNumber,\n      u_lineDir: forward ? 1 : -1,\n      u_icon_step: iconStep,\n      u_line_texture: lineTexture ? 1.0 : 0.0,\n      // 传入线的标识\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      u_blur: 0.9,\n      u_line_type: lineStyleObj[lineType || 'solid'],\n      u_time: this.layer.getLayerAnimateTime() || 0,\n      // // 纹理支持参数\n      // u_texture: this.texture, // 贴图\n      // 渐变色支持参数\n      u_linearColor: useLinearColor\n    };\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n\n  // public getAnimateUniforms(): IModelUniform {\n  //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n  //   return {\n  //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n  //     u_time: this.layer.getLayerAnimateTime(),\n  //   };\n  // }\n\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.updateTexture();\n      _this.iconService.on('imageUpdate', _this.updateTexture);\n      return _this.buildModels();\n    })();\n  }\n  clearModels() {\n    var _this$texture2;\n    (_this$texture2 = this.texture) === null || _this$texture2 === void 0 || _this$texture2.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n  getShaders() {\n    return {\n      frag: arc_line_frag,\n      vert: arc_line_vert,\n      type: ''\n    };\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.initUniformsBuffer();\n      const {\n        segmentNumber = 30\n      } = _this2.layer.getLayerConfig();\n      const {\n        frag,\n        vert,\n        type\n      } = _this2.getShaders();\n      //\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'lineArc2d' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        triangulation: LineArcTriangulation,\n        depth: {\n          enable: false\n        },\n        styleOption: {\n          segmentNumber\n        }\n      });\n      return [model];\n    })();\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        shaderLocation: this.attributeLocation.SIZE,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            size = 1\n          } = feature;\n          return Array.isArray(size) ? [size[0]] : [size];\n        }\n      }\n    });\n\n    // 弧线起始点信息\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance',\n        shaderLocation: this.attributeLocation.INSTANCE,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[3], vertex[4], vertex[5], vertex[6]];\n        }\n      }\n    });\n\n    // save low part for enabled double precision INSTANCE attribute\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance64Low',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance64Low',\n        shaderLocation: this.attributeLocation.INSTANCE_64LOW,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 4,\n        update: (feature, featureIdx, vertex) => {\n          return [fp64LowPart(vertex[3]), fp64LowPart(vertex[4]), fp64LowPart(vertex[5]), fp64LowPart(vertex[6])];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: feature => {\n          const iconMap = this.iconService.getIconMap();\n          const {\n            texture\n          } = feature;\n          const {\n            x,\n            y\n          } = iconMap[texture] || {\n            x: 0,\n            y: 0\n          };\n          return [x, y];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'thetaOffset',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_ThetaOffset',\n        shaderLocation: this.attributeLocation.THETA_OFFSET,\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 1,\n        update: feature => {\n          const {\n            thetaOffset: op = 1\n          } = feature;\n          return [op];\n        }\n      }\n    });\n  }\n}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,SAASC,aAAa,EAAEC,EAAE,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AACrD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA,MAAMC,aAAa,GAAG,g2FAAg2F;AACt3F;AACA,MAAMC,aAAa,GAAG,g8LAAg8L;AACt9L,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE;AACR,CAAC;AACD,eAAe,MAAMC,QAAQ,SAASP,SAAS,CAAC;EAC9CQ,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACdd,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACxCA,eAAe,CAAC,IAAI,EAAE,eAAe,EAAE,MAAM;MAC3C,MAAM;QACJe;MACF,CAAC,GAAG,IAAI,CAACC,eAAe;MACxB,IAAI,IAAI,CAACC,OAAO,EAAE;QAChB,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC;UAClBC,IAAI,EAAE,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC;QACnC,CAAC,CAAC;QACF,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC;QACnB;MACF;MACA,IAAI,CAACN,OAAO,GAAGF,eAAe,CAAC;QAC7BI,IAAI,EAAE,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC,CAAC;QAClCG,GAAG,EAAEtB,EAAE,CAACuB,OAAO;QACfC,GAAG,EAAExB,EAAE,CAACuB,OAAO;QACfE,gBAAgB,EAAE,KAAK;QACvBC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,IAAI,CAACT,WAAW,CAACU,YAAY,IAAI;MAC3C,CAAC,CAAC;MACF,IAAI,CAACC,QAAQ,GAAG,CAAC,IAAI,CAACd,OAAO,CAAC;IAChC,CAAC,CAAC;EACJ;EACA,IAAIe,iBAAiBA,CAAA,EAAG;IACtB,OAAOC,MAAM,CAACC,MAAM,CAAC,KAAK,CAACF,iBAAiB,EAAE;MAC5CG,GAAG,EAAE,KAAK,CAACH,iBAAiB,CAACG,GAAG;MAChCC,IAAI,EAAE,CAAC;MACPC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,EAAE;MAClBC,EAAE,EAAE,EAAE;MACNC,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ;EACAC,qBAAqBA,CAAA,EAAG;IACtB,MAAM;MACJC,WAAW;MACXC,WAAW;MACXC,YAAY,GAAG,QAAQ;MACvBC,QAAQ,GAAG,OAAO;MAClBC,SAAS,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;MACnBC,OAAO,GAAG,IAAI;MACdC,WAAW,GAAG,KAAK;MACnBC,QAAQ,GAAG,GAAG;MACdC,aAAa,GAAG;MAChB;IACF,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAC6B,cAAc,CAAC,CAAC;IAC/B,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAAC9B,KAAK,CAAC6B,cAAc,CAAC,CAAC;IAC/B,IAAIE,YAAY,GAAGP,SAAS;IAC5B,IAAID,QAAQ,KAAK,MAAM,EAAE;MACvBQ,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACvB;IACA,IAAIA,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BD,YAAY,CAACE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACzB;;IAEA;IACA,IAAIC,cAAc,GAAG,CAAC,CAAC,CAAC;IACxB,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,IAAIhB,WAAW,IAAIC,WAAW,EAAE;MAC9Bc,cAAc,GAAGrD,OAAO,CAACsC,WAAW,CAAC;MACrCgB,cAAc,GAAGtD,OAAO,CAACuC,WAAW,CAAC;MACrCa,cAAc,GAAG,CAAC;IACpB;IACA,IAAI,IAAI,CAACxC,eAAe,CAAC2C,QAAQ,CAAC,CAAC,EAAE;MACnC,IAAIC,aAAa;MACjB,CAACA,aAAa,GAAG,IAAI,CAAC3C,OAAO,MAAM,IAAI,IAAI2C,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAACC,IAAI,CAAC,CAAC;IAC7F;IACA,MAAMC,aAAa,GAAG;MACpBC,SAAS,EAAE,IAAI,CAACC,mBAAmB,CAACZ,aAAa,CAAC;MAClDC,YAAY;MACZY,aAAa,EAAER,cAAc;MAC7BS,aAAa,EAAER,cAAc;MAC7BS,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC/C,WAAW,CAACU,YAAY,IAAI,GAAG,CAAC;MACxDoB,aAAa;MACbkB,SAAS,EAAErB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;MAC3BsB,WAAW,EAAEpB,QAAQ;MACrBqB,cAAc,EAAEtB,WAAW,GAAG,GAAG,GAAG,GAAG;MACvC;MACAuB,cAAc,EAAE3B,YAAY,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG;MACrD4B,MAAM,EAAE,GAAG;MACXC,WAAW,EAAEhE,YAAY,CAACoC,QAAQ,IAAI,OAAO,CAAC;MAC9C6B,MAAM,EAAE,IAAI,CAACpD,KAAK,CAACqD,mBAAmB,CAAC,CAAC,IAAI,CAAC;MAC7C;MACA;MACA;MACAC,aAAa,EAAEpB;IACjB,CAAC;IACD,MAAMqB,gBAAgB,GAAG,IAAI,CAACC,qBAAqB,CAAChB,aAAa,CAAC;IAClE,OAAOe,gBAAgB;EACzB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAE,UAAUA,CAAA,EAAG;IACX,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAOjF,iBAAiB,CAAC,aAAa;MACpCiF,KAAK,CAACC,aAAa,CAAC,CAAC;MACrBD,KAAK,CAAC5D,WAAW,CAAC8D,EAAE,CAAC,aAAa,EAAEF,KAAK,CAACC,aAAa,CAAC;MACxD,OAAOD,KAAK,CAACG,WAAW,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,WAAWA,CAAA,EAAG;IACZ,IAAIC,cAAc;IAClB,CAACA,cAAc,GAAG,IAAI,CAACpE,OAAO,MAAM,IAAI,IAAIoE,cAAc,KAAK,KAAK,CAAC,IAAIA,cAAc,CAACC,OAAO,CAAC,CAAC;IACjG,IAAI,CAAClE,WAAW,CAACmE,GAAG,CAAC,aAAa,EAAE,IAAI,CAACN,aAAa,CAAC;EACzD;EACAO,UAAUA,CAAA,EAAG;IACX,OAAO;MACLC,IAAI,EAAElF,aAAa;MACnBmF,IAAI,EAAElF,aAAa;MACnBmF,IAAI,EAAE;IACR,CAAC;EACH;EACAR,WAAWA,CAAA,EAAG;IACZ,IAAIS,MAAM,GAAG,IAAI;IACjB,OAAO7F,iBAAiB,CAAC,aAAa;MACpC6F,MAAM,CAACC,kBAAkB,CAAC,CAAC;MAC3B,MAAM;QACJ3C,aAAa,GAAG;MAClB,CAAC,GAAG0C,MAAM,CAACtE,KAAK,CAAC6B,cAAc,CAAC,CAAC;MACjC,MAAM;QACJsC,IAAI;QACJC,IAAI;QACJC;MACF,CAAC,GAAGC,MAAM,CAACJ,UAAU,CAAC,CAAC;MACvB;MACA,MAAMM,KAAK,GAAG,MAAMF,MAAM,CAACtE,KAAK,CAACyE,eAAe,CAAC;QAC/CC,UAAU,EAAE,WAAW,GAAGL,IAAI;QAC9BM,YAAY,EAAEP,IAAI;QAClBQ,cAAc,EAAET,IAAI;QACpBU,OAAO,EAAEP,MAAM,CAACQ,UAAU,CAAC,CAAC;QAC5BC,MAAM,EAAET,MAAM,CAACU,SAAS,CAAC,CAAC;QAC1BC,aAAa,EAAEjG,oBAAoB;QACnCkG,KAAK,EAAE;UACLC,MAAM,EAAE;QACV,CAAC;QACDC,WAAW,EAAE;UACXxD;QACF;MACF,CAAC,CAAC;MACF,OAAO,CAAC4C,KAAK,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;EACN;EACAa,yBAAyBA,CAAA,EAAG;IAC1B,IAAI,CAACC,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,MAAM;MACZnB,IAAI,EAAE1F,aAAa,CAAC8G,SAAS;MAC7BC,UAAU,EAAE;QACVF,IAAI,EAAE,QAAQ;QACdG,cAAc,EAAE,IAAI,CAACjF,iBAAiB,CAACI,IAAI;QAC3C8E,MAAM,EAAE;UACN;UACAC,KAAK,EAAEjH,EAAE,CAACkH,YAAY;UACtBjG,IAAI,EAAE,EAAE;UACRwE,IAAI,EAAEzF,EAAE,CAACmH;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPpG,MAAM,EAAEqG,OAAO,IAAI;UACjB,MAAM;YACJD,IAAI,GAAG;UACT,CAAC,GAAGC,OAAO;UACX,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,IAAI,CAAC;QACjD;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACV,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,UAAU;MAChBnB,IAAI,EAAE1F,aAAa,CAAC8G,SAAS;MAC7BC,UAAU,EAAE;QACVF,IAAI,EAAE,YAAY;QAClBG,cAAc,EAAE,IAAI,CAACjF,iBAAiB,CAACK,QAAQ;QAC/C6E,MAAM,EAAE;UACNC,KAAK,EAAEjH,EAAE,CAACwH,WAAW;UACrBvG,IAAI,EAAE,EAAE;UACRwE,IAAI,EAAEzF,EAAE,CAACmH;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPpG,MAAM,EAAEA,CAACqG,OAAO,EAAEI,UAAU,EAAEC,MAAM,KAAK;UACvC,OAAO,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;QACrD;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAAChB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,eAAe;MACrBnB,IAAI,EAAE1F,aAAa,CAAC8G,SAAS;MAC7BC,UAAU,EAAE;QACVF,IAAI,EAAE,iBAAiB;QACvBG,cAAc,EAAE,IAAI,CAACjF,iBAAiB,CAACM,cAAc;QACrD4E,MAAM,EAAE;UACNC,KAAK,EAAEjH,EAAE,CAACwH,WAAW;UACrBvG,IAAI,EAAE,EAAE;UACRwE,IAAI,EAAEzF,EAAE,CAACmH;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPpG,MAAM,EAAEA,CAACqG,OAAO,EAAEI,UAAU,EAAEC,MAAM,KAAK;UACvC,OAAO,CAACzH,WAAW,CAACyH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEzH,WAAW,CAACyH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEzH,WAAW,CAACyH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEzH,WAAW,CAACyH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzG;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAAChB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,IAAI;MACVnB,IAAI,EAAE1F,aAAa,CAAC8G,SAAS;MAC7BC,UAAU,EAAE;QACVF,IAAI,EAAE,aAAa;QACnBG,cAAc,EAAE,IAAI,CAACjF,iBAAiB,CAACO,EAAE;QACzC2E,MAAM,EAAE;UACNC,KAAK,EAAEjH,EAAE,CAACkH,YAAY;UACtBjG,IAAI,EAAE,EAAE;UACRwE,IAAI,EAAEzF,EAAE,CAACmH;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPpG,MAAM,EAAEqG,OAAO,IAAI;UACjB,MAAMM,OAAO,GAAG,IAAI,CAACzG,WAAW,CAAC0G,UAAU,CAAC,CAAC;UAC7C,MAAM;YACJ7G;UACF,CAAC,GAAGsG,OAAO;UACX,MAAM;YACJQ,CAAC;YACDC;UACF,CAAC,GAAGH,OAAO,CAAC5G,OAAO,CAAC,IAAI;YACtB8G,CAAC,EAAE,CAAC;YACJC,CAAC,EAAE;UACL,CAAC;UACD,OAAO,CAACD,CAAC,EAAEC,CAAC,CAAC;QACf;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAACpB,qBAAqB,CAACC,sBAAsB,CAAC;MAChDC,IAAI,EAAE,aAAa;MACnBnB,IAAI,EAAE1F,aAAa,CAAC8G,SAAS;MAC7BC,UAAU,EAAE;QACVF,IAAI,EAAE,eAAe;QACrBG,cAAc,EAAE,IAAI,CAACjF,iBAAiB,CAACQ,YAAY;QACnD0E,MAAM,EAAE;UACNC,KAAK,EAAEjH,EAAE,CAACwH,WAAW;UACrBvG,IAAI,EAAE,EAAE;UACRwE,IAAI,EAAEzF,EAAE,CAACmH;QACX,CAAC;QACDC,IAAI,EAAE,CAAC;QACPpG,MAAM,EAAEqG,OAAO,IAAI;UACjB,MAAM;YACJU,WAAW,EAAEC,EAAE,GAAG;UACpB,CAAC,GAAGX,OAAO;UACX,OAAO,CAACW,EAAE,CAAC;QACb;MACF;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}