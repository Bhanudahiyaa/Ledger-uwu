{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { cellsToJson } from '../../common/graph-utils';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nexport var NsGraphCopySelection;\n(function (NsGraphCopySelection) {\n  /** Command: 用于注册named factory */\n  NsGraphCopySelection.command = XFlowGraphCommands.GRAPH_COPY;\n  /** hookName */\n  NsGraphCopySelection.hookKey = 'graphCopySelection';\n})(NsGraphCopySelection || (NsGraphCopySelection = {}));\nlet GraphCopySelectionCommand = class GraphCopySelectionCommand {\n  constructor() {\n    this.parseCells = cells => {\n      // if groupNode add its group children\n      cells.forEach(cell => {\n        const data = cell.getData();\n        if (cell.isNode() && data.isGroup) {\n          const children = cell.getChildren();\n          children.forEach(child => {\n            cells.push(child);\n          });\n        }\n      });\n      // filter edges target not in selections\n      const nodeIds = cells.filter(cell => cell.isNode()).map(cell => cell.id);\n      const map = cells.reduce((acc, cell) => {\n        if (cell.isEdge()) {\n          const source = cell.getSourceCellId();\n          const target = cell.getTargetCellId();\n          if (source && target) {\n            if (nodeIds.includes(source) && nodeIds.includes(target)) {\n              acc.set(cell.id, cell);\n            }\n          }\n        } else {\n          acc.set(cell.id, cell);\n        }\n        return acc;\n      }, new Map());\n      const uniqeList = Array.from(map.values());\n      return cellsToJson(uniqeList);\n    };\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.graphCopySelection.call(args, () => __awaiter(this, void 0, void 0, function* () {\n        const graph = yield ctx.getX6Graph();\n        const cells = graph.getSelectedCells();\n        const edges = graph.getEdges();\n        // 处理 Group cells/过滤无效的edges\n        const jsonObject = this.parseCells([...cells, ...edges]);\n        const oldJsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n        // 写cache\n        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(jsonObject));\n        // undo 写cache\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          window.localStorage.setItem(LOCAL_STORAGE_KEY, oldJsonString);\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n      return this;\n    });\n    /** redo cmd */\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n      return this;\n    });\n  }\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n};\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphCopySelectionCommand.prototype, \"contextProvider\", void 0);\nGraphCopySelectionCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphCopySelection.command.id\n  }\n})\n/** 创建节点命令 */], GraphCopySelectionCommand);\nexport { GraphCopySelectionCommand };","map":{"version":3,"names":["inject","injectable","ICommandHandler","ICommandContextProvider","XFlowGraphCommands","Disposable","cellsToJson","LOCAL_STORAGE_KEY","NsGraphCopySelection","command","GRAPH_COPY","hookKey","GraphCopySelectionCommand","constructor","parseCells","cells","forEach","cell","data","getData","isNode","isGroup","children","getChildren","child","push","nodeIds","filter","map","id","reduce","acc","isEdge","source","getSourceCellId","target","getTargetCellId","includes","set","Map","uniqeList","Array","from","values","execute","__awaiter","ctx","contextProvider","args","hooks","runtimeHook","getArgs","getHooks","result","graphCopySelection","call","graph","getX6Graph","getSelectedCells","edges","getEdges","jsonObject","oldJsonString","window","localStorage","getItem","setItem","JSON","stringify","addUndo","create","err","setResult","undo","isUndoable","redo","__decorate","token","named"],"sources":["../../../src/command-contributions/graph/graph-copy.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}