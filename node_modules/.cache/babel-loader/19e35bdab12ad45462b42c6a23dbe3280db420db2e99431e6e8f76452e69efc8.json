{"ast":null,"code":"/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nexport default class UpdateStyleAttributePlugin {\n  apply(layer, {\n    styleAttributeService\n  }) {\n    layer.hooks.init.tapPromise('UpdateStyleAttributePlugin', () => {\n      this.initStyleAttribute(layer, {\n        styleAttributeService\n      });\n    });\n    layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      if (layer.inited) {\n        this.updateStyleAttribute(layer, {\n          styleAttributeService\n        });\n      }\n    });\n  }\n  updateStyleAttribute(layer, {\n    styleAttributeService\n  }) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    if (filter && filter.needRegenerateVertices) {\n      layer.layerModelNeedUpdate = true;\n      attributes.forEach(attr => attr.needRegenerateVertices = false);\n      return;\n    }\n    attributes.filter(attribute => attribute.needRegenerateVertices).forEach(attribute => {\n      // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n      styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n      // 获取经过 mapping 最新的数据\n      attribute.featureRange.startIndex, attribute.featureRange.endIndex, layer);\n      attribute.needRegenerateVertices = false;\n    });\n  }\n  initStyleAttribute(layer, {\n    styleAttributeService\n  }) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    attributes.filter(attribute => attribute.needRegenerateVertices).forEach(attribute => {\n      // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n      styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n      // 获取经过 mapping 最新的数据\n      attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n      attribute.needRegenerateVertices = false;\n    });\n  }\n}","map":{"version":3,"names":["UpdateStyleAttributePlugin","apply","layer","styleAttributeService","hooks","init","tapPromise","initStyleAttribute","beforeRender","tap","layerModelNeedUpdate","inited","updateStyleAttribute","attributes","getLayerStyleAttributes","filter","getLayerStyleAttribute","needRegenerateVertices","forEach","attr","attribute","updateAttributeByFeatureRange","name","getEncodedData","featureRange","startIndex","endIndex"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/plugins/UpdateStyleAttributePlugin.js"],"sourcesContent":["/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nexport default class UpdateStyleAttributePlugin {\n  apply(layer, {\n    styleAttributeService\n  }) {\n    layer.hooks.init.tapPromise('UpdateStyleAttributePlugin', () => {\n      this.initStyleAttribute(layer, {\n        styleAttributeService\n      });\n    });\n    layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      if (layer.inited) {\n        this.updateStyleAttribute(layer, {\n          styleAttributeService\n        });\n      }\n    });\n  }\n  updateStyleAttribute(layer, {\n    styleAttributeService\n  }) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    if (filter && filter.needRegenerateVertices) {\n      layer.layerModelNeedUpdate = true;\n      attributes.forEach(attr => attr.needRegenerateVertices = false);\n      return;\n    }\n    attributes.filter(attribute => attribute.needRegenerateVertices).forEach(attribute => {\n      // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n      styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n      // 获取经过 mapping 最新的数据\n      attribute.featureRange.startIndex, attribute.featureRange.endIndex, layer);\n      attribute.needRegenerateVertices = false;\n    });\n  }\n  initStyleAttribute(layer, {\n    styleAttributeService\n  }) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    attributes.filter(attribute => attribute.needRegenerateVertices).forEach(attribute => {\n      // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n      styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n      // 获取经过 mapping 最新的数据\n      attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n      attribute.needRegenerateVertices = false;\n    });\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,MAAMA,0BAA0B,CAAC;EAC9CC,KAAKA,CAACC,KAAK,EAAE;IACXC;EACF,CAAC,EAAE;IACDD,KAAK,CAACE,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,4BAA4B,EAAE,MAAM;MAC9D,IAAI,CAACC,kBAAkB,CAACL,KAAK,EAAE;QAC7BC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACFD,KAAK,CAACE,KAAK,CAACI,YAAY,CAACC,GAAG,CAAC,4BAA4B,EAAE,MAAM;MAC/D,IAAIP,KAAK,CAACQ,oBAAoB,EAAE;QAC9B;MACF;MACA,IAAIR,KAAK,CAACS,MAAM,EAAE;QAChB,IAAI,CAACC,oBAAoB,CAACV,KAAK,EAAE;UAC/BC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EACAS,oBAAoBA,CAACV,KAAK,EAAE;IAC1BC;EACF,CAAC,EAAE;IACD,MAAMU,UAAU,GAAGV,qBAAqB,CAACW,uBAAuB,CAAC,CAAC,IAAI,EAAE;IACxE,MAAMC,MAAM,GAAGZ,qBAAqB,CAACa,sBAAsB,CAAC,QAAQ,CAAC;IACrE,IAAID,MAAM,IAAIA,MAAM,CAACE,sBAAsB,EAAE;MAC3Cf,KAAK,CAACQ,oBAAoB,GAAG,IAAI;MACjCG,UAAU,CAACK,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACF,sBAAsB,GAAG,KAAK,CAAC;MAC/D;IACF;IACAJ,UAAU,CAACE,MAAM,CAACK,SAAS,IAAIA,SAAS,CAACH,sBAAsB,CAAC,CAACC,OAAO,CAACE,SAAS,IAAI;MACpF;MACAjB,qBAAqB,CAACkB,6BAA6B,CAACD,SAAS,CAACE,IAAI,EAAEpB,KAAK,CAACqB,cAAc,CAAC,CAAC;MAC1F;MACAH,SAAS,CAACI,YAAY,CAACC,UAAU,EAAEL,SAAS,CAACI,YAAY,CAACE,QAAQ,EAAExB,KAAK,CAAC;MAC1EkB,SAAS,CAACH,sBAAsB,GAAG,KAAK;IAC1C,CAAC,CAAC;EACJ;EACAV,kBAAkBA,CAACL,KAAK,EAAE;IACxBC;EACF,CAAC,EAAE;IACD,MAAMU,UAAU,GAAGV,qBAAqB,CAACW,uBAAuB,CAAC,CAAC,IAAI,EAAE;IACxED,UAAU,CAACE,MAAM,CAACK,SAAS,IAAIA,SAAS,CAACH,sBAAsB,CAAC,CAACC,OAAO,CAACE,SAAS,IAAI;MACpF;MACAjB,qBAAqB,CAACkB,6BAA6B,CAACD,SAAS,CAACE,IAAI,EAAEpB,KAAK,CAACqB,cAAc,CAAC,CAAC;MAC1F;MACAH,SAAS,CAACI,YAAY,CAACC,UAAU,EAAEL,SAAS,CAACI,YAAY,CAACE,QAAQ,CAAC;MACnEN,SAAS,CAACH,sBAAsB,GAAG,KAAK;IAC1C,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}