{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { PositionType } from '@antv/l7-core';\nimport { DOM } from '@antv/l7-utils';\nimport EventEmitter from 'eventemitter3';\nexport { PositionType } from '@antv/l7-core';\nexport { Control };\nexport default class Control extends EventEmitter {\n  constructor(option) {\n    super();\n    /**\n     * 当前控件实例配置\n     */\n    _defineProperty(this, \"controlOption\", void 0);\n    /**\n     * 控件的 DOM 容器\n     * @protected\n     */\n    _defineProperty(this, \"container\", void 0);\n    /**\n     * 当前控件是否显示\n     * @protected\n     */\n    _defineProperty(this, \"isShow\", void 0);\n    _defineProperty(this, \"sceneContainer\", void 0);\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"mapsService\", void 0);\n    _defineProperty(this, \"renderService\", void 0);\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"controlService\", void 0);\n    _defineProperty(this, \"configService\", void 0);\n    Control.controlCount++;\n    this.controlOption = _objectSpread(_objectSpread({}, this.getDefault(option)), option || {});\n  }\n  getOptions() {\n    return this.controlOption;\n  }\n\n  /**\n   * 更新配置的方法，子类如果有自己的配置，也需要重写该方法\n   * @param newOptions\n   */\n  setOptions(newOptions) {\n    const defaultOptions = this.getDefault(newOptions);\n    Object.entries(newOptions).forEach(([key, value]) => {\n      if (value === undefined) {\n        newOptions[key] = defaultOptions[key];\n      }\n    });\n    if ('position' in newOptions) {\n      this.setPosition(newOptions.position);\n    }\n    if ('className' in newOptions) {\n      this.setClassName(newOptions.className);\n    }\n    if ('style' in newOptions) {\n      this.setStyle(newOptions.style);\n    }\n    this.controlOption = _objectSpread(_objectSpread({}, this.controlOption), newOptions);\n  }\n\n  /**\n   * 当 Control 被添加至 Scene 中，被 controlService 调用的方法\n   * @param sceneContainer\n   */\n  addTo(sceneContainer) {\n    // 初始化各个 Service 实例\n    this.mapsService = sceneContainer.mapService;\n    this.renderService = sceneContainer.rendererService;\n    this.layerService = sceneContainer.layerService;\n    this.controlService = sceneContainer.controlService;\n    this.configService = sceneContainer.globalConfigService;\n    this.scene = sceneContainer.sceneService;\n    this.sceneContainer = sceneContainer;\n    this.isShow = true;\n\n    // 初始化 container\n    this.container = this.onAdd();\n    DOM.addClass(this.container, 'l7-control');\n    const {\n      className,\n      style\n    } = this.controlOption;\n    if (className) {\n      this.setClassName(className);\n    }\n    if (style) {\n      this.setStyle(style);\n    }\n    // 将 container 插入容器中\n    this.insertContainer();\n    this.emit('add', this);\n    return this;\n  }\n\n  /**\n   * 将控件移除时触发\n   */\n  remove() {\n    if (!this.mapsService) {\n      return this;\n    }\n    DOM.remove(this.container);\n    this.onRemove();\n    this.emit('remove', this);\n  }\n\n  /**\n   * Control 被添加的时候被调用，返回 Control 对应的 DOM 容器\n   */\n  onAdd() {\n    return DOM.create('div');\n  }\n\n  /**\n   * Control 被移除时调用\n   */\n  // tslint:disable-next-line:no-empty\n  onRemove() {}\n\n  /**\n   * 显示控件时触发\n   */\n  show() {\n    const container = this.container;\n    DOM.removeClass(container, 'l7-control--hide');\n    this.isShow = true;\n    this.emit('show', this);\n  }\n\n  /**\n   * 隐藏控件时触发\n   */\n  hide() {\n    const container = this.container;\n    DOM.addClass(container, 'l7-control--hide');\n    this.isShow = false;\n    this.emit('hide', this);\n  }\n\n  /**\n   * 获取默认构造器参数\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getDefault(option) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {\n      position: PositionType.TOPRIGHT,\n      name: `${Control.controlCount}`\n    };\n  }\n\n  /**\n   * 获取当前控件对应的 DOM 容器\n   */\n  getContainer() {\n    return this.container;\n  }\n\n  /**\n   * 获取当前 Control 是否展示\n   */\n  getIsShow() {\n    return this.isShow;\n  }\n  _refocusOnMap(e) {\n    // if map exists and event is not a keyboard event\n    if (this.mapsService && e && e.screenX > 0 && e.screenY > 0) {\n      const container = this.mapsService.getContainer();\n      if (container !== null) {\n        container.focus();\n      }\n    }\n  }\n\n  /**\n   * 设置当前控件位置\n   * @param position\n   */\n  setPosition(position = PositionType.TOPLEFT) {\n    // 考虑组件的自动布局，需要销毁重建\n    const controlService = this.controlService;\n    if (controlService) {\n      controlService.removeControl(this);\n    }\n    this.controlOption.position = position;\n    if (controlService) {\n      controlService.addControl(this, this.sceneContainer);\n    }\n    return this;\n  }\n\n  /**\n   * 设置容器 container 的样式相关位置，包含 className\n   * @param className\n   */\n  setClassName(className) {\n    const container = this.container;\n    const {\n      className: oldClassName\n    } = this.controlOption;\n    if (oldClassName) {\n      DOM.removeClass(container, oldClassName);\n    }\n    if (className) {\n      DOM.addClass(container, className);\n    }\n  }\n\n  /**\n   * 设置容器 container 的样式相关位置，包含 style\n   * @param style\n   */\n  setStyle(style) {\n    const container = this.container;\n    if (style) {\n      container.setAttribute('style', style);\n    } else {\n      container.removeAttribute('style');\n    }\n  }\n\n  /**\n   * 将控件 DOM 插入到对应 position 的容器中\n   * @protected\n   */\n  insertContainer() {\n    const position = this.controlOption.position;\n    const container = this.container;\n    if (position instanceof Element) {\n      position.appendChild(container);\n    } else {\n      const corner = this.controlService.controlCorners[position];\n      if (['bottomleft', 'bottomright', 'righttop', 'rightbottom'].includes(position)) {\n        corner.insertBefore(container, corner.firstChild);\n      } else {\n        corner.appendChild(container);\n      }\n    }\n  }\n\n  /**\n   * 检查当前传入 option 是否包含 keys 字段\n   * @param option\n   * @param keys\n   * @protected\n   */\n  checkUpdateOption(option, keys) {\n    return keys.some(key => key in option);\n  }\n}\n/**\n * 当前类型控件实例个数\n * @protected\n */\n_defineProperty(Control, \"controlCount\", 0);","map":{"version":3,"names":["_objectSpread","_defineProperty","PositionType","DOM","EventEmitter","Control","constructor","option","controlCount","controlOption","getDefault","getOptions","setOptions","newOptions","defaultOptions","Object","entries","forEach","key","value","undefined","setPosition","position","setClassName","className","setStyle","style","addTo","sceneContainer","mapsService","mapService","renderService","rendererService","layerService","controlService","configService","globalConfigService","scene","sceneService","isShow","container","onAdd","addClass","insertContainer","emit","remove","onRemove","create","show","removeClass","hide","TOPRIGHT","name","getContainer","getIsShow","_refocusOnMap","e","screenX","screenY","focus","TOPLEFT","removeControl","addControl","oldClassName","setAttribute","removeAttribute","Element","appendChild","corner","controlCorners","includes","insertBefore","firstChild","checkUpdateOption","keys","some"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-component/es/control/baseControl/control.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { PositionType } from '@antv/l7-core';\nimport { DOM } from '@antv/l7-utils';\nimport EventEmitter from 'eventemitter3';\nexport { PositionType } from '@antv/l7-core';\nexport { Control };\nexport default class Control extends EventEmitter {\n  constructor(option) {\n    super();\n    /**\n     * 当前控件实例配置\n     */\n    _defineProperty(this, \"controlOption\", void 0);\n    /**\n     * 控件的 DOM 容器\n     * @protected\n     */\n    _defineProperty(this, \"container\", void 0);\n    /**\n     * 当前控件是否显示\n     * @protected\n     */\n    _defineProperty(this, \"isShow\", void 0);\n    _defineProperty(this, \"sceneContainer\", void 0);\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"mapsService\", void 0);\n    _defineProperty(this, \"renderService\", void 0);\n    _defineProperty(this, \"layerService\", void 0);\n    _defineProperty(this, \"controlService\", void 0);\n    _defineProperty(this, \"configService\", void 0);\n    Control.controlCount++;\n    this.controlOption = _objectSpread(_objectSpread({}, this.getDefault(option)), option || {});\n  }\n  getOptions() {\n    return this.controlOption;\n  }\n\n  /**\n   * 更新配置的方法，子类如果有自己的配置，也需要重写该方法\n   * @param newOptions\n   */\n  setOptions(newOptions) {\n    const defaultOptions = this.getDefault(newOptions);\n    Object.entries(newOptions).forEach(([key, value]) => {\n      if (value === undefined) {\n        newOptions[key] = defaultOptions[key];\n      }\n    });\n    if ('position' in newOptions) {\n      this.setPosition(newOptions.position);\n    }\n    if ('className' in newOptions) {\n      this.setClassName(newOptions.className);\n    }\n    if ('style' in newOptions) {\n      this.setStyle(newOptions.style);\n    }\n    this.controlOption = _objectSpread(_objectSpread({}, this.controlOption), newOptions);\n  }\n\n  /**\n   * 当 Control 被添加至 Scene 中，被 controlService 调用的方法\n   * @param sceneContainer\n   */\n  addTo(sceneContainer) {\n    // 初始化各个 Service 实例\n    this.mapsService = sceneContainer.mapService;\n    this.renderService = sceneContainer.rendererService;\n    this.layerService = sceneContainer.layerService;\n    this.controlService = sceneContainer.controlService;\n    this.configService = sceneContainer.globalConfigService;\n    this.scene = sceneContainer.sceneService;\n    this.sceneContainer = sceneContainer;\n    this.isShow = true;\n\n    // 初始化 container\n    this.container = this.onAdd();\n    DOM.addClass(this.container, 'l7-control');\n    const {\n      className,\n      style\n    } = this.controlOption;\n    if (className) {\n      this.setClassName(className);\n    }\n    if (style) {\n      this.setStyle(style);\n    }\n    // 将 container 插入容器中\n    this.insertContainer();\n    this.emit('add', this);\n    return this;\n  }\n\n  /**\n   * 将控件移除时触发\n   */\n  remove() {\n    if (!this.mapsService) {\n      return this;\n    }\n    DOM.remove(this.container);\n    this.onRemove();\n    this.emit('remove', this);\n  }\n\n  /**\n   * Control 被添加的时候被调用，返回 Control 对应的 DOM 容器\n   */\n  onAdd() {\n    return DOM.create('div');\n  }\n\n  /**\n   * Control 被移除时调用\n   */\n  // tslint:disable-next-line:no-empty\n  onRemove() {}\n\n  /**\n   * 显示控件时触发\n   */\n  show() {\n    const container = this.container;\n    DOM.removeClass(container, 'l7-control--hide');\n    this.isShow = true;\n    this.emit('show', this);\n  }\n\n  /**\n   * 隐藏控件时触发\n   */\n  hide() {\n    const container = this.container;\n    DOM.addClass(container, 'l7-control--hide');\n    this.isShow = false;\n    this.emit('hide', this);\n  }\n\n  /**\n   * 获取默认构造器参数\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getDefault(option) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {\n      position: PositionType.TOPRIGHT,\n      name: `${Control.controlCount}`\n    };\n  }\n\n  /**\n   * 获取当前控件对应的 DOM 容器\n   */\n  getContainer() {\n    return this.container;\n  }\n\n  /**\n   * 获取当前 Control 是否展示\n   */\n  getIsShow() {\n    return this.isShow;\n  }\n  _refocusOnMap(e) {\n    // if map exists and event is not a keyboard event\n    if (this.mapsService && e && e.screenX > 0 && e.screenY > 0) {\n      const container = this.mapsService.getContainer();\n      if (container !== null) {\n        container.focus();\n      }\n    }\n  }\n\n  /**\n   * 设置当前控件位置\n   * @param position\n   */\n  setPosition(position = PositionType.TOPLEFT) {\n    // 考虑组件的自动布局，需要销毁重建\n    const controlService = this.controlService;\n    if (controlService) {\n      controlService.removeControl(this);\n    }\n    this.controlOption.position = position;\n    if (controlService) {\n      controlService.addControl(this, this.sceneContainer);\n    }\n    return this;\n  }\n\n  /**\n   * 设置容器 container 的样式相关位置，包含 className\n   * @param className\n   */\n  setClassName(className) {\n    const container = this.container;\n    const {\n      className: oldClassName\n    } = this.controlOption;\n    if (oldClassName) {\n      DOM.removeClass(container, oldClassName);\n    }\n    if (className) {\n      DOM.addClass(container, className);\n    }\n  }\n\n  /**\n   * 设置容器 container 的样式相关位置，包含 style\n   * @param style\n   */\n  setStyle(style) {\n    const container = this.container;\n    if (style) {\n      container.setAttribute('style', style);\n    } else {\n      container.removeAttribute('style');\n    }\n  }\n\n  /**\n   * 将控件 DOM 插入到对应 position 的容器中\n   * @protected\n   */\n  insertContainer() {\n    const position = this.controlOption.position;\n    const container = this.container;\n    if (position instanceof Element) {\n      position.appendChild(container);\n    } else {\n      const corner = this.controlService.controlCorners[position];\n      if (['bottomleft', 'bottomright', 'righttop', 'rightbottom'].includes(position)) {\n        corner.insertBefore(container, corner.firstChild);\n      } else {\n        corner.appendChild(container);\n      }\n    }\n  }\n\n  /**\n   * 检查当前传入 option 是否包含 keys 字段\n   * @param option\n   * @param keys\n   * @protected\n   */\n  checkUpdateOption(option, keys) {\n    return keys.some(key => key in option);\n  }\n}\n/**\n * 当前类型控件实例个数\n * @protected\n */\n_defineProperty(Control, \"controlCount\", 0);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}