{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, inject } from 'mana-syringe';\nimport { IGraphOptionProvider } from '../../xflow-main/graph/config';\nimport { XFlowGraphCommands } from '../../command-contributions/constant';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { IHookContribution } from '../interface';\nimport { throttle } from '../../common/utils';\nexport var NsGraphEventPlugin;\n(function (NsGraphEventPlugin) {\n  NsGraphEventPlugin.pluginId = 'base-graph-events';\n})(NsGraphEventPlugin || (NsGraphEventPlugin = {}));\n/**\n * 内置的hook contribution\n * 处理graph config 的 evnets props\n */\nlet GraphEventContribution = class GraphEventContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n    /** 扩展Hook */\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [/** 在graph启动前, 注册外部事件到x6Events的hooks上*/\n      hooks.x6Events.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            events\n          } = yield this.graphOptions.getOptions();\n          events.forEach(event => {\n            args.push(event);\n          });\n        })\n      }), /** 在graph init后, 外部事件 */\n      hooks.afterGraphInit.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            modelService,\n            graph\n          } = args;\n          /** 注册事件 */\n          const todo = yield hooks.x6Events.call([], mergedEvents => __awaiter(this, void 0, void 0, function* () {\n            return mergedEvents.map(e => {\n              const handler = handlerArgs => {\n                e.callback(handlerArgs, commandService, modelService, graph);\n              };\n              graph.on(e.eventName, handler);\n              return {\n                dispose: () => {\n                  graph.off(e.eventName, handler);\n                }\n              };\n            });\n          }));\n          toDispose.pushAll(todo);\n        })\n      }), /** 监听window的resize事件，实现自动resize */\n      hooks.afterGraphInit.registerHook({\n        name: 'add auto resize event',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            options,\n            graph\n          } = args;\n          const resizeHandler = throttle(() => {\n            commandService.executeCommand(XFlowGraphCommands.GRAPH_RESIZE.id, {});\n          });\n          window.addEventListener('resize', resizeHandler);\n          const {\n            rootContainer\n          } = options;\n          const resizeObserver = new ResizeObserver(() => graph.resize(rootContainer.clientWidth));\n          rootContainer && resizeObserver.observe(rootContainer);\n          toDispose.push(Disposable.create(() => {\n            window.removeEventListener('resize', resizeHandler);\n          }));\n        })\n      }), /** 在graph停止时 取消外部事件 */\n      hooks.beforeGraphDestroy.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: () => __awaiter(this, void 0, void 0, function* () {\n          toDispose.dispose();\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return toDispose;\n    });\n  }\n};\n__decorate([inject(IGraphOptionProvider), __metadata(\"design:type\", Object)], GraphEventContribution.prototype, \"graphOptions\", void 0);\nGraphEventContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], GraphEventContribution);\nexport { GraphEventContribution };","map":{"version":3,"names":["singleton","inject","IGraphOptionProvider","XFlowGraphCommands","DisposableCollection","Disposable","IHookContribution","throttle","NsGraphEventPlugin","pluginId","GraphEventContribution","constructor","toDispose","registerHookHub","__awaiter","create","registerHook","hooks","disposables","x6Events","name","handler","args","events","graphOptions","getOptions","forEach","event","push","afterGraphInit","commandService","modelService","graph","todo","call","mergedEvents","map","e","handlerArgs","callback","on","eventName","dispose","off","pushAll","options","resizeHandler","executeCommand","GRAPH_RESIZE","id","window","addEventListener","rootContainer","resizeObserver","ResizeObserver","resize","clientWidth","observe","removeEventListener","beforeGraphDestroy","__decorate","contrib"],"sources":["../../../src/hooks/contributions/graph.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}