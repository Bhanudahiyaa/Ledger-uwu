{"ast":null,"code":"var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/device/index.ts\nimport { Format, TextureUsage, TransparentBlack, ViewportOrigin, WebGLDeviceContribution, WebGPUDeviceContribution, colorNewFromRGBA } from \"@antv/g-device-api\";\nimport { lodashUtil } from \"@antv/l7-utils\";\nimport DeviceAttribute from \"./DeviceAttribute\";\nimport DeviceBuffer from \"./DeviceBuffer\";\nimport { RenderCache } from \"./DeviceCache\";\nimport DeviceElements from \"./DeviceElements\";\nimport DeviceFramebuffer from \"./DeviceFramebuffer\";\nimport DeviceModel from \"./DeviceModel\";\nimport DeviceTexture2D from \"./DeviceTexture2D\";\nimport { isWebGL2 } from \"./utils/webgl\";\nvar {\n  isUndefined\n} = lodashUtil;\nvar DeviceRendererService = class {\n  constructor() {\n    this.uniformBuffers = [];\n    this.queryVerdorInfo = () => {\n      return this.device.queryVendorInfo().platformString;\n    };\n    this.createModel = options => new DeviceModel(this.device, options, this);\n    this.createAttribute = options => new DeviceAttribute(this.device, options);\n    this.createBuffer = options => new DeviceBuffer(this.device, options);\n    this.createElements = options => new DeviceElements(this.device, options);\n    this.createTexture2D = options => new DeviceTexture2D(this.device, options);\n    this.createFramebuffer = options => new DeviceFramebuffer(this.device, options);\n    this.useFramebuffer = (framebuffer, drawCommands) => {\n      this.currentFramebuffer = framebuffer;\n      this.beginFrame();\n      drawCommands();\n      this.endFrame();\n      this.currentFramebuffer = null;\n    };\n    this.useFramebufferAsync = (framebuffer, drawCommands) => __async(this, null, function* () {\n      this.currentFramebuffer = framebuffer;\n      this.preRenderPass = this.renderPass;\n      this.beginFrame();\n      yield drawCommands();\n      this.endFrame();\n      this.currentFramebuffer = null;\n      this.renderPass = this.preRenderPass;\n    });\n    this.clear = options => {\n      const {\n        color,\n        depth,\n        stencil,\n        framebuffer = null\n      } = options;\n      if (framebuffer) {\n        framebuffer.clearOptions = {\n          color,\n          depth,\n          stencil\n        };\n      } else {\n        const platformString = this.queryVerdorInfo();\n        if (platformString === \"WebGL1\") {\n          const gl = this.getGLContext();\n          if (!isUndefined(stencil)) {\n            gl.clearStencil(stencil);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n          } else if (!isUndefined(depth)) {\n            gl.clearDepth(depth);\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n          }\n        } else if (platformString === \"WebGL2\") {\n          const gl = this.getGLContext();\n          if (!isUndefined(stencil)) {\n            gl.clearBufferiv(gl.STENCIL, 0, [stencil]);\n          } else if (!isUndefined(depth)) {\n            gl.clearBufferfv(gl.DEPTH, 0, [depth]);\n          }\n        }\n      }\n    };\n    this.viewport = ({\n      // x,\n      // y,\n      width,\n      height\n    }) => {\n      this.swapChain.configureSwapChain(width, height);\n      this.createMainColorDepthRT(width, height);\n      this.width = width;\n      this.height = height;\n    };\n    this.readPixels = options => {\n      const {\n        framebuffer,\n        x,\n        y,\n        width,\n        height\n      } = options;\n      const readback = this.device.createReadback();\n      const texture = framebuffer[\"colorTexture\"];\n      const result = readback.readTextureSync(texture, x,\n      /**\n       * Origin is at lower-left corner. Width / height is already multiplied by dpr.\n       * WebGPU needs flipY\n       */\n      this.viewportOrigin === ViewportOrigin.LOWER_LEFT ? y : this.height - y, width, height, new Uint8Array(width * height * 4));\n      if (this.viewportOrigin !== ViewportOrigin.LOWER_LEFT) {\n        for (let j = 0; j < result.length; j += 4) {\n          const t = result[j];\n          result[j] = result[j + 2];\n          result[j + 2] = t;\n        }\n      }\n      readback.destroy();\n      return result;\n    };\n    this.readPixelsAsync = options => __async(this, null, function* () {\n      const {\n        framebuffer,\n        x,\n        y,\n        width,\n        height\n      } = options;\n      const readback = this.device.createReadback();\n      const texture = framebuffer[\"colorTexture\"];\n      const result = yield readback.readTexture(texture, x,\n      /**\n       * Origin is at lower-left corner. Width / height is already multiplied by dpr.\n       * WebGPU needs flipY\n       */\n      this.viewportOrigin === ViewportOrigin.LOWER_LEFT ? y : this.height - y, width, height, new Uint8Array(width * height * 4));\n      if (this.viewportOrigin !== ViewportOrigin.LOWER_LEFT) {\n        for (let j = 0; j < result.length; j += 4) {\n          const t = result[j];\n          result[j] = result[j + 2];\n          result[j + 2] = t;\n        }\n      }\n      readback.destroy();\n      return result;\n    });\n    this.getViewportSize = () => {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    };\n    this.getContainer = () => {\n      var _a;\n      return (_a = this.canvas) == null ? void 0 : _a.parentElement;\n    };\n    this.getCanvas = () => {\n      return this.canvas;\n    };\n    this.getGLContext = () => {\n      return this.device[\"gl\"];\n    };\n    this.destroy = () => {\n      var _a;\n      this.canvas = null;\n      (_a = this.uniformBuffers) == null ? void 0 : _a.forEach(buffer => {\n        buffer.destroy();\n      });\n      this.device.destroy();\n      this.renderCache.destroy();\n    };\n  }\n  init(canvas, cfg) {\n    return __async(this, null, function* () {\n      const {\n        enableWebGPU,\n        shaderCompilerPath,\n        antialias\n      } = cfg;\n      this.canvas = canvas;\n      const deviceContribution = enableWebGPU ? new WebGPUDeviceContribution({\n        shaderCompilerPath\n      }) : new WebGLDeviceContribution({\n        // Use WebGL2 first and downgrade to WebGL1 if WebGL2 is not supported.\n        targets: [\"webgl2\", \"webgl1\"],\n        antialias,\n        onContextLost(e) {\n          console.warn(\"context lost\", e);\n        },\n        onContextCreationError(e) {\n          console.warn(\"context creation error\", e);\n        },\n        onContextRestored(e) {\n          console.warn(\"context restored\", e);\n        }\n      });\n      const swapChain = yield deviceContribution.createSwapChain(canvas);\n      swapChain.configureSwapChain(canvas.width, canvas.height);\n      this.device = swapChain.getDevice();\n      this.swapChain = swapChain;\n      this.renderCache = new RenderCache(this.device);\n      this.currentFramebuffer = null;\n      this.viewportOrigin = this.device.queryVendorInfo().viewportOrigin;\n      const gl = this.device[\"gl\"];\n      this.extensionObject = {\n        // @ts-ignore\n        OES_texture_float: !isWebGL2(gl) && this.device[\"OES_texture_float\"]\n      };\n      this.createMainColorDepthRT(canvas.width, canvas.height);\n    });\n  }\n  createMainColorDepthRT(width, height) {\n    if (this.mainColorRT) {\n      this.mainColorRT.destroy();\n    }\n    if (this.mainDepthRT) {\n      this.mainDepthRT.destroy();\n    }\n    this.mainColorRT = this.device.createRenderTargetFromTexture(this.device.createTexture({\n      format: Format.U8_RGBA_RT,\n      width,\n      height,\n      usage: TextureUsage.RENDER_TARGET\n    }));\n    this.mainDepthRT = this.device.createRenderTargetFromTexture(this.device.createTexture({\n      format: Format.D24_S8,\n      width,\n      height,\n      usage: TextureUsage.RENDER_TARGET\n    }));\n  }\n  beginFrame() {\n    this.device.beginFrame();\n    const {\n      currentFramebuffer,\n      swapChain,\n      mainColorRT,\n      mainDepthRT\n    } = this;\n    const colorAttachment = currentFramebuffer ? currentFramebuffer[\"colorRenderTarget\"] : mainColorRT;\n    const colorResolveTo = currentFramebuffer ? null : swapChain.getOnscreenTexture();\n    const depthStencilAttachment = currentFramebuffer ? currentFramebuffer[\"depthRenderTarget\"] : mainDepthRT;\n    const {\n      color = [0, 0, 0, 0],\n      depth = 1,\n      stencil = 0\n    } =\n    // @ts-ignore\n    (currentFramebuffer == null ? void 0 : currentFramebuffer.clearOptions) || {};\n    const colorClearColor = colorAttachment ? colorNewFromRGBA(color[0] * 255, color[1] * 255, color[2] * 255, color[3]) : TransparentBlack;\n    const depthClearValue = depthStencilAttachment ? depth : void 0;\n    const stencilClearValue = depthStencilAttachment ? stencil : void 0;\n    const renderPass = this.device.createRenderPass({\n      colorAttachment: [colorAttachment],\n      colorResolveTo: [colorResolveTo],\n      colorClearColor: [colorClearColor],\n      // colorStore: [!!currentFramebuffer],\n      colorStore: [true],\n      depthStencilAttachment,\n      depthClearValue,\n      stencilClearValue\n    });\n    this.renderPass = renderPass;\n  }\n  endFrame() {\n    this.device.submitPass(this.renderPass);\n    this.device.endFrame();\n  }\n  getPointSizeRange() {\n    const gl = this.device[\"gl\"];\n    return gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n  }\n  testExtension(name) {\n    return !!this.getGLContext().getExtension(name);\n  }\n  // TODO: 临时方法\n  setState() {}\n  setBaseState() {}\n  setCustomLayerDefaults() {}\n  setDirty(flag) {\n    this.isDirty = flag;\n  }\n  getDirty() {\n    return this.isDirty;\n  }\n};\nexport { DeviceRendererService as default };","map":{"version":3,"names":["__async","__this","__arguments","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","throw","x","done","then","apply","Format","TextureUsage","TransparentBlack","ViewportOrigin","WebGLDeviceContribution","WebGPUDeviceContribution","colorNewFromRGBA","lodashUtil","DeviceAttribute","DeviceBuffer","RenderCache","DeviceElements","DeviceFramebuffer","DeviceModel","DeviceTexture2D","isWebGL2","isUndefined","DeviceRendererService","constructor","uniformBuffers","queryVerdorInfo","device","queryVendorInfo","platformString","createModel","options","createAttribute","createBuffer","createElements","createTexture2D","createFramebuffer","useFramebuffer","framebuffer","drawCommands","currentFramebuffer","beginFrame","endFrame","useFramebufferAsync","preRenderPass","renderPass","clear","color","depth","stencil","clearOptions","gl","getGLContext","clearStencil","STENCIL_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearBufferiv","STENCIL","clearBufferfv","DEPTH","viewport","width","height","swapChain","configureSwapChain","createMainColorDepthRT","readPixels","y","readback","createReadback","texture","result","readTextureSync","viewportOrigin","LOWER_LEFT","Uint8Array","j","length","t","destroy","readPixelsAsync","readTexture","getViewportSize","getContainer","_a","canvas","parentElement","getCanvas","forEach","buffer","renderCache","init","cfg","enableWebGPU","shaderCompilerPath","antialias","deviceContribution","targets","onContextLost","console","warn","onContextCreationError","onContextRestored","createSwapChain","getDevice","extensionObject","OES_texture_float","mainColorRT","mainDepthRT","createRenderTargetFromTexture","createTexture","format","U8_RGBA_RT","usage","RENDER_TARGET","D24_S8","colorAttachment","colorResolveTo","getOnscreenTexture","depthStencilAttachment","colorClearColor","depthClearValue","stencilClearValue","createRenderPass","colorStore","submitPass","getPointSizeRange","getParameter","ALIASED_POINT_SIZE_RANGE","testExtension","name","getExtension","setState","setBaseState","setCustomLayerDefaults","setDirty","flag","isDirty","getDirty","default"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-renderer/es/device/index.js"],"sourcesContent":["var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/device/index.ts\nimport {\n  Format,\n  TextureUsage,\n  TransparentBlack,\n  ViewportOrigin,\n  WebGLDeviceContribution,\n  WebGPUDeviceContribution,\n  colorNewFromRGBA\n} from \"@antv/g-device-api\";\nimport { lodashUtil } from \"@antv/l7-utils\";\nimport DeviceAttribute from \"./DeviceAttribute\";\nimport DeviceBuffer from \"./DeviceBuffer\";\nimport { RenderCache } from \"./DeviceCache\";\nimport DeviceElements from \"./DeviceElements\";\nimport DeviceFramebuffer from \"./DeviceFramebuffer\";\nimport DeviceModel from \"./DeviceModel\";\nimport DeviceTexture2D from \"./DeviceTexture2D\";\nimport { isWebGL2 } from \"./utils/webgl\";\nvar { isUndefined } = lodashUtil;\nvar DeviceRendererService = class {\n  constructor() {\n    this.uniformBuffers = [];\n    this.queryVerdorInfo = () => {\n      return this.device.queryVendorInfo().platformString;\n    };\n    this.createModel = (options) => new DeviceModel(this.device, options, this);\n    this.createAttribute = (options) => new DeviceAttribute(this.device, options);\n    this.createBuffer = (options) => new DeviceBuffer(this.device, options);\n    this.createElements = (options) => new DeviceElements(this.device, options);\n    this.createTexture2D = (options) => new DeviceTexture2D(this.device, options);\n    this.createFramebuffer = (options) => new DeviceFramebuffer(this.device, options);\n    this.useFramebuffer = (framebuffer, drawCommands) => {\n      this.currentFramebuffer = framebuffer;\n      this.beginFrame();\n      drawCommands();\n      this.endFrame();\n      this.currentFramebuffer = null;\n    };\n    this.useFramebufferAsync = (framebuffer, drawCommands) => __async(this, null, function* () {\n      this.currentFramebuffer = framebuffer;\n      this.preRenderPass = this.renderPass;\n      this.beginFrame();\n      yield drawCommands();\n      this.endFrame();\n      this.currentFramebuffer = null;\n      this.renderPass = this.preRenderPass;\n    });\n    this.clear = (options) => {\n      const { color, depth, stencil, framebuffer = null } = options;\n      if (framebuffer) {\n        framebuffer.clearOptions = { color, depth, stencil };\n      } else {\n        const platformString = this.queryVerdorInfo();\n        if (platformString === \"WebGL1\") {\n          const gl = this.getGLContext();\n          if (!isUndefined(stencil)) {\n            gl.clearStencil(stencil);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n          } else if (!isUndefined(depth)) {\n            gl.clearDepth(depth);\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n          }\n        } else if (platformString === \"WebGL2\") {\n          const gl = this.getGLContext();\n          if (!isUndefined(stencil)) {\n            gl.clearBufferiv(gl.STENCIL, 0, [stencil]);\n          } else if (!isUndefined(depth)) {\n            gl.clearBufferfv(gl.DEPTH, 0, [depth]);\n          }\n        }\n      }\n    };\n    this.viewport = ({\n      // x,\n      // y,\n      width,\n      height\n    }) => {\n      this.swapChain.configureSwapChain(width, height);\n      this.createMainColorDepthRT(width, height);\n      this.width = width;\n      this.height = height;\n    };\n    this.readPixels = (options) => {\n      const { framebuffer, x, y, width, height } = options;\n      const readback = this.device.createReadback();\n      const texture = framebuffer[\"colorTexture\"];\n      const result = readback.readTextureSync(\n        texture,\n        x,\n        /**\n         * Origin is at lower-left corner. Width / height is already multiplied by dpr.\n         * WebGPU needs flipY\n         */\n        this.viewportOrigin === ViewportOrigin.LOWER_LEFT ? y : this.height - y,\n        width,\n        height,\n        new Uint8Array(width * height * 4)\n      );\n      if (this.viewportOrigin !== ViewportOrigin.LOWER_LEFT) {\n        for (let j = 0; j < result.length; j += 4) {\n          const t = result[j];\n          result[j] = result[j + 2];\n          result[j + 2] = t;\n        }\n      }\n      readback.destroy();\n      return result;\n    };\n    this.readPixelsAsync = (options) => __async(this, null, function* () {\n      const { framebuffer, x, y, width, height } = options;\n      const readback = this.device.createReadback();\n      const texture = framebuffer[\"colorTexture\"];\n      const result = yield readback.readTexture(\n        texture,\n        x,\n        /**\n         * Origin is at lower-left corner. Width / height is already multiplied by dpr.\n         * WebGPU needs flipY\n         */\n        this.viewportOrigin === ViewportOrigin.LOWER_LEFT ? y : this.height - y,\n        width,\n        height,\n        new Uint8Array(width * height * 4)\n      );\n      if (this.viewportOrigin !== ViewportOrigin.LOWER_LEFT) {\n        for (let j = 0; j < result.length; j += 4) {\n          const t = result[j];\n          result[j] = result[j + 2];\n          result[j + 2] = t;\n        }\n      }\n      readback.destroy();\n      return result;\n    });\n    this.getViewportSize = () => {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    };\n    this.getContainer = () => {\n      var _a;\n      return (_a = this.canvas) == null ? void 0 : _a.parentElement;\n    };\n    this.getCanvas = () => {\n      return this.canvas;\n    };\n    this.getGLContext = () => {\n      return this.device[\"gl\"];\n    };\n    this.destroy = () => {\n      var _a;\n      this.canvas = null;\n      (_a = this.uniformBuffers) == null ? void 0 : _a.forEach((buffer) => {\n        buffer.destroy();\n      });\n      this.device.destroy();\n      this.renderCache.destroy();\n    };\n  }\n  init(canvas, cfg) {\n    return __async(this, null, function* () {\n      const { enableWebGPU, shaderCompilerPath, antialias } = cfg;\n      this.canvas = canvas;\n      const deviceContribution = enableWebGPU ? new WebGPUDeviceContribution({\n        shaderCompilerPath\n      }) : new WebGLDeviceContribution({\n        // Use WebGL2 first and downgrade to WebGL1 if WebGL2 is not supported.\n        targets: [\"webgl2\", \"webgl1\"],\n        antialias,\n        onContextLost(e) {\n          console.warn(\"context lost\", e);\n        },\n        onContextCreationError(e) {\n          console.warn(\"context creation error\", e);\n        },\n        onContextRestored(e) {\n          console.warn(\"context restored\", e);\n        }\n      });\n      const swapChain = yield deviceContribution.createSwapChain(canvas);\n      swapChain.configureSwapChain(canvas.width, canvas.height);\n      this.device = swapChain.getDevice();\n      this.swapChain = swapChain;\n      this.renderCache = new RenderCache(this.device);\n      this.currentFramebuffer = null;\n      this.viewportOrigin = this.device.queryVendorInfo().viewportOrigin;\n      const gl = this.device[\"gl\"];\n      this.extensionObject = {\n        // @ts-ignore\n        OES_texture_float: !isWebGL2(gl) && this.device[\"OES_texture_float\"]\n      };\n      this.createMainColorDepthRT(canvas.width, canvas.height);\n    });\n  }\n  createMainColorDepthRT(width, height) {\n    if (this.mainColorRT) {\n      this.mainColorRT.destroy();\n    }\n    if (this.mainDepthRT) {\n      this.mainDepthRT.destroy();\n    }\n    this.mainColorRT = this.device.createRenderTargetFromTexture(\n      this.device.createTexture({\n        format: Format.U8_RGBA_RT,\n        width,\n        height,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    );\n    this.mainDepthRT = this.device.createRenderTargetFromTexture(\n      this.device.createTexture({\n        format: Format.D24_S8,\n        width,\n        height,\n        usage: TextureUsage.RENDER_TARGET\n      })\n    );\n  }\n  beginFrame() {\n    this.device.beginFrame();\n    const { currentFramebuffer, swapChain, mainColorRT, mainDepthRT } = this;\n    const colorAttachment = currentFramebuffer ? currentFramebuffer[\"colorRenderTarget\"] : mainColorRT;\n    const colorResolveTo = currentFramebuffer ? null : swapChain.getOnscreenTexture();\n    const depthStencilAttachment = currentFramebuffer ? currentFramebuffer[\"depthRenderTarget\"] : mainDepthRT;\n    const { color = [0, 0, 0, 0], depth = 1, stencil = 0 } = (\n      // @ts-ignore\n      (currentFramebuffer == null ? void 0 : currentFramebuffer.clearOptions) || {}\n    );\n    const colorClearColor = colorAttachment ? colorNewFromRGBA(color[0] * 255, color[1] * 255, color[2] * 255, color[3]) : TransparentBlack;\n    const depthClearValue = depthStencilAttachment ? depth : void 0;\n    const stencilClearValue = depthStencilAttachment ? stencil : void 0;\n    const renderPass = this.device.createRenderPass({\n      colorAttachment: [colorAttachment],\n      colorResolveTo: [colorResolveTo],\n      colorClearColor: [colorClearColor],\n      // colorStore: [!!currentFramebuffer],\n      colorStore: [true],\n      depthStencilAttachment,\n      depthClearValue,\n      stencilClearValue\n    });\n    this.renderPass = renderPass;\n  }\n  endFrame() {\n    this.device.submitPass(this.renderPass);\n    this.device.endFrame();\n  }\n  getPointSizeRange() {\n    const gl = this.device[\"gl\"];\n    return gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n  }\n  testExtension(name) {\n    return !!this.getGLContext().getExtension(name);\n  }\n  // TODO: 临时方法\n  setState() {\n  }\n  setBaseState() {\n  }\n  setCustomLayerDefaults() {\n  }\n  setDirty(flag) {\n    this.isDirty = flag;\n  }\n  getDirty() {\n    return this.isDirty;\n  }\n};\nexport {\n  DeviceRendererService as default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}