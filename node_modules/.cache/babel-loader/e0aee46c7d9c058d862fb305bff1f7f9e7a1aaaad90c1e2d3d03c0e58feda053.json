{"ast":null,"code":"// src/device/utils/typedarray.ts\nvar dtypes = {\n  \"[object Int8Array]\": 5120,\n  \"[object Int16Array]\": 5122,\n  \"[object Int32Array]\": 5124,\n  \"[object Uint8Array]\": 5121,\n  \"[object Uint8ClampedArray]\": 5121,\n  \"[object Uint16Array]\": 5123,\n  \"[object Uint32Array]\": 5125,\n  \"[object Float32Array]\": 5126,\n  \"[object Float64Array]\": 5121,\n  \"[object ArrayBuffer]\": 5121\n};\nfunction isTypedArray(x) {\n  return Object.prototype.toString.call(x) in dtypes;\n}\nfunction extend3ChannelsTo4(array, valueToInsert) {\n  const originalLength = array.length;\n  const insertCount = Math.ceil(originalLength / 3);\n  const newLength = originalLength + insertCount;\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < newLength; i += 4) {\n    newArray[i] = array[i / 4 * 3];\n    newArray[i + 1] = array[i / 4 * 3 + 1];\n    newArray[i + 2] = array[i / 4 * 3 + 2];\n    newArray[i + 3] = valueToInsert;\n  }\n  return newArray;\n}\nexport { extend3ChannelsTo4, isTypedArray };","map":{"version":3,"names":["dtypes","isTypedArray","x","Object","prototype","toString","call","extend3ChannelsTo4","array","valueToInsert","originalLength","length","insertCount","Math","ceil","newLength","newArray","Float32Array","i"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-renderer/es/device/utils/typedarray.js"],"sourcesContent":["// src/device/utils/typedarray.ts\nvar dtypes = {\n  \"[object Int8Array]\": 5120,\n  \"[object Int16Array]\": 5122,\n  \"[object Int32Array]\": 5124,\n  \"[object Uint8Array]\": 5121,\n  \"[object Uint8ClampedArray]\": 5121,\n  \"[object Uint16Array]\": 5123,\n  \"[object Uint32Array]\": 5125,\n  \"[object Float32Array]\": 5126,\n  \"[object Float64Array]\": 5121,\n  \"[object ArrayBuffer]\": 5121\n};\nfunction isTypedArray(x) {\n  return Object.prototype.toString.call(x) in dtypes;\n}\nfunction extend3ChannelsTo4(array, valueToInsert) {\n  const originalLength = array.length;\n  const insertCount = Math.ceil(originalLength / 3);\n  const newLength = originalLength + insertCount;\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < newLength; i += 4) {\n    newArray[i] = array[i / 4 * 3];\n    newArray[i + 1] = array[i / 4 * 3 + 1];\n    newArray[i + 2] = array[i / 4 * 3 + 2];\n    newArray[i + 3] = valueToInsert;\n  }\n  return newArray;\n}\nexport {\n  extend3ChannelsTo4,\n  isTypedArray\n};\n"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAG;EACX,oBAAoB,EAAE,IAAI;EAC1B,qBAAqB,EAAE,IAAI;EAC3B,qBAAqB,EAAE,IAAI;EAC3B,qBAAqB,EAAE,IAAI;EAC3B,4BAA4B,EAAE,IAAI;EAClC,sBAAsB,EAAE,IAAI;EAC5B,sBAAsB,EAAE,IAAI;EAC5B,uBAAuB,EAAE,IAAI;EAC7B,uBAAuB,EAAE,IAAI;EAC7B,sBAAsB,EAAE;AAC1B,CAAC;AACD,SAASC,YAAYA,CAACC,CAAC,EAAE;EACvB,OAAOC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,CAAC,CAAC,IAAIF,MAAM;AACpD;AACA,SAASO,kBAAkBA,CAACC,KAAK,EAAEC,aAAa,EAAE;EAChD,MAAMC,cAAc,GAAGF,KAAK,CAACG,MAAM;EACnC,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACJ,cAAc,GAAG,CAAC,CAAC;EACjD,MAAMK,SAAS,GAAGL,cAAc,GAAGE,WAAW;EAC9C,MAAMI,QAAQ,GAAG,IAAIC,YAAY,CAACF,SAAS,CAAC;EAC5C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,IAAI,CAAC,EAAE;IACrCF,QAAQ,CAACE,CAAC,CAAC,GAAGV,KAAK,CAACU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9BF,QAAQ,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGV,KAAK,CAACU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtCF,QAAQ,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGV,KAAK,CAACU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtCF,QAAQ,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGT,aAAa;EACjC;EACA,OAAOO,QAAQ;AACjB;AACA,SACET,kBAAkB,EAClBN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}