{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { gl, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\n\n/* babel-plugin-inline-import './shaders/webgl.line.frag.glsl' */\nvar lineFrag = \"uniform float u_dash_array : 0.02;\\nuniform float u_dash_offset : 0;\\nuniform float u_dash_ratio : 0;\\nuniform float u_thickness : 0.02;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_counters;\\n\\nvoid main() {\\n    float blur = 1. - smoothstep(0.98, 1., length(v_normal));\\n\\n    gl_FragColor = v_color;\\n    gl_FragColor.a *= blur * ceil(mod(v_counters + u_dash_offset, u_dash_array) - (u_dash_array * u_dash_ratio));\\n}\";\n\n/* babel-plugin-inline-import './shaders/webgl.line.vert.glsl' */\nvar lineVert = \"attribute vec2 a_pos;\\nattribute vec4 a_color;\\nattribute float a_line_miter;\\nattribute vec2 a_line_normal;\\nattribute float a_counters;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform float u_thickness : 0.02;\\nuniform vec2 u_viewport;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_counters;\\n\\nvoid main() {\\n  v_color = a_color;\\n  v_counters = a_counters;\\n\\n  vec3 normal = normalize(vec3(a_line_normal, 0.0));\\n\\n  vec4 offset = vec4(normal * u_thickness / 2.0 * a_line_miter, 0.0);\\n\\n  v_normal = vec2(normal * sign(a_line_miter));\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(a_pos, 0.0, 1.0) + offset;\\n}\\n\";\nexport var Line = (_dec = injectable(), _dec2 = inject(IDENTIFIER.Systems), _dec3 = named(IDENTIFIER.MaterialSystem), _dec4 = inject(IDENTIFIER.Systems), _dec5 = named(IDENTIFIER.GeometrySystem), _dec6 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Renderable) {\n  _inherits(Line, _Renderable);\n  var _super = _createSuper(Line);\n  function Line() {\n    var _this;\n    _classCallCheck(this, Line);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _initializerDefineProperty(_this, \"materialSystem\", _descriptor, _assertThisInitialized(_this));\n    _initializerDefineProperty(_this, \"geometrySystem\", _descriptor2, _assertThisInitialized(_this));\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor3, _assertThisInitialized(_this));\n    _this.vertexCount = void 0;\n    return _this;\n  }\n  _createClass(Line, [{\n    key: \"onAttributeChanged\",\n    value: function onAttributeChanged(_ref) {\n      var name = _ref.name,\n        data = _ref.data;\n      var mesh = this.getMeshComponent();\n      if (mesh && mesh.material) {\n        switch (name) {\n          case 'dashArray':\n            mesh.material.setUniform('u_dash_array', data);\n            break;\n          case 'dashOffset':\n            mesh.material.setUniform('u_dash_offset', data);\n            break;\n          case 'dashRatio':\n            mesh.material.setUniform('u_dash_ratio', data);\n            break;\n          case 'thickness':\n            mesh.material.setUniform('u_thickness', data);\n            break;\n          case 'color':\n            var colors = new Array(this.vertexCount).fill(undefined).map(function () {\n              return data;\n            }).reduce(function (prev, cur) {\n              // @ts-ignore\n              return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n            }, []); // @ts-ignore\n\n            mesh.geometry.setAttribute('a_color', Float32Array.from(colors), {\n              arrayStride: 4 * 4,\n              stepMode: 'vertex',\n              attributes: [{\n                shaderLocation: 1,\n                offset: 0,\n                format: 'float4'\n              }]\n            });\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var _this2 = this;\n      this.shaderModuleService.registerModule('line', {\n        vs: lineVert,\n        fs: lineFrag\n      });\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('line'),\n        vs = _this$shaderModuleSer.vs,\n        fs = _this$shaderModuleSer.fs,\n        extractedUniforms = _this$shaderModuleSer.uniforms;\n      var material = this.materialSystem.createShaderMaterial({\n        vertexShader: vs,\n        fragmentShader: fs\n      });\n      var _getNormals = getNormals(this.config.points, false),\n        normals = _getNormals.normals,\n        attrIndex = _getNormals.attrIndex,\n        attrPos = _getNormals.attrPos,\n        attrCounters = _getNormals.attrCounters;\n      var vertexCount = attrPos.length;\n      this.vertexCount = vertexCount;\n      var geometry = this.geometrySystem.createBufferGeometry({\n        vertexCount: vertexCount\n      });\n      this.setMaterial(material);\n      this.setGeometry(geometry);\n      material.setCull({\n        enable: false,\n        face: gl.BACK\n      }) // @ts-ignore\n      .setUniform(extractedUniforms);\n      this.setAttributes({\n        dashArray: this.config.dashArray,\n        dashOffset: this.config.dashOffset,\n        dashRatio: this.config.dashRatio,\n        thickness: this.config.thickness\n      });\n      var attrNormal = [];\n      var attrMiter = [];\n      normals.forEach(function (n) {\n        var norm = n[0];\n        var miter = n[1];\n        attrNormal.push([norm[0], norm[1]]); // @ts-ignore\n\n        attrMiter.push(miter);\n      }); // [[0,1,2], [2,1,3]]\n\n      geometry.setIndex(attrIndex.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, []));\n      geometry.setAttribute('a_pos', Float32Array.from(attrPos.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, [])), {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float2'\n        }]\n      });\n      var colors = new Array(vertexCount).fill(undefined).map(function () {\n        return _toConsumableArray(_this2.config.color);\n      }).reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, []);\n      geometry.setAttribute('a_color', Float32Array.from(colors), {\n        arrayStride: 4 * 4,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4'\n        }]\n      });\n      geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n        arrayStride: 4 * 1,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float'\n        }]\n      });\n      geometry.setAttribute('a_line_normal', Float32Array.from(attrNormal.reduce(function (prev, cur) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(cur));\n      }, [])), {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 3,\n          offset: 0,\n          format: 'float2'\n        }]\n      });\n      geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n        arrayStride: 4 * 1,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float'\n        }]\n      });\n    }\n  }]);\n  return Line;\n}(Renderable), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"materialSystem\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometrySystem\", [_dec4, _dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["gl","IDENTIFIER","inject","injectable","named","getNormals","Renderable","Line","_dec","_dec2","Systems","_dec3","MaterialSystem","_dec4","_dec5","GeometrySystem","_dec6","ShaderModuleService","_class","_class2","_temp","_Renderable","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_descriptor","_assertThisInitialized","_descriptor2","_descriptor3","vertexCount","_createClass","key","value","onAttributeChanged","_ref","name","data","mesh","getMeshComponent","material","setUniform","colors","fill","undefined","map","reduce","prev","cur","_toConsumableArray","geometry","setAttribute","Float32Array","from","arrayStride","stepMode","attributes","shaderLocation","offset","format","onEntityCreated","_this2","shaderModuleService","registerModule","vs","lineVert","fs","lineFrag","_this$shaderModuleSer","getModule","extractedUniforms","uniforms","materialSystem","createShaderMaterial","vertexShader","fragmentShader","_getNormals","config","points","normals","attrIndex","attrPos","attrCounters","geometrySystem","createBufferGeometry","setMaterial","setGeometry","setCull","enable","face","BACK","setAttributes","dashArray","dashOffset","dashRatio","thickness","attrNormal","attrMiter","forEach","n","norm","miter","push","setIndex","color","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu/src/renderable/line/index.ts"],"sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { encodePickingColor } from '../../utils/picking';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\nimport lineFrag from './shaders/webgl.line.frag.glsl';\nimport lineVert from './shaders/webgl.line.vert.glsl';\n\ninterface ILineConfig {\n  id: number;\n  points: number[][];\n  thickness: number;\n  color: [number, number, number, number]; // sRGB\n  dashOffset: number;\n  dashArray: number;\n  dashRatio: number;\n}\n\n@injectable()\nexport class Line extends Renderable<Partial<ILineConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  private vertexCount: number;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      switch (name) {\n        case 'dashArray':\n          mesh.material.setUniform('u_dash_array', data);\n          break;\n        case 'dashOffset':\n          mesh.material.setUniform('u_dash_offset', data);\n          break;\n        case 'dashRatio':\n          mesh.material.setUniform('u_dash_ratio', data);\n          break;\n        case 'thickness':\n          mesh.material.setUniform('u_thickness', data);\n          break;\n        case 'color':\n          const colors = new Array(this.vertexCount)\n            .fill(undefined)\n            .map(() => data)\n            .reduce((prev, cur) => {\n              // @ts-ignore\n              return [...prev, ...cur];\n            }, []);\n          // @ts-ignore\n          mesh.geometry.setAttribute('a_color', Float32Array.from(colors), {\n            arrayStride: 4 * 4,\n            stepMode: 'vertex',\n            attributes: [\n              {\n                shaderLocation: 1,\n                offset: 0,\n                format: 'float4',\n              },\n            ],\n          });\n          break;\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('line', {\n      vs: lineVert,\n      fs: lineFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('line');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n    });\n\n    const { normals, attrIndex, attrPos, attrCounters } = getNormals(\n      this.config.points!,\n      false,\n    );\n    const vertexCount = attrPos.length;\n    this.vertexCount = vertexCount;\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount,\n    });\n\n    this.setMaterial(material);\n    this.setGeometry(geometry);\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      // @ts-ignore\n      .setUniform(extractedUniforms);\n\n    this.setAttributes({\n      dashArray: this.config.dashArray,\n      dashOffset: this.config.dashOffset,\n      dashRatio: this.config.dashRatio,\n      thickness: this.config.thickness,\n    });\n\n    const attrNormal: number[][] = [];\n    const attrMiter: number[] = [];\n\n    normals.forEach((n: number[][]) => {\n      const norm = n[0];\n      const miter = n[1];\n      attrNormal.push([norm[0], norm[1]]);\n      // @ts-ignore\n      attrMiter.push(miter);\n    });\n\n    // [[0,1,2], [2,1,3]]\n    geometry.setIndex(\n      attrIndex.reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []),\n    );\n\n    geometry.setAttribute(\n      'a_pos',\n      Float32Array.from(\n        attrPos.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    const colors = new Array(vertexCount)\n      .fill(undefined)\n      .map(() => [...this.config.color!])\n      .reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []);\n    geometry.setAttribute('a_color', Float32Array.from(colors), {\n      arrayStride: 4 * 4,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4',\n        },\n      ],\n    });\n\n    geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n\n    geometry.setAttribute(\n      'a_line_normal',\n      Float32Array.from(\n        attrNormal.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 3,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}