{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Disablable } from '../../common';\nexport class AutoSave extends Disablable {\n  constructor(options) {\n    super();\n    this.delay = 10;\n    this.throttle = 2;\n    this.threshold = 5;\n    this.changeCount = 0;\n    this.timestamp = 0;\n    this.options = Object.assign(Object.assign({}, AutoSave.defaultOptions), options);\n    this.graph.model.on('cell:change:*', this.onModelChanged, this);\n  }\n  get graph() {\n    return this.options.graph;\n  }\n  onModelChanged() {\n    if (this.disabled) {\n      return;\n    }\n    const now = new Date().getTime();\n    const dt = (now - this.timestamp) / 1000;\n    if (dt > this.delay || this.changeCount >= this.threshold && dt > this.throttle) {\n      this.save();\n      this.reset();\n    } else {\n      this.changeCount += 1;\n    }\n  }\n  save() {\n    this.trigger('save');\n  }\n  reset() {\n    this.changeCount = 0;\n    this.timestamp = new Date().getTime();\n  }\n  dispose() {\n    this.graph.model.off('cell:change:*', this.onModelChanged, this);\n  }\n}\n__decorate([Disablable.dispose()], AutoSave.prototype, \"dispose\", null);\n(function (AutoSave) {\n  AutoSave.defaultOptions = {\n    delay: 10,\n    throttle: 2,\n    threshold: 5\n  };\n})(AutoSave || (AutoSave = {}));","map":{"version":3,"names":["Disablable","AutoSave","constructor","options","delay","throttle","threshold","changeCount","timestamp","Object","assign","defaultOptions","graph","model","on","onModelChanged","disabled","now","Date","getTime","dt","save","reset","trigger","dispose","off","__decorate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/autosave/index.ts"],"sourcesContent":["import { Disablable } from '../../common'\nimport { Graph } from '../../graph'\n\nexport class AutoSave extends Disablable<AutoSave.EventArgs> {\n  protected readonly options: AutoSave.Options\n\n  protected get graph() {\n    return this.options.graph\n  }\n\n  delay = 10\n  throttle = 2\n  threshold = 5\n\n  private changeCount = 0\n  private timestamp = 0\n\n  constructor(options: AutoSave.Options) {\n    super()\n    this.options = {\n      ...AutoSave.defaultOptions,\n      ...options,\n    }\n    this.graph.model.on('cell:change:*', this.onModelChanged, this)\n  }\n\n  private onModelChanged() {\n    if (this.disabled) {\n      return\n    }\n\n    const now = new Date().getTime()\n    const dt = (now - this.timestamp) / 1000\n\n    if (\n      dt > this.delay ||\n      (this.changeCount >= this.threshold && dt > this.throttle)\n    ) {\n      this.save()\n      this.reset()\n    } else {\n      this.changeCount += 1\n    }\n  }\n\n  private save() {\n    this.trigger('save')\n  }\n\n  reset() {\n    this.changeCount = 0\n    this.timestamp = new Date().getTime()\n  }\n\n  @Disablable.dispose()\n  dispose() {\n    this.graph.model.off('cell:change:*', this.onModelChanged, this)\n  }\n}\n\nexport namespace AutoSave {\n  export interface Options {\n    graph: Graph\n    /**\n     * Minimum amount of seconds between two consecutive autosaves.\n     */\n    delay?: number\n    /**\n     * Minimum amount of seconds and more than `threshold` changes\n     * between two consecutive autosaves.\n     */\n    throttle?: number\n    /**\n     * Minimum amount of ignored changes before an autosave.\n     */\n    threshold?: number\n  }\n\n  export const defaultOptions: Partial<Options> = {\n    delay: 10,\n    throttle: 2,\n    threshold: 5,\n  }\n\n  export interface EventArgs {\n    save?: null\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,UAAU,QAAQ,cAAc;AAGzC,OAAM,MAAOC,QAAS,SAAQD,UAA8B;EAc1DE,YAAYC,OAAyB;IACnC,KAAK,EAAE;IART,KAAAC,KAAK,GAAG,EAAE;IACV,KAAAC,QAAQ,GAAG,CAAC;IACZ,KAAAC,SAAS,GAAG,CAAC;IAEL,KAAAC,WAAW,GAAG,CAAC;IACf,KAAAC,SAAS,GAAG,CAAC;IAInB,IAAI,CAACL,OAAO,GAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACPT,QAAQ,CAACU,cAAc,GACvBR,OAAO,CACX;IACD,IAAI,CAACS,KAAK,CAACC,KAAK,CAACC,EAAE,CAAC,eAAe,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACjE;EAlBA,IAAcH,KAAKA,CAAA;IACjB,OAAO,IAAI,CAACT,OAAO,CAACS,KAAK;EAC3B;EAkBQG,cAAcA,CAAA;IACpB,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB;;IAGF,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAChC,MAAMC,EAAE,GAAG,CAACH,GAAG,GAAG,IAAI,CAACT,SAAS,IAAI,IAAI;IAExC,IACEY,EAAE,GAAG,IAAI,CAAChB,KAAK,IACd,IAAI,CAACG,WAAW,IAAI,IAAI,CAACD,SAAS,IAAIc,EAAE,GAAG,IAAI,CAACf,QAAS,EAC1D;MACA,IAAI,CAACgB,IAAI,EAAE;MACX,IAAI,CAACC,KAAK,EAAE;KACb,MAAM;MACL,IAAI,CAACf,WAAW,IAAI,CAAC;;EAEzB;EAEQc,IAAIA,CAAA;IACV,IAAI,CAACE,OAAO,CAAC,MAAM,CAAC;EACtB;EAEAD,KAAKA,CAAA;IACH,IAAI,CAACf,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,SAAS,GAAG,IAAIU,IAAI,EAAE,CAACC,OAAO,EAAE;EACvC;EAGAK,OAAOA,CAAA;IACL,IAAI,CAACZ,KAAK,CAACC,KAAK,CAACY,GAAG,CAAC,eAAe,EAAE,IAAI,CAACV,cAAc,EAAE,IAAI,CAAC;EAClE;;AAFAW,UAAA,EADC1B,UAAU,CAACwB,OAAO,EAAE,C,sCAGpB;AAGH,WAAiBvB,QAAQ;EAkBVA,QAAA,CAAAU,cAAc,GAAqB;IAC9CP,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE;GACZ;AAKH,CAAC,EA3BgBL,QAAQ,KAARA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}