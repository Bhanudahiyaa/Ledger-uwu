{"ast":null,"code":"// src/device/DeviceElements.ts\nimport { BufferUsage } from \"@antv/g-device-api\";\nimport { gl } from \"@antv/l7-core\";\nimport { typedArrayCtorMap } from \"./constants\";\nimport { isTypedArray } from \"./utils/typedarray\";\nvar DeviceElements = class {\n  constructor(device, options) {\n    const {\n      data,\n      type,\n      count = 0\n    } = options;\n    let typed;\n    if (isTypedArray(data)) {\n      typed = data;\n    } else {\n      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);\n    }\n    this.type = type;\n    this.count = count;\n    this.indexBuffer = device.createBuffer({\n      viewOrSize: typed,\n      usage: BufferUsage.INDEX\n    });\n  }\n  get() {\n    return this.indexBuffer;\n  }\n  subData({\n    data\n  }) {\n    let typed;\n    if (isTypedArray(data)) {\n      typed = data;\n    } else {\n      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);\n    }\n    this.indexBuffer.setSubData(0, new Uint8Array(typed.buffer));\n  }\n  destroy() {\n    this.indexBuffer.destroy();\n  }\n};\nexport { DeviceElements as default };","map":{"version":3,"names":["BufferUsage","gl","typedArrayCtorMap","isTypedArray","DeviceElements","constructor","device","options","data","type","count","typed","UNSIGNED_INT","indexBuffer","createBuffer","viewOrSize","usage","INDEX","get","subData","setSubData","Uint8Array","buffer","destroy","default"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-renderer/es/device/DeviceElements.js"],"sourcesContent":["// src/device/DeviceElements.ts\nimport { BufferUsage } from \"@antv/g-device-api\";\nimport { gl } from \"@antv/l7-core\";\nimport { typedArrayCtorMap } from \"./constants\";\nimport { isTypedArray } from \"./utils/typedarray\";\nvar DeviceElements = class {\n  constructor(device, options) {\n    const { data, type, count = 0 } = options;\n    let typed;\n    if (isTypedArray(data)) {\n      typed = data;\n    } else {\n      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);\n    }\n    this.type = type;\n    this.count = count;\n    this.indexBuffer = device.createBuffer({\n      viewOrSize: typed,\n      usage: BufferUsage.INDEX\n    });\n  }\n  get() {\n    return this.indexBuffer;\n  }\n  subData({\n    data\n  }) {\n    let typed;\n    if (isTypedArray(data)) {\n      typed = data;\n    } else {\n      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);\n    }\n    this.indexBuffer.setSubData(0, new Uint8Array(typed.buffer));\n  }\n  destroy() {\n    this.indexBuffer.destroy();\n  }\n};\nexport {\n  DeviceElements as default\n};\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,EAAE,QAAQ,eAAe;AAClC,SAASC,iBAAiB,QAAQ,aAAa;AAC/C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,IAAIC,cAAc,GAAG,MAAM;EACzBC,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAE;IAC3B,MAAM;MAAEC,IAAI;MAAEC,IAAI;MAAEC,KAAK,GAAG;IAAE,CAAC,GAAGH,OAAO;IACzC,IAAII,KAAK;IACT,IAAIR,YAAY,CAACK,IAAI,CAAC,EAAE;MACtBG,KAAK,GAAGH,IAAI;IACd,CAAC,MAAM;MACLG,KAAK,GAAG,IAAIT,iBAAiB,CAAC,IAAI,CAACO,IAAI,IAAIR,EAAE,CAACW,YAAY,CAAC,CAACJ,IAAI,CAAC;IACnE;IACA,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,WAAW,GAAGP,MAAM,CAACQ,YAAY,CAAC;MACrCC,UAAU,EAAEJ,KAAK;MACjBK,KAAK,EAAEhB,WAAW,CAACiB;IACrB,CAAC,CAAC;EACJ;EACAC,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACL,WAAW;EACzB;EACAM,OAAOA,CAAC;IACNX;EACF,CAAC,EAAE;IACD,IAAIG,KAAK;IACT,IAAIR,YAAY,CAACK,IAAI,CAAC,EAAE;MACtBG,KAAK,GAAGH,IAAI;IACd,CAAC,MAAM;MACLG,KAAK,GAAG,IAAIT,iBAAiB,CAAC,IAAI,CAACO,IAAI,IAAIR,EAAE,CAACW,YAAY,CAAC,CAACJ,IAAI,CAAC;IACnE;IACA,IAAI,CAACK,WAAW,CAACO,UAAU,CAAC,CAAC,EAAE,IAAIC,UAAU,CAACV,KAAK,CAACW,MAAM,CAAC,CAAC;EAC9D;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACV,WAAW,CAACU,OAAO,CAAC,CAAC;EAC5B;AACF,CAAC;AACD,SACEnB,cAAc,IAAIoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}