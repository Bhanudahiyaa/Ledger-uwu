{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { mat4, quat, vec3 } from 'gl-matrix';\nimport { Component } from '../../ComponentManager';\nexport var TransformComponent = /*#__PURE__*/function (_Component) {\n  _inherits(TransformComponent, _Component);\n  var _super = _createSuper(TransformComponent);\n\n  /**\n   * local space RTS\n   */\n\n  /**\n   * XMFLOAT4X4._41\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks\n   */\n\n  /**\n   * world space RTS\n   */\n  // 高阶函数，利用闭包重复利用临时变量\n  // @see playcanvas graph node\n\n  /**\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw\n   */\n\n  /**\n   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n   */\n\n  /**\n   * TODO: 支持以下两种：\n   * * translate(x, y, z)\n   * * translate(vec3(x, y, z))\n   */\n\n  /**\n   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n   */\n  // public catmullRom = (() => {\n  //   const aS = vec3.create();\n  //   const aR = quat.create();\n  //   const aT = vec3.create();\n  //   const bS = vec3.create();\n  //   const bR = quat.create();\n  //   const bT = vec3.create();\n  //   const cS = vec3.create();\n  //   const cR = quat.create();\n  //   const cT = vec3.create();\n  //   const dS = vec3.create();\n  //   const dR = quat.create();\n  //   const dT = vec3.create();\n  //   const R = quat.create();\n  //   return (\n  //     a: TransformComponent,\n  //     b: TransformComponent,\n  //     c: TransformComponent,\n  //     d: TransformComponent,\n  //     t: number,\n  //   ) => {\n  //     this.setDirty();\n  //     mat4.getScaling(aS, a.worldTransform);\n  //     mat4.getTranslation(aT, a.worldTransform);\n  //     mat4.getRotation(aR, a.worldTransform);\n  //     mat4.getScaling(bS, b.worldTransform);\n  //     mat4.getTranslation(bT, b.worldTransform);\n  //     mat4.getRotation(bR, b.worldTransform);\n  //     mat4.getScaling(cS, c.worldTransform);\n  //     mat4.getTranslation(cT, c.worldTransform);\n  //     mat4.getRotation(cR, c.worldTransform);\n  //     mat4.getScaling(dS, d.worldTransform);\n  //     mat4.getTranslation(dT, d.worldTransform);\n  //     mat4.getRotation(dR, d.worldTransform);\n  //     vec3.catmullRom(this.localPosition, aT, bT, cT, dT, t);\n  //     vec3.catmullRom(R, aR, bR, cR, dR, t);\n  //     quat.normalize(this.localRotation, R);\n  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);\n  //   };\n  // })();\n  function TransformComponent(data) {\n    var _this;\n    _classCallCheck(this, TransformComponent);\n    _this = _super.call(this, data);\n    _this.dirtyFlag = void 0;\n    _this.localDirtyFlag = void 0;\n    _this.parent = null;\n    _this.localPosition = vec3.fromValues(0, 0, 0);\n    _this.localRotation = quat.fromValues(0, 0, 0, 1);\n    _this.localScale = vec3.fromValues(1, 1, 1);\n    _this.localTransform = mat4.create();\n    _this.position = vec3.fromValues(0, 0, 0);\n    _this.rotation = quat.fromValues(0, 0, 0, 1);\n    _this.scaling = vec3.fromValues(1, 1, 1);\n    _this.worldTransform = mat4.create();\n    _this.matrixTransform = function () {\n      var transformed = mat4.create();\n      return function (mat) {\n        mat4.multiply(transformed, _this.getLocalTransform(), mat);\n        mat4.getScaling(_this.localScale, transformed);\n        mat4.getTranslation(_this.localPosition, transformed);\n        mat4.getRotation(_this.localRotation, transformed);\n      };\n    }();\n    _this.rotateRollPitchYaw = function () {\n      var quatX = quat.create();\n      var quatY = quat.create();\n      var quatZ = quat.create();\n      return function (x, y, z) {\n        _this.setDirty();\n        quat.fromEuler(quatX, x, 0, 0);\n        quat.fromEuler(quatY, 0, y, 0);\n        quat.fromEuler(quatZ, 0, 0, z);\n        quat.multiply(_this.localRotation, quatX, _this.localRotation);\n        quat.multiply(_this.localRotation, _this.localRotation, quatY);\n        quat.multiply(_this.localRotation, quatZ, _this.localRotation);\n        quat.normalize(_this.localRotation, _this.localRotation);\n      };\n    }();\n    _this.lerp = function () {\n      var aS = vec3.create();\n      var aR = quat.create();\n      var aT = vec3.create();\n      var bS = vec3.create();\n      var bR = quat.create();\n      var bT = vec3.create();\n      return function (a, b, t) {\n        _this.setDirty();\n        mat4.getScaling(aS, a.worldTransform);\n        mat4.getTranslation(aT, a.worldTransform);\n        mat4.getRotation(aR, a.worldTransform);\n        mat4.getScaling(bS, b.worldTransform);\n        mat4.getTranslation(bT, b.worldTransform);\n        mat4.getRotation(bR, b.worldTransform);\n        vec3.lerp(_this.localScale, aS, bS, t);\n        quat.slerp(_this.localRotation, aR, bR, t);\n        vec3.lerp(_this.localPosition, aT, bT, t);\n      };\n    }();\n    _this.translate = function () {\n      var tr = vec3.create();\n      return function (translation) {\n        vec3.add(tr, _this.getPosition(), translation);\n        _this.setPosition(tr);\n        _this.setDirty(true);\n        return _assertThisInitialized(_this);\n      };\n    }();\n    _this.translateLocal = function () {\n      return function (translation) {\n        vec3.transformQuat(translation, translation, _this.localRotation);\n        vec3.add(_this.localPosition, _this.localPosition, translation);\n        _this.setLocalDirty(true);\n        return _assertThisInitialized(_this);\n      };\n    }();\n    _this.setPosition = function () {\n      var parentInvertMatrix = mat4.create();\n      return function (position) {\n        _this.position = position;\n        _this.setLocalDirty(true);\n        if (_this.parent === null) {\n          vec3.copy(_this.localPosition, position);\n        } else {\n          mat4.copy(parentInvertMatrix, _this.parent.worldTransform);\n          mat4.invert(parentInvertMatrix, parentInvertMatrix);\n          vec3.transformMat4(_this.localPosition, position, parentInvertMatrix);\n        }\n        return _assertThisInitialized(_this);\n      };\n    }();\n    _this.rotate = function () {\n      var parentInvertRotation = quat.create();\n      return function (quaternion) {\n        if (_this.parent === null) {\n          quat.multiply(_this.localRotation, _this.localRotation, quaternion);\n          quat.normalize(_this.localRotation, _this.localRotation);\n        } else {\n          var rot = _this.getRotation();\n          var parentRot = _this.parent.getRotation();\n          quat.copy(parentInvertRotation, parentRot);\n          quat.invert(parentInvertRotation, parentInvertRotation);\n          quat.multiply(parentInvertRotation, parentInvertRotation, quaternion);\n          quat.multiply(_this.localRotation, quaternion, rot);\n          quat.normalize(_this.localRotation, _this.localRotation);\n        }\n        _this.setLocalDirty();\n        return _assertThisInitialized(_this);\n      };\n    }();\n    _this.rotateLocal = function () {\n      return function (quaternion) {\n        quat.multiply(_this.localRotation, _this.localRotation, quaternion);\n        quat.normalize(_this.localRotation, _this.localRotation);\n        _this.setLocalDirty(true);\n        return _assertThisInitialized(_this);\n      };\n    }();\n    _this.setRotation = function () {\n      var invParentRot = quat.create();\n      return function (rotation) {\n        if (_this.parent === null) {\n          quat.copy(_this.localRotation, rotation);\n        } else {\n          quat.copy(invParentRot, _this.parent.getRotation());\n          quat.invert(invParentRot, invParentRot);\n          quat.copy(_this.localRotation, invParentRot);\n          quat.mul(_this.localRotation, _this.localRotation, rotation);\n        }\n        _this.setLocalDirty(true);\n        return _assertThisInitialized(_this);\n      };\n    }();\n    return _this;\n  }\n  _createClass(TransformComponent, [{\n    key: \"setLocalPosition\",\n    value: function setLocalPosition(position) {\n      vec3.copy(this.localPosition, position);\n      this.setLocalDirty(true);\n    }\n  }, {\n    key: \"setLocalScale\",\n    value: function setLocalScale(scale) {\n      vec3.copy(this.localScale, scale);\n      this.setLocalDirty(true);\n    }\n  }, {\n    key: \"setLocalRotation\",\n    value: function setLocalRotation(rotation) {\n      quat.copy(this.localRotation, rotation);\n      this.setLocalDirty(true);\n      return this;\n    }\n  }, {\n    key: \"isDirty\",\n    value: function isDirty() {\n      return this.dirtyFlag;\n    }\n  }, {\n    key: \"setDirty\",\n    value: function setDirty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (value) {\n        this.dirtyFlag |= TransformComponent.DIRTY;\n      } else {\n        this.dirtyFlag &= ~TransformComponent.DIRTY;\n      }\n    }\n  }, {\n    key: \"isLocalDirty\",\n    value: function isLocalDirty() {\n      return this.localDirtyFlag;\n    }\n  }, {\n    key: \"setLocalDirty\",\n    value: function setLocalDirty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (value) {\n        this.localDirtyFlag |= TransformComponent.DIRTY;\n        this.setDirty(true);\n      } else {\n        this.localDirtyFlag &= ~TransformComponent.DIRTY;\n      }\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform() {\n      if (this.isLocalDirty()) {\n        this.getLocalTransform();\n      }\n      if (this.isDirty()) {\n        if (this.parent === null) {\n          mat4.copy(this.worldTransform, this.getLocalTransform());\n          this.setDirty(false);\n        }\n      }\n    }\n  }, {\n    key: \"updateTransformWithParent\",\n    value: function updateTransformWithParent(parent) {\n      mat4.multiply(this.worldTransform, parent.worldTransform, this.getLocalTransform());\n    }\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform() {\n      this.setDirty();\n      mat4.getScaling(this.localScale, this.worldTransform);\n      mat4.getTranslation(this.localPosition, this.worldTransform);\n      mat4.getRotation(this.localRotation, this.worldTransform);\n    }\n  }, {\n    key: \"clearTransform\",\n    value: function clearTransform() {\n      this.setDirty();\n      this.localPosition = vec3.fromValues(0, 0, 0);\n      this.localRotation = quat.fromValues(0, 0, 0, 1);\n      this.localScale = vec3.fromValues(1, 1, 1);\n    }\n  }, {\n    key: \"scaleLocal\",\n    value: function scaleLocal(scaling) {\n      this.setLocalDirty();\n      vec3.multiply(this.localScale, this.localScale, scaling);\n      return this;\n    }\n  }, {\n    key: \"getLocalPosition\",\n    value: function getLocalPosition() {\n      return this.localPosition;\n    }\n  }, {\n    key: \"getLocalRotation\",\n    value: function getLocalRotation() {\n      return this.localRotation;\n    }\n  }, {\n    key: \"getLocalScale\",\n    value: function getLocalScale() {\n      return this.localScale;\n    }\n  }, {\n    key: \"getLocalTransform\",\n    value: function getLocalTransform() {\n      if (this.localDirtyFlag) {\n        mat4.fromRotationTranslationScale(this.localTransform, this.localRotation, this.localPosition, this.localScale);\n        this.setLocalDirty(false);\n      }\n      return this.localTransform;\n    }\n  }, {\n    key: \"getWorldTransform\",\n    value: function getWorldTransform() {\n      if (!this.isLocalDirty() && !this.isDirty()) {\n        return this.worldTransform;\n      }\n      if (this.parent) {\n        this.parent.getWorldTransform();\n      }\n      this.updateTransform();\n      return this.worldTransform;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      mat4.getTranslation(this.position, this.worldTransform);\n      return this.position;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      mat4.getRotation(this.rotation, this.worldTransform);\n      return this.rotation;\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      mat4.getScaling(this.scaling, this.worldTransform);\n      return this.scaling;\n    }\n  }]);\n  return TransformComponent;\n}(Component);\nTransformComponent.DIRTY = 1 << 0;","map":{"version":3,"names":["mat4","quat","vec3","Component","TransformComponent","_Component","_inherits","_super","_createSuper","data","_this","_classCallCheck","call","dirtyFlag","localDirtyFlag","parent","localPosition","fromValues","localRotation","localScale","localTransform","create","position","rotation","scaling","worldTransform","matrixTransform","transformed","mat","multiply","getLocalTransform","getScaling","getTranslation","getRotation","rotateRollPitchYaw","quatX","quatY","quatZ","x","y","z","setDirty","fromEuler","normalize","lerp","aS","aR","aT","bS","bR","bT","a","b","t","slerp","translate","tr","translation","add","getPosition","setPosition","_assertThisInitialized","translateLocal","transformQuat","setLocalDirty","parentInvertMatrix","copy","invert","transformMat4","rotate","parentInvertRotation","quaternion","rot","parentRot","rotateLocal","setRotation","invParentRot","mul","_createClass","key","value","setLocalPosition","setLocalScale","scale","setLocalRotation","isDirty","arguments","length","undefined","DIRTY","isLocalDirty","updateTransform","updateTransformWithParent","applyTransform","clearTransform","scaleLocal","getLocalPosition","getLocalRotation","getLocalScale","fromRotationTranslationScale","getWorldTransform","getScale"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/g-webgpu-core/src/components/scenegraph/TransformComponent.ts"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\nimport { Component, NonFunctionProperties } from '../../ComponentManager';\n\nexport class TransformComponent extends Component<TransformComponent> {\n  public static DIRTY = 1 << 0;\n\n  public dirtyFlag: number;\n\n  public localDirtyFlag: number;\n\n  public parent: TransformComponent | null = null;\n\n  /**\n   * local space RTS\n   */\n\n  /**\n   * XMFLOAT4X4._41\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks\n   */\n  public localPosition = vec3.fromValues(0, 0, 0);\n  public localRotation = quat.fromValues(0, 0, 0, 1);\n  public localScale = vec3.fromValues(1, 1, 1);\n  public localTransform = mat4.create();\n\n  /**\n   * world space RTS\n   */\n\n  public position = vec3.fromValues(0, 0, 0);\n  public rotation = quat.fromValues(0, 0, 0, 1);\n  public scaling = vec3.fromValues(1, 1, 1);\n  public worldTransform = mat4.create();\n\n  // 高阶函数，利用闭包重复利用临时变量\n  // @see playcanvas graph node\n  public matrixTransform = (() => {\n    const transformed = mat4.create();\n    return (mat: mat4) => {\n      mat4.multiply(transformed, this.getLocalTransform(), mat);\n      mat4.getScaling(this.localScale, transformed);\n      mat4.getTranslation(this.localPosition, transformed);\n      mat4.getRotation(this.localRotation, transformed);\n    };\n  })();\n\n  /**\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw\n   */\n  public rotateRollPitchYaw = (() => {\n    const quatX = quat.create();\n    const quatY = quat.create();\n    const quatZ = quat.create();\n    return (x: number, y: number, z: number) => {\n      this.setDirty();\n\n      quat.fromEuler(quatX, x, 0, 0);\n      quat.fromEuler(quatY, 0, y, 0);\n      quat.fromEuler(quatZ, 0, 0, z);\n\n      quat.multiply(this.localRotation, quatX, this.localRotation);\n      quat.multiply(this.localRotation, this.localRotation, quatY);\n      quat.multiply(this.localRotation, quatZ, this.localRotation);\n      quat.normalize(this.localRotation, this.localRotation);\n    };\n  })();\n\n  /**\n   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n   */\n  public lerp = (() => {\n    const aS = vec3.create();\n    const aR = quat.create();\n    const aT = vec3.create();\n    const bS = vec3.create();\n    const bR = quat.create();\n    const bT = vec3.create();\n    return (a: TransformComponent, b: TransformComponent, t: number) => {\n      this.setDirty();\n\n      mat4.getScaling(aS, a.worldTransform);\n      mat4.getTranslation(aT, a.worldTransform);\n      mat4.getRotation(aR, a.worldTransform);\n      mat4.getScaling(bS, b.worldTransform);\n      mat4.getTranslation(bT, b.worldTransform);\n      mat4.getRotation(bR, b.worldTransform);\n\n      vec3.lerp(this.localScale, aS, bS, t);\n      quat.slerp(this.localRotation, aR, bR, t);\n      vec3.lerp(this.localPosition, aT, bT, t);\n    };\n  })();\n\n  /**\n   * TODO: 支持以下两种：\n   * * translate(x, y, z)\n   * * translate(vec3(x, y, z))\n   */\n  public translate = (() => {\n    const tr = vec3.create();\n\n    return (translation: vec3) => {\n      vec3.add(tr, this.getPosition(), translation);\n      this.setPosition(tr);\n\n      this.setDirty(true);\n\n      return this;\n    };\n  })();\n\n  public translateLocal = (() => {\n    return (translation: vec3) => {\n      vec3.transformQuat(translation, translation, this.localRotation);\n      vec3.add(this.localPosition, this.localPosition, translation);\n\n      this.setLocalDirty(true);\n\n      return this;\n    };\n  })();\n\n  public setPosition = (() => {\n    const parentInvertMatrix = mat4.create();\n\n    return (position: vec3) => {\n      this.position = position;\n\n      this.setLocalDirty(true);\n\n      if (this.parent === null) {\n        vec3.copy(this.localPosition, position);\n      } else {\n        mat4.copy(parentInvertMatrix, this.parent.worldTransform);\n        mat4.invert(parentInvertMatrix, parentInvertMatrix);\n        vec3.transformMat4(this.localPosition, position, parentInvertMatrix);\n      }\n      return this;\n    };\n  })();\n\n  public rotate = (() => {\n    const parentInvertRotation = quat.create();\n    return (quaternion: quat) => {\n      if (this.parent === null) {\n        quat.multiply(this.localRotation, this.localRotation, quaternion);\n        quat.normalize(this.localRotation, this.localRotation);\n      } else {\n        const rot = this.getRotation();\n        const parentRot = this.parent.getRotation();\n\n        quat.copy(parentInvertRotation, parentRot);\n        quat.invert(parentInvertRotation, parentInvertRotation);\n        quat.multiply(parentInvertRotation, parentInvertRotation, quaternion);\n        quat.multiply(this.localRotation, quaternion, rot);\n        quat.normalize(this.localRotation, this.localRotation);\n      }\n      this.setLocalDirty();\n      return this;\n    };\n  })();\n\n  public rotateLocal = (() => {\n    return (quaternion: quat) => {\n      quat.multiply(this.localRotation, this.localRotation, quaternion);\n      quat.normalize(this.localRotation, this.localRotation);\n      this.setLocalDirty(true);\n      return this;\n    };\n  })();\n\n  public setRotation = (() => {\n    const invParentRot = quat.create();\n\n    return (rotation: quat) => {\n      if (this.parent === null) {\n        quat.copy(this.localRotation, rotation);\n      } else {\n        quat.copy(invParentRot, this.parent.getRotation());\n        quat.invert(invParentRot, invParentRot);\n        quat.copy(this.localRotation, invParentRot);\n        quat.mul(this.localRotation, this.localRotation, rotation);\n      }\n\n      this.setLocalDirty(true);\n      return this;\n    };\n  })();\n\n  /**\n   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n   */\n  // public catmullRom = (() => {\n  //   const aS = vec3.create();\n  //   const aR = quat.create();\n  //   const aT = vec3.create();\n  //   const bS = vec3.create();\n  //   const bR = quat.create();\n  //   const bT = vec3.create();\n  //   const cS = vec3.create();\n  //   const cR = quat.create();\n  //   const cT = vec3.create();\n  //   const dS = vec3.create();\n  //   const dR = quat.create();\n  //   const dT = vec3.create();\n  //   const R = quat.create();\n  //   return (\n  //     a: TransformComponent,\n  //     b: TransformComponent,\n  //     c: TransformComponent,\n  //     d: TransformComponent,\n  //     t: number,\n  //   ) => {\n  //     this.setDirty();\n  //     mat4.getScaling(aS, a.worldTransform);\n  //     mat4.getTranslation(aT, a.worldTransform);\n  //     mat4.getRotation(aR, a.worldTransform);\n  //     mat4.getScaling(bS, b.worldTransform);\n  //     mat4.getTranslation(bT, b.worldTransform);\n  //     mat4.getRotation(bR, b.worldTransform);\n  //     mat4.getScaling(cS, c.worldTransform);\n  //     mat4.getTranslation(cT, c.worldTransform);\n  //     mat4.getRotation(cR, c.worldTransform);\n  //     mat4.getScaling(dS, d.worldTransform);\n  //     mat4.getTranslation(dT, d.worldTransform);\n  //     mat4.getRotation(dR, d.worldTransform);\n\n  //     vec3.catmullRom(this.localPosition, aT, bT, cT, dT, t);\n  //     vec3.catmullRom(R, aR, bR, cR, dR, t);\n  //     quat.normalize(this.localRotation, R);\n  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);\n  //   };\n  // })();\n\n  constructor(data?: Partial<NonFunctionProperties<TransformComponent>>) {\n    super(data);\n  }\n\n  public setLocalPosition(position: vec3) {\n    vec3.copy(this.localPosition, position);\n    this.setLocalDirty(true);\n  }\n\n  public setLocalScale(scale: vec3) {\n    vec3.copy(this.localScale, scale);\n    this.setLocalDirty(true);\n  }\n\n  public setLocalRotation(rotation: quat) {\n    quat.copy(this.localRotation, rotation);\n\n    this.setLocalDirty(true);\n    return this;\n  }\n\n  public isDirty() {\n    return this.dirtyFlag;\n  }\n\n  public setDirty(value = true) {\n    if (value) {\n      this.dirtyFlag |= TransformComponent.DIRTY;\n    } else {\n      this.dirtyFlag &= ~TransformComponent.DIRTY;\n    }\n  }\n\n  public isLocalDirty() {\n    return this.localDirtyFlag;\n  }\n\n  public setLocalDirty(value = true) {\n    if (value) {\n      this.localDirtyFlag |= TransformComponent.DIRTY;\n      this.setDirty(true);\n    } else {\n      this.localDirtyFlag &= ~TransformComponent.DIRTY;\n    }\n  }\n\n  public updateTransform() {\n    if (this.isLocalDirty()) {\n      this.getLocalTransform();\n    }\n    if (this.isDirty()) {\n      if (this.parent === null) {\n        mat4.copy(this.worldTransform, this.getLocalTransform());\n        this.setDirty(false);\n      }\n    }\n  }\n\n  public updateTransformWithParent(parent: TransformComponent) {\n    mat4.multiply(\n      this.worldTransform,\n      parent.worldTransform,\n      this.getLocalTransform(),\n    );\n  }\n\n  public applyTransform() {\n    this.setDirty();\n\n    mat4.getScaling(this.localScale, this.worldTransform);\n    mat4.getTranslation(this.localPosition, this.worldTransform);\n    mat4.getRotation(this.localRotation, this.worldTransform);\n  }\n\n  public clearTransform() {\n    this.setDirty();\n    this.localPosition = vec3.fromValues(0, 0, 0);\n    this.localRotation = quat.fromValues(0, 0, 0, 1);\n    this.localScale = vec3.fromValues(1, 1, 1);\n  }\n\n  public scaleLocal(scaling: vec3) {\n    this.setLocalDirty();\n    vec3.multiply(this.localScale, this.localScale, scaling);\n    return this;\n  }\n\n  public getLocalPosition() {\n    return this.localPosition;\n  }\n\n  public getLocalRotation() {\n    return this.localRotation;\n  }\n\n  public getLocalScale() {\n    return this.localScale;\n  }\n\n  public getLocalTransform() {\n    if (this.localDirtyFlag) {\n      mat4.fromRotationTranslationScale(\n        this.localTransform,\n        this.localRotation,\n        this.localPosition,\n        this.localScale,\n      );\n      this.setLocalDirty(false);\n    }\n    return this.localTransform;\n  }\n\n  public getWorldTransform() {\n    if (!this.isLocalDirty() && !this.isDirty()) {\n      return this.worldTransform;\n    }\n\n    if (this.parent) {\n      this.parent.getWorldTransform();\n    }\n\n    this.updateTransform();\n\n    return this.worldTransform;\n  }\n\n  public getPosition() {\n    mat4.getTranslation(this.position, this.worldTransform);\n    return this.position;\n  }\n\n  public getRotation() {\n    mat4.getRotation(this.rotation, this.worldTransform);\n    return this.rotation;\n  }\n\n  public getScale() {\n    mat4.getScaling(this.scaling, this.worldTransform);\n    return this.scaling;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}