{"ast":null,"code":"// src/device/DeviceTexture2D.ts\nimport { TextureUsage as DeviceTextureUsage, FilterMode, Format, MipmapFilterMode } from \"@antv/g-device-api\";\nimport { TextureUsage, gl } from \"@antv/l7-core\";\nimport { wrapModeMap } from \"./constants\";\nimport { extend3ChannelsTo4 } from \"./utils/typedarray\";\nfunction isTexture2D(t) {\n  return !!(t && t[\"texture\"]);\n}\nvar DeviceTexture2D = class {\n  constructor(device, options) {\n    this.device = device;\n    this.options = options;\n    this.isDestroy = false;\n    const {\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso,\n      mag = gl.NEAREST,\n      min = gl.NEAREST\n    } = options;\n    this.createTexture(options);\n    this.sampler = device.createSampler({\n      addressModeU: wrapModeMap[wrapS],\n      addressModeV: wrapModeMap[wrapT],\n      minFilter: min === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,\n      magFilter: mag === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,\n      mipmapFilter: MipmapFilterMode.NO_MIP,\n      // lodMinClamp: 0,\n      // lodMaxClamp: 0,\n      maxAnisotropy: aniso\n    });\n  }\n  createTexture(options) {\n    const {\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      alignment = 1,\n      usage = TextureUsage.SAMPLED,\n      // premultiplyAlpha = false,\n      unorm = false,\n      // colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n      // x = 0,\n      // y = 0,\n      // copy = false,\n      label\n    } = options;\n    let {\n      data\n    } = options;\n    this.width = width;\n    this.height = height;\n    let pixelFormat = Format.U8_RGBA_RT;\n    if (type === gl.UNSIGNED_BYTE && format === gl.RGBA) {\n      pixelFormat = unorm ? Format.U8_RGBA_NORM : Format.U8_RGBA_RT;\n    } else if (type === gl.UNSIGNED_BYTE && format === gl.LUMINANCE) {\n      pixelFormat = Format.U8_LUMINANCE;\n    } else if (type === gl.FLOAT && format === gl.LUMINANCE) {\n      pixelFormat = Format.F32_LUMINANCE;\n    } else if (type === gl.FLOAT && format === gl.RGB) {\n      if (this.device.queryVendorInfo().platformString === \"WebGPU\") {\n        if (data) {\n          data = extend3ChannelsTo4(data, 0);\n        }\n        pixelFormat = Format.F32_RGBA;\n      } else {\n        pixelFormat = Format.F32_RGB;\n      }\n    } else if (type === gl.FLOAT && format === gl.RGBA) {\n      pixelFormat = Format.F32_RGBA;\n    } else if (type === gl.FLOAT && format === gl.RED) {\n      pixelFormat = Format.F32_R;\n    } else {\n      throw new Error(`create texture error, type: ${type}, format: ${format}`);\n    }\n    this.texture = this.device.createTexture({\n      format: pixelFormat,\n      width,\n      height,\n      usage: usage === TextureUsage.SAMPLED ? DeviceTextureUsage.SAMPLED : DeviceTextureUsage.RENDER_TARGET,\n      pixelStore: {\n        unpackFlipY: flipY,\n        packAlignment: alignment\n      },\n      // mipLevelCount: usage === TextureUsage.RENDER_TARGET ? 1 : mipmap ? 1 : 0,\n      mipLevelCount: 1\n    });\n    if (label) {\n      this.device.setResourceName(this.texture, label);\n    }\n    if (data) {\n      this.texture.setImageData([data]);\n    }\n  }\n  get() {\n    return this.texture;\n  }\n  update(props) {\n    const {\n      data\n    } = props;\n    this.texture.setImageData([data]);\n  }\n  bind() {}\n  resize({\n    width,\n    height\n  }) {\n    if (this.width !== width || this.height !== height) {\n      this.destroy();\n    }\n    this.options.width = width;\n    this.options.height = height;\n    this.createTexture(this.options);\n    this.isDestroy = false;\n  }\n  getSize() {\n    return [this.width, this.height];\n  }\n  destroy() {\n    var _a;\n    if (!this.isDestroy && !this.texture.destroyed) {\n      (_a = this.texture) == null ? void 0 : _a.destroy();\n    }\n    this.isDestroy = true;\n  }\n};\nexport { DeviceTexture2D as default, isTexture2D };","map":{"version":3,"names":["TextureUsage","DeviceTextureUsage","FilterMode","Format","MipmapFilterMode","gl","wrapModeMap","extend3ChannelsTo4","isTexture2D","t","DeviceTexture2D","constructor","device","options","isDestroy","wrapS","CLAMP_TO_EDGE","wrapT","aniso","mag","NEAREST","min","createTexture","sampler","createSampler","addressModeU","addressModeV","minFilter","POINT","BILINEAR","magFilter","mipmapFilter","NO_MIP","maxAnisotropy","type","UNSIGNED_BYTE","width","height","flipY","format","RGBA","alignment","usage","SAMPLED","unorm","label","data","pixelFormat","U8_RGBA_RT","U8_RGBA_NORM","LUMINANCE","U8_LUMINANCE","FLOAT","F32_LUMINANCE","RGB","queryVendorInfo","platformString","F32_RGBA","F32_RGB","RED","F32_R","Error","texture","RENDER_TARGET","pixelStore","unpackFlipY","packAlignment","mipLevelCount","setResourceName","setImageData","get","update","props","bind","resize","destroy","getSize","_a","destroyed","default"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-renderer/es/device/DeviceTexture2D.js"],"sourcesContent":["// src/device/DeviceTexture2D.ts\nimport {\n  TextureUsage as DeviceTextureUsage,\n  FilterMode,\n  Format,\n  MipmapFilterMode\n} from \"@antv/g-device-api\";\nimport { TextureUsage, gl } from \"@antv/l7-core\";\nimport { wrapModeMap } from \"./constants\";\nimport { extend3ChannelsTo4 } from \"./utils/typedarray\";\nfunction isTexture2D(t) {\n  return !!(t && t[\"texture\"]);\n}\nvar DeviceTexture2D = class {\n  constructor(device, options) {\n    this.device = device;\n    this.options = options;\n    this.isDestroy = false;\n    const {\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso,\n      mag = gl.NEAREST,\n      min = gl.NEAREST\n    } = options;\n    this.createTexture(options);\n    this.sampler = device.createSampler({\n      addressModeU: wrapModeMap[wrapS],\n      addressModeV: wrapModeMap[wrapT],\n      minFilter: min === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,\n      magFilter: mag === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,\n      mipmapFilter: MipmapFilterMode.NO_MIP,\n      // lodMinClamp: 0,\n      // lodMaxClamp: 0,\n      maxAnisotropy: aniso\n    });\n  }\n  createTexture(options) {\n    const {\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      alignment = 1,\n      usage = TextureUsage.SAMPLED,\n      // premultiplyAlpha = false,\n      unorm = false,\n      // colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n      // x = 0,\n      // y = 0,\n      // copy = false,\n      label\n    } = options;\n    let { data } = options;\n    this.width = width;\n    this.height = height;\n    let pixelFormat = Format.U8_RGBA_RT;\n    if (type === gl.UNSIGNED_BYTE && format === gl.RGBA) {\n      pixelFormat = unorm ? Format.U8_RGBA_NORM : Format.U8_RGBA_RT;\n    } else if (type === gl.UNSIGNED_BYTE && format === gl.LUMINANCE) {\n      pixelFormat = Format.U8_LUMINANCE;\n    } else if (type === gl.FLOAT && format === gl.LUMINANCE) {\n      pixelFormat = Format.F32_LUMINANCE;\n    } else if (type === gl.FLOAT && format === gl.RGB) {\n      if (this.device.queryVendorInfo().platformString === \"WebGPU\") {\n        if (data) {\n          data = extend3ChannelsTo4(data, 0);\n        }\n        pixelFormat = Format.F32_RGBA;\n      } else {\n        pixelFormat = Format.F32_RGB;\n      }\n    } else if (type === gl.FLOAT && format === gl.RGBA) {\n      pixelFormat = Format.F32_RGBA;\n    } else if (type === gl.FLOAT && format === gl.RED) {\n      pixelFormat = Format.F32_R;\n    } else {\n      throw new Error(`create texture error, type: ${type}, format: ${format}`);\n    }\n    this.texture = this.device.createTexture({\n      format: pixelFormat,\n      width,\n      height,\n      usage: usage === TextureUsage.SAMPLED ? DeviceTextureUsage.SAMPLED : DeviceTextureUsage.RENDER_TARGET,\n      pixelStore: {\n        unpackFlipY: flipY,\n        packAlignment: alignment\n      },\n      // mipLevelCount: usage === TextureUsage.RENDER_TARGET ? 1 : mipmap ? 1 : 0,\n      mipLevelCount: 1\n    });\n    if (label) {\n      this.device.setResourceName(this.texture, label);\n    }\n    if (data) {\n      this.texture.setImageData([data]);\n    }\n  }\n  get() {\n    return this.texture;\n  }\n  update(props) {\n    const { data } = props;\n    this.texture.setImageData([data]);\n  }\n  bind() {\n  }\n  resize({ width, height }) {\n    if (this.width !== width || this.height !== height) {\n      this.destroy();\n    }\n    this.options.width = width;\n    this.options.height = height;\n    this.createTexture(this.options);\n    this.isDestroy = false;\n  }\n  getSize() {\n    return [this.width, this.height];\n  }\n  destroy() {\n    var _a;\n    if (!this.isDestroy && !this.texture.destroyed) {\n      (_a = this.texture) == null ? void 0 : _a.destroy();\n    }\n    this.isDestroy = true;\n  }\n};\nexport {\n  DeviceTexture2D as default,\n  isTexture2D\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}