{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { mat4 } from 'gl-matrix';\nexport default class CameraService {\n  constructor() {\n    _defineProperty(this, \"viewport\", void 0);\n    /**\n     * 不使用 Viewport 计算的 VP 矩阵，例如偏移坐标系场景\n     */\n    _defineProperty(this, \"overridedViewProjectionMatrix\", void 0);\n    /**\n     * ViewMatrix 逆矩阵，用于计算相机位置\n     */\n    // private viewMatrixInverse: number[];\n    _defineProperty(this, \"viewMatrixInverse\", void 0);\n    /**\n     * 相机位置\n     */\n    _defineProperty(this, \"cameraPosition\", void 0);\n  }\n  init() {\n    //\n  }\n\n  /**\n   * 同步根据相机参数创建的视口\n   */\n  update(viewport) {\n    this.viewport = viewport;\n\n    // 计算逆矩阵\n    // this.viewMatrixInverse = (mat4.invert(\n    //   mat4.create(), (this.getViewMatrix() as unknown) as mat4,\n    // ) as unknown) as number[];\n\n    this.viewMatrixInverse = mat4.create();\n    mat4.invert(this.viewMatrixInverse, viewport.getViewMatrix());\n    this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];\n  }\n  getProjectionMatrix() {\n    return this.viewport.getProjectionMatrix();\n  }\n  getModelMatrix() {\n    return this.viewport.getModelMatrix();\n  }\n  getViewMatrix() {\n    return this.viewport.getViewMatrix();\n  }\n  getViewMatrixUncentered() {\n    return this.viewport.getViewMatrixUncentered();\n  }\n  getViewProjectionMatrixUncentered() {\n    return this.viewport.getViewProjectionMatrixUncentered();\n  }\n  getViewProjectionMatrix() {\n    return this.overridedViewProjectionMatrix || this.viewport.getViewProjectionMatrix();\n  }\n  getZoom() {\n    return this.viewport.getZoom();\n  }\n  getZoomScale() {\n    return this.viewport.getZoomScale();\n  }\n  getCenter() {\n    const [lng, lat] = this.viewport.getCenter();\n    return [lng, lat];\n  }\n  getFocalDistance() {\n    return this.viewport.getFocalDistance();\n  }\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n  projectFlat(lngLat, scale) {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n\n  /**\n   * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵\n   */\n  setViewProjectionMatrix(viewProjectionMatrix) {\n    this.overridedViewProjectionMatrix = viewProjectionMatrix;\n  }\n}","map":{"version":3,"names":["_defineProperty","mat4","CameraService","constructor","init","update","viewport","viewMatrixInverse","create","invert","getViewMatrix","cameraPosition","getProjectionMatrix","getModelMatrix","getViewMatrixUncentered","getViewProjectionMatrixUncentered","getViewProjectionMatrix","overridedViewProjectionMatrix","getZoom","getZoomScale","getCenter","lng","lat","getFocalDistance","getCameraPosition","projectFlat","lngLat","scale","setViewProjectionMatrix","viewProjectionMatrix"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/camera/CameraService.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { mat4 } from 'gl-matrix';\nexport default class CameraService {\n  constructor() {\n    _defineProperty(this, \"viewport\", void 0);\n    /**\n     * 不使用 Viewport 计算的 VP 矩阵，例如偏移坐标系场景\n     */\n    _defineProperty(this, \"overridedViewProjectionMatrix\", void 0);\n    /**\n     * ViewMatrix 逆矩阵，用于计算相机位置\n     */\n    // private viewMatrixInverse: number[];\n    _defineProperty(this, \"viewMatrixInverse\", void 0);\n    /**\n     * 相机位置\n     */\n    _defineProperty(this, \"cameraPosition\", void 0);\n  }\n  init() {\n    //\n  }\n\n  /**\n   * 同步根据相机参数创建的视口\n   */\n  update(viewport) {\n    this.viewport = viewport;\n\n    // 计算逆矩阵\n    // this.viewMatrixInverse = (mat4.invert(\n    //   mat4.create(), (this.getViewMatrix() as unknown) as mat4,\n    // ) as unknown) as number[];\n\n    this.viewMatrixInverse = mat4.create();\n    mat4.invert(this.viewMatrixInverse, viewport.getViewMatrix());\n    this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];\n  }\n  getProjectionMatrix() {\n    return this.viewport.getProjectionMatrix();\n  }\n  getModelMatrix() {\n    return this.viewport.getModelMatrix();\n  }\n  getViewMatrix() {\n    return this.viewport.getViewMatrix();\n  }\n  getViewMatrixUncentered() {\n    return this.viewport.getViewMatrixUncentered();\n  }\n  getViewProjectionMatrixUncentered() {\n    return this.viewport.getViewProjectionMatrixUncentered();\n  }\n  getViewProjectionMatrix() {\n    return this.overridedViewProjectionMatrix || this.viewport.getViewProjectionMatrix();\n  }\n  getZoom() {\n    return this.viewport.getZoom();\n  }\n  getZoomScale() {\n    return this.viewport.getZoomScale();\n  }\n  getCenter() {\n    const [lng, lat] = this.viewport.getCenter();\n    return [lng, lat];\n  }\n  getFocalDistance() {\n    return this.viewport.getFocalDistance();\n  }\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n  projectFlat(lngLat, scale) {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n\n  /**\n   * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵\n   */\n  setViewProjectionMatrix(viewProjectionMatrix) {\n    this.overridedViewProjectionMatrix = viewProjectionMatrix;\n  }\n}"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,SAASC,IAAI,QAAQ,WAAW;AAChC,eAAe,MAAMC,aAAa,CAAC;EACjCC,WAAWA,CAAA,EAAG;IACZH,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IACzC;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,+BAA+B,EAAE,KAAK,CAAC,CAAC;IAC9D;AACJ;AACA;IACI;IACAA,eAAe,CAAC,IAAI,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;IAClD;AACJ;AACA;IACIA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;EACjD;EACAI,IAAIA,CAAA,EAAG;IACL;EAAA;;EAGF;AACF;AACA;EACEC,MAAMA,CAACC,QAAQ,EAAE;IACf,IAAI,CAACA,QAAQ,GAAGA,QAAQ;;IAExB;IACA;IACA;IACA;;IAEA,IAAI,CAACC,iBAAiB,GAAGN,IAAI,CAACO,MAAM,CAAC,CAAC;IACtCP,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACF,iBAAiB,EAAED,QAAQ,CAACI,aAAa,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACC,cAAc,GAAG,CAAC,IAAI,CAACJ,iBAAiB,CAAC,EAAE,CAAC,EAAE,IAAI,CAACA,iBAAiB,CAAC,EAAE,CAAC,EAAE,IAAI,CAACA,iBAAiB,CAAC,EAAE,CAAC,CAAC;EAC5G;EACAK,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACN,QAAQ,CAACM,mBAAmB,CAAC,CAAC;EAC5C;EACAC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACP,QAAQ,CAACO,cAAc,CAAC,CAAC;EACvC;EACAH,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACJ,QAAQ,CAACI,aAAa,CAAC,CAAC;EACtC;EACAI,uBAAuBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACR,QAAQ,CAACQ,uBAAuB,CAAC,CAAC;EAChD;EACAC,iCAAiCA,CAAA,EAAG;IAClC,OAAO,IAAI,CAACT,QAAQ,CAACS,iCAAiC,CAAC,CAAC;EAC1D;EACAC,uBAAuBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACC,6BAA6B,IAAI,IAAI,CAACX,QAAQ,CAACU,uBAAuB,CAAC,CAAC;EACtF;EACAE,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACZ,QAAQ,CAACY,OAAO,CAAC,CAAC;EAChC;EACAC,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACb,QAAQ,CAACa,YAAY,CAAC,CAAC;EACrC;EACAC,SAASA,CAAA,EAAG;IACV,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAG,IAAI,CAAChB,QAAQ,CAACc,SAAS,CAAC,CAAC;IAC5C,OAAO,CAACC,GAAG,EAAEC,GAAG,CAAC;EACnB;EACAC,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACjB,QAAQ,CAACiB,gBAAgB,CAAC,CAAC;EACzC;EACAC,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACb,cAAc;EAC5B;EACAc,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACrB,QAAQ,CAACmB,WAAW,CAACC,MAAM,EAAEC,KAAK,CAAC;EACjD;;EAEA;AACF;AACA;EACEC,uBAAuBA,CAACC,oBAAoB,EAAE;IAC5C,IAAI,CAACZ,6BAA6B,GAAGY,oBAAoB;EAC3D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}