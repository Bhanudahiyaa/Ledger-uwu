{"ast":null,"code":"var add = require('gl-vec2/add');\nvar set = require('gl-vec2/set');\nvar normalize = require('gl-vec2/normalize');\nvar subtract = require('gl-vec2/subtract');\nvar dot = require('gl-vec2/dot');\nvar tmp = [0, 0];\nmodule.exports.computeMiter = function computeMiter(tangent, miter, lineA, lineB, halfThick) {\n  //get tangent line\n  add(tangent, lineA, lineB);\n  normalize(tangent, tangent);\n\n  //get miter as a unit vector\n  set(miter, -tangent[1], tangent[0]);\n  set(tmp, -lineA[1], lineA[0]);\n\n  //get the necessary length of our miter\n  return halfThick / dot(miter, tmp);\n};\nmodule.exports.normal = function normal(out, dir) {\n  //get perpendicular\n  set(out, -dir[1], dir[0]);\n  return out;\n};\nmodule.exports.direction = function direction(out, a, b) {\n  //get unit dir of two lines\n  subtract(out, a, b);\n  normalize(out, out);\n  return out;\n};","map":{"version":3,"names":["add","require","set","normalize","subtract","dot","tmp","module","exports","computeMiter","tangent","miter","lineA","lineB","halfThick","normal","out","dir","direction","a","b"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/polyline-miter-util/index.js"],"sourcesContent":["var add = require('gl-vec2/add')\nvar set = require('gl-vec2/set')\nvar normalize = require('gl-vec2/normalize')\nvar subtract = require('gl-vec2/subtract')\nvar dot = require('gl-vec2/dot')\n\nvar tmp = [0, 0]\n\nmodule.exports.computeMiter = function computeMiter(tangent, miter, lineA, lineB, halfThick) {\n    //get tangent line\n    add(tangent, lineA, lineB)\n    normalize(tangent, tangent)\n\n    //get miter as a unit vector\n    set(miter, -tangent[1], tangent[0])\n    set(tmp, -lineA[1], lineA[0])\n\n    //get the necessary length of our miter\n    return halfThick / dot(miter, tmp)\n}\n\nmodule.exports.normal = function normal(out, dir) {\n    //get perpendicular\n    set(out, -dir[1], dir[0])\n    return out\n}\n\nmodule.exports.direction = function direction(out, a, b) {\n    //get unit dir of two lines\n    subtract(out, a, b)\n    normalize(out, out)\n    return out\n}"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,aAAa,CAAC;AAChC,IAAIC,GAAG,GAAGD,OAAO,CAAC,aAAa,CAAC;AAChC,IAAIE,SAAS,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAC5C,IAAIG,QAAQ,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC1C,IAAII,GAAG,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAEhC,IAAIK,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAEhBC,MAAM,CAACC,OAAO,CAACC,YAAY,GAAG,SAASA,YAAYA,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAE;EACzF;EACAd,GAAG,CAACU,OAAO,EAAEE,KAAK,EAAEC,KAAK,CAAC;EAC1BV,SAAS,CAACO,OAAO,EAAEA,OAAO,CAAC;;EAE3B;EACAR,GAAG,CAACS,KAAK,EAAE,CAACD,OAAO,CAAC,CAAC,CAAC,EAAEA,OAAO,CAAC,CAAC,CAAC,CAAC;EACnCR,GAAG,CAACI,GAAG,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,OAAOE,SAAS,GAAGT,GAAG,CAACM,KAAK,EAAEL,GAAG,CAAC;AACtC,CAAC;AAEDC,MAAM,CAACC,OAAO,CAACO,MAAM,GAAG,SAASA,MAAMA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC9C;EACAf,GAAG,CAACc,GAAG,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;EACzB,OAAOD,GAAG;AACd,CAAC;AAEDT,MAAM,CAACC,OAAO,CAACU,SAAS,GAAG,SAASA,SAASA,CAACF,GAAG,EAAEG,CAAC,EAAEC,CAAC,EAAE;EACrD;EACAhB,QAAQ,CAACY,GAAG,EAAEG,CAAC,EAAEC,CAAC,CAAC;EACnBjB,SAAS,CAACa,GAAG,EAAEA,GAAG,CAAC;EACnB,OAAOA,GAAG;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}