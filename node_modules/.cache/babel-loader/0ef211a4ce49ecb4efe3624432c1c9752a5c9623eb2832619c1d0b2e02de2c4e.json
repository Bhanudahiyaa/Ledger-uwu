{"ast":null,"code":"import { aProjectFlat, calculateCentroid, calculatePointsCenterAndRadius, lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\n// @ts-ignore\nimport { vec3 } from 'gl-matrix';\nimport { EARTH_RADIUS, EARTH_RADIUS_OUTER, EARTH_SEGMENTS, lglt2xyz, primitiveSphere } from \"../earth/utils\";\nimport ExtrudePolyline from \"../utils/extrude_polyline\";\nimport { geometryShape } from \"./shape/Path\";\nimport extrudePolygon, { extrude_PolygonNormal, fillPolygon } from \"./shape/extrude\";\nimport { getPolygonSurfaceIndices } from \"./utils\";\nconst GeometryCache = {};\n\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\n\nexport function PointFillTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates, ...coordinates, ...coordinates, ...coordinates],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\n/**\n * 计算2D 填充点图顶点 (地球模式)\n * @param feature 映射feature\n */\nexport function GlobelPointFillTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  const xyz = lglt2xyz(coordinates);\n  return {\n    vertices: [...xyz, ...xyz, ...xyz, ...xyz],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: xyz.length\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature) {\n  const {\n    shape\n  } = feature;\n  const {\n    positions,\n    index,\n    normals\n  } = getGeometry(shape, false);\n  return {\n    vertices: positions,\n    indices: index,\n    normals,\n    size: 5\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates],\n    indices: [0],\n    size: coordinates.length\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  const line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  let path = coordinates;\n  if (path[0] && !Array.isArray(path[0][0])) {\n    path = [coordinates];\n  }\n  path.forEach(item => {\n    line.extrude(item);\n  });\n  const linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function FlowLineFillTriangulation(feature) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const tin = 1;\n  const tout = 1.0;\n  return {\n    vertices: [1, 0, 0, ...coord,\n    // 0\n    1, 2, -3,\n    // mapbox 为正\n    ...coord,\n    // 1\n    1, 1, -3,\n    // mapbox 为正\n    ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord,\n    // 4\n    1, 0, 0, ...coord,\n    // 0\n    1, 2, -3,\n    // mapbox 为正\n    ...coord,\n    // 1\n    1, 1, -3,\n    // // mapbox 为正\n    ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord // 4\n    ],\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function SimpleLineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      normals: [],\n      size: 6,\n      count: 0\n    };\n  }\n  const {\n    results,\n    totalDistance\n  } = getSimpleLineVertices(coordinates);\n  results.map(point => {\n    pos.push(point[0], point[1], point[2], point[3], 0, totalDistance);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    normals: [],\n    size: 6,\n    count: results.length\n  };\n}\nexport function TileSimpleLineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 4,\n      count: 0\n    };\n  }\n  const {\n    results\n  } = getTileSimpleLineVertices(coordinates);\n  results.map(point => {\n    pos.push(point[0], point[1], point[2], point[3]);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    size: 4,\n    count: results.length\n  };\n}\nfunction lineSegmentDistance(b1, a1) {\n  const dx = a1[0] - b1[0];\n  const dy = a1[1] - b1[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction pushDis(point, n) {\n  if (point.length < 3) {\n    point.push(0);\n  }\n  if (n !== undefined) {\n    point.push(n);\n  }\n  return point;\n}\nfunction getSimpleLineVertices(coordinates) {\n  let points = coordinates;\n  if (Array.isArray(points) && Array.isArray(points[0]) && Array.isArray(points[0][0])) {\n    // @ts-ignore\n    points = coordinates.flat();\n  }\n  //修改计算距离的方式,与普通线的计算方式保持一致 edit by huyang 20231214\n  let distance = 0;\n  if (points.length < 2) {\n    return {\n      results: points,\n      totalDistance: 0\n    };\n  } else {\n    const results = [];\n    const point = pushDis(points[0], distance);\n    results.push(point);\n    for (let i = 1; i < points.length - 1; i++) {\n      const subDistance = lineSegmentDistance(aProjectFlat(points[i - 1]), aProjectFlat(points[i]));\n      distance += subDistance;\n      const mulPoint = pushDis(points[i], distance);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    const pointDistance = lineSegmentDistance(aProjectFlat(points[points.length - 2]), aProjectFlat(points[points.length - 1]));\n    distance += pointDistance;\n    results.push(pushDis(points[points.length - 1], distance));\n    return {\n      results,\n      totalDistance: distance\n    };\n  }\n}\nfunction getTileSimpleLineVertices(points) {\n  if (points.length < 2) {\n    return {\n      results: points\n    };\n  } else {\n    const results = [];\n    const point = pushDis(points[0]);\n    results.push(point);\n    for (let i = 1; i < points.length - 1; i++) {\n      const mulPoint = pushDis(points[i]);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    results.push(pushDis(points[points.length - 1]));\n    return {\n      results\n    };\n  }\n}\nexport function polygonTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const flattengeo = earcut.flatten(coordinates);\n  const {\n    vertices,\n    dimensions,\n    holes\n  } = flattengeo;\n  const indices = getPolygonSurfaceIndices(vertices, holes, dimensions);\n  return {\n    indices,\n    vertices,\n    size: dimensions\n  };\n}\n\n// 构建几何图形（带有中心点和大小）\nexport function polygonTriangulationWithCenter(feature) {\n  const {\n    indices,\n    vertices,\n    size\n  } = polygonTriangulation(feature);\n  return {\n    indices: indices,\n    vertices: getVerticesWithCenter(vertices),\n    size: size + 4\n  };\n}\nfunction getVerticesWithCenter(vertices) {\n  const verticesWithCenter = [];\n  const {\n    center,\n    radius\n  } = calculatePointsCenterAndRadius(vertices);\n  for (let i = 0; i < vertices.length; i += 2) {\n    const lng = vertices[i];\n    const lat = vertices[i + 1];\n    verticesWithCenter.push(lng, lat, 0, ...center, radius);\n  }\n  return verticesWithCenter;\n}\nexport function PolygonExtrudeTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  const {\n    positions,\n    index,\n    normals\n  } = extrude_PolygonNormal(coordinates, true);\n  return {\n    vertices: positions,\n    // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals,\n    size: 5\n  };\n}\nexport function HeatmapGridTriangulation(feature) {\n  const {\n    shape\n  } = feature;\n  const {\n    positions,\n    index\n  } = getHeatmapGeometry(shape);\n  return {\n    vertices: positions,\n    // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  // [ x, y, z. uv.x, uv.y]\n  const positions = [...coordinates[0], 0, 0, 0, ...coordinates[1], 0, 1, 0, ...coordinates[2], 0, 1, 1, ...coordinates[3], 0, 0, 1];\n  const indexs = [0, 1, 2, 0, 2, 3];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5\n  };\n}\n\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(feature, styleOption) {\n  // @ts-ignore\n  const {\n    segmentNumber = 30\n  } = styleOption;\n  const coordinates = feature.coordinates;\n  const positions = [];\n  const indexArray = [];\n  for (let i = 0; i < segmentNumber; i++) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(i, 1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1], i, -1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1]);\n    if (i !== segmentNumber - 1) {\n      indexArray.push(...[0, 1, 2, 1, 3, 2].map(v => {\n        return i * 2 + v;\n      }));\n    }\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7\n  };\n}\n\n/**\n * 构建热力图密度图的顶点\n * @param feature\n * @returns\n */\nexport function HeatmapTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  const dir = addDir(-1, 1);\n  const dir1 = addDir(1, 1);\n  const dir2 = addDir(-1, -1);\n  const dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  const positions = [...coordinates, ...dir, ...coordinates, ...dir2, ...coordinates, ...dir3, ...coordinates, ...dir1];\n  const indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape, needFlat = false) {\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  const path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.cylinder();\n  const geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\nexport function computeVertexNormals(positions, indexArray, dim = 3, needFlat = false) {\n  const normals = new Float32Array(positions.length / dim * 3);\n  let vA;\n  let vB;\n  let vC;\n  const cb = vec3.create();\n  const ab = vec3.create();\n  const normal = vec3.create();\n  for (let i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    let p1 = [positions[vA], positions[vA + 1]];\n    let p2 = [positions[vB], positions[vB + 1]];\n    let p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    const [ax, ay] = p1;\n    const pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    const [bx, by] = p2;\n    const pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    const [cx, cy] = p3;\n    const pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\nfunction normalizeNormals(normals) {\n  for (let i = 0, li = normals.length; i < li; i += 3) {\n    const normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    const newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\nexport function checkIsClosed(points) {\n  const p1 = points[0][0];\n  const p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\nfunction getHeatmapGeometry(shape) {\n  const shape3d = ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'];\n  const path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.circle();\n  const geometry = shape3d.indexOf(shape) === -1 ? fillPolygon([path]) : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX, dirY) {\n  const x = (dirX + 1) / 2;\n  const y = (dirY + 1) / 2;\n  return [x, y];\n}\n\n/**\n * 构建地球三角网格\n * @returns\n */\nexport function earthTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS, {\n    segments: EARTH_SEGMENTS\n  });\n  const {\n    positionsArr,\n    indicesArr,\n    normalArr\n  } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}\nexport function earthOuterTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS + EARTH_RADIUS_OUTER, {\n    segments: EARTH_SEGMENTS\n  });\n  const {\n    positionsArr,\n    indicesArr,\n    normalArr\n  } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}","map":{"version":3,"names":["aProjectFlat","calculateCentroid","calculatePointsCenterAndRadius","lngLatToMeters","earcut","vec3","EARTH_RADIUS","EARTH_RADIUS_OUTER","EARTH_SEGMENTS","lglt2xyz","primitiveSphere","ExtrudePolyline","geometryShape","extrudePolygon","extrude_PolygonNormal","fillPolygon","getPolygonSurfaceIndices","GeometryCache","PointFillTriangulation","feature","coordinates","vertices","indices","size","length","GlobelPointFillTriangulation","xyz","PointExtrudeTriangulation","shape","positions","index","normals","getGeometry","PointImageTriangulation","LineTriangulation","line","dash","join","path","Array","isArray","forEach","item","extrude","linebuffer","complex","indexes","FlowLineFillTriangulation","coord","flat","tin","tout","SimpleLineTriangulation","pos","count","results","totalDistance","getSimpleLineVertices","map","point","push","TileSimpleLineTriangulation","getTileSimpleLineVertices","lineSegmentDistance","b1","a1","dx","dy","Math","sqrt","pushDis","n","undefined","points","distance","i","subDistance","mulPoint","pointDistance","polygonTriangulation","flattengeo","flatten","dimensions","holes","polygonTriangulationWithCenter","getVerticesWithCenter","verticesWithCenter","center","radius","lng","lat","PolygonExtrudeTriangulation","HeatmapGridTriangulation","getHeatmapGeometry","RasterImageTriangulation","indexs","LineArcTriangulation","styleOption","segmentNumber","indexArray","v","HeatmapTriangulation","dir","addDir","dir1","dir2","dir3","needFlat","cylinder","geometry","computeVertexNormals","dim","Float32Array","vA","vB","vC","cb","create","ab","normal","li","p1","p2","p3","ax","ay","pA","fromValues","bx","by","pB","cx","cy","pC","sub","cross","normalizeNormals","newNormal","normalize","set","checkIsClosed","shape3d","circle","indexOf","dirX","dirY","x","y","earthTriangulation","earthmesh","segments","positionsArr","indicesArr","normalArr","earthOuterTriangulation"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/core/triangulation.js"],"sourcesContent":["import { aProjectFlat, calculateCentroid, calculatePointsCenterAndRadius, lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\n// @ts-ignore\nimport { vec3 } from 'gl-matrix';\nimport { EARTH_RADIUS, EARTH_RADIUS_OUTER, EARTH_SEGMENTS, lglt2xyz, primitiveSphere } from \"../earth/utils\";\nimport ExtrudePolyline from \"../utils/extrude_polyline\";\nimport { geometryShape } from \"./shape/Path\";\nimport extrudePolygon, { extrude_PolygonNormal, fillPolygon } from \"./shape/extrude\";\nimport { getPolygonSurfaceIndices } from \"./utils\";\nconst GeometryCache = {};\n\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\n\nexport function PointFillTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates, ...coordinates, ...coordinates, ...coordinates],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\n/**\n * 计算2D 填充点图顶点 (地球模式)\n * @param feature 映射feature\n */\nexport function GlobelPointFillTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  const xyz = lglt2xyz(coordinates);\n  return {\n    vertices: [...xyz, ...xyz, ...xyz, ...xyz],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: xyz.length\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature) {\n  const {\n    shape\n  } = feature;\n  const {\n    positions,\n    index,\n    normals\n  } = getGeometry(shape, false);\n  return {\n    vertices: positions,\n    indices: index,\n    normals,\n    size: 5\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates],\n    indices: [0],\n    size: coordinates.length\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  const line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  let path = coordinates;\n  if (path[0] && !Array.isArray(path[0][0])) {\n    path = [coordinates];\n  }\n  path.forEach(item => {\n    line.extrude(item);\n  });\n  const linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function FlowLineFillTriangulation(feature) {\n  // @ts-ignore\n  const coord = feature.coordinates.flat();\n  const tin = 1;\n  const tout = 1.0;\n  return {\n    vertices: [1, 0, 0, ...coord,\n    // 0\n    1, 2, -3,\n    // mapbox 为正\n    ...coord,\n    // 1\n    1, 1, -3,\n    // mapbox 为正\n    ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord,\n    // 4\n    1, 0, 0, ...coord,\n    // 0\n    1, 2, -3,\n    // mapbox 为正\n    ...coord,\n    // 1\n    1, 1, -3,\n    // // mapbox 为正\n    ...coord,\n    // 2\n    0, 1, 0, ...coord,\n    // 3\n    0, 0, 0, ...coord // 4\n    ],\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function SimpleLineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      normals: [],\n      size: 6,\n      count: 0\n    };\n  }\n  const {\n    results,\n    totalDistance\n  } = getSimpleLineVertices(coordinates);\n  results.map(point => {\n    pos.push(point[0], point[1], point[2], point[3], 0, totalDistance);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    normals: [],\n    size: 6,\n    count: results.length\n  };\n}\nexport function TileSimpleLineTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 4,\n      count: 0\n    };\n  }\n  const {\n    results\n  } = getTileSimpleLineVertices(coordinates);\n  results.map(point => {\n    pos.push(point[0], point[1], point[2], point[3]);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    size: 4,\n    count: results.length\n  };\n}\nfunction lineSegmentDistance(b1, a1) {\n  const dx = a1[0] - b1[0];\n  const dy = a1[1] - b1[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction pushDis(point, n) {\n  if (point.length < 3) {\n    point.push(0);\n  }\n  if (n !== undefined) {\n    point.push(n);\n  }\n  return point;\n}\nfunction getSimpleLineVertices(coordinates) {\n  let points = coordinates;\n  if (Array.isArray(points) && Array.isArray(points[0]) && Array.isArray(points[0][0])) {\n    // @ts-ignore\n    points = coordinates.flat();\n  }\n  //修改计算距离的方式,与普通线的计算方式保持一致 edit by huyang 20231214\n  let distance = 0;\n  if (points.length < 2) {\n    return {\n      results: points,\n      totalDistance: 0\n    };\n  } else {\n    const results = [];\n    const point = pushDis(points[0], distance);\n    results.push(point);\n    for (let i = 1; i < points.length - 1; i++) {\n      const subDistance = lineSegmentDistance(aProjectFlat(points[i - 1]), aProjectFlat(points[i]));\n      distance += subDistance;\n      const mulPoint = pushDis(points[i], distance);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    const pointDistance = lineSegmentDistance(aProjectFlat(points[points.length - 2]), aProjectFlat(points[points.length - 1]));\n    distance += pointDistance;\n    results.push(pushDis(points[points.length - 1], distance));\n    return {\n      results,\n      totalDistance: distance\n    };\n  }\n}\nfunction getTileSimpleLineVertices(points) {\n  if (points.length < 2) {\n    return {\n      results: points\n    };\n  } else {\n    const results = [];\n    const point = pushDis(points[0]);\n    results.push(point);\n    for (let i = 1; i < points.length - 1; i++) {\n      const mulPoint = pushDis(points[i]);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    results.push(pushDis(points[points.length - 1]));\n    return {\n      results\n    };\n  }\n}\nexport function polygonTriangulation(feature) {\n  const {\n    coordinates\n  } = feature;\n  const flattengeo = earcut.flatten(coordinates);\n  const {\n    vertices,\n    dimensions,\n    holes\n  } = flattengeo;\n  const indices = getPolygonSurfaceIndices(vertices, holes, dimensions);\n  return {\n    indices,\n    vertices,\n    size: dimensions\n  };\n}\n\n// 构建几何图形（带有中心点和大小）\nexport function polygonTriangulationWithCenter(feature) {\n  const {\n    indices,\n    vertices,\n    size\n  } = polygonTriangulation(feature);\n  return {\n    indices: indices,\n    vertices: getVerticesWithCenter(vertices),\n    size: size + 4\n  };\n}\nfunction getVerticesWithCenter(vertices) {\n  const verticesWithCenter = [];\n  const {\n    center,\n    radius\n  } = calculatePointsCenterAndRadius(vertices);\n  for (let i = 0; i < vertices.length; i += 2) {\n    const lng = vertices[i];\n    const lat = vertices[i + 1];\n    verticesWithCenter.push(lng, lat, 0, ...center, radius);\n  }\n  return verticesWithCenter;\n}\nexport function PolygonExtrudeTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  const {\n    positions,\n    index,\n    normals\n  } = extrude_PolygonNormal(coordinates, true);\n  return {\n    vertices: positions,\n    // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals,\n    size: 5\n  };\n}\nexport function HeatmapGridTriangulation(feature) {\n  const {\n    shape\n  } = feature;\n  const {\n    positions,\n    index\n  } = getHeatmapGeometry(shape);\n  return {\n    vertices: positions,\n    // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  // [ x, y, z. uv.x, uv.y]\n  const positions = [...coordinates[0], 0, 0, 0, ...coordinates[1], 0, 1, 0, ...coordinates[2], 0, 1, 1, ...coordinates[3], 0, 0, 1];\n  const indexs = [0, 1, 2, 0, 2, 3];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5\n  };\n}\n\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(feature, styleOption) {\n  // @ts-ignore\n  const {\n    segmentNumber = 30\n  } = styleOption;\n  const coordinates = feature.coordinates;\n  const positions = [];\n  const indexArray = [];\n  for (let i = 0; i < segmentNumber; i++) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(i, 1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1], i, -1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1]);\n    if (i !== segmentNumber - 1) {\n      indexArray.push(...[0, 1, 2, 1, 3, 2].map(v => {\n        return i * 2 + v;\n      }));\n    }\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7\n  };\n}\n\n/**\n * 构建热力图密度图的顶点\n * @param feature\n * @returns\n */\nexport function HeatmapTriangulation(feature) {\n  const coordinates = feature.coordinates;\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  const dir = addDir(-1, 1);\n  const dir1 = addDir(1, 1);\n  const dir2 = addDir(-1, -1);\n  const dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  const positions = [...coordinates, ...dir, ...coordinates, ...dir2, ...coordinates, ...dir3, ...coordinates, ...dir1];\n  const indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape, needFlat = false) {\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  const path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.cylinder();\n  const geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\nexport function computeVertexNormals(positions, indexArray, dim = 3, needFlat = false) {\n  const normals = new Float32Array(positions.length / dim * 3);\n  let vA;\n  let vB;\n  let vC;\n  const cb = vec3.create();\n  const ab = vec3.create();\n  const normal = vec3.create();\n  for (let i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    let p1 = [positions[vA], positions[vA + 1]];\n    let p2 = [positions[vB], positions[vB + 1]];\n    let p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    const [ax, ay] = p1;\n    const pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    const [bx, by] = p2;\n    const pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    const [cx, cy] = p3;\n    const pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\nfunction normalizeNormals(normals) {\n  for (let i = 0, li = normals.length; i < li; i += 3) {\n    const normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    const newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\nexport function checkIsClosed(points) {\n  const p1 = points[0][0];\n  const p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\nfunction getHeatmapGeometry(shape) {\n  const shape3d = ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'];\n  const path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.circle();\n  const geometry = shape3d.indexOf(shape) === -1 ? fillPolygon([path]) : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX, dirY) {\n  const x = (dirX + 1) / 2;\n  const y = (dirY + 1) / 2;\n  return [x, y];\n}\n\n/**\n * 构建地球三角网格\n * @returns\n */\nexport function earthTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS, {\n    segments: EARTH_SEGMENTS\n  });\n  const {\n    positionsArr,\n    indicesArr,\n    normalArr\n  } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}\nexport function earthOuterTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS + EARTH_RADIUS_OUTER, {\n    segments: EARTH_SEGMENTS\n  });\n  const {\n    positionsArr,\n    indicesArr,\n    normalArr\n  } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}