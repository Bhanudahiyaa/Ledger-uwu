{"ast":null,"code":"import { Util } from '../../global';\nimport { NumberExt } from '../../util';\nimport { Angle, Point } from '../../geometry';\nimport { Widget } from '../common';\nimport { notify } from './util';\nexport class Transform extends Widget {\n  get node() {\n    return this.cell;\n  }\n  get containerClassName() {\n    return this.prefixClassName('widget-transform');\n  }\n  get resizeClassName() {\n    return `${this.containerClassName}-resize`;\n  }\n  get rotateClassName() {\n    return `${this.containerClassName}-rotate`;\n  }\n  init(options) {\n    this.options = Object.assign(Object.assign({}, Private.defaultOptions), options);\n    this.render();\n    this.startListening();\n  }\n  startListening() {\n    this.delegateEvents({\n      [`mousedown .${this.resizeClassName}`]: 'startResizing',\n      [`touchstart .${this.resizeClassName}`]: 'startResizing',\n      [`mousedown .${this.rotateClassName}`]: 'startRotating',\n      [`touchstart .${this.rotateClassName}`]: 'startRotating'\n    });\n    this.model.on('*', this.update, this);\n    this.graph.on('scale', this.update, this);\n    this.graph.on('translate', this.update, this);\n    this.node.on('removed', this.remove, this);\n    this.model.on('reseted', this.remove, this);\n    this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.startListening();\n  }\n  stopListening() {\n    this.undelegateEvents();\n    this.model.off('*', this.update, this);\n    this.graph.off('scale', this.update, this);\n    this.graph.off('translate', this.update, this);\n    this.node.off('removed', this.remove, this);\n    this.model.off('reseted', this.remove, this);\n    this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.stopListening();\n  }\n  renderHandles() {\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container);\n    const $knob = this.$('<div/>').prop('draggable', false);\n    const $rotate = $knob.clone().addClass(this.rotateClassName);\n    const $resizes = Private.POSITIONS.map(pos => {\n      return $knob.clone().addClass(this.resizeClassName).attr('data-position', pos);\n    });\n    this.empty();\n    this.$container.append($resizes, $rotate);\n  }\n  render() {\n    this.renderHandles();\n    this.view.addClass(Private.NODE_CLS);\n    this.$container.addClass(this.containerClassName).toggleClass('no-orth-resize', this.options.preserveAspectRatio || !this.options.orthogonalResizing).toggleClass('no-resize', !this.options.resizable).toggleClass('no-rotate', !this.options.rotatable);\n    if (this.options.className) {\n      this.$container.addClass(this.options.className);\n    }\n    this.graph.container.appendChild(this.container);\n    return this.update();\n  }\n  update() {\n    const ctm = this.graph.matrix();\n    const bbox = this.node.getBBox();\n    bbox.x *= ctm.a;\n    bbox.x += ctm.e;\n    bbox.y *= ctm.d;\n    bbox.y += ctm.f;\n    bbox.width *= ctm.a;\n    bbox.height *= ctm.d;\n    const angle = Angle.normalize(this.node.getAngle());\n    const transform = angle !== 0 ? `rotate(${angle}deg)` : '';\n    this.$container.css({\n      transform,\n      width: bbox.width,\n      height: bbox.height,\n      left: bbox.x,\n      top: bbox.y\n    });\n    this.updateResizerDirections();\n    return this;\n  }\n  remove() {\n    this.view.removeClass(Private.NODE_CLS);\n    return super.remove();\n  }\n  onKnobMouseDown() {\n    this.startHandle();\n  }\n  onKnobMouseUp() {\n    this.stopHandle();\n  }\n  updateResizerDirections() {\n    // Update the directions on the resizer divs while the node being rotated.\n    // The directions are represented by cardinal points (N,S,E,W). For example\n    // the div originally pointed to north needs to be changed to point to south\n    // if the node was rotated by 180 degrees.\n    const angle = Angle.normalize(this.node.getAngle());\n    const shift = Math.floor(angle * (Private.DIRECTIONS.length / 360));\n    if (shift !== this.prevShift) {\n      // Create the current directions array based on the calculated shift.\n      const directions = Private.DIRECTIONS.slice(shift).concat(Private.DIRECTIONS.slice(0, shift));\n      const className = dir => `${this.containerClassName}-cursor-${dir}`;\n      this.$container.find(`.${this.resizeClassName}`).removeClass(Private.DIRECTIONS.map(dir => className(dir)).join(' ')).each((index, elem) => {\n        this.$(elem).addClass(className(directions[index]));\n      });\n      this.prevShift = shift;\n    }\n  }\n  getTrueDirection(dir) {\n    const angle = Angle.normalize(this.node.getAngle());\n    let index = Private.POSITIONS.indexOf(dir);\n    index += Math.floor(angle * (Private.POSITIONS.length / 360));\n    index %= Private.POSITIONS.length;\n    return Private.POSITIONS[index];\n  }\n  toValidResizeDirection(dir) {\n    return {\n      top: 'top-left',\n      bottom: 'bottom-right',\n      left: 'bottom-left',\n      right: 'top-right'\n    }[dir] || dir;\n  }\n  startResizing(evt) {\n    evt.stopPropagation();\n    this.model.startBatch('resize', {\n      cid: this.cid\n    });\n    const dir = this.$(evt.target).attr('data-position');\n    const view = this.graph.findViewByCell(this.node);\n    this.prepareResizing(evt, dir);\n    this.startAction(evt);\n    notify('node:resize:mousedown', evt, view);\n  }\n  prepareResizing(evt, relativeDirection) {\n    const trueDirection = this.getTrueDirection(relativeDirection);\n    let rx = 0;\n    let ry = 0;\n    relativeDirection.split('-').forEach(direction => {\n      rx = {\n        left: -1,\n        right: 1\n      }[direction] || rx;\n      ry = {\n        top: -1,\n        bottom: 1\n      }[direction] || ry;\n    });\n    const direction = this.toValidResizeDirection(relativeDirection);\n    const selector = {\n      'top-right': 'bottomLeft',\n      'top-left': 'bottomRight',\n      'bottom-left': 'topRight',\n      'bottom-right': 'topLeft'\n    }[direction];\n    const angle = Angle.normalize(this.node.getAngle());\n    this.setEventData(evt, {\n      selector,\n      direction,\n      trueDirection,\n      relativeDirection,\n      angle,\n      resizeX: rx,\n      resizeY: ry,\n      action: 'resizing'\n    });\n  }\n  startRotating(evt) {\n    evt.stopPropagation();\n    this.model.startBatch('rotate', {\n      cid: this.cid\n    });\n    const view = this.graph.findViewByCell(this.node);\n    const center = this.node.getBBox().getCenter();\n    const e = this.normalizeEvent(evt);\n    const client = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.setEventData(evt, {\n      center,\n      action: 'rotating',\n      angle: Angle.normalize(this.node.getAngle()),\n      start: Point.create(client).theta(center)\n    });\n    this.startAction(evt);\n    notify('node:rotate:mousedown', evt, view);\n  }\n  onMouseMove(evt) {\n    const view = this.graph.findViewByCell(this.node);\n    let data = this.getEventData(evt);\n    if (data.action) {\n      const e = this.normalizeEvent(evt);\n      let clientX = e.clientX;\n      let clientY = e.clientY;\n      const scroller = this.graph.scroller.widget;\n      const restrict = this.options.restrictedResizing;\n      if (restrict === true || typeof restrict === 'number') {\n        const factor = restrict === true ? 0 : restrict;\n        const fix = scroller ? Math.max(factor, 8) : factor;\n        const rect = this.graph.container.getBoundingClientRect();\n        clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix);\n        clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix);\n      } else if (this.options.autoScrollOnResizing && scroller) {\n        scroller.autoScroll(clientX, clientY);\n      }\n      const pos = this.graph.snapToGrid(clientX, clientY);\n      const gridSize = this.graph.getGridSize();\n      const node = this.node;\n      const options = this.options;\n      if (data.action === 'resizing') {\n        data = data;\n        if (!data.resized) {\n          if (view) {\n            view.addClass('node-resizing');\n            notify('node:resize', evt, view);\n          }\n          data.resized = true;\n        }\n        const currentBBox = node.getBBox();\n        const requestedSize = Point.create(pos).rotate(data.angle, currentBBox.getCenter()).diff(currentBBox[data.selector]);\n        let width = data.resizeX ? requestedSize.x * data.resizeX : currentBBox.width;\n        let height = data.resizeY ? requestedSize.y * data.resizeY : currentBBox.height;\n        const rawWidth = width;\n        const rawHeight = height;\n        width = Util.snapToGrid(width, gridSize);\n        height = Util.snapToGrid(height, gridSize);\n        width = Math.max(width, options.minWidth || gridSize);\n        height = Math.max(height, options.minHeight || gridSize);\n        width = Math.min(width, options.maxWidth || Infinity);\n        height = Math.min(height, options.maxHeight || Infinity);\n        if (options.preserveAspectRatio) {\n          const candidateWidth = currentBBox.width * height / currentBBox.height;\n          const candidateHeight = currentBBox.height * width / currentBBox.width;\n          if (width < candidateWidth) {\n            height = candidateHeight;\n          } else {\n            width = candidateWidth;\n          }\n        }\n        const relativeDirection = data.relativeDirection;\n        if (options.allowReverse && (rawWidth <= -width || rawHeight <= -height)) {\n          let reverted;\n          if (relativeDirection === 'left') {\n            if (rawWidth <= -width) {\n              reverted = 'right';\n            }\n          } else if (relativeDirection === 'right') {\n            if (rawWidth <= -width) {\n              reverted = 'left';\n            }\n          } else if (relativeDirection === 'top') {\n            if (rawHeight <= -height) {\n              reverted = 'bottom';\n            }\n          } else if (relativeDirection === 'bottom') {\n            if (rawHeight <= -height) {\n              reverted = 'top';\n            }\n          } else if (relativeDirection === 'top-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-right';\n            } else if (rawWidth <= -width) {\n              reverted = 'top-right';\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-left';\n            }\n          } else if (relativeDirection === 'top-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-left';\n            } else if (rawWidth <= -width) {\n              reverted = 'top-left';\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-right';\n            }\n          } else if (relativeDirection === 'bottom-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-right';\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-right';\n            } else if (rawHeight <= -height) {\n              reverted = 'top-left';\n            }\n          } else if (relativeDirection === 'bottom-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-left';\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-left';\n            } else if (rawHeight <= -height) {\n              reverted = 'top-right';\n            }\n          }\n          const revertedDir = reverted;\n          this.stopHandle();\n          const $handle = this.$container.find(`.${this.resizeClassName}[data-position=\"${revertedDir}\"]`);\n          this.startHandle($handle[0]);\n          this.prepareResizing(evt, revertedDir);\n          this.onMouseMove(evt);\n        }\n        if (currentBBox.width !== width || currentBBox.height !== height) {\n          const resizeOptions = {\n            ui: true,\n            direction: data.direction,\n            relativeDirection: data.relativeDirection,\n            trueDirection: data.trueDirection,\n            minWidth: options.minWidth,\n            minHeight: options.minHeight,\n            maxWidth: options.maxWidth,\n            maxHeight: options.maxHeight,\n            preserveAspectRatio: options.preserveAspectRatio === true\n          };\n          node.resize(width, height, resizeOptions);\n          notify('node:resizing', evt, view);\n        }\n        notify('node:resize:mousemove', evt, view);\n      } else if (data.action === 'rotating') {\n        data = data;\n        if (!data.rotated) {\n          if (view) {\n            view.addClass('node-rotating');\n            notify('node:rotate', evt, view);\n          }\n          data.rotated = true;\n        }\n        const currentAngle = node.getAngle();\n        const theta = data.start - Point.create(pos).theta(data.center);\n        let target = data.angle + theta;\n        if (options.rotateGrid) {\n          target = Util.snapToGrid(target, options.rotateGrid);\n        }\n        target = Angle.normalize(target);\n        if (currentAngle !== target) {\n          node.rotate(target, {\n            absolute: true\n          });\n          notify('node:rotating', evt, view);\n        }\n        notify('node:rotate:mousemove', evt, view);\n      }\n    }\n  }\n  onMouseUp(evt) {\n    const view = this.graph.findViewByCell(this.node);\n    const data = this.getEventData(evt);\n    if (data.action) {\n      this.stopAction(evt);\n      this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n        cid: this.cid\n      });\n      if (data.action === 'resizing') {\n        notify('node:resize:mouseup', evt, view);\n      } else if (data.action === 'rotating') {\n        notify('node:rotate:mouseup', evt, view);\n      }\n    }\n  }\n  startHandle(handle) {\n    this.handle = handle || null;\n    this.$container.addClass(`${this.containerClassName}-active`);\n    if (handle) {\n      this.$(handle).addClass(`${this.containerClassName}-active-handle`);\n      const pos = handle.getAttribute('data-position');\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n        this.$container.addClass(`${this.containerClassName}-cursor-${dir}`);\n      }\n    }\n  }\n  stopHandle() {\n    this.$container.removeClass(`${this.containerClassName}-active`);\n    if (this.handle) {\n      this.$(this.handle).removeClass(`${this.containerClassName}-active-handle`);\n      const pos = this.handle.getAttribute('data-position');\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n        this.$container.removeClass(`${this.containerClassName}-cursor-${dir}`);\n      }\n      this.handle = null;\n    }\n  }\n  startAction(evt) {\n    this.startHandle(evt.target);\n    this.graph.view.undelegateEvents();\n    this.delegateDocumentEvents(Private.documentEvents, evt.data);\n  }\n  stopAction(evt) {\n    this.stopHandle();\n    this.undelegateDocumentEvents();\n    this.graph.view.delegateEvents();\n    const view = this.graph.findViewByCell(this.node);\n    const data = this.getEventData(evt);\n    if (view) {\n      view.removeClass(`node-${data.action}`);\n      if (data.action === 'resizing' && data.resized) {\n        notify('node:resized', evt, view);\n      } else if (data.action === 'rotating' && data.rotated) {\n        notify('node:rotated', evt, view);\n      }\n    }\n  }\n  onRemove() {\n    this.stopListening();\n    super.onRemove();\n  }\n}\nvar Private;\n(function (Private) {\n  Private.NODE_CLS = 'has-widget-transform';\n  Private.DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n  Private.POSITIONS = ['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left'];\n  Private.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp'\n  };\n  Private.defaultOptions = {\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: Infinity,\n    maxHeight: Infinity,\n    rotateGrid: 15,\n    rotatable: true,\n    preserveAspectRatio: false,\n    orthogonalResizing: true,\n    restrictedResizing: false,\n    autoScrollOnResizing: true,\n    allowReverse: true\n  };\n})(Private || (Private = {}));","map":{"version":3,"names":["Util","NumberExt","Angle","Point","Widget","notify","Transform","node","cell","containerClassName","prefixClassName","resizeClassName","rotateClassName","init","options","Object","assign","Private","defaultOptions","render","startListening","delegateEvents","model","on","update","graph","remove","view","onKnobMouseDown","onKnobMouseUp","stopListening","undelegateEvents","off","renderHandles","container","document","createElement","$container","$","$knob","prop","$rotate","clone","addClass","$resizes","POSITIONS","map","pos","attr","empty","append","NODE_CLS","toggleClass","preserveAspectRatio","orthogonalResizing","resizable","rotatable","className","appendChild","ctm","matrix","bbox","getBBox","x","a","e","y","d","f","width","height","angle","normalize","getAngle","transform","css","left","top","updateResizerDirections","removeClass","startHandle","stopHandle","shift","Math","floor","DIRECTIONS","length","prevShift","directions","slice","concat","dir","find","join","each","index","elem","getTrueDirection","indexOf","toValidResizeDirection","bottom","right","startResizing","evt","stopPropagation","startBatch","cid","target","findViewByCell","prepareResizing","startAction","relativeDirection","trueDirection","rx","ry","split","forEach","direction","selector","setEventData","resizeX","resizeY","action","startRotating","center","getCenter","normalizeEvent","client","snapToGrid","clientX","clientY","start","create","theta","onMouseMove","data","getEventData","scroller","widget","restrict","restrictedResizing","factor","fix","max","rect","getBoundingClientRect","clamp","autoScrollOnResizing","autoScroll","gridSize","getGridSize","resized","currentBBox","requestedSize","rotate","diff","rawWidth","rawHeight","minWidth","minHeight","min","maxWidth","Infinity","maxHeight","candidateWidth","candidateHeight","allowReverse","reverted","revertedDir","$handle","resizeOptions","ui","resize","rotated","currentAngle","rotateGrid","absolute","onMouseUp","stopAction","stopBatch","handle","getAttribute","delegateDocumentEvents","documentEvents","undelegateDocumentEvents","onRemove","mousemove","touchmove","mouseup","touchend"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/addon/transform/index.ts"],"sourcesContent":["import { Util } from '../../global'\nimport { KeyValue } from '../../types'\nimport { NumberExt } from '../../util'\nimport { Angle, Point } from '../../geometry'\nimport { Node } from '../../model/node'\nimport { NodeView } from '../../view/node'\nimport { Widget } from '../common'\nimport { notify } from './util'\n\nexport class Transform extends Widget<Transform.Options> {\n  protected handle: Element | null\n  protected prevShift: number\n  protected $container: JQuery<HTMLElement>\n\n  protected get node() {\n    return this.cell as Node\n  }\n\n  protected get containerClassName() {\n    return this.prefixClassName('widget-transform')\n  }\n\n  protected get resizeClassName() {\n    return `${this.containerClassName}-resize`\n  }\n\n  protected get rotateClassName() {\n    return `${this.containerClassName}-rotate`\n  }\n\n  protected init(options: Transform.Options) {\n    this.options = {\n      ...Private.defaultOptions,\n      ...options,\n    }\n\n    this.render()\n    this.startListening()\n  }\n\n  protected startListening() {\n    this.delegateEvents({\n      [`mousedown .${this.resizeClassName}`]: 'startResizing',\n      [`touchstart .${this.resizeClassName}`]: 'startResizing',\n      [`mousedown .${this.rotateClassName}`]: 'startRotating',\n      [`touchstart .${this.rotateClassName}`]: 'startRotating',\n    })\n\n    this.model.on('*', this.update, this)\n    this.graph.on('scale', this.update, this)\n    this.graph.on('translate', this.update, this)\n\n    this.node.on('removed', this.remove, this)\n    this.model.on('reseted', this.remove, this)\n\n    this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this)\n    this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this)\n\n    super.startListening()\n  }\n\n  protected stopListening() {\n    this.undelegateEvents()\n\n    this.model.off('*', this.update, this)\n    this.graph.off('scale', this.update, this)\n    this.graph.off('translate', this.update, this)\n\n    this.node.off('removed', this.remove, this)\n    this.model.off('reseted', this.remove, this)\n\n    this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this)\n    this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this)\n\n    super.stopListening()\n  }\n\n  protected renderHandles() {\n    this.container = document.createElement('div')\n    this.$container = this.$(this.container)\n\n    const $knob = this.$('<div/>').prop('draggable', false)\n    const $rotate = $knob.clone().addClass(this.rotateClassName)\n\n    const $resizes = Private.POSITIONS.map((pos) => {\n      return $knob\n        .clone()\n        .addClass(this.resizeClassName)\n        .attr('data-position', pos)\n    })\n    this.empty()\n    this.$container.append($resizes, $rotate)\n  }\n\n  render() {\n    this.renderHandles()\n    this.view.addClass(Private.NODE_CLS)\n    this.$container\n      .addClass(this.containerClassName)\n      .toggleClass(\n        'no-orth-resize',\n        this.options.preserveAspectRatio || !this.options.orthogonalResizing,\n      )\n      .toggleClass('no-resize', !this.options.resizable)\n      .toggleClass('no-rotate', !this.options.rotatable)\n\n    if (this.options.className) {\n      this.$container.addClass(this.options.className)\n    }\n\n    this.graph.container.appendChild(this.container)\n\n    return this.update()\n  }\n\n  update() {\n    const ctm = this.graph.matrix()\n    const bbox = this.node.getBBox()\n\n    bbox.x *= ctm.a\n    bbox.x += ctm.e\n    bbox.y *= ctm.d\n    bbox.y += ctm.f\n    bbox.width *= ctm.a\n    bbox.height *= ctm.d\n\n    const angle = Angle.normalize(this.node.getAngle())\n    const transform = angle !== 0 ? `rotate(${angle}deg)` : ''\n    this.$container.css({\n      transform,\n      width: bbox.width,\n      height: bbox.height,\n      left: bbox.x,\n      top: bbox.y,\n    })\n\n    this.updateResizerDirections()\n\n    return this\n  }\n\n  remove() {\n    this.view.removeClass(Private.NODE_CLS)\n    return super.remove()\n  }\n\n  protected onKnobMouseDown() {\n    this.startHandle()\n  }\n\n  protected onKnobMouseUp() {\n    this.stopHandle()\n  }\n\n  protected updateResizerDirections() {\n    // Update the directions on the resizer divs while the node being rotated.\n    // The directions are represented by cardinal points (N,S,E,W). For example\n    // the div originally pointed to north needs to be changed to point to south\n    // if the node was rotated by 180 degrees.\n    const angle = Angle.normalize(this.node.getAngle())\n    const shift = Math.floor(angle * (Private.DIRECTIONS.length / 360))\n    if (shift !== this.prevShift) {\n      // Create the current directions array based on the calculated shift.\n      const directions = Private.DIRECTIONS.slice(shift).concat(\n        Private.DIRECTIONS.slice(0, shift),\n      )\n\n      const className = (dir: string) =>\n        `${this.containerClassName}-cursor-${dir}`\n\n      this.$container\n        .find(`.${this.resizeClassName}`)\n        .removeClass(Private.DIRECTIONS.map((dir) => className(dir)).join(' '))\n        .each((index, elem) => {\n          this.$(elem).addClass(className(directions[index]))\n        })\n      this.prevShift = shift\n    }\n  }\n\n  protected getTrueDirection(dir: Node.ResizeDirection) {\n    const angle = Angle.normalize(this.node.getAngle())\n    let index = Private.POSITIONS.indexOf(dir)\n\n    index += Math.floor(angle * (Private.POSITIONS.length / 360))\n    index %= Private.POSITIONS.length\n\n    return Private.POSITIONS[index]\n  }\n\n  protected toValidResizeDirection(dir: string): Node.ResizeDirection {\n    return (\n      (\n        {\n          top: 'top-left',\n          bottom: 'bottom-right',\n          left: 'bottom-left',\n          right: 'top-right',\n        } as KeyValue\n      )[dir] || dir\n    )\n  }\n\n  protected startResizing(evt: JQuery.MouseDownEvent) {\n    evt.stopPropagation()\n    this.model.startBatch('resize', { cid: this.cid })\n    const dir = this.$(evt.target).attr('data-position') as Node.ResizeDirection\n    const view = this.graph.findViewByCell(this.node) as NodeView\n    this.prepareResizing(evt, dir)\n    this.startAction(evt)\n    notify('node:resize:mousedown', evt, view)\n  }\n\n  protected prepareResizing(\n    evt: JQuery.TriggeredEvent,\n    relativeDirection: Node.ResizeDirection,\n  ) {\n    const trueDirection = this.getTrueDirection(relativeDirection)\n    let rx = 0\n    let ry = 0\n    relativeDirection.split('-').forEach((direction) => {\n      rx = ({ left: -1, right: 1 } as KeyValue)[direction] || rx\n      ry = ({ top: -1, bottom: 1 } as KeyValue)[direction] || ry\n    })\n\n    const direction = this.toValidResizeDirection(relativeDirection)\n    const selector = (\n      {\n        'top-right': 'bottomLeft',\n        'top-left': 'bottomRight',\n        'bottom-left': 'topRight',\n        'bottom-right': 'topLeft',\n      } as KeyValue\n    )[direction]\n    const angle = Angle.normalize(this.node.getAngle())\n\n    this.setEventData<EventData.Resizing>(evt, {\n      selector,\n      direction,\n      trueDirection,\n      relativeDirection,\n      angle,\n      resizeX: rx,\n      resizeY: ry,\n      action: 'resizing',\n    })\n  }\n\n  protected startRotating(evt: JQuery.MouseDownEvent) {\n    evt.stopPropagation()\n\n    this.model.startBatch('rotate', { cid: this.cid })\n\n    const view = this.graph.findViewByCell(this.node) as NodeView\n    const center = this.node.getBBox().getCenter()\n    const e = this.normalizeEvent(evt)\n    const client = this.graph.snapToGrid(e.clientX, e.clientY)\n    this.setEventData<EventData.Rotating>(evt, {\n      center,\n      action: 'rotating',\n      angle: Angle.normalize(this.node.getAngle()),\n      start: Point.create(client).theta(center),\n    })\n    this.startAction(evt)\n    notify('node:rotate:mousedown', evt, view)\n  }\n\n  protected onMouseMove(evt: JQuery.MouseMoveEvent) {\n    const view = this.graph.findViewByCell(this.node) as NodeView\n    let data = this.getEventData<EventData.Resizing | EventData.Rotating>(evt)\n    if (data.action) {\n      const e = this.normalizeEvent(evt)\n      let clientX = e.clientX\n      let clientY = e.clientY\n\n      const scroller = this.graph.scroller.widget\n      const restrict = this.options.restrictedResizing\n\n      if (restrict === true || typeof restrict === 'number') {\n        const factor = restrict === true ? 0 : restrict\n        const fix = scroller ? Math.max(factor, 8) : factor\n        const rect = this.graph.container.getBoundingClientRect()\n        clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix)\n        clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix)\n      } else if (this.options.autoScrollOnResizing && scroller) {\n        scroller.autoScroll(clientX, clientY)\n      }\n\n      const pos = this.graph.snapToGrid(clientX, clientY)\n      const gridSize = this.graph.getGridSize()\n      const node = this.node\n      const options = this.options\n\n      if (data.action === 'resizing') {\n        data = data as EventData.Resizing\n        if (!data.resized) {\n          if (view) {\n            view.addClass('node-resizing')\n            notify('node:resize', evt, view)\n          }\n          data.resized = true\n        }\n\n        const currentBBox = node.getBBox()\n        const requestedSize = Point.create(pos)\n          .rotate(data.angle, currentBBox.getCenter())\n          .diff(currentBBox[data.selector])\n\n        let width = data.resizeX\n          ? requestedSize.x * data.resizeX\n          : currentBBox.width\n\n        let height = data.resizeY\n          ? requestedSize.y * data.resizeY\n          : currentBBox.height\n\n        const rawWidth = width\n        const rawHeight = height\n\n        width = Util.snapToGrid(width, gridSize)\n        height = Util.snapToGrid(height, gridSize)\n        width = Math.max(width, options.minWidth || gridSize)\n        height = Math.max(height, options.minHeight || gridSize)\n        width = Math.min(width, options.maxWidth || Infinity)\n        height = Math.min(height, options.maxHeight || Infinity)\n\n        if (options.preserveAspectRatio) {\n          const candidateWidth =\n            (currentBBox.width * height) / currentBBox.height\n          const candidateHeight =\n            (currentBBox.height * width) / currentBBox.width\n\n          if (width < candidateWidth) {\n            height = candidateHeight\n          } else {\n            width = candidateWidth\n          }\n        }\n\n        const relativeDirection = data.relativeDirection\n        if (\n          options.allowReverse &&\n          (rawWidth <= -width || rawHeight <= -height)\n        ) {\n          let reverted: Node.ResizeDirection\n\n          if (relativeDirection === 'left') {\n            if (rawWidth <= -width) {\n              reverted = 'right'\n            }\n          } else if (relativeDirection === 'right') {\n            if (rawWidth <= -width) {\n              reverted = 'left'\n            }\n          } else if (relativeDirection === 'top') {\n            if (rawHeight <= -height) {\n              reverted = 'bottom'\n            }\n          } else if (relativeDirection === 'bottom') {\n            if (rawHeight <= -height) {\n              reverted = 'top'\n            }\n          } else if (relativeDirection === 'top-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-right'\n            } else if (rawWidth <= -width) {\n              reverted = 'top-right'\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-left'\n            }\n          } else if (relativeDirection === 'top-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-left'\n            } else if (rawWidth <= -width) {\n              reverted = 'top-left'\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-right'\n            }\n          } else if (relativeDirection === 'bottom-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-right'\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-right'\n            } else if (rawHeight <= -height) {\n              reverted = 'top-left'\n            }\n          } else if (relativeDirection === 'bottom-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-left'\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-left'\n            } else if (rawHeight <= -height) {\n              reverted = 'top-right'\n            }\n          }\n\n          const revertedDir = reverted!\n          this.stopHandle()\n          const $handle = this.$container.find(\n            `.${this.resizeClassName}[data-position=\"${revertedDir}\"]`,\n          )\n          this.startHandle($handle[0])\n          this.prepareResizing(evt, revertedDir)\n          this.onMouseMove(evt)\n        }\n\n        if (currentBBox.width !== width || currentBBox.height !== height) {\n          const resizeOptions: Node.ResizeOptions = {\n            ui: true,\n            direction: data.direction,\n            relativeDirection: data.relativeDirection,\n            trueDirection: data.trueDirection,\n            minWidth: options.minWidth!,\n            minHeight: options.minHeight!,\n            maxWidth: options.maxWidth!,\n            maxHeight: options.maxHeight!,\n            preserveAspectRatio: options.preserveAspectRatio === true,\n          }\n          node.resize(width, height, resizeOptions)\n          notify('node:resizing', evt, view)\n        }\n        notify('node:resize:mousemove', evt, view)\n      } else if (data.action === 'rotating') {\n        data = data as EventData.Rotating\n        if (!data.rotated) {\n          if (view) {\n            view.addClass('node-rotating')\n            notify('node:rotate', evt, view)\n          }\n          data.rotated = true\n        }\n\n        const currentAngle = node.getAngle()\n        const theta = data.start - Point.create(pos).theta(data.center)\n        let target = data.angle + theta\n        if (options.rotateGrid) {\n          target = Util.snapToGrid(target, options.rotateGrid)\n        }\n        target = Angle.normalize(target)\n\n        if (currentAngle !== target) {\n          node.rotate(target, { absolute: true })\n          notify('node:rotating', evt, view)\n        }\n        notify('node:rotate:mousemove', evt, view)\n      }\n    }\n  }\n\n  protected onMouseUp(evt: JQuery.MouseUpEvent) {\n    const view = this.graph.findViewByCell(this.node) as NodeView\n    const data = this.getEventData<EventData.Resizing | EventData.Rotating>(evt)\n    if (data.action) {\n      this.stopAction(evt)\n      this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n        cid: this.cid,\n      })\n\n      if (data.action === 'resizing') {\n        notify('node:resize:mouseup', evt, view)\n      } else if (data.action === 'rotating') {\n        notify('node:rotate:mouseup', evt, view)\n      }\n    }\n  }\n\n  protected startHandle(handle?: Element | null) {\n    this.handle = handle || null\n    this.$container.addClass(`${this.containerClassName}-active`)\n    if (handle) {\n      this.$(handle).addClass(`${this.containerClassName}-active-handle`)\n\n      const pos = handle.getAttribute('data-position') as Node.ResizeDirection\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)]\n        this.$container.addClass(`${this.containerClassName}-cursor-${dir}`)\n      }\n    }\n  }\n\n  protected stopHandle() {\n    this.$container.removeClass(`${this.containerClassName}-active`)\n\n    if (this.handle) {\n      this.$(this.handle).removeClass(\n        `${this.containerClassName}-active-handle`,\n      )\n\n      const pos = this.handle.getAttribute(\n        'data-position',\n      ) as Node.ResizeDirection\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)]\n        this.$container.removeClass(`${this.containerClassName}-cursor-${dir}`)\n      }\n\n      this.handle = null\n    }\n  }\n\n  protected startAction(evt: JQuery.MouseDownEvent) {\n    this.startHandle(evt.target)\n    this.graph.view.undelegateEvents()\n    this.delegateDocumentEvents(Private.documentEvents, evt.data)\n  }\n\n  protected stopAction(evt: JQuery.MouseUpEvent) {\n    this.stopHandle()\n    this.undelegateDocumentEvents()\n    this.graph.view.delegateEvents()\n\n    const view = this.graph.findViewByCell(this.node) as NodeView\n    const data = this.getEventData<EventData.Resizing | EventData.Rotating>(evt)\n\n    if (view) {\n      view.removeClass(`node-${data.action}`)\n      if (data.action === 'resizing' && data.resized) {\n        notify('node:resized', evt, view)\n      } else if (data.action === 'rotating' && data.rotated) {\n        notify('node:rotated', evt, view)\n      }\n    }\n  }\n\n  protected onRemove() {\n    this.stopListening()\n    super.onRemove()\n  }\n}\n\nexport namespace Transform {\n  export type Direction = 'nw' | 'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w'\n\n  export interface Options extends Widget.Options {\n    className?: string\n\n    minWidth?: number\n    maxWidth?: number\n    minHeight?: number\n    maxHeight?: number\n    resizable?: boolean\n\n    rotatable?: boolean\n    rotateGrid?: number\n    orthogonalResizing?: boolean\n    restrictedResizing?: boolean | number\n    autoScrollOnResizing?: boolean\n\n    /**\n     * Set to `true` if you want the resizing to preserve the\n     * aspect ratio of the node. Default is `false`.\n     */\n    preserveAspectRatio?: boolean\n    /**\n     * Reaching the minimum width or height is whether to allow control points to reverse\n     */\n    allowReverse?: boolean\n  }\n}\n\nnamespace Private {\n  export const NODE_CLS = 'has-widget-transform'\n  export const DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w']\n  export const POSITIONS: Node.ResizeDirection[] = [\n    'top-left',\n    'top',\n    'top-right',\n    'right',\n    'bottom-right',\n    'bottom',\n    'bottom-left',\n    'left',\n  ]\n\n  export const documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n  }\n\n  export const defaultOptions: Transform.Options = {\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: Infinity,\n    maxHeight: Infinity,\n    rotateGrid: 15,\n    rotatable: true,\n    preserveAspectRatio: false,\n    orthogonalResizing: true,\n    restrictedResizing: false,\n    autoScrollOnResizing: true,\n    allowReverse: true,\n  }\n}\n\nnamespace EventData {\n  export interface Resizing {\n    action: 'resizing'\n    selector: 'bottomLeft' | 'bottomRight' | 'topRight' | 'topLeft'\n    direction: Node.ResizeDirection\n    trueDirection: Node.ResizeDirection\n    relativeDirection: Node.ResizeDirection\n    resizeX: number\n    resizeY: number\n    angle: number\n    resized?: boolean\n  }\n\n  export interface Rotating {\n    action: 'rotating'\n    center: Point.PointLike\n    angle: number\n    start: number\n    rotated?: boolean\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}