{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { lodashUtil, rgb2arr } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport Clock from \"../../utils/clock\";\nimport { MaskOperation, StencilType } from \"./ILayerService\";\nconst {\n  throttle\n} = lodashUtil;\nexport default class LayerService extends EventEmitter {\n  get renderService() {\n    return this.container.rendererService;\n  }\n  get mapService() {\n    return this.container.mapService;\n  }\n  get debugService() {\n    return this.container.debugService;\n  }\n  constructor(container) {\n    super();\n    // pickedLayerId 参数用于指定当前存在被选中的 layer\n    _defineProperty(this, \"pickedLayerId\", -1);\n    _defineProperty(this, \"clock\", new Clock());\n    _defineProperty(this, \"alreadyInRendering\", false);\n    _defineProperty(this, \"layers\", []);\n    _defineProperty(this, \"layerList\", []);\n    _defineProperty(this, \"layerRenderID\", void 0);\n    _defineProperty(this, \"sceneInited\", false);\n    _defineProperty(this, \"animateInstanceCount\", 0);\n    // TODO: 是否开启 shader 中的颜色拾取计算\n    _defineProperty(this, \"shaderPicking\", true);\n    _defineProperty(this, \"enableRender\", true);\n    _defineProperty(this, \"reRender\", throttle(() => {\n      this.renderLayers();\n    }, 32));\n    _defineProperty(this, \"throttleRenderLayers\", throttle(() => {\n      this.renderLayers();\n    }, 16));\n    this.container = container;\n  }\n  needPick(type) {\n    this.updateLayerRenderList();\n    return this.layerList.some(layer => layer.needPick(type));\n  }\n  add(layer) {\n    this.layers.push(layer);\n    if (this.sceneInited) {\n      layer.init().then(() => {\n        this.renderLayers();\n      });\n    }\n  }\n  addMask(mask) {\n    if (this.sceneInited) {\n      mask.init().then(() => {\n        this.renderLayers();\n      });\n    }\n  }\n  initLayers() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.sceneInited = true;\n      _this.layers.forEach(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (layer) {\n          if (!layer.startInit) {\n            yield layer.init();\n            _this.updateLayerRenderList();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  getSceneInited() {\n    return this.sceneInited;\n  }\n  getRenderList() {\n    return this.layerList;\n  }\n  getLayers() {\n    return this.layers;\n  }\n  getLayer(id) {\n    return this.layers.find(layer => layer.id === id);\n  }\n  getLayerByName(name) {\n    return this.layers.find(layer => layer.name === name);\n  }\n  remove(layer, parentLayer) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Tip: layer.layerChildren 当 layer 存在子图层的情况\n      if (parentLayer) {\n        parentLayer.layerChildren = parentLayer.layerChildren.filter(item => item !== layer);\n      } else {\n        _this2.layers = _this2.layers.filter(item => item !== layer);\n      }\n      layer.destroy();\n      _this2.reRender();\n      _this2.emit('layerChange', _this2.layers);\n    })();\n  }\n  removeAllLayers() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.destroy();\n      _this3.reRender();\n    })();\n  }\n  setEnableRender(flag) {\n    this.enableRender = flag;\n  }\n  renderLayers() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.alreadyInRendering || !_this4.enableRender) {\n        return;\n      }\n      _this4.updateLayerRenderList();\n      const renderUid = _this4.debugService.generateRenderUid();\n      _this4.debugService.renderStart(renderUid);\n      _this4.alreadyInRendering = true;\n      _this4.clear();\n      for (const layer of _this4.layerList) {\n        layer.prerender();\n      }\n\n      // The main render pass, all layers in a whole.\n      _this4.renderService.beginFrame();\n      for (const layer of _this4.layerList) {\n        const {\n          enableMask\n        } = layer.getLayerConfig();\n        if (layer.masks.filter(m => m.inited).length > 0 && enableMask) {\n          // 清除上一次的模版缓存\n          _this4.renderMask(layer.masks);\n        }\n        if (layer.getLayerConfig().enableMultiPassRenderer) {\n          // multiPassRender 不是同步渲染完成的\n          yield layer.renderMultiPass();\n        } else {\n          layer.render();\n        }\n      }\n      _this4.renderService.endFrame();\n      _this4.debugService.renderEnd(renderUid);\n      _this4.alreadyInRendering = false;\n    })();\n  }\n  renderMask(masks) {\n    let maskIndex = 0;\n    this.renderService.clear({\n      stencil: 0,\n      depth: 1,\n      framebuffer: null\n    });\n    const stencilType = masks.length > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;\n    for (const layer of masks) {\n      // 清除上一次的模版缓存\n      layer.render({\n        isStencil: true,\n        stencilType,\n        stencilIndex: maskIndex++\n      });\n    }\n  }\n  beforeRenderData(layer) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const flag = yield layer.hooks.beforeRenderData.promise();\n      if (flag) {\n        _this5.renderLayers();\n      }\n    })();\n  }\n  renderTileLayerMask(layer) {\n    let maskindex = 0;\n    const {\n      enableMask = true\n    } = layer.getLayerConfig();\n    let maskCount = layer.tileMask ? 1 : 0; // 瓦片裁剪 线图层或者面图层\n    const masklayers = layer.masks.filter(m => m.inited);\n    maskCount = maskCount + (enableMask ? masklayers.length : 1);\n    const stencilType = maskCount > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;\n    //  兼容MaskLayer MaskLayer的掩模不能clear\n    if (layer.tileMask || masklayers.length && enableMask) {\n      this.renderService.clear({\n        stencil: 0,\n        depth: 1,\n        framebuffer: null\n      });\n    }\n    if (masklayers.length && enableMask) {\n      for (const mask of masklayers) {\n        mask.render({\n          isStencil: true,\n          stencilType,\n          stencilIndex: maskindex++\n        });\n      }\n    }\n    // // 瓦片裁剪\n    if (layer.tileMask) {\n      layer.tileMask.render({\n        isStencil: true,\n        stencilType,\n        stencilIndex: maskindex++,\n        stencilOperation: MaskOperation.OR\n      });\n    }\n  }\n  // 瓦片图层渲染\n  renderTileLayer(layer) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.renderTileLayerMask(layer);\n      if (layer.getLayerConfig().enableMultiPassRenderer) {\n        // multiPassRender 不是同步渲染完成的\n        yield layer.renderMultiPass();\n      } else {\n        yield layer.render();\n      }\n    })();\n  }\n  updateLayerRenderList() {\n    // Tip: 每次更新都是从 layers 重新构建\n    this.layerList = [];\n    this.layers.filter(layer => layer.inited).filter(layer => layer.isVisible()).sort((pre, next) => {\n      // 根据 zIndex 对渲染顺序进行排序\n      return pre.zIndex - next.zIndex;\n    }).forEach(layer => {\n      this.layerList.push(layer);\n    });\n  }\n  destroy() {\n    this.layers.forEach(layer => {\n      layer.destroy();\n    });\n    this.layers = [];\n    this.layerList = [];\n    this.emit('layerChange', this.layers);\n  }\n  startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n  stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n  getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  // 控制着色器颜色拾取计算\n  enableShaderPick() {\n    this.shaderPicking = true;\n  }\n  disableShaderPick() {\n    this.shaderPicking = false;\n  }\n  getShaderPickStat() {\n    return this.shaderPicking;\n  }\n  clear() {\n    const color = rgb2arr(this.mapService.bgColor);\n    this.renderService.clear({\n      color,\n      depth: 1,\n      stencil: 0,\n      framebuffer: null\n    });\n  }\n  runRender() {\n    this.renderLayers();\n    this.layerRenderID = window.requestAnimationFrame(this.runRender.bind(this));\n  }\n  stopRender() {\n    window.cancelAnimationFrame(this.layerRenderID);\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","lodashUtil","rgb2arr","EventEmitter","Clock","MaskOperation","StencilType","throttle","LayerService","renderService","container","rendererService","mapService","debugService","constructor","renderLayers","needPick","type","updateLayerRenderList","layerList","some","layer","add","layers","push","sceneInited","init","then","addMask","mask","initLayers","_this","forEach","_ref","startInit","_x","apply","arguments","getSceneInited","getRenderList","getLayers","getLayer","id","find","getLayerByName","name","remove","parentLayer","_this2","layerChildren","filter","item","destroy","reRender","emit","removeAllLayers","_this3","setEnableRender","flag","enableRender","_this4","alreadyInRendering","renderUid","generateRenderUid","renderStart","clear","prerender","beginFrame","enableMask","getLayerConfig","masks","m","inited","length","renderMask","enableMultiPassRenderer","renderMultiPass","render","endFrame","renderEnd","maskIndex","stencil","depth","framebuffer","stencilType","MULTIPLE","SINGLE","isStencil","stencilIndex","beforeRenderData","_this5","hooks","promise","renderTileLayerMask","maskindex","maskCount","tileMask","masklayers","stencilOperation","OR","renderTileLayer","_this6","isVisible","sort","pre","next","zIndex","startAnimate","animateInstanceCount","clock","start","runRender","stopAnimate","stopRender","stop","getOESTextureFloat","extensionObject","OES_texture_float","enableShaderPick","shaderPicking","disableShaderPick","getShaderPickStat","color","bgColor","layerRenderID","window","requestAnimationFrame","bind","cancelAnimationFrame"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/layer/LayerService.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { lodashUtil, rgb2arr } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport Clock from \"../../utils/clock\";\nimport { MaskOperation, StencilType } from \"./ILayerService\";\nconst {\n  throttle\n} = lodashUtil;\nexport default class LayerService extends EventEmitter {\n  get renderService() {\n    return this.container.rendererService;\n  }\n  get mapService() {\n    return this.container.mapService;\n  }\n  get debugService() {\n    return this.container.debugService;\n  }\n  constructor(container) {\n    super();\n    // pickedLayerId 参数用于指定当前存在被选中的 layer\n    _defineProperty(this, \"pickedLayerId\", -1);\n    _defineProperty(this, \"clock\", new Clock());\n    _defineProperty(this, \"alreadyInRendering\", false);\n    _defineProperty(this, \"layers\", []);\n    _defineProperty(this, \"layerList\", []);\n    _defineProperty(this, \"layerRenderID\", void 0);\n    _defineProperty(this, \"sceneInited\", false);\n    _defineProperty(this, \"animateInstanceCount\", 0);\n    // TODO: 是否开启 shader 中的颜色拾取计算\n    _defineProperty(this, \"shaderPicking\", true);\n    _defineProperty(this, \"enableRender\", true);\n    _defineProperty(this, \"reRender\", throttle(() => {\n      this.renderLayers();\n    }, 32));\n    _defineProperty(this, \"throttleRenderLayers\", throttle(() => {\n      this.renderLayers();\n    }, 16));\n    this.container = container;\n  }\n  needPick(type) {\n    this.updateLayerRenderList();\n    return this.layerList.some(layer => layer.needPick(type));\n  }\n  add(layer) {\n    this.layers.push(layer);\n    if (this.sceneInited) {\n      layer.init().then(() => {\n        this.renderLayers();\n      });\n    }\n  }\n  addMask(mask) {\n    if (this.sceneInited) {\n      mask.init().then(() => {\n        this.renderLayers();\n      });\n    }\n  }\n  initLayers() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.sceneInited = true;\n      _this.layers.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (layer) {\n          if (!layer.startInit) {\n            yield layer.init();\n            _this.updateLayerRenderList();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  getSceneInited() {\n    return this.sceneInited;\n  }\n  getRenderList() {\n    return this.layerList;\n  }\n  getLayers() {\n    return this.layers;\n  }\n  getLayer(id) {\n    return this.layers.find(layer => layer.id === id);\n  }\n  getLayerByName(name) {\n    return this.layers.find(layer => layer.name === name);\n  }\n  remove(layer, parentLayer) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Tip: layer.layerChildren 当 layer 存在子图层的情况\n      if (parentLayer) {\n        parentLayer.layerChildren = parentLayer.layerChildren.filter(item => item !== layer);\n      } else {\n        _this2.layers = _this2.layers.filter(item => item !== layer);\n      }\n      layer.destroy();\n      _this2.reRender();\n      _this2.emit('layerChange', _this2.layers);\n    })();\n  }\n  removeAllLayers() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.destroy();\n      _this3.reRender();\n    })();\n  }\n  setEnableRender(flag) {\n    this.enableRender = flag;\n  }\n  renderLayers() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.alreadyInRendering || !_this4.enableRender) {\n        return;\n      }\n      _this4.updateLayerRenderList();\n      const renderUid = _this4.debugService.generateRenderUid();\n      _this4.debugService.renderStart(renderUid);\n      _this4.alreadyInRendering = true;\n      _this4.clear();\n      for (const layer of _this4.layerList) {\n        layer.prerender();\n      }\n\n      // The main render pass, all layers in a whole.\n      _this4.renderService.beginFrame();\n      for (const layer of _this4.layerList) {\n        const {\n          enableMask\n        } = layer.getLayerConfig();\n        if (layer.masks.filter(m => m.inited).length > 0 && enableMask) {\n          // 清除上一次的模版缓存\n          _this4.renderMask(layer.masks);\n        }\n        if (layer.getLayerConfig().enableMultiPassRenderer) {\n          // multiPassRender 不是同步渲染完成的\n          yield layer.renderMultiPass();\n        } else {\n          layer.render();\n        }\n      }\n      _this4.renderService.endFrame();\n      _this4.debugService.renderEnd(renderUid);\n      _this4.alreadyInRendering = false;\n    })();\n  }\n  renderMask(masks) {\n    let maskIndex = 0;\n    this.renderService.clear({\n      stencil: 0,\n      depth: 1,\n      framebuffer: null\n    });\n    const stencilType = masks.length > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;\n    for (const layer of masks) {\n      // 清除上一次的模版缓存\n      layer.render({\n        isStencil: true,\n        stencilType,\n        stencilIndex: maskIndex++\n      });\n    }\n  }\n  beforeRenderData(layer) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const flag = yield layer.hooks.beforeRenderData.promise();\n      if (flag) {\n        _this5.renderLayers();\n      }\n    })();\n  }\n  renderTileLayerMask(layer) {\n    let maskindex = 0;\n    const {\n      enableMask = true\n    } = layer.getLayerConfig();\n    let maskCount = layer.tileMask ? 1 : 0; // 瓦片裁剪 线图层或者面图层\n    const masklayers = layer.masks.filter(m => m.inited);\n    maskCount = maskCount + (enableMask ? masklayers.length : 1);\n    const stencilType = maskCount > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;\n    //  兼容MaskLayer MaskLayer的掩模不能clear\n    if (layer.tileMask || masklayers.length && enableMask) {\n      this.renderService.clear({\n        stencil: 0,\n        depth: 1,\n        framebuffer: null\n      });\n    }\n    if (masklayers.length && enableMask) {\n      for (const mask of masklayers) {\n        mask.render({\n          isStencil: true,\n          stencilType,\n          stencilIndex: maskindex++\n        });\n      }\n    }\n    // // 瓦片裁剪\n    if (layer.tileMask) {\n      layer.tileMask.render({\n        isStencil: true,\n        stencilType,\n        stencilIndex: maskindex++,\n        stencilOperation: MaskOperation.OR\n      });\n    }\n  }\n  // 瓦片图层渲染\n  renderTileLayer(layer) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.renderTileLayerMask(layer);\n      if (layer.getLayerConfig().enableMultiPassRenderer) {\n        // multiPassRender 不是同步渲染完成的\n        yield layer.renderMultiPass();\n      } else {\n        yield layer.render();\n      }\n    })();\n  }\n  updateLayerRenderList() {\n    // Tip: 每次更新都是从 layers 重新构建\n    this.layerList = [];\n    this.layers.filter(layer => layer.inited).filter(layer => layer.isVisible()).sort((pre, next) => {\n      // 根据 zIndex 对渲染顺序进行排序\n      return pre.zIndex - next.zIndex;\n    }).forEach(layer => {\n      this.layerList.push(layer);\n    });\n  }\n  destroy() {\n    this.layers.forEach(layer => {\n      layer.destroy();\n    });\n    this.layers = [];\n    this.layerList = [];\n    this.emit('layerChange', this.layers);\n  }\n  startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n  stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n  getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  // 控制着色器颜色拾取计算\n  enableShaderPick() {\n    this.shaderPicking = true;\n  }\n  disableShaderPick() {\n    this.shaderPicking = false;\n  }\n  getShaderPickStat() {\n    return this.shaderPicking;\n  }\n  clear() {\n    const color = rgb2arr(this.mapService.bgColor);\n    this.renderService.clear({\n      color,\n      depth: 1,\n      stencil: 0,\n      framebuffer: null\n    });\n  }\n  runRender() {\n    this.renderLayers();\n    this.layerRenderID = window.requestAnimationFrame(this.runRender.bind(this));\n  }\n  stopRender() {\n    window.cancelAnimationFrame(this.layerRenderID);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}