{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport LineModels from \"./models\";\nexport default class LineLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'LineLayer');\n    _defineProperty(this, \"enableShaderEncodeStyles\", ['stroke', 'offsets', 'opacity', 'thetaOffset']);\n    //注意顺序 4+2+1+1\n    _defineProperty(this, \"arrowInsertCount\", 0);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [{\n        lng1: 100,\n        lat1: 30.0,\n        lng2: 130,\n        lat2: 30\n      }],\n      options: {\n        parser: {\n          type: 'json',\n          x: 'lng1',\n          y: 'lat1',\n          x1: 'lng2',\n          y1: 'lat2'\n        }\n      }\n    });\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shape = _this.getModelType();\n      _this.layerModel = new LineModels[shape](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      line: {},\n      linearline: {},\n      simple: {},\n      wall: {},\n      arc3d: {\n        blend: 'additive'\n      },\n      arc: {\n        blend: 'additive'\n      },\n      greatcircle: {\n        blend: 'additive'\n      },\n      tileLine: {},\n      earthArc3d: {},\n      flowline: {},\n      arrow: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    var _shapeAttribute$scale;\n    if (this.layerType) {\n      return this.layerType;\n    }\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n    const shape = shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;\n    return shape || 'line';\n  }\n  processData(filterData) {\n    // simple line 在接受 multiPolygon 的数据进行绘制的时候需要对数据进行拆解\n    if (this.getModelType() !== 'simple') {\n      return filterData;\n    }\n    const dataArray = [];\n    filterData.map(data => {\n      if (Array.isArray(data.coordinates) && Array.isArray(data.coordinates[0]) && Array.isArray(data.coordinates[0][0])) {\n        const object = _objectSpread({}, data);\n        data.coordinates.map(d => {\n          dataArray.push(_objectSpread(_objectSpread({}, object), {}, {\n            coordinates: d\n          }));\n        });\n      } else {\n        dataArray.push(data);\n      }\n    });\n    return dataArray;\n  }\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_defineProperty","BaseLayer","LineModels","LineLayer","constructor","args","data","lng1","lat1","lng2","lat2","options","parser","type","x","y","x1","y1","buildModels","_this","shape","getModelType","layerModel","initLayerModels","getDefaultConfig","defaultConfig","line","linearline","simple","wall","arc3d","blend","arc","greatcircle","tileLine","earthArc3d","flowline","arrow","_shapeAttribute$scale","layerType","shapeAttribute","styleAttributeService","getLayerStyleAttribute","scale","field","processData","filterData","dataArray","map","Array","isArray","coordinates","object","d","push"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/line/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport LineModels from \"./models\";\nexport default class LineLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'LineLayer');\n    _defineProperty(this, \"enableShaderEncodeStyles\", ['stroke', 'offsets', 'opacity', 'thetaOffset']);\n    //注意顺序 4+2+1+1\n    _defineProperty(this, \"arrowInsertCount\", 0);\n    _defineProperty(this, \"defaultSourceConfig\", {\n      data: [{\n        lng1: 100,\n        lat1: 30.0,\n        lng2: 130,\n        lat2: 30\n      }],\n      options: {\n        parser: {\n          type: 'json',\n          x: 'lng1',\n          y: 'lat1',\n          x1: 'lng2',\n          y1: 'lat2'\n        }\n      }\n    });\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shape = _this.getModelType();\n      _this.layerModel = new LineModels[shape](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      line: {},\n      linearline: {},\n      simple: {},\n      wall: {},\n      arc3d: {\n        blend: 'additive'\n      },\n      arc: {\n        blend: 'additive'\n      },\n      greatcircle: {\n        blend: 'additive'\n      },\n      tileLine: {},\n      earthArc3d: {},\n      flowline: {},\n      arrow: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    var _shapeAttribute$scale;\n    if (this.layerType) {\n      return this.layerType;\n    }\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n    const shape = shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;\n    return shape || 'line';\n  }\n  processData(filterData) {\n    // simple line 在接受 multiPolygon 的数据进行绘制的时候需要对数据进行拆解\n    if (this.getModelType() !== 'simple') {\n      return filterData;\n    }\n    const dataArray = [];\n    filterData.map(data => {\n      if (Array.isArray(data.coordinates) && Array.isArray(data.coordinates[0]) && Array.isArray(data.coordinates[0][0])) {\n        const object = _objectSpread({}, data);\n        data.coordinates.map(d => {\n          dataArray.push(_objectSpread(_objectSpread({}, object), {}, {\n            coordinates: d\n          }));\n        });\n      } else {\n        dataArray.push(data);\n      }\n    });\n    return dataArray;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}