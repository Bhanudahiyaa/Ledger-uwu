{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { InteractionEvent } from \"../../interaction/IInteractionService\";\nimport { gl } from \"../gl\";\nimport { PassType } from \"../IMultiPassRenderer\";\nimport BaseNormalPass from \"./BaseNormalPass\";\n\n/**\n * color-based PixelPickingPass\n * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md\n * @deprecated\n * 目前未使用\n */\nexport default class PixelPickingPass extends BaseNormalPass {\n  constructor(...args) {\n    var _this;\n    super(...args);\n    _this = this;\n    /**\n     * picking framebuffer，供 attributes 颜色编码后输出\n     */\n    _defineProperty(this, \"pickingFBO\", void 0);\n    /**\n     * 保存 layer 引用\n     */\n    _defineProperty(this, \"layer\", void 0);\n    _defineProperty(this, \"width\", 0);\n    _defineProperty(this, \"height\", 0);\n    /**\n     * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n     */\n    _defineProperty(this, \"alreadyInRendering\", false);\n    /**\n     * 拾取视口指定坐标属于的要素\n     * TODO：支持区域拾取\n     */\n    _defineProperty(this, \"pickFromPickingFBO\", ({\n      x,\n      y,\n      lngLat,\n      type\n    }) => {\n      if (!this.layer.isVisible() || !this.layer.needPick(type)) {\n        return;\n      }\n      const {\n        getViewportSize,\n        readPixelsAsync,\n        useFramebuffer\n      } = this.rendererService;\n      const {\n        width,\n        height\n      } = getViewportSize();\n      const {\n        enableHighlight,\n        enableSelect\n      } = this.layer.getLayerConfig();\n      const xInDevicePixel = x * DOM.DPR;\n      const yInDevicePixel = y * DOM.DPR;\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n      let pickedColors;\n      useFramebuffer(this.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        var _pickedColors;\n        // avoid realloc\n        pickedColors = yield readPixelsAsync({\n          x: Math.round(xInDevicePixel),\n          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n          y: Math.round(height - (y + 1) * DOM.DPR),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          const pickedFeatureIdx = decodePickingColor(pickedColors);\n          const rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);\n          const target = {\n            x,\n            y,\n            type,\n            lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature\n          };\n          if (!rawFeature) {\n            // this.logger.error(\n            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n            // );\n          } else {\n            // trigger onHover/Click callback on layer\n            _this.layer.setCurrentPickId(pickedFeatureIdx);\n            _this.triggerHoverOnLayer(target);\n          }\n        } else {\n          const target = {\n            x,\n            y,\n            lngLat,\n            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n            featureId: null,\n            feature: null\n          };\n          _this.triggerHoverOnLayer(_objectSpread(_objectSpread({}, target), {}, {\n            type: 'unpick'\n          }));\n          _this.triggerHoverOnLayer(target);\n          _this.layer.setCurrentPickId(null);\n        }\n        if (enableHighlight) {\n          _this.highlightPickedFeature(pickedColors);\n        }\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          _this.selectFeature(pickedColors);\n        }\n      }));\n    });\n  }\n  getType() {\n    return PassType.Normal;\n  }\n  getName() {\n    return 'pixelPicking';\n  }\n  init(layer, config) {\n    super.init(layer, config);\n    this.layer = layer;\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    // 创建 picking framebuffer，后续实时 resize\n    const pickingColorTexture = createTexture2D({\n      width,\n      height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      label: 'Picking Texture'\n    });\n    this.pickingFBO = createFramebuffer({\n      color: pickingColorTexture\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n    this.interactionService.on(InteractionEvent.Select, this.selectFeatureHandle.bind(this));\n    this.interactionService.on(InteractionEvent.Active, this.highlightFeatureHandle.bind(this));\n  }\n  render(layer) {\n    if (this.alreadyInRendering) {\n      return;\n    }\n    const {\n      getViewportSize,\n      useFramebuffer,\n      clear\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n\n    // throttled\n    this.alreadyInRendering = true;\n\n    // resize first, fbo can't be resized in use\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width,\n        height\n      });\n      this.width = width;\n      this.height = height;\n    }\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1\n      });\n\n      /**\n       * picking pass 不需要 multipass，原因如下：\n       * 1. 已经 clear，无需 ClearPass\n       * 2. 只需要 RenderPass\n       * 3. 后处理 pass 需要跳过\n       */\n      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();\n      this.layer.multiPassRenderer.setRenderFlag(false);\n      // trigger hooks\n      layer.hooks.beforePickingEncode.call();\n      layer.render();\n      layer.hooks.afterPickingEncode.call();\n      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n      this.alreadyInRendering = false;\n    });\n  }\n  triggerHoverOnLayer(target) {\n    this.layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  highlightPickedFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeHighlight.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n  selectFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeSelect.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n  selectFeatureHandle({\n    featureId\n  }) {\n    const pickedColors = encodePickingColor(featureId);\n    this.selectFeature(new Uint8Array(pickedColors));\n  }\n  highlightFeatureHandle({\n    featureId\n  }) {\n    const pickedColors = encodePickingColor(featureId);\n    this.highlightPickedFeature(new Uint8Array(pickedColors));\n  }\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_defineProperty","decodePickingColor","DOM","encodePickingColor","InteractionEvent","gl","PassType","BaseNormalPass","PixelPickingPass","constructor","args","_this","x","y","lngLat","type","layer","isVisible","needPick","getViewportSize","readPixelsAsync","useFramebuffer","rendererService","width","height","enableHighlight","enableSelect","getLayerConfig","xInDevicePixel","DPR","yInDevicePixel","pickedColors","pickingFBO","_pickedColors","Math","round","data","Uint8Array","framebuffer","pickedFeatureIdx","rawFeature","getSource","getFeatureById","target","featureId","feature","setCurrentPickId","triggerHoverOnLayer","getCurrentPickId","highlightPickedFeature","toString","selectFeature","getType","Normal","getName","init","config","createTexture2D","createFramebuffer","pickingColorTexture","wrapS","CLAMP_TO_EDGE","wrapT","label","color","interactionService","on","Hover","pickFromPickingFBO","Select","selectFeatureHandle","bind","Active","highlightFeatureHandle","render","alreadyInRendering","clear","resize","stencil","depth","originRenderFlag","multiPassRenderer","getRenderFlag","setRenderFlag","hooks","beforePickingEncode","call","afterPickingEncode","emit","r","g","b","beforeHighlight","layerService","renderLayers","beforeSelect"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/PixelPickingPass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { InteractionEvent } from \"../../interaction/IInteractionService\";\nimport { gl } from \"../gl\";\nimport { PassType } from \"../IMultiPassRenderer\";\nimport BaseNormalPass from \"./BaseNormalPass\";\n\n/**\n * color-based PixelPickingPass\n * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md\n * @deprecated\n * 目前未使用\n */\nexport default class PixelPickingPass extends BaseNormalPass {\n  constructor(...args) {\n    var _this;\n    super(...args);\n    _this = this;\n    /**\n     * picking framebuffer，供 attributes 颜色编码后输出\n     */\n    _defineProperty(this, \"pickingFBO\", void 0);\n    /**\n     * 保存 layer 引用\n     */\n    _defineProperty(this, \"layer\", void 0);\n    _defineProperty(this, \"width\", 0);\n    _defineProperty(this, \"height\", 0);\n    /**\n     * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n     */\n    _defineProperty(this, \"alreadyInRendering\", false);\n    /**\n     * 拾取视口指定坐标属于的要素\n     * TODO：支持区域拾取\n     */\n    _defineProperty(this, \"pickFromPickingFBO\", ({\n      x,\n      y,\n      lngLat,\n      type\n    }) => {\n      if (!this.layer.isVisible() || !this.layer.needPick(type)) {\n        return;\n      }\n      const {\n        getViewportSize,\n        readPixelsAsync,\n        useFramebuffer\n      } = this.rendererService;\n      const {\n        width,\n        height\n      } = getViewportSize();\n      const {\n        enableHighlight,\n        enableSelect\n      } = this.layer.getLayerConfig();\n      const xInDevicePixel = x * DOM.DPR;\n      const yInDevicePixel = y * DOM.DPR;\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n      let pickedColors;\n      useFramebuffer(this.pickingFBO, /*#__PURE__*/_asyncToGenerator(function* () {\n        var _pickedColors;\n        // avoid realloc\n        pickedColors = yield readPixelsAsync({\n          x: Math.round(xInDevicePixel),\n          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n          y: Math.round(height - (y + 1) * DOM.DPR),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          const pickedFeatureIdx = decodePickingColor(pickedColors);\n          const rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);\n          const target = {\n            x,\n            y,\n            type,\n            lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature\n          };\n          if (!rawFeature) {\n            // this.logger.error(\n            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n            // );\n          } else {\n            // trigger onHover/Click callback on layer\n            _this.layer.setCurrentPickId(pickedFeatureIdx);\n            _this.triggerHoverOnLayer(target);\n          }\n        } else {\n          const target = {\n            x,\n            y,\n            lngLat,\n            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n            featureId: null,\n            feature: null\n          };\n          _this.triggerHoverOnLayer(_objectSpread(_objectSpread({}, target), {}, {\n            type: 'unpick'\n          }));\n          _this.triggerHoverOnLayer(target);\n          _this.layer.setCurrentPickId(null);\n        }\n        if (enableHighlight) {\n          _this.highlightPickedFeature(pickedColors);\n        }\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          _this.selectFeature(pickedColors);\n        }\n      }));\n    });\n  }\n  getType() {\n    return PassType.Normal;\n  }\n  getName() {\n    return 'pixelPicking';\n  }\n  init(layer, config) {\n    super.init(layer, config);\n    this.layer = layer;\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n    // 创建 picking framebuffer，后续实时 resize\n    const pickingColorTexture = createTexture2D({\n      width,\n      height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      label: 'Picking Texture'\n    });\n    this.pickingFBO = createFramebuffer({\n      color: pickingColorTexture\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n    this.interactionService.on(InteractionEvent.Select, this.selectFeatureHandle.bind(this));\n    this.interactionService.on(InteractionEvent.Active, this.highlightFeatureHandle.bind(this));\n  }\n  render(layer) {\n    if (this.alreadyInRendering) {\n      return;\n    }\n    const {\n      getViewportSize,\n      useFramebuffer,\n      clear\n    } = this.rendererService;\n    const {\n      width,\n      height\n    } = getViewportSize();\n\n    // throttled\n    this.alreadyInRendering = true;\n\n    // resize first, fbo can't be resized in use\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width,\n        height\n      });\n      this.width = width;\n      this.height = height;\n    }\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1\n      });\n\n      /**\n       * picking pass 不需要 multipass，原因如下：\n       * 1. 已经 clear，无需 ClearPass\n       * 2. 只需要 RenderPass\n       * 3. 后处理 pass 需要跳过\n       */\n      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();\n      this.layer.multiPassRenderer.setRenderFlag(false);\n      // trigger hooks\n      layer.hooks.beforePickingEncode.call();\n      layer.render();\n      layer.hooks.afterPickingEncode.call();\n      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n      this.alreadyInRendering = false;\n    });\n  }\n  triggerHoverOnLayer(target) {\n    this.layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  highlightPickedFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeHighlight.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n  selectFeature(pickedColors) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeSelect.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n  selectFeatureHandle({\n    featureId\n  }) {\n    const pickedColors = encodePickingColor(featureId);\n    this.selectFeature(new Uint8Array(pickedColors));\n  }\n  highlightFeatureHandle({\n    featureId\n  }) {\n    const pickedColors = encodePickingColor(featureId);\n    this.highlightPickedFeature(new Uint8Array(pickedColors));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}