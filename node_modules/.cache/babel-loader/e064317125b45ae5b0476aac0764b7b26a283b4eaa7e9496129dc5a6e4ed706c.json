{"ast":null,"code":"import util from './util';\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nconst run = g => {\n  var _a;\n  const root = util.addDummyNode(g, \"root\", {}, \"_root\");\n  const depths = treeDepths(g);\n  // @ts-ignore\n  const height = Math.max(...Object.values(depths)) - 1; // Note: depths is an Object not an array\n  const nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root;\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  g.edges().forEach(e => {\n    g.edge(e).minlen *= nodeSep;\n  });\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  const weight = sumWeights(g) + 1;\n  // Create border nodes and link them up\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(child => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n};\nconst dfs = (g, root, nodeSep, weight, height, depths, v) => {\n  const children = g.children(v);\n  if (!(children === null || children === void 0 ? void 0 : children.length)) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n    return;\n  }\n  const top = util.addBorderNode(g, \"_bt\");\n  const bottom = util.addBorderNode(g, \"_bb\");\n  const label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n  children === null || children === void 0 ? void 0 : children.forEach(child => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    const childNode = g.node(child);\n    const childTop = childNode.borderTop ? childNode.borderTop : child;\n    const childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    const thisWeight = childNode.borderTop ? weight : 2 * weight;\n    const minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n  });\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n};\nconst treeDepths = g => {\n  var _a;\n  const depths = {};\n  const dfs = (v, depth) => {\n    const children = g.children(v);\n    children === null || children === void 0 ? void 0 : children.forEach(child => dfs(child, depth + 1));\n    depths[v] = depth;\n  };\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(v => dfs(v, 1));\n  return depths;\n};\nconst sumWeights = g => {\n  let result = 0;\n  g.edges().forEach(e => {\n    result += g.edge(e).weight;\n  });\n  return result;\n};\nconst cleanup = g => {\n  const graphLabel = g.graph();\n  graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n};\nexport default {\n  run,\n  cleanup\n};","map":{"version":3,"names":["util","run","g","root","addDummyNode","depths","treeDepths","height","Math","max","Object","values","nodeSep","graph","nestingRoot","edges","forEach","e","edge","minlen","weight","sumWeights","_a","children","child","dfs","nodeRankFactor","v","length","setEdge","top","addBorderNode","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","parent","depth","result","cleanup","graphLabel","removeNode","removeEdge"],"sources":["../../../../src/layout/dagre/src/nesting-graph.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}