{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../../shaders/post-processing/bloom.glsl' */\nconst blur = \"varying vec2 v_UV;\\n\\nuniform float u_BloomFinal: 0.0;\\nuniform sampler2D u_Texture;\\nuniform sampler2D u_Texture2;\\n\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_radius: 5.0;\\nuniform float u_intensity: 0.3;\\nuniform float u_baseRadio: 0.5;\\n\\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\nfloat luminance(vec4 color) {\\n  return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;\\n}\\n\\nvoid main() {\\n  // vec4 baseColor = texture2D(u_Texture, v_UV);\\n\\n  float r = sqrt(u_radius);\\n\\n  vec4 c1 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(u_radius, 0.0));\\n  // c1 *= luminance(c1);\\n  vec4 c2 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(0.0, u_radius));\\n  // c2 *= luminance(c2);\\n  vec4 c3 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, r));\\n  // c3 *= luminance(c3);\\n  vec4 c4 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, -r));\\n  // c4 *= luminance(c4);\\n  vec4 inbloomColor = (c1 + c2 + c3 + c4) * 0.25;\\n\\n  // float lum = luminance(inbloomColor);\\n  // inbloomColor.rgb *= lum;\\n\\n  if(u_BloomFinal > 0.0) {\\n    vec4 baseColor = texture2D(u_Texture2, v_UV);\\n    float baselum = luminance(baseColor);\\n    gl_FragColor = mix(inbloomColor, baseColor, u_baseRadio);\\n    if(baselum <= 0.2) {\\n      gl_FragColor = inbloomColor * u_intensity;\\n    }\\n  } else {\\n    gl_FragColor = inbloomColor;\\n  }\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nconst {\n  isNil\n} = lodashUtil;\nexport default class BloomPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('blur-pass', {\n      vs: quad,\n      fs: blur\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('blur-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    if (!isNil(options.bloomRadius)) {\n      uniforms.u_radius = options.bloomRadius;\n    }\n    if (!isNil(options.bloomIntensity)) {\n      uniforms.u_intensity = options.bloomIntensity;\n    }\n    if (!isNil(options.bloomBaseRadio)) {\n      uniforms.u_baseRadio = options.bloomBaseRadio;\n    }\n    return uniforms;\n  }\n}","map":{"version":3,"names":["_objectSpread","lodashUtil","blur","quad","BasePostProcessingPass","isNil","BloomPass","setupShaders","shaderModuleService","registerModule","vs","fs","uniforms","getModule","width","height","rendererService","getViewportSize","u_ViewportSize","convertOptionsToUniforms","options","bloomRadius","u_radius","bloomIntensity","u_intensity","bloomBaseRadio","u_baseRadio"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/BloomPass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { lodashUtil } from '@antv/l7-utils';\n/* babel-plugin-inline-import '../../../../shaders/post-processing/bloom.glsl' */\nconst blur = \"varying vec2 v_UV;\\n\\nuniform float u_BloomFinal: 0.0;\\nuniform sampler2D u_Texture;\\nuniform sampler2D u_Texture2;\\n\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_radius: 5.0;\\nuniform float u_intensity: 0.3;\\nuniform float u_baseRadio: 0.5;\\n\\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\nfloat luminance(vec4 color) {\\n  return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;\\n}\\n\\nvoid main() {\\n  // vec4 baseColor = texture2D(u_Texture, v_UV);\\n\\n  float r = sqrt(u_radius);\\n\\n  vec4 c1 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(u_radius, 0.0));\\n  // c1 *= luminance(c1);\\n  vec4 c2 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(0.0, u_radius));\\n  // c2 *= luminance(c2);\\n  vec4 c3 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, r));\\n  // c3 *= luminance(c3);\\n  vec4 c4 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, -r));\\n  // c4 *= luminance(c4);\\n  vec4 inbloomColor = (c1 + c2 + c3 + c4) * 0.25;\\n\\n  // float lum = luminance(inbloomColor);\\n  // inbloomColor.rgb *= lum;\\n\\n  if(u_BloomFinal > 0.0) {\\n    vec4 baseColor = texture2D(u_Texture2, v_UV);\\n    float baselum = luminance(baseColor);\\n    gl_FragColor = mix(inbloomColor, baseColor, u_baseRadio);\\n    if(baselum <= 0.2) {\\n      gl_FragColor = inbloomColor * u_intensity;\\n    }\\n  } else {\\n    gl_FragColor = inbloomColor;\\n  }\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nconst {\n  isNil\n} = lodashUtil;\nexport default class BloomPass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('blur-pass', {\n      vs: quad,\n      fs: blur\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('blur-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n  convertOptionsToUniforms(options) {\n    const uniforms = {};\n    if (!isNil(options.bloomRadius)) {\n      uniforms.u_radius = options.bloomRadius;\n    }\n    if (!isNil(options.bloomIntensity)) {\n      uniforms.u_intensity = options.bloomIntensity;\n    }\n    if (!isNil(options.bloomBaseRadio)) {\n      uniforms.u_baseRadio = options.bloomBaseRadio;\n    }\n    return uniforms;\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,SAASC,UAAU,QAAQ,gBAAgB;AAC3C;AACA,MAAMC,IAAI,GAAG,+3DAA+3D;AAC54D;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,MAAM;EACJC;AACF,CAAC,GAAGJ,UAAU;AACd,eAAe,MAAMK,SAAS,SAASF,sBAAsB,CAAC;EAC5DG,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,WAAW,EAAE;MACnDC,EAAE,EAAEP,IAAI;MACRQ,EAAE,EAAET;IACN,CAAC,CAAC;IACF,MAAM;MACJQ,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACJ,mBAAmB,CAACK,SAAS,CAAC,WAAW,CAAC;IACnD,MAAM;MACJC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC,CAAC;IAC1C,OAAO;MACLP,EAAE;MACFC,EAAE;MACFC,QAAQ,EAAEZ,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEY,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QACvDM,cAAc,EAAE,CAACJ,KAAK,EAAEC,MAAM;MAChC,CAAC;IACH,CAAC;EACH;EACAI,wBAAwBA,CAACC,OAAO,EAAE;IAChC,MAAMR,QAAQ,GAAG,CAAC,CAAC;IACnB,IAAI,CAACP,KAAK,CAACe,OAAO,CAACC,WAAW,CAAC,EAAE;MAC/BT,QAAQ,CAACU,QAAQ,GAAGF,OAAO,CAACC,WAAW;IACzC;IACA,IAAI,CAAChB,KAAK,CAACe,OAAO,CAACG,cAAc,CAAC,EAAE;MAClCX,QAAQ,CAACY,WAAW,GAAGJ,OAAO,CAACG,cAAc;IAC/C;IACA,IAAI,CAAClB,KAAK,CAACe,OAAO,CAACK,cAAc,CAAC,EAAE;MAClCb,QAAQ,CAACc,WAAW,GAAGN,OAAO,CAACK,cAAc;IAC/C;IACA,OAAOb,QAAQ;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}