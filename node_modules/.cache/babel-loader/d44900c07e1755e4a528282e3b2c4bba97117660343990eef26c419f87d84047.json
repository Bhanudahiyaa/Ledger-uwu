{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Point from '@mapbox/point-geometry';\nimport { clamp, interpolates } from \"../util/util\";\n\n/**\n * An `EdgeInset` object represents screen space padding applied to the edges of the viewport.\n * This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\n * on top of the map and having the vanishing point shift as UI elements resize.\n *\n * @group Geography and Geometry\n */\nexport class EdgeInsets {\n  constructor(top = 0, bottom = 0, left = 0, right = 0) {\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"top\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"bottom\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"left\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"right\", void 0);\n    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {\n      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');\n    }\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Interpolates the inset in-place.\n   * This maintains the current inset value for any inset not present in `target`.\n   * @param start - interpolation start\n   * @param target - interpolation target\n   * @param t - interpolation step/weight\n   * @returns the insets\n   */\n  interpolate(start, target, t) {\n    if (target.top != null && start.top != null) this.top = interpolates.number(start.top, target.top, t);\n    if (target.bottom != null && start.bottom != null) this.bottom = interpolates.number(start.bottom, target.bottom, t);\n    if (target.left != null && start.left != null) this.left = interpolates.number(start.left, target.left, t);\n    if (target.right != null && start.right != null) this.right = interpolates.number(start.right, target.right, t);\n    return this;\n  }\n\n  /**\n   * Utility method that computes the new apprent center or vanishing point after applying insets.\n   * This is in pixels and with the top left being (0.0) and +y being downwards.\n   *\n   * @param width - the width\n   * @param height - the height\n   * @returns the point\n   */\n  getCenter(width, height) {\n    // Clamp insets so they never overflow width/height and always calculate a valid center\n    const x = clamp((this.left + width - this.right) / 2, 0, width);\n    const y = clamp((this.top + height - this.bottom) / 2, 0, height);\n    return new Point(x, y);\n  }\n  equals(other) {\n    return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;\n  }\n  clone() {\n    return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n  }\n\n  /**\n   * Returns the current state as json, useful when you want to have a\n   * read-only representation of the inset.\n   *\n   * @returns state as json\n   */\n  toJSON() {\n    return {\n      top: this.top,\n      bottom: this.bottom,\n      left: this.left,\n      right: this.right\n    };\n  }\n}\n\n/**\n * Options for setting padding on calls to methods such as {@link Map#fitBounds}, {@link Map#fitScreenCoordinates}, and {@link Map#setPadding}. Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be\n * non-negative integers.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let bbox = [[-79, 43], [-73, 45]];\n * map.fitBounds(bbox, {\n *   padding: {top: 10, bottom:25, left: 15, right: 5}\n * });\n * ```\n *\n * @example\n * ```ts\n * let bbox = [[-79, 43], [-73, 45]];\n * map.fitBounds(bbox, {\n *   padding: 20\n * });\n * ```\n * @see [Fit to the bounds of a LineString](https://maplibre.org/maplibre-gl-js/docs/examples/zoomto-linestring/)\n * @see [Fit a map to a bounding box](https://maplibre.org/maplibre-gl-js/docs/examples/fitbounds/)\n */","map":{"version":3,"names":["_defineProperty","Point","clamp","interpolates","EdgeInsets","constructor","top","bottom","left","right","isNaN","Error","interpolate","start","target","t","number","getCenter","width","height","x","y","equals","other","clone","toJSON"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-map/es/map/geo/edge_insets.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Point from '@mapbox/point-geometry';\nimport { clamp, interpolates } from \"../util/util\";\n\n/**\n * An `EdgeInset` object represents screen space padding applied to the edges of the viewport.\n * This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\n * on top of the map and having the vanishing point shift as UI elements resize.\n *\n * @group Geography and Geometry\n */\nexport class EdgeInsets {\n  constructor(top = 0, bottom = 0, left = 0, right = 0) {\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"top\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"bottom\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"left\", void 0);\n    /**\n     * @defaultValue 0\n     */\n    _defineProperty(this, \"right\", void 0);\n    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {\n      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');\n    }\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Interpolates the inset in-place.\n   * This maintains the current inset value for any inset not present in `target`.\n   * @param start - interpolation start\n   * @param target - interpolation target\n   * @param t - interpolation step/weight\n   * @returns the insets\n   */\n  interpolate(start, target, t) {\n    if (target.top != null && start.top != null) this.top = interpolates.number(start.top, target.top, t);\n    if (target.bottom != null && start.bottom != null) this.bottom = interpolates.number(start.bottom, target.bottom, t);\n    if (target.left != null && start.left != null) this.left = interpolates.number(start.left, target.left, t);\n    if (target.right != null && start.right != null) this.right = interpolates.number(start.right, target.right, t);\n    return this;\n  }\n\n  /**\n   * Utility method that computes the new apprent center or vanishing point after applying insets.\n   * This is in pixels and with the top left being (0.0) and +y being downwards.\n   *\n   * @param width - the width\n   * @param height - the height\n   * @returns the point\n   */\n  getCenter(width, height) {\n    // Clamp insets so they never overflow width/height and always calculate a valid center\n    const x = clamp((this.left + width - this.right) / 2, 0, width);\n    const y = clamp((this.top + height - this.bottom) / 2, 0, height);\n    return new Point(x, y);\n  }\n  equals(other) {\n    return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;\n  }\n  clone() {\n    return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n  }\n\n  /**\n   * Returns the current state as json, useful when you want to have a\n   * read-only representation of the inset.\n   *\n   * @returns state as json\n   */\n  toJSON() {\n    return {\n      top: this.top,\n      bottom: this.bottom,\n      left: this.left,\n      right: this.right\n    };\n  }\n}\n\n/**\n * Options for setting padding on calls to methods such as {@link Map#fitBounds}, {@link Map#fitScreenCoordinates}, and {@link Map#setPadding}. Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be\n * non-negative integers.\n *\n * @group Geography and Geometry\n *\n * @example\n * ```ts\n * let bbox = [[-79, 43], [-73, 45]];\n * map.fitBounds(bbox, {\n *   padding: {top: 10, bottom:25, left: 15, right: 5}\n * });\n * ```\n *\n * @example\n * ```ts\n * let bbox = [[-79, 43], [-73, 45]];\n * map.fitBounds(bbox, {\n *   padding: 20\n * });\n * ```\n * @see [Fit to the bounds of a LineString](https://maplibre.org/maplibre-gl-js/docs/examples/zoomto-linestring/)\n * @see [Fit a map to a bounding box](https://maplibre.org/maplibre-gl-js/docs/examples/fitbounds/)\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}