{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Base } from './base';\nexport class ClipboardManager extends Base {\n  get commonOptions() {\n    const _a = this.instanceOptions,\n      {\n        enabled\n      } = _a,\n      others = __rest(_a, [\"enabled\"]);\n    return others;\n  }\n  get instanceOptions() {\n    return this.options.clipboard;\n  }\n  get cells() {\n    return this.widget.cells;\n  }\n  get disabled() {\n    return this.instanceOptions.enabled !== true;\n  }\n  init() {\n    this.widget = this.graph.hook.createClipboard();\n    this.widget.deserialize(this.instanceOptions);\n  }\n  enable() {\n    if (this.disabled) {\n      this.instanceOptions.enabled = true;\n    }\n  }\n  disable() {\n    if (!this.disabled) {\n      this.instanceOptions.enabled = false;\n    }\n  }\n  copy(cells, options = {}) {\n    if (!this.disabled) {\n      this.widget.copy(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n      this.graph.trigger('clipboard:changed', {\n        cells\n      });\n    }\n  }\n  cut(cells, options = {}) {\n    if (!this.disabled) {\n      this.widget.cut(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n      this.graph.trigger('clipboard:changed', {\n        cells\n      });\n    }\n  }\n  paste(options = {}, graph = this.graph) {\n    if (!this.disabled) {\n      return this.widget.paste(graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n    return [];\n  }\n  clean(force) {\n    if (!this.disabled || force) {\n      this.widget.clean();\n      this.graph.trigger('clipboard:changed', {\n        cells: []\n      });\n    }\n  }\n  isEmpty() {\n    return this.widget.isEmpty();\n  }\n  dispose() {\n    this.clean(true);\n  }\n}\n__decorate([Base.dispose()], ClipboardManager.prototype, \"dispose\", null);","map":{"version":3,"names":["Base","ClipboardManager","commonOptions","_a","instanceOptions","enabled","others","__rest","options","clipboard","cells","widget","disabled","init","graph","hook","createClipboard","deserialize","enable","disable","copy","Object","assign","trigger","cut","paste","clean","force","isEmpty","dispose","__decorate"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/graph/clipboard.ts"],"sourcesContent":["import { IDisablable } from '../common'\nimport { Clipboard } from '../addon/clipboard'\nimport { Cell } from '../model/cell'\nimport { Graph } from './graph'\nimport { Base } from './base'\n\nexport class ClipboardManager extends Base implements IDisablable {\n  public widget: Clipboard\n\n  protected get commonOptions() {\n    const { enabled, ...others } = this.instanceOptions\n    return others\n  }\n\n  protected get instanceOptions() {\n    return this.options.clipboard\n  }\n\n  get cells() {\n    return this.widget.cells\n  }\n\n  get disabled() {\n    return this.instanceOptions.enabled !== true\n  }\n\n  protected init() {\n    this.widget = this.graph.hook.createClipboard()\n    this.widget.deserialize(this.instanceOptions)\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.instanceOptions.enabled = true\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.instanceOptions.enabled = false\n    }\n  }\n\n  copy(cells: Cell[], options: Clipboard.CopyOptions = {}) {\n    if (!this.disabled) {\n      this.widget.copy(cells, this.graph, {\n        ...this.commonOptions,\n        ...options,\n      })\n      this.graph.trigger('clipboard:changed', { cells })\n    }\n  }\n\n  cut(cells: Cell[], options: Clipboard.CopyOptions = {}) {\n    if (!this.disabled) {\n      this.widget.cut(cells, this.graph, {\n        ...this.commonOptions,\n        ...options,\n      })\n      this.graph.trigger('clipboard:changed', { cells })\n    }\n  }\n\n  paste(options: Clipboard.PasteOptions = {}, graph: Graph = this.graph) {\n    if (!this.disabled) {\n      return this.widget.paste(graph, {\n        ...this.commonOptions,\n        ...options,\n      })\n    }\n    return []\n  }\n\n  clean(force?: boolean) {\n    if (!this.disabled || force) {\n      this.widget.clean()\n      this.graph.trigger('clipboard:changed', { cells: [] })\n    }\n  }\n\n  isEmpty() {\n    return this.widget.isEmpty()\n  }\n\n  @Base.dispose()\n  dispose() {\n    this.clean(true)\n  }\n}\n\nexport namespace ClipboardManager {\n  export interface ClipboardEventArgs {\n    'clipboard:changed': {\n      cells: Cell[]\n    }\n  }\n\n  export interface Options extends Clipboard.Options {\n    enabled?: boolean\n  }\n\n  export interface CopyOptions extends Clipboard.CopyOptions {}\n  export interface PasteOptions extends Clipboard.PasteOptions {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}