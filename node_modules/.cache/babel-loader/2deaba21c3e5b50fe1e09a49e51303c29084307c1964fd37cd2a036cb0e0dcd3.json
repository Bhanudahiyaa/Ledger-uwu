{"ast":null,"code":"const parentDummyChains = g => {\n  var _a;\n  const postorderNums = postorder(g);\n  (_a = g.graph().dummyChains) === null || _a === void 0 ? void 0 : _a.forEach(v => {\n    var _a, _b;\n    let node = g.node(v);\n    const edgeObj = node.edgeObj;\n    if (!edgeObj) return;\n    const pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    const path = pathData.path;\n    const lca = pathData.lca;\n    let pathIdx = 0;\n    let pathV = path[pathIdx];\n    let ascending = true;\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n      if (!ascending) {\n        while (pathIdx < path.length - 1 && ((_a = g.node(pathV = path[pathIdx + 1])) === null || _a === void 0 ? void 0 : _a.minRank) <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n      g.setParent(v, pathV);\n      // tslint:disable-next-line\n      v = (_b = g.successors(v)) === null || _b === void 0 ? void 0 : _b[0];\n    }\n  });\n};\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nconst findPath = (g, postorderNums, v, w) => {\n  const vPath = [];\n  const wPath = [];\n  const low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  const lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  let parent;\n  let lca;\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n  return {\n    lca,\n    path: vPath.concat(wPath.reverse())\n  };\n};\nconst postorder = g => {\n  var _a;\n  const result = {};\n  let lim = 0;\n  const dfs = v => {\n    var _a;\n    const low = lim;\n    (_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.forEach(dfs);\n    result[v] = {\n      low,\n      lim: lim++\n    };\n  };\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(dfs);\n  return result;\n};\nexport default parentDummyChains;","map":{"version":3,"names":["parentDummyChains","g","postorderNums","postorder","_a","graph","dummyChains","forEach","v","node","edgeObj","pathData","findPath","w","path","lca","pathIdx","pathV","ascending","maxRank","rank","length","minRank","setParent","_b","successors","vPath","wPath","low","Math","min","lim","max","parent","push","concat","reverse","result","dfs","children"],"sources":["../../../../src/layout/dagre/src/parent-dummy-chains.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}