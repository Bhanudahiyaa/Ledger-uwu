{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { DOM, Satistics, bindAll, boundsContains, lodashUtil, padBounds } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nimport Marker from \"./marker\";\nconst {\n  merge\n} = lodashUtil;\nexport default class MarkerLayer extends EventEmitter {\n  constructor(option) {\n    var _this$markerLayerOpti;\n    super();\n    _defineProperty(this, \"markers\", []);\n    // 原始的marker列表\n    _defineProperty(this, \"markerLayerOption\", void 0);\n    _defineProperty(this, \"clusterIndex\", void 0);\n    _defineProperty(this, \"points\", []);\n    _defineProperty(this, \"clusterMarkers\", []);\n    // 聚合后的marker列表\n    _defineProperty(this, \"mapsService\", void 0);\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"bbox\", void 0);\n    _defineProperty(this, \"inited\", void 0);\n    _defineProperty(this, \"containerSize\", void 0);\n    this.markerLayerOption = merge(this.getDefault(), option);\n    bindAll(['update'], this);\n    this.zoom = ((_this$markerLayerOpti = this.markerLayerOption.clusterOption) === null || _this$markerLayerOpti === void 0 ? void 0 : _this$markerLayerOpti.zoom) || -99;\n  }\n  getDefault() {\n    return {\n      cluster: false,\n      clusterOption: {\n        radius: 80,\n        maxZoom: 20,\n        minZoom: 0,\n        zoom: -99,\n        style: {},\n        className: ''\n      }\n    };\n  }\n\n  // 执行scene.addMarkerLayer时调用\n  addTo(scene) {\n    // this.remove();\n    this.scene = scene;\n    this.mapsService = scene.mapService;\n    if (this.markerLayerOption.cluster) {\n      this.initCluster();\n      this.update();\n      // 地图视野变化时，重新计算视野内的聚合点。\n      this.mapsService.on('camerachange', this.update); // amap1.x 更新事件\n      this.mapsService.on('viewchange', this.update); // amap2.0 更新事件\n    }\n    this.mapsService.on('camerachange', this.setContainerSize.bind(this)); // amap1.x 更新事件\n    this.mapsService.on('viewchange', this.setContainerSize.bind(this)); // amap2.0 更新事件\n    this.addMarkers();\n    this.inited = true;\n    return this;\n  }\n\n  // 设置容器大小\n  setContainerSize() {\n    if (!this.mapsService) {\n      return;\n    }\n    const container = this.mapsService.getContainer();\n    this.containerSize = {\n      containerWidth: (container === null || container === void 0 ? void 0 : container.scrollWidth) || 0,\n      containerHeight: (container === null || container === void 0 ? void 0 : container.scrollHeight) || 0,\n      bounds: this.mapsService.getBounds()\n    };\n  }\n\n  // 获取容器尺寸\n  getContainerSize() {\n    return this.containerSize;\n  }\n\n  // 在图层添加单个marker\n  addMarker(marker) {\n    const cluster = this.markerLayerOption.cluster;\n    marker.getMarkerLayerContainerSize = this.getContainerSize.bind(this);\n    if (cluster) {\n      this.addPoint(marker, this.markers.length);\n      if (this.mapsService) {\n        // 在新增 marker 的时候需要更新聚合信息（哪怕此时的 zoom 没有发生变化）\n        const zoom = this.mapsService.getZoom();\n        const bbox = this.mapsService.getBounds();\n        this.bbox = padBounds(bbox, 0.5);\n        this.zoom = Math.floor(zoom);\n        this.getClusterMarker(this.bbox, this.zoom);\n      }\n    }\n    this.markers.push(marker);\n  }\n  removeMarker(marker) {\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n      if (this.markerLayerOption.cluster) {\n        this.removePoint(markerIndex);\n        if (this.mapsService) {\n          this.getClusterMarker(this.bbox, this.zoom);\n        }\n      }\n    }\n  }\n\n  /**\n   * 隐藏 marker 在每个 marker 上单独修改属性而不是在 markerContainer 上修改（在 markerContainer 修改会有用户在场景加载完之前调用失败的问题）\n   */\n  hide() {\n    this.markers.map(m => {\n      m.getElement().style.opacity = '0';\n    });\n    this.clusterMarkers.map(m => {\n      m.getElement().style.opacity = '0';\n    });\n  }\n\n  /**\n   * 显示 marker\n   */\n  show() {\n    this.markers.map(m => {\n      m.getElement().style.opacity = '1';\n    });\n    this.clusterMarkers.map(m => {\n      m.getElement().style.opacity = '1';\n    });\n  }\n\n  // 返回当下的markers数据，有聚合图时返回聚合的marker列表，否则返回原始maerker列表\n  getMarkers() {\n    const cluster = this.markerLayerOption.cluster;\n    return cluster ? this.clusterMarkers : this.markers;\n  }\n  getOriginMarkers() {\n    return this.markers;\n  }\n\n  // 批量添加marker到scene\n  addMarkers() {\n    this.getMarkers().forEach(marker => {\n      marker.addTo(this.scene);\n    });\n  }\n\n  // 清除图层里的marker\n  clear() {\n    this.markers.forEach(marker => {\n      marker.remove();\n    });\n    this.clusterMarkers.forEach(clusterMarker => {\n      clusterMarker.remove();\n    });\n    this.markers = [];\n    this.points = [];\n    this.clusterMarkers = [];\n  }\n  destroy() {\n    this.clear();\n    this.removeAllListeners();\n    this.mapsService.off('camerachange', this.update);\n    this.mapsService.off('viewchange', this.update);\n    this.mapsService.off('camerachange', this.setContainerSize.bind(this));\n    this.mapsService.off('viewchange', this.setContainerSize.bind(this));\n  }\n\n  // 将marker数据保存在point中\n  addPoint(marker, id) {\n    const {\n      lng,\n      lat\n    } = marker.getLnglat();\n    const feature = {\n      geometry: {\n        type: 'Point',\n        coordinates: [lng, lat]\n      },\n      properties: _objectSpread(_objectSpread({}, marker.getExtData()), {}, {\n        marker_id: id\n      })\n    };\n    this.points.push(feature);\n    if (this.clusterIndex) {\n      // 在新增点的时候需要更新 cluster 的数据\n      this.clusterIndex.load(this.points);\n    }\n  }\n  removePoint(id) {\n    const targetIndex = this.points.findIndex(point => point.properties.marker_id === id);\n    if (targetIndex > -1) {\n      this.points.splice(targetIndex, 1);\n    }\n    if (this.clusterIndex) {\n      // 在删除点的时候需要更新 cluster 的数据\n      this.clusterIndex.load(this.points);\n    }\n  }\n  initCluster() {\n    if (!this.markerLayerOption.cluster) {\n      return;\n    }\n    const {\n      radius,\n      minZoom = 0,\n      maxZoom\n    } = this.markerLayerOption.clusterOption;\n    this.clusterIndex = new Supercluster({\n      radius,\n      minZoom,\n      maxZoom\n    });\n    // @ts-ignore\n    this.clusterIndex.load(this.points);\n  }\n  getClusterMarker(viewBounds, zoom) {\n    const viewBBox = viewBounds[0].concat(viewBounds[1]);\n    const clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);\n    this.clusterMarkers.forEach(marker => {\n      marker.remove();\n    });\n    this.clusterMarkers = [];\n    clusterPoint.forEach(feature => {\n      var _feature$properties;\n      const {\n        field,\n        method\n      } = this.markerLayerOption.clusterOption;\n      // 处理聚合数据\n      if ((_feature$properties = feature.properties) !== null && _feature$properties !== void 0 && _feature$properties.cluster_id) {\n        var _feature$properties2;\n        const clusterData = this.getLeaves((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.cluster_id);\n        feature.properties.clusterData = clusterData;\n        if (field && method) {\n          const columnData = clusterData === null || clusterData === void 0 ? void 0 : clusterData.map(item => {\n            const data = {\n              [field]: item.properties[field]\n            };\n            return data;\n          });\n          const column = Satistics.getColumn(columnData, field);\n          const stat = Satistics.getSatByColumn(method, column);\n          const fieldName = 'point_' + method;\n          feature.properties[fieldName] = stat.toFixed(2);\n        }\n      }\n      const marker = this.clusterMarker(feature);\n      this.clusterMarkers.push(marker);\n      marker.addTo(this.scene);\n    });\n  }\n  getLeaves(clusterId, limit = Infinity, offset = 0) {\n    if (!clusterId) {\n      return null;\n    }\n    return this.clusterIndex.getLeaves(clusterId, limit, offset);\n  }\n  clusterMarker(feature) {\n    const clusterOption = this.markerLayerOption.clusterOption;\n    const {\n      element = this.generateElement.bind(this)\n    } = clusterOption;\n    const marker = new Marker({\n      element: element(feature)\n    }).setLnglat({\n      lng: feature.geometry.coordinates[0],\n      lat: feature.geometry.coordinates[1]\n    });\n    return marker;\n  }\n  normalMarker(feature) {\n    const marker_id = feature.properties.marker_id;\n    return this.markers[marker_id];\n  }\n  update() {\n    if (!this.mapsService) {\n      return;\n    }\n    // 当图层中无marker时，无需更新\n    if (this.markers.length === 0) {\n      return;\n    }\n    const zoom = this.mapsService.getZoom();\n    const bbox = this.mapsService.getBounds();\n    if (!this.bbox || Math.abs(zoom - this.zoom) >= 1 || !boundsContains(this.bbox, bbox)) {\n      this.bbox = padBounds(bbox, 0.5);\n      this.zoom = Math.floor(zoom);\n      this.getClusterMarker(this.bbox, this.zoom);\n    }\n  }\n  generateElement(feature) {\n    const el = DOM.create('div', 'l7-marker-cluster');\n    const label = DOM.create('div', '', el);\n    const span = DOM.create('span', '', label);\n    const {\n      field,\n      method\n    } = this.markerLayerOption.clusterOption;\n    feature.properties.point_count = feature.properties.point_count || 1;\n    const text = field && method ? feature.properties['point_' + method] || feature.properties[field] : feature.properties.point_count;\n    span.textContent = text;\n    return el;\n  }\n}","map":{"version":3,"names":["_objectSpread","_defineProperty","DOM","Satistics","bindAll","boundsContains","lodashUtil","padBounds","EventEmitter","Supercluster","Marker","merge","MarkerLayer","constructor","option","_this$markerLayerOpti","markerLayerOption","getDefault","zoom","clusterOption","cluster","radius","maxZoom","minZoom","style","className","addTo","scene","mapsService","mapService","initCluster","update","on","setContainerSize","bind","addMarkers","inited","container","getContainer","containerSize","containerWidth","scrollWidth","containerHeight","scrollHeight","bounds","getBounds","getContainerSize","addMarker","marker","getMarkerLayerContainerSize","addPoint","markers","length","getZoom","bbox","Math","floor","getClusterMarker","push","removeMarker","indexOf","markerIndex","splice","removePoint","hide","map","m","getElement","opacity","clusterMarkers","show","getMarkers","getOriginMarkers","forEach","clear","remove","clusterMarker","points","destroy","removeAllListeners","off","id","lng","lat","getLnglat","feature","geometry","type","coordinates","properties","getExtData","marker_id","clusterIndex","load","targetIndex","findIndex","point","viewBounds","viewBBox","concat","clusterPoint","getClusters","_feature$properties","field","method","cluster_id","_feature$properties2","clusterData","getLeaves","columnData","item","data","column","getColumn","stat","getSatByColumn","fieldName","toFixed","clusterId","limit","Infinity","offset","element","generateElement","setLnglat","normalMarker","abs","el","create","label","span","point_count","text","textContent"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-component/es/marker-layer.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { DOM, Satistics, bindAll, boundsContains, lodashUtil, padBounds } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nimport Marker from \"./marker\";\nconst {\n  merge\n} = lodashUtil;\nexport default class MarkerLayer extends EventEmitter {\n  constructor(option) {\n    var _this$markerLayerOpti;\n    super();\n    _defineProperty(this, \"markers\", []);\n    // 原始的marker列表\n    _defineProperty(this, \"markerLayerOption\", void 0);\n    _defineProperty(this, \"clusterIndex\", void 0);\n    _defineProperty(this, \"points\", []);\n    _defineProperty(this, \"clusterMarkers\", []);\n    // 聚合后的marker列表\n    _defineProperty(this, \"mapsService\", void 0);\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"bbox\", void 0);\n    _defineProperty(this, \"inited\", void 0);\n    _defineProperty(this, \"containerSize\", void 0);\n    this.markerLayerOption = merge(this.getDefault(), option);\n    bindAll(['update'], this);\n    this.zoom = ((_this$markerLayerOpti = this.markerLayerOption.clusterOption) === null || _this$markerLayerOpti === void 0 ? void 0 : _this$markerLayerOpti.zoom) || -99;\n  }\n  getDefault() {\n    return {\n      cluster: false,\n      clusterOption: {\n        radius: 80,\n        maxZoom: 20,\n        minZoom: 0,\n        zoom: -99,\n        style: {},\n        className: ''\n      }\n    };\n  }\n\n  // 执行scene.addMarkerLayer时调用\n  addTo(scene) {\n    // this.remove();\n    this.scene = scene;\n    this.mapsService = scene.mapService;\n    if (this.markerLayerOption.cluster) {\n      this.initCluster();\n      this.update();\n      // 地图视野变化时，重新计算视野内的聚合点。\n      this.mapsService.on('camerachange', this.update); // amap1.x 更新事件\n      this.mapsService.on('viewchange', this.update); // amap2.0 更新事件\n    }\n    this.mapsService.on('camerachange', this.setContainerSize.bind(this)); // amap1.x 更新事件\n    this.mapsService.on('viewchange', this.setContainerSize.bind(this)); // amap2.0 更新事件\n    this.addMarkers();\n    this.inited = true;\n    return this;\n  }\n\n  // 设置容器大小\n  setContainerSize() {\n    if (!this.mapsService) {\n      return;\n    }\n    const container = this.mapsService.getContainer();\n    this.containerSize = {\n      containerWidth: (container === null || container === void 0 ? void 0 : container.scrollWidth) || 0,\n      containerHeight: (container === null || container === void 0 ? void 0 : container.scrollHeight) || 0,\n      bounds: this.mapsService.getBounds()\n    };\n  }\n\n  // 获取容器尺寸\n  getContainerSize() {\n    return this.containerSize;\n  }\n\n  // 在图层添加单个marker\n  addMarker(marker) {\n    const cluster = this.markerLayerOption.cluster;\n    marker.getMarkerLayerContainerSize = this.getContainerSize.bind(this);\n    if (cluster) {\n      this.addPoint(marker, this.markers.length);\n      if (this.mapsService) {\n        // 在新增 marker 的时候需要更新聚合信息（哪怕此时的 zoom 没有发生变化）\n        const zoom = this.mapsService.getZoom();\n        const bbox = this.mapsService.getBounds();\n        this.bbox = padBounds(bbox, 0.5);\n        this.zoom = Math.floor(zoom);\n        this.getClusterMarker(this.bbox, this.zoom);\n      }\n    }\n    this.markers.push(marker);\n  }\n  removeMarker(marker) {\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n      if (this.markerLayerOption.cluster) {\n        this.removePoint(markerIndex);\n        if (this.mapsService) {\n          this.getClusterMarker(this.bbox, this.zoom);\n        }\n      }\n    }\n  }\n\n  /**\n   * 隐藏 marker 在每个 marker 上单独修改属性而不是在 markerContainer 上修改（在 markerContainer 修改会有用户在场景加载完之前调用失败的问题）\n   */\n  hide() {\n    this.markers.map(m => {\n      m.getElement().style.opacity = '0';\n    });\n    this.clusterMarkers.map(m => {\n      m.getElement().style.opacity = '0';\n    });\n  }\n\n  /**\n   * 显示 marker\n   */\n  show() {\n    this.markers.map(m => {\n      m.getElement().style.opacity = '1';\n    });\n    this.clusterMarkers.map(m => {\n      m.getElement().style.opacity = '1';\n    });\n  }\n\n  // 返回当下的markers数据，有聚合图时返回聚合的marker列表，否则返回原始maerker列表\n  getMarkers() {\n    const cluster = this.markerLayerOption.cluster;\n    return cluster ? this.clusterMarkers : this.markers;\n  }\n  getOriginMarkers() {\n    return this.markers;\n  }\n\n  // 批量添加marker到scene\n  addMarkers() {\n    this.getMarkers().forEach(marker => {\n      marker.addTo(this.scene);\n    });\n  }\n\n  // 清除图层里的marker\n  clear() {\n    this.markers.forEach(marker => {\n      marker.remove();\n    });\n    this.clusterMarkers.forEach(clusterMarker => {\n      clusterMarker.remove();\n    });\n    this.markers = [];\n    this.points = [];\n    this.clusterMarkers = [];\n  }\n  destroy() {\n    this.clear();\n    this.removeAllListeners();\n    this.mapsService.off('camerachange', this.update);\n    this.mapsService.off('viewchange', this.update);\n    this.mapsService.off('camerachange', this.setContainerSize.bind(this));\n    this.mapsService.off('viewchange', this.setContainerSize.bind(this));\n  }\n\n  // 将marker数据保存在point中\n  addPoint(marker, id) {\n    const {\n      lng,\n      lat\n    } = marker.getLnglat();\n    const feature = {\n      geometry: {\n        type: 'Point',\n        coordinates: [lng, lat]\n      },\n      properties: _objectSpread(_objectSpread({}, marker.getExtData()), {}, {\n        marker_id: id\n      })\n    };\n    this.points.push(feature);\n    if (this.clusterIndex) {\n      // 在新增点的时候需要更新 cluster 的数据\n      this.clusterIndex.load(this.points);\n    }\n  }\n  removePoint(id) {\n    const targetIndex = this.points.findIndex(point => point.properties.marker_id === id);\n    if (targetIndex > -1) {\n      this.points.splice(targetIndex, 1);\n    }\n    if (this.clusterIndex) {\n      // 在删除点的时候需要更新 cluster 的数据\n      this.clusterIndex.load(this.points);\n    }\n  }\n  initCluster() {\n    if (!this.markerLayerOption.cluster) {\n      return;\n    }\n    const {\n      radius,\n      minZoom = 0,\n      maxZoom\n    } = this.markerLayerOption.clusterOption;\n    this.clusterIndex = new Supercluster({\n      radius,\n      minZoom,\n      maxZoom\n    });\n    // @ts-ignore\n    this.clusterIndex.load(this.points);\n  }\n  getClusterMarker(viewBounds, zoom) {\n    const viewBBox = viewBounds[0].concat(viewBounds[1]);\n    const clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);\n    this.clusterMarkers.forEach(marker => {\n      marker.remove();\n    });\n    this.clusterMarkers = [];\n    clusterPoint.forEach(feature => {\n      var _feature$properties;\n      const {\n        field,\n        method\n      } = this.markerLayerOption.clusterOption;\n      // 处理聚合数据\n      if ((_feature$properties = feature.properties) !== null && _feature$properties !== void 0 && _feature$properties.cluster_id) {\n        var _feature$properties2;\n        const clusterData = this.getLeaves((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.cluster_id);\n        feature.properties.clusterData = clusterData;\n        if (field && method) {\n          const columnData = clusterData === null || clusterData === void 0 ? void 0 : clusterData.map(item => {\n            const data = {\n              [field]: item.properties[field]\n            };\n            return data;\n          });\n          const column = Satistics.getColumn(columnData, field);\n          const stat = Satistics.getSatByColumn(method, column);\n          const fieldName = 'point_' + method;\n          feature.properties[fieldName] = stat.toFixed(2);\n        }\n      }\n      const marker = this.clusterMarker(feature);\n      this.clusterMarkers.push(marker);\n      marker.addTo(this.scene);\n    });\n  }\n  getLeaves(clusterId, limit = Infinity, offset = 0) {\n    if (!clusterId) {\n      return null;\n    }\n    return this.clusterIndex.getLeaves(clusterId, limit, offset);\n  }\n  clusterMarker(feature) {\n    const clusterOption = this.markerLayerOption.clusterOption;\n    const {\n      element = this.generateElement.bind(this)\n    } = clusterOption;\n    const marker = new Marker({\n      element: element(feature)\n    }).setLnglat({\n      lng: feature.geometry.coordinates[0],\n      lat: feature.geometry.coordinates[1]\n    });\n    return marker;\n  }\n  normalMarker(feature) {\n    const marker_id = feature.properties.marker_id;\n    return this.markers[marker_id];\n  }\n  update() {\n    if (!this.mapsService) {\n      return;\n    }\n    // 当图层中无marker时，无需更新\n    if (this.markers.length === 0) {\n      return;\n    }\n    const zoom = this.mapsService.getZoom();\n    const bbox = this.mapsService.getBounds();\n    if (!this.bbox || Math.abs(zoom - this.zoom) >= 1 || !boundsContains(this.bbox, bbox)) {\n      this.bbox = padBounds(bbox, 0.5);\n      this.zoom = Math.floor(zoom);\n      this.getClusterMarker(this.bbox, this.zoom);\n    }\n  }\n  generateElement(feature) {\n    const el = DOM.create('div', 'l7-marker-cluster');\n    const label = DOM.create('div', '', el);\n    const span = DOM.create('span', '', label);\n    const {\n      field,\n      method\n    } = this.markerLayerOption.clusterOption;\n    feature.properties.point_count = feature.properties.point_count || 1;\n    const text = field && method ? feature.properties['point_' + method] || feature.properties[field] : feature.properties.point_count;\n    span.textContent = text;\n    return el;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}