{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { mat4, vec4 } from 'gl-matrix';\nimport { getDistanceScales } from \"../../utils/project\";\nimport { CoordinateSystem } from \"./ICoordinateSystemService\";\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nexport default class CoordinateSystemService {\n  constructor(cameraService) {\n    _defineProperty(this, \"needRefresh\", true);\n    /**\n     * 1. Web 墨卡托坐标系\n     * 2. 偏移经纬度，用于解决高精度抖动问题\n     * 3. 瓦片坐标，用于数据瓦片\n     * 4. 常规世界坐标系，用于常规 2D/3D 可视化场景\n     * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n     */\n    _defineProperty(this, \"coordinateSystem\", void 0);\n    /**\n     * 屏幕中心点 [lng, lat]\n     */\n    _defineProperty(this, \"viewportCenter\", void 0);\n    /**\n     * 屏幕中心点的最终投影结果，在 CPU 侧计算后传入 Shader\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"viewportCenterProjection\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [x, y, z]\n     */\n    _defineProperty(this, \"pixelsPerDegree\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [lng, lat] 使用泰勒级数展开\n     * 通过墨卡托坐标系下的差值估计世界坐标系下的差值\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"pixelsPerDegree2\", void 0);\n    /**\n     * 像素单位 -> 米\n     */\n    _defineProperty(this, \"pixelsPerMeter\", void 0);\n    this.cameraService = cameraService;\n  }\n  /**\n   * 重新计算当前坐标系参数\n   * TODO: 使用 memoize 缓存参数以及计算结果\n   */\n  refresh(offsetCenter) {\n    // if (!this.needRefresh) {\n    //   return;\n    // }\n    const zoom = this.cameraService.getZoom();\n    const center = offsetCenter ? offsetCenter : this.cameraService.getCenter();\n\n    // 计算像素到米以及经纬度之间的转换\n    const {\n      pixelsPerMeter,\n      pixelsPerDegree\n    } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom\n    });\n    this.viewportCenter = center;\n    this.viewportCenterProjection = [0, 0, 0, 0];\n    this.pixelsPerMeter = pixelsPerMeter;\n    this.pixelsPerDegree = pixelsPerDegree;\n    this.pixelsPerDegree2 = [0, 0, 0];\n    if (this.coordinateSystem === CoordinateSystem.LNGLAT) {\n      // 继续使用相机服务计算的 VP 矩阵\n      this.cameraService.setViewProjectionMatrix(undefined);\n    } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n      this.calculateLnglatOffset(center, zoom);\n    }\n    this.needRefresh = false;\n\n    // TODO: 判断是否应用瓦片 & 常规坐标系\n  }\n  getCoordinateSystem() {\n    return this.coordinateSystem;\n  }\n  setCoordinateSystem(coordinateSystem) {\n    this.coordinateSystem = coordinateSystem;\n  }\n  getViewportCenter() {\n    return this.viewportCenter;\n  }\n  getViewportCenterProjection() {\n    return this.viewportCenterProjection;\n  }\n  getPixelsPerDegree() {\n    return this.pixelsPerDegree;\n  }\n  getPixelsPerDegree2() {\n    return this.pixelsPerDegree2;\n  }\n  getPixelsPerMeter() {\n    return this.pixelsPerMeter;\n  }\n  calculateLnglatOffset(center, zoom, scale, flipY) {\n    // http://uber-common.github.io/viewport-mercator-project/docs/api-reference/web-mercator-utils#code-classlanguage-textgetdistancescalesviewportcode\n    const {\n      pixelsPerMeter: ppm,\n      pixelsPerDegree: ppd,\n      pixelsPerDegree2\n    } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom,\n      scale,\n      flipY,\n      highPrecision: true\n    });\n    let viewMatrix = this.cameraService.getViewMatrix();\n    const projectionMatrix = this.cameraService.getProjectionMatrix();\n    let viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n\n    // 经纬度投影到 Web 墨卡托坐标系\n    const positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));\n\n    // Web 墨卡托坐标系通过 VP 矩阵变换到世界坐标系\n    this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n\n    // 重新计算相机 VP 矩阵\n    this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);\n    this.pixelsPerMeter = ppm;\n    this.pixelsPerDegree = ppd;\n    this.pixelsPerDegree2 = pixelsPerDegree2;\n  }\n}","map":{"version":3,"names":["_defineProperty","mat4","vec4","getDistanceScales","CoordinateSystem","VECTOR_TO_POINT_MATRIX","CoordinateSystemService","constructor","cameraService","refresh","offsetCenter","zoom","getZoom","center","getCenter","pixelsPerMeter","pixelsPerDegree","latitude","viewportCenter","viewportCenterProjection","pixelsPerDegree2","coordinateSystem","LNGLAT","setViewProjectionMatrix","undefined","LNGLAT_OFFSET","calculateLnglatOffset","needRefresh","getCoordinateSystem","setCoordinateSystem","getViewportCenter","getViewportCenterProjection","getPixelsPerDegree","getPixelsPerDegree2","getPixelsPerMeter","scale","flipY","ppm","ppd","highPrecision","viewMatrix","getViewMatrix","projectionMatrix","getProjectionMatrix","viewProjectionMatrix","multiply","positionPixels","projectFlat","Math","fround","pow","transformMat4","getViewMatrixUncentered"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/coordinate/CoordinateSystemService.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { mat4, vec4 } from 'gl-matrix';\nimport { getDistanceScales } from \"../../utils/project\";\nimport { CoordinateSystem } from \"./ICoordinateSystemService\";\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nexport default class CoordinateSystemService {\n  constructor(cameraService) {\n    _defineProperty(this, \"needRefresh\", true);\n    /**\n     * 1. Web 墨卡托坐标系\n     * 2. 偏移经纬度，用于解决高精度抖动问题\n     * 3. 瓦片坐标，用于数据瓦片\n     * 4. 常规世界坐标系，用于常规 2D/3D 可视化场景\n     * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n     */\n    _defineProperty(this, \"coordinateSystem\", void 0);\n    /**\n     * 屏幕中心点 [lng, lat]\n     */\n    _defineProperty(this, \"viewportCenter\", void 0);\n    /**\n     * 屏幕中心点的最终投影结果，在 CPU 侧计算后传入 Shader\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"viewportCenterProjection\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [x, y, z]\n     */\n    _defineProperty(this, \"pixelsPerDegree\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [lng, lat] 使用泰勒级数展开\n     * 通过墨卡托坐标系下的差值估计世界坐标系下的差值\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"pixelsPerDegree2\", void 0);\n    /**\n     * 像素单位 -> 米\n     */\n    _defineProperty(this, \"pixelsPerMeter\", void 0);\n    this.cameraService = cameraService;\n  }\n  /**\n   * 重新计算当前坐标系参数\n   * TODO: 使用 memoize 缓存参数以及计算结果\n   */\n  refresh(offsetCenter) {\n    // if (!this.needRefresh) {\n    //   return;\n    // }\n    const zoom = this.cameraService.getZoom();\n    const center = offsetCenter ? offsetCenter : this.cameraService.getCenter();\n\n    // 计算像素到米以及经纬度之间的转换\n    const {\n      pixelsPerMeter,\n      pixelsPerDegree\n    } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom\n    });\n    this.viewportCenter = center;\n    this.viewportCenterProjection = [0, 0, 0, 0];\n    this.pixelsPerMeter = pixelsPerMeter;\n    this.pixelsPerDegree = pixelsPerDegree;\n    this.pixelsPerDegree2 = [0, 0, 0];\n    if (this.coordinateSystem === CoordinateSystem.LNGLAT) {\n      // 继续使用相机服务计算的 VP 矩阵\n      this.cameraService.setViewProjectionMatrix(undefined);\n    } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n      this.calculateLnglatOffset(center, zoom);\n    }\n    this.needRefresh = false;\n\n    // TODO: 判断是否应用瓦片 & 常规坐标系\n  }\n  getCoordinateSystem() {\n    return this.coordinateSystem;\n  }\n  setCoordinateSystem(coordinateSystem) {\n    this.coordinateSystem = coordinateSystem;\n  }\n  getViewportCenter() {\n    return this.viewportCenter;\n  }\n  getViewportCenterProjection() {\n    return this.viewportCenterProjection;\n  }\n  getPixelsPerDegree() {\n    return this.pixelsPerDegree;\n  }\n  getPixelsPerDegree2() {\n    return this.pixelsPerDegree2;\n  }\n  getPixelsPerMeter() {\n    return this.pixelsPerMeter;\n  }\n  calculateLnglatOffset(center, zoom, scale, flipY) {\n    // http://uber-common.github.io/viewport-mercator-project/docs/api-reference/web-mercator-utils#code-classlanguage-textgetdistancescalesviewportcode\n    const {\n      pixelsPerMeter: ppm,\n      pixelsPerDegree: ppd,\n      pixelsPerDegree2\n    } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom,\n      scale,\n      flipY,\n      highPrecision: true\n    });\n    let viewMatrix = this.cameraService.getViewMatrix();\n    const projectionMatrix = this.cameraService.getProjectionMatrix();\n    let viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n\n    // 经纬度投影到 Web 墨卡托坐标系\n    const positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));\n\n    // Web 墨卡托坐标系通过 VP 矩阵变换到世界坐标系\n    this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n\n    // 重新计算相机 VP 矩阵\n    this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);\n    this.pixelsPerMeter = ppm;\n    this.pixelsPerDegree = ppd;\n    this.pixelsPerDegree2 = pixelsPerDegree2;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}