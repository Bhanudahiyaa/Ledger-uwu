{"ast":null,"code":"import JQuery from 'jquery';\nimport { ObjectExt, StringExt, Dom, Vector } from '../util';\n// eslint-disable-next-line\nexport var Markup;\n(function (Markup) {\n  function isJSONMarkup(markup) {\n    return markup != null && !isStringMarkup(markup);\n  }\n  Markup.isJSONMarkup = isJSONMarkup;\n  function isStringMarkup(markup) {\n    return markup != null && typeof markup === 'string';\n  }\n  Markup.isStringMarkup = isStringMarkup;\n  function clone(markup) {\n    return markup == null || isStringMarkup(markup) ? markup : ObjectExt.cloneDeep(markup);\n  }\n  Markup.clone = clone;\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n  function sanitize(markup) {\n    return `${markup}`.trim().replace(/[\\r|\\n]/g, ' ').replace(/>\\s+</g, '><');\n  }\n  Markup.sanitize = sanitize;\n  function parseStringMarkup(markup) {\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const sanitized = sanitize(markup);\n    const nodes = StringExt.sanitizeHTML(sanitized, {\n      raw: true\n    });\n    nodes.forEach(node => {\n      fragment.appendChild(node);\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n  Markup.parseStringMarkup = parseStringMarkup;\n  function parseJSONMarkup(markup, options = {\n    ns: Dom.ns.svg\n  }) {\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const queue = [{\n      markup: Array.isArray(markup) ? markup : [markup],\n      parent: fragment,\n      ns: options.ns\n    }];\n    while (queue.length > 0) {\n      const item = queue.pop();\n      let ns = item.ns || Dom.ns.svg;\n      const defines = item.markup;\n      const parentNode = item.parent;\n      defines.forEach(define => {\n        // tagName\n        const tagName = define.tagName;\n        if (!tagName) {\n          throw new TypeError('Invalid tagName');\n        }\n        // ns\n        if (define.ns) {\n          ns = define.ns;\n        }\n        const svg = ns === Dom.ns.svg;\n        const node = ns ? Dom.createElementNS(tagName, ns) : Dom.createElement(tagName);\n        // attrs\n        const attrs = define.attrs;\n        if (attrs) {\n          if (svg) {\n            Dom.attr(node, Dom.kebablizeAttrs(attrs));\n          } else {\n            JQuery(node).attr(attrs);\n          }\n        }\n        // style\n        const style = define.style;\n        if (style) {\n          JQuery(node).css(style);\n        }\n        // classname\n        const className = define.className;\n        if (className != null) {\n          node.setAttribute('class', Array.isArray(className) ? className.join(' ') : className);\n        }\n        // textContent\n        if (define.textContent) {\n          node.textContent = define.textContent;\n        }\n        // selector\n        const selector = define.selector;\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique');\n          }\n          selectors[selector] = node;\n        }\n        // group\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector;\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups];\n          }\n          nodeGroups.forEach(name => {\n            if (!groups[name]) {\n              groups[name] = [];\n            }\n            groups[name].push(node);\n          });\n        }\n        parentNode.appendChild(node);\n        // children\n        const children = define.children;\n        if (Array.isArray(children)) {\n          queue.push({\n            ns,\n            markup: children,\n            parent: node\n          });\n        }\n      });\n    }\n    Object.keys(groups).forEach(groupName => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector');\n      }\n      selectors[groupName] = groups[groupName];\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n  Markup.parseJSONMarkup = parseJSONMarkup;\n  function createContainer(firstChild) {\n    return firstChild instanceof SVGElement ? Dom.createSvgElement('g') : Dom.createElement('div');\n  }\n  function renderMarkup(markup) {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup);\n      const count = nodes.length;\n      if (count === 1) {\n        return {\n          elem: nodes[0].node\n        };\n      }\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node);\n        nodes.forEach(node => {\n          elem.appendChild(node.node);\n        });\n        return {\n          elem\n        };\n      }\n      return {};\n    }\n    const result = parseJSONMarkup(markup);\n    const fragment = result.fragment;\n    let elem = null;\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild);\n      elem.appendChild(fragment);\n    } else {\n      elem = fragment.firstChild;\n    }\n    return {\n      elem,\n      selectors: result.selectors\n    };\n  }\n  Markup.renderMarkup = renderMarkup;\n  function parseLabelStringMarkup(markup) {\n    const children = Vector.createVectors(markup);\n    const fragment = document.createDocumentFragment();\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node;\n      fragment.appendChild(currentChild);\n    }\n    return {\n      fragment,\n      selectors: {}\n    };\n  }\n  Markup.parseLabelStringMarkup = parseLabelStringMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getSelector(elem, stop, prev) {\n    if (elem != null) {\n      let selector;\n      const tagName = elem.tagName.toLowerCase();\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`;\n        } else {\n          selector = `> ${tagName}`;\n        }\n        return selector;\n      }\n      const parent = elem.parentNode;\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1;\n        selector = `${tagName}:nth-child(${nth})`;\n      } else {\n        selector = tagName;\n      }\n      if (prev) {\n        selector += ` > ${prev}`;\n      }\n      return getSelector(elem.parentNode, stop, selector);\n    }\n    return prev;\n  }\n  Markup.getSelector = getSelector;\n  function parseNode(node, root, ns) {\n    if (node.nodeName === '#text') {\n      return null;\n    }\n    let selector = null;\n    let groupSelector = null;\n    // let classNames: string | null = null\n    let attrs = null;\n    let isCSSSelector = false;\n    const markup = {\n      tagName: node.tagName\n    };\n    if (node.attributes) {\n      attrs = {};\n      for (let i = 0, l = node.attributes.length; i < l; i += 1) {\n        const attr = node.attributes[i];\n        const name = attr.nodeName;\n        const value = attr.nodeValue;\n        if (name === 'selector') {\n          selector = value;\n        } else if (name === 'groupSelector') {\n          groupSelector = value;\n        } else if (name === 'class') {\n          markup.attrs = {\n            class: value\n          };\n        } else {\n          attrs[name] = value;\n        }\n      }\n    }\n    if (selector == null) {\n      isCSSSelector = true;\n      selector = getSelector(node, root);\n    }\n    if (node.namespaceURI) {\n      markup.ns = node.namespaceURI;\n    }\n    if (markup.ns == null) {\n      if (['body', 'div', 'section', 'main', 'nav', 'footer', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'dl', 'center', 'strong', 'pre', 'form', 'select', 'textarea', 'fieldset', 'marquee', 'bgsound', 'iframe', 'frameset'].includes(node.tagName)) {\n        markup.ns = Dom.ns.xhtml;\n      } else if (ns) {\n        markup.ns = ns;\n      }\n    }\n    if (selector) {\n      markup.selector = selector;\n    }\n    if (groupSelector != null) {\n      markup.groupSelector = groupSelector;\n    }\n    return {\n      markup,\n      attrs,\n      isCSSSelector\n    };\n  }\n  function xml2json(xml) {\n    const sanitized = Markup.sanitize(xml);\n    const doc = Dom.parseXML(sanitized, {\n      mimeType: 'image/svg+xml'\n    });\n    const nodes = Array.prototype.slice.call(doc.childNodes);\n    const attrMap = {};\n    const markupMap = new WeakMap();\n    const parse = (node, root, ns) => {\n      const data = parseNode(node, root, ns);\n      if (data == null) {\n        const parent = markupMap.get(node.parentNode);\n        if (parent && node.textContent) {\n          parent.textContent = node.textContent;\n        }\n      } else {\n        const {\n          markup,\n          attrs,\n          isCSSSelector\n        } = data;\n        markupMap.set(node, markup);\n        if (markup.selector && attrs != null) {\n          if (Object.keys(attrs).length) {\n            attrMap[markup.selector] = attrs;\n          }\n          if (isCSSSelector) {\n            delete markup.selector;\n          }\n        }\n        if (node.childNodes && node.childNodes.length > 0) {\n          for (let i = 0, l = node.childNodes.length; i < l; i += 1) {\n            const child = node.childNodes[i];\n            const childMarkup = parse(child, root, markup.ns);\n            if (childMarkup) {\n              if (markup.children == null) {\n                markup.children = [];\n              }\n              markup.children.push(childMarkup);\n            }\n          }\n        }\n        return markup;\n      }\n    };\n    const markup = nodes.map(node => parse(node, node)).filter(mk => mk != null);\n    return {\n      markup,\n      attrs: attrMap\n    };\n  }\n  Markup.xml2json = xml2json;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getPortContainerMarkup() {\n    return 'g';\n  }\n  Markup.getPortContainerMarkup = getPortContainerMarkup;\n  function getPortMarkup() {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000'\n      }\n    };\n  }\n  Markup.getPortMarkup = getPortMarkup;\n  function getPortLabelMarkup() {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000'\n      }\n    };\n  }\n  Markup.getPortLabelMarkup = getPortLabelMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getEdgeMarkup() {\n    return Markup.sanitize(`\n    <path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"source-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"target-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>\n    <g class=\"labels\"/>\n    <g class=\"vertices\"/>\n    <g class=\"arrowheads\"/>\n    <g class=\"tools\"/>\n  `);\n  }\n  Markup.getEdgeMarkup = getEdgeMarkup;\n  function getEdgeToolMarkup() {\n    return Markup.sanitize(`\n    <g class=\"edge-tool\">\n      <g class=\"tool-remove\" event=\"edge:remove\">\n        <circle r=\"11\" />\n        <path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />\n        <title>Remove edge.</title>\n      </g>\n      <g class=\"tool-options\" event=\"edge:options\">\n        <circle r=\"11\" transform=\"translate(25)\"/>\n        <path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>\n        <title>Edge options.</title>\n      </g>\n    </g>\n  `);\n  }\n  Markup.getEdgeToolMarkup = getEdgeToolMarkup;\n  function getEdgeVertexMarkup() {\n    return Markup.sanitize(`\n    <g class=\"vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">\n      <circle class=\"vertex\" data-index=\"<%= index %>\" r=\"10\" />\n      <path class=\"vertex-remove-area\" data-index=\"<%= index %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>\n      <path class=\"vertex-remove\" data-index=\"<%= index %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">\n      <title>Remove vertex.</title>\n      </path>\n    </g>\n  `);\n  }\n  Markup.getEdgeVertexMarkup = getEdgeVertexMarkup;\n  function getEdgeArrowheadMarkup() {\n    return Markup.sanitize(`\n    <g class=\"arrowhead-group arrowhead-group-<%= end %>\">\n      <path class=\"arrowhead\" data-terminal=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />\n    </g>\n  `);\n  }\n  Markup.getEdgeArrowheadMarkup = getEdgeArrowheadMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getForeignObjectMarkup(bare = false) {\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [{\n        ns: Dom.ns.xhtml,\n        tagName: 'body',\n        selector: 'foBody',\n        attrs: {\n          xmlns: Dom.ns.xhtml\n        },\n        style: {\n          width: '100%',\n          height: '100%',\n          background: 'transparent'\n        },\n        children: bare ? [] : [{\n          tagName: 'div',\n          selector: 'foContent',\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }]\n      }]\n    };\n  }\n  Markup.getForeignObjectMarkup = getForeignObjectMarkup;\n})(Markup || (Markup = {}));","map":{"version":3,"names":["JQuery","ObjectExt","StringExt","Dom","Vector","Markup","isJSONMarkup","markup","isStringMarkup","clone","cloneDeep","sanitize","trim","replace","parseStringMarkup","fragment","document","createDocumentFragment","groups","selectors","sanitized","nodes","sanitizeHTML","raw","forEach","node","appendChild","parseJSONMarkup","options","ns","svg","queue","Array","isArray","parent","length","item","pop","defines","parentNode","define","tagName","TypeError","createElementNS","createElement","attrs","attr","kebablizeAttrs","style","css","className","setAttribute","join","textContent","selector","groupSelector","nodeGroups","name","push","children","Object","keys","groupName","Error","createContainer","firstChild","SVGElement","createSvgElement","renderMarkup","createVectors","count","elem","result","childNodes","parseLabelStringMarkup","i","n","currentChild","getSelector","stop","prev","toLowerCase","nth","index","parseNode","root","nodeName","isCSSSelector","attributes","l","value","nodeValue","class","namespaceURI","includes","xhtml","xml2json","xml","doc","parseXML","mimeType","prototype","slice","call","attrMap","markupMap","WeakMap","parse","data","get","set","child","childMarkup","map","filter","mk","getPortContainerMarkup","getPortMarkup","r","fill","stroke","getPortLabelMarkup","getEdgeMarkup","getEdgeToolMarkup","getEdgeVertexMarkup","getEdgeArrowheadMarkup","getForeignObjectMarkup","bare","xmlns","width","height","background"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/x6/src/view/markup.ts"],"sourcesContent":["import JQuery from 'jquery'\nimport { Attr } from '../registry'\nimport { KeyValue, Nilable } from '../types'\nimport { ObjectExt, StringExt, Dom, Vector } from '../util'\n\nexport type Markup = string | Markup.JSONMarkup | Markup.JSONMarkup[]\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export type Selectors = KeyValue<Element | Element[]>\n\n  export interface JSONMarkup {\n    /**\n     * The namespace URI of the element. It defaults to SVG namespace\n     * `\"http://www.w3.org/2000/svg\"`.\n     */\n    ns?: string | null\n\n    /**\n     * The type of element to be created.\n     */\n    tagName: string\n\n    /**\n     * A unique selector for targeting the element within the `attr`\n     * cell attribute.\n     */\n    selector?: string | null\n\n    /**\n     * A selector for targeting multiple elements within the `attr`\n     * cell attribute. The group selector name must not be the same\n     * as an existing selector name.\n     */\n    groupSelector?: string | string[] | null\n\n    attrs?: Attr.SimpleAttrs\n\n    style?: JQuery.PlainObject<string | number>\n\n    className?: string | string[]\n\n    children?: JSONMarkup[]\n\n    textContent?: string\n  }\n\n  export interface ParseResult {\n    fragment: DocumentFragment\n    selectors: Selectors\n    groups: KeyValue<Element[]>\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function isJSONMarkup(markup?: Nilable<Markup>) {\n    return markup != null && !isStringMarkup(markup)\n  }\n\n  export function isStringMarkup(markup?: Nilable<Markup>): markup is string {\n    return markup != null && typeof markup === 'string'\n  }\n\n  export function clone(markup?: Nilable<Markup>) {\n    return markup == null || isStringMarkup(markup)\n      ? markup\n      : ObjectExt.cloneDeep(markup)\n  }\n\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n  export function sanitize(markup: string) {\n    return `${markup}`\n      .trim()\n      .replace(/[\\r|\\n]/g, ' ')\n      .replace(/>\\s+</g, '><')\n  }\n\n  export function parseStringMarkup(markup: string) {\n    const fragment = document.createDocumentFragment()\n    const groups: KeyValue<Element[]> = {}\n    const selectors: Selectors = {}\n\n    const sanitized = sanitize(markup)\n    const nodes = StringExt.sanitizeHTML(sanitized, { raw: true })\n    nodes.forEach((node) => {\n      fragment.appendChild(node)\n    })\n\n    return { fragment, selectors, groups }\n  }\n\n  export function parseJSONMarkup(\n    markup: JSONMarkup | JSONMarkup[],\n    options: { ns?: string } = { ns: Dom.ns.svg },\n  ): ParseResult {\n    const fragment = document.createDocumentFragment()\n    const groups: KeyValue<Element[]> = {}\n    const selectors: Selectors = {}\n\n    const queue: {\n      markup: JSONMarkup[]\n      parent: Element | DocumentFragment\n      ns?: string\n    }[] = [\n      {\n        markup: Array.isArray(markup) ? markup : [markup],\n        parent: fragment,\n        ns: options.ns,\n      },\n    ]\n\n    while (queue.length > 0) {\n      const item = queue.pop()!\n      let ns = item.ns || Dom.ns.svg\n      const defines = item.markup\n      const parentNode = item.parent\n\n      defines.forEach((define) => {\n        // tagName\n        const tagName = define.tagName\n        if (!tagName) {\n          throw new TypeError('Invalid tagName')\n        }\n\n        // ns\n        if (define.ns) {\n          ns = define.ns\n        }\n\n        const svg = ns === Dom.ns.svg\n        const node = ns\n          ? Dom.createElementNS(tagName, ns)\n          : Dom.createElement(tagName)\n\n        // attrs\n        const attrs = define.attrs\n        if (attrs) {\n          if (svg) {\n            Dom.attr(node, Dom.kebablizeAttrs(attrs))\n          } else {\n            JQuery(node).attr(attrs)\n          }\n        }\n\n        // style\n        const style = define.style\n        if (style) {\n          JQuery(node).css(style)\n        }\n\n        // classname\n        const className = define.className\n        if (className != null) {\n          node.setAttribute(\n            'class',\n            Array.isArray(className) ? className.join(' ') : className,\n          )\n        }\n\n        // textContent\n        if (define.textContent) {\n          node.textContent = define.textContent\n        }\n\n        // selector\n        const selector = define.selector\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique')\n          }\n\n          selectors[selector] = node\n        }\n\n        // group\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups]\n          }\n\n          nodeGroups.forEach((name) => {\n            if (!groups[name]) {\n              groups[name] = []\n            }\n            groups[name].push(node)\n          })\n        }\n\n        parentNode.appendChild(node)\n\n        // children\n        const children = define.children\n        if (Array.isArray(children)) {\n          queue.push({ ns, markup: children, parent: node })\n        }\n      })\n    }\n\n    Object.keys(groups).forEach((groupName) => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector')\n      }\n      selectors[groupName] = groups[groupName]\n    })\n\n    return { fragment, selectors, groups }\n  }\n\n  function createContainer(firstChild: Element) {\n    return firstChild instanceof SVGElement\n      ? Dom.createSvgElement('g')\n      : Dom.createElement('div')\n  }\n\n  export function renderMarkup(markup: Markup): {\n    elem?: Element\n    selectors?: Selectors\n  } {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup)\n      const count = nodes.length\n\n      if (count === 1) {\n        return {\n          elem: nodes[0].node as Element,\n        }\n      }\n\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node)\n        nodes.forEach((node) => {\n          elem.appendChild(node.node)\n        })\n\n        return { elem }\n      }\n\n      return {}\n    }\n\n    const result = parseJSONMarkup(markup)\n    const fragment = result.fragment\n    let elem: Element | null = null\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild as Element)\n      elem.appendChild(fragment)\n    } else {\n      elem = fragment.firstChild as Element\n    }\n\n    return { elem, selectors: result.selectors }\n  }\n\n  export function parseLabelStringMarkup(markup: string) {\n    const children = Vector.createVectors(markup)\n    const fragment = document.createDocumentFragment()\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node\n      fragment.appendChild(currentChild)\n    }\n\n    return { fragment, selectors: {} }\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getSelector(\n    elem: Element,\n    stop: Element,\n    prev?: string,\n  ): string | undefined {\n    if (elem != null) {\n      let selector\n      const tagName = elem.tagName.toLowerCase()\n\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`\n        } else {\n          selector = `> ${tagName}`\n        }\n        return selector\n      }\n\n      const parent = elem.parentNode\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1\n        selector = `${tagName}:nth-child(${nth})`\n      } else {\n        selector = tagName\n      }\n\n      if (prev) {\n        selector += ` > ${prev}`\n      }\n\n      return getSelector(elem.parentNode as Element, stop, selector)\n    }\n\n    return prev\n  }\n\n  function parseNode(node: Element, root: Element, ns?: string | null) {\n    if (node.nodeName === '#text') {\n      return null\n    }\n\n    let selector: string | undefined | null = null\n    let groupSelector: string | undefined | null = null\n    // let classNames: string | null = null\n    let attrs: Attr.SimpleAttrs | null = null\n    let isCSSSelector = false\n\n    const markup: JSONMarkup = {\n      tagName: node.tagName,\n    }\n\n    if (node.attributes) {\n      attrs = {}\n      for (let i = 0, l = node.attributes.length; i < l; i += 1) {\n        const attr = node.attributes[i]\n        const name = attr.nodeName\n        const value = attr.nodeValue\n\n        if (name === 'selector') {\n          selector = value\n        } else if (name === 'groupSelector') {\n          groupSelector = value\n        } else if (name === 'class') {\n          markup.attrs = { class: value }\n        } else {\n          attrs[name] = value\n        }\n      }\n    }\n\n    if (selector == null) {\n      isCSSSelector = true\n      selector = getSelector(node, root)\n    }\n\n    if (node.namespaceURI) {\n      markup.ns = node.namespaceURI\n    }\n\n    if (markup.ns == null) {\n      if (\n        [\n          'body',\n          'div',\n          'section',\n          'main',\n          'nav',\n          'footer',\n          'span',\n          'p',\n          'h1',\n          'h2',\n          'h3',\n          'h4',\n          'h5',\n          'h6',\n          'ul',\n          'ol',\n          'dl',\n          'center',\n          'strong',\n          'pre',\n          'form',\n          'select',\n          'textarea',\n          'fieldset',\n          'marquee',\n          'bgsound',\n          'iframe',\n          'frameset',\n        ].includes(node.tagName)\n      ) {\n        markup.ns = Dom.ns.xhtml\n      } else if (ns) {\n        markup.ns = ns\n      }\n    }\n\n    if (selector) {\n      markup.selector = selector\n    }\n\n    if (groupSelector != null) {\n      markup.groupSelector = groupSelector\n    }\n\n    return {\n      markup,\n      attrs,\n      isCSSSelector,\n    }\n  }\n\n  export function xml2json(xml: string) {\n    const sanitized = sanitize(xml)\n    const doc = Dom.parseXML(sanitized, { mimeType: 'image/svg+xml' })\n    const nodes = Array.prototype.slice.call(doc.childNodes) as Element[]\n    const attrMap: Attr.CellAttrs = {}\n    const markupMap = new WeakMap<Element, JSONMarkup>()\n\n    const parse = (node: Element, root: Element, ns?: string | null) => {\n      const data = parseNode(node, root, ns)\n      if (data == null) {\n        const parent = markupMap.get(node.parentNode as Element)\n        if (parent && node.textContent) {\n          parent.textContent = node.textContent\n        }\n      } else {\n        const { markup, attrs, isCSSSelector } = data\n\n        markupMap.set(node, markup)\n\n        if (markup.selector && attrs != null) {\n          if (Object.keys(attrs).length) {\n            attrMap[markup.selector] = attrs\n          }\n\n          if (isCSSSelector) {\n            delete markup.selector\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length > 0) {\n          for (let i = 0, l = node.childNodes.length; i < l; i += 1) {\n            const child = node.childNodes[i] as Element\n            const childMarkup = parse(child, root, markup.ns)\n            if (childMarkup) {\n              if (markup.children == null) {\n                markup.children = []\n              }\n              markup.children.push(childMarkup)\n            }\n          }\n        }\n        return markup\n      }\n    }\n\n    const markup = nodes\n      .map((node) => parse(node, node))\n      .filter((mk) => mk != null) as JSONMarkup[]\n\n    return {\n      markup,\n      attrs: attrMap,\n    }\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getPortContainerMarkup(): Markup {\n    return 'g'\n  }\n\n  export function getPortMarkup(): Markup {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000',\n      },\n    }\n  }\n\n  export function getPortLabelMarkup(): Markup {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000',\n      },\n    }\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getEdgeMarkup(): Markup {\n    return sanitize(`\n    <path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"source-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"target-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>\n    <g class=\"labels\"/>\n    <g class=\"vertices\"/>\n    <g class=\"arrowheads\"/>\n    <g class=\"tools\"/>\n  `)\n  }\n\n  export function getEdgeToolMarkup(): Markup {\n    return sanitize(`\n    <g class=\"edge-tool\">\n      <g class=\"tool-remove\" event=\"edge:remove\">\n        <circle r=\"11\" />\n        <path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />\n        <title>Remove edge.</title>\n      </g>\n      <g class=\"tool-options\" event=\"edge:options\">\n        <circle r=\"11\" transform=\"translate(25)\"/>\n        <path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>\n        <title>Edge options.</title>\n      </g>\n    </g>\n  `)\n  }\n\n  export function getEdgeVertexMarkup(): Markup {\n    return sanitize(`\n    <g class=\"vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">\n      <circle class=\"vertex\" data-index=\"<%= index %>\" r=\"10\" />\n      <path class=\"vertex-remove-area\" data-index=\"<%= index %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>\n      <path class=\"vertex-remove\" data-index=\"<%= index %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">\n      <title>Remove vertex.</title>\n      </path>\n    </g>\n  `)\n  }\n\n  export function getEdgeArrowheadMarkup(): Markup {\n    return sanitize(`\n    <g class=\"arrowhead-group arrowhead-group-<%= end %>\">\n      <path class=\"arrowhead\" data-terminal=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />\n    </g>\n  `)\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getForeignObjectMarkup(bare = false): Markup.JSONMarkup {\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [\n        {\n          ns: Dom.ns.xhtml,\n          tagName: 'body',\n          selector: 'foBody',\n          attrs: {\n            xmlns: Dom.ns.xhtml,\n          },\n          style: {\n            width: '100%',\n            height: '100%',\n            background: 'transparent',\n          },\n          children: bare\n            ? []\n            : [\n                {\n                  tagName: 'div',\n                  selector: 'foContent',\n                  style: {\n                    width: '100%',\n                    height: '100%',\n                  },\n                },\n              ],\n        },\n      ],\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}