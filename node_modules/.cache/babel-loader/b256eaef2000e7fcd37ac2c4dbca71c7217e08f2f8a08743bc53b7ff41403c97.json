{"ast":null,"code":"/* babel-plugin-inline-import '../../../../shaders/post-processing/noise.glsl' */\nconst noise = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform float u_Amount : 0.5;\\n\\nfloat rand(vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\\nvec4 noise_filterColor(vec4 color, vec2 texCoord) {\\n  float diff = (rand(texCoord) - 0.5) * u_Amount;\\n  color.r += diff;\\n  color.g += diff;\\n  color.b += diff;\\n  return color;\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = noise_filterColor(gl_FragColor, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class NoisePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('noise-pass', {\n      vs: quad,\n      fs: noise\n    });\n    return this.shaderModuleService.getModule('noise-pass');\n  }\n}","map":{"version":3,"names":["noise","quad","BasePostProcessingPass","NoisePass","setupShaders","shaderModuleService","registerModule","vs","fs","getModule"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/NoisePass.js"],"sourcesContent":["/* babel-plugin-inline-import '../../../../shaders/post-processing/noise.glsl' */\nconst noise = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform float u_Amount : 0.5;\\n\\nfloat rand(vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\\nvec4 noise_filterColor(vec4 color, vec2 texCoord) {\\n  float diff = (rand(texCoord) - 0.5) * u_Amount;\\n  color.r += diff;\\n  color.g += diff;\\n  color.b += diff;\\n  return color;\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = noise_filterColor(gl_FragColor, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class NoisePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('noise-pass', {\n      vs: quad,\n      fs: noise\n    });\n    return this.shaderModuleService.getModule('noise-pass');\n  }\n}"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAG,4jBAA4jB;AAC1kB;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,eAAe,MAAMC,SAAS,SAASD,sBAAsB,CAAC;EAC5DE,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,YAAY,EAAE;MACpDC,EAAE,EAAEN,IAAI;MACRO,EAAE,EAAER;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAACK,mBAAmB,CAACI,SAAS,CAAC,YAAY,CAAC;EACzD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}