{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { polygonTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/water/polygon_water_frag.glsl' */\nconst water_frag = \"uniform sampler2D u_texture;\\nlayout(std140) uniform commonUniforms {\\n  float u_speed;\\n  float u_time;\\n};\\n\\nout vec4 outputColor;\\n\\n\\nin vec4 v_Color;\\nin vec2 v_uv;\\n\\nfloat rand(vec2 n) { return 0.5 + 0.5 * fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\\n\\nfloat water(vec3 p) {\\n  float t = u_time * u_speed;\\n  p.z += t * 2.; p.x += t * 2.;\\n  vec3 c1 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  p.z += t * 3.; p.x += t * 0.52;\\n  vec3 c2 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  p.z += t * 4.; p.x += t * 0.8;\\n  vec3 c3 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  c1 += c2 - c3;\\n  float z = (c1.x + c1.y + c1.z) / 3.;\\n  return p.y + z / 4.;\\n}\\n\\nfloat map(vec3 p) {\\n  float d = 100.0;\\n  d = water(p);\\n  return d;\\n}\\n\\nfloat intersect(vec3 ro, vec3 rd) {\\n  float d = 0.0;\\n  for (int i = 0; i <= 100; i++) {\\n    float h = map(ro + rd * d);\\n    if (h < 0.1) return  d;\\n    d += h;\\n  }\\n  return 0.0;\\n}\\n\\nvec3 norm(vec3 p) {\\n  float eps = .1;\\n  return normalize(vec3(\\n    map(p + vec3(eps, 0, 0)) - map(p + vec3(-eps, 0, 0)),\\n    map(p + vec3(0, eps, 0)) - map(p + vec3(0, -eps, 0)),\\n    map(p + vec3(0, 0, eps)) - map(p + vec3(0, 0, -eps))\\n  ));\\n} \\n\\nfloat calSpc() {\\n  vec3 l1 = normalize(vec3(1, 1, 1));\\n  vec3 ro = vec3(-3, 20, -8);\\n  vec3 rc = vec3(0, 0, 0);\\n  vec3 ww = normalize(rc - ro);\\n  vec3 uu = normalize(cross(vec3(0,1,0), ww));\\n  vec3 vv = normalize(cross(rc - ro, uu));\\n  vec3 rd = normalize(uu * v_uv.x + vv * v_uv.y + ww);\\n  float d = intersect(ro, rd);\\n  vec3 p = ro + rd * d;\\n  vec3 n = norm(p);\\n  float spc = pow(max(0.0, dot(reflect(l1, n), rd)), 30.0);\\n  return spc;\\n}\\n\\nvoid main() {\\n\\n  outputColor = v_Color;\\n  float spc = calSpc();\\n  outputColor += spc * 0.4;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/water/polygon_water_vert.glsl' */\nconst water_vert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_speed;\\n  float u_time;\\n};\\nout vec4 v_Color;\\nout vec2 v_uv;\\n\\n#pragma include \\\"projection\\\"\\n\\nvoid main() {\\n  v_uv = a_uv;\\n  v_Color = a_Color;\\n  v_Color.a *= opacity;\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n}\\n\\n\";\nexport default class WaterModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      UV: 9\n    });\n  }\n  getUninforms() {\n    const commoninfo = this.getCommonUniformsInfo();\n    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n    this.updateStyleUnifoms();\n    return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n  }\n  getCommonUniformsInfo() {\n    const {\n      speed = 0.5\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_speed: speed,\n      u_time: this.layer.getLayerAnimateTime(),\n      u_texture: this.texture\n    };\n\n    // u_opacity: isNumber(opacity) ? opacity : 1.0,\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  getAnimateUniforms() {\n    return {\n      u_time: this.layer.getLayerAnimateTime()\n    };\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loadTexture();\n      return _this.buildModels();\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.initUniformsBuffer();\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'polygonWater',\n        vertexShader: water_vert,\n        fragmentShader: water_frag,\n        triangulation: polygonTriangulation,\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        pickingEnabled: false,\n        diagnosticDerivativeUniformityEnabled: false\n      });\n      return [model];\n    })();\n  }\n  clearModels() {\n    var _this$texture;\n    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n  }\n  registerBuiltinAttributes() {\n    const bbox = this.layer.getSource().extent;\n    const [minLng, minLat, maxLng, maxLat] = bbox;\n    const lngLen = maxLng - minLng;\n    const latLen = maxLat - minLat;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'waterUv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          const [lng, lat] = vertex;\n          return [(lng - minLng) / lngLen, (lat - minLat) / latLen];\n        }\n      }\n    });\n  }\n  loadTexture() {\n    const {\n      waterTexture\n    } = this.layer.getLayerConfig();\n    const {\n      createTexture2D\n    } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 1,\n      width: 1\n    });\n    const image = new Image();\n    image.crossOrigin = '';\n    if (waterTexture) {\n      // custom texture\n      console.warn('L7 recommendï¼šhttps://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ');\n      image.src = waterTexture;\n    } else {\n      // default texture\n      image.src = 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ';\n    }\n    image.onload = () => {\n      this.texture = createTexture2D({\n        data: image,\n        width: image.width,\n        height: image.height,\n        wrapS: gl.MIRRORED_REPEAT,\n        wrapT: gl.MIRRORED_REPEAT,\n        min: gl.LINEAR,\n        mag: gl.LINEAR\n      });\n      this.layerService.reRender();\n    };\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_objectSpread","_defineProperty","AttributeType","gl","BaseModel","polygonTriangulation","water_frag","water_vert","WaterModel","constructor","args","attributeLocation","Object","assign","MAX","UV","getUninforms","commoninfo","getCommonUniformsInfo","attributeInfo","getUniformsBufferInfo","getStyleAttribute","updateStyleUnifoms","uniformsOption","speed","layer","getLayerConfig","commonOptions","u_speed","u_time","getLayerAnimateTime","u_texture","texture","textures","commonBufferInfo","getAnimateUniforms","initModels","_this","loadTexture","buildModels","_this2","initUniformsBuffer","model","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","defines","getDefines","inject","getInject","primitive","TRIANGLES","depth","enable","pickingEnabled","diagnosticDerivativeUniformityEnabled","clearModels","_this$texture","destroy","registerBuiltinAttributes","bbox","getSource","extent","minLng","minLat","maxLng","maxLat","lngLen","latLen","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","usage","STATIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","lng","lat","waterTexture","createTexture2D","rendererService","height","width","image","Image","crossOrigin","console","warn","src","onload","wrapS","MIRRORED_REPEAT","wrapT","min","LINEAR","mag","layerService","reRender"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/polygon/models/water.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { polygonTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/water/polygon_water_frag.glsl' */\nconst water_frag = \"uniform sampler2D u_texture;\\nlayout(std140) uniform commonUniforms {\\n  float u_speed;\\n  float u_time;\\n};\\n\\nout vec4 outputColor;\\n\\n\\nin vec4 v_Color;\\nin vec2 v_uv;\\n\\nfloat rand(vec2 n) { return 0.5 + 0.5 * fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\\n\\nfloat water(vec3 p) {\\n  float t = u_time * u_speed;\\n  p.z += t * 2.; p.x += t * 2.;\\n  vec3 c1 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  p.z += t * 3.; p.x += t * 0.52;\\n  vec3 c2 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  p.z += t * 4.; p.x += t * 0.8;\\n  vec3 c3 = texture(SAMPLER_2D(u_texture), p.xz / 30.).xyz;\\n  c1 += c2 - c3;\\n  float z = (c1.x + c1.y + c1.z) / 3.;\\n  return p.y + z / 4.;\\n}\\n\\nfloat map(vec3 p) {\\n  float d = 100.0;\\n  d = water(p);\\n  return d;\\n}\\n\\nfloat intersect(vec3 ro, vec3 rd) {\\n  float d = 0.0;\\n  for (int i = 0; i <= 100; i++) {\\n    float h = map(ro + rd * d);\\n    if (h < 0.1) return  d;\\n    d += h;\\n  }\\n  return 0.0;\\n}\\n\\nvec3 norm(vec3 p) {\\n  float eps = .1;\\n  return normalize(vec3(\\n    map(p + vec3(eps, 0, 0)) - map(p + vec3(-eps, 0, 0)),\\n    map(p + vec3(0, eps, 0)) - map(p + vec3(0, -eps, 0)),\\n    map(p + vec3(0, 0, eps)) - map(p + vec3(0, 0, -eps))\\n  ));\\n} \\n\\nfloat calSpc() {\\n  vec3 l1 = normalize(vec3(1, 1, 1));\\n  vec3 ro = vec3(-3, 20, -8);\\n  vec3 rc = vec3(0, 0, 0);\\n  vec3 ww = normalize(rc - ro);\\n  vec3 uu = normalize(cross(vec3(0,1,0), ww));\\n  vec3 vv = normalize(cross(rc - ro, uu));\\n  vec3 rd = normalize(uu * v_uv.x + vv * v_uv.y + ww);\\n  float d = intersect(ro, rd);\\n  vec3 p = ro + rd * d;\\n  vec3 n = norm(p);\\n  float spc = pow(max(0.0, dot(reflect(l1, n), rd)), 30.0);\\n  return spc;\\n}\\n\\nvoid main() {\\n\\n  outputColor = v_Color;\\n  float spc = calSpc();\\n  outputColor += spc * 0.4;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/water/polygon_water_vert.glsl' */\nconst water_vert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_speed;\\n  float u_time;\\n};\\nout vec4 v_Color;\\nout vec2 v_uv;\\n\\n#pragma include \\\"projection\\\"\\n\\nvoid main() {\\n  v_uv = a_uv;\\n  v_Color = a_Color;\\n  v_Color.a *= opacity;\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n}\\n\\n\";\nexport default class WaterModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      UV: 9\n    });\n  }\n  getUninforms() {\n    const commoninfo = this.getCommonUniformsInfo();\n    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n    this.updateStyleUnifoms();\n    return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n  }\n  getCommonUniformsInfo() {\n    const {\n      speed = 0.5\n    } = this.layer.getLayerConfig();\n    const commonOptions = {\n      u_speed: speed,\n      u_time: this.layer.getLayerAnimateTime(),\n      u_texture: this.texture\n    };\n\n    // u_opacity: isNumber(opacity) ? opacity : 1.0,\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  getAnimateUniforms() {\n    return {\n      u_time: this.layer.getLayerAnimateTime()\n    };\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loadTexture();\n      return _this.buildModels();\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.initUniformsBuffer();\n      const model = yield _this2.layer.buildLayerModel({\n        moduleName: 'polygonWater',\n        vertexShader: water_vert,\n        fragmentShader: water_frag,\n        triangulation: polygonTriangulation,\n        defines: _this2.getDefines(),\n        inject: _this2.getInject(),\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        pickingEnabled: false,\n        diagnosticDerivativeUniformityEnabled: false\n      });\n      return [model];\n    })();\n  }\n  clearModels() {\n    var _this$texture;\n    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n  }\n  registerBuiltinAttributes() {\n    const bbox = this.layer.getSource().extent;\n    const [minLng, minLat, maxLng, maxLat] = bbox;\n    const lngLen = maxLng - minLng;\n    const latLen = maxLat - minLat;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'waterUv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          const [lng, lat] = vertex;\n          return [(lng - minLng) / lngLen, (lat - minLat) / latLen];\n        }\n      }\n    });\n  }\n  loadTexture() {\n    const {\n      waterTexture\n    } = this.layer.getLayerConfig();\n    const {\n      createTexture2D\n    } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 1,\n      width: 1\n    });\n    const image = new Image();\n    image.crossOrigin = '';\n    if (waterTexture) {\n      // custom texture\n      console.warn('L7 recommendï¼šhttps://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ');\n      image.src = waterTexture;\n    } else {\n      // default texture\n      image.src = 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ';\n    }\n    image.onload = () => {\n      this.texture = createTexture2D({\n        data: image,\n        width: image.width,\n        height: image.height,\n        wrapS: gl.MIRRORED_REPEAT,\n        wrapT: gl.MIRRORED_REPEAT,\n        min: gl.LINEAR,\n        mag: gl.LINEAR\n      });\n      this.layerService.reRender();\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}