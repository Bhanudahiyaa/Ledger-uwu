{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport { rampColor2legend } from \"../utils/rampcolor_legend\";\nimport RasterModels from \"./models/index\";\nexport default class RasterLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'RasterLayer');\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const modelType = _this.getModelType();\n      _this.layerModel = new RasterModels[modelType](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      raster: {},\n      rasterRgb: {},\n      raster3d: {},\n      rasterTerrainRgb: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    // 根据 source 的类型判断 model type\n    const parserType = this.layerSource.getParserType();\n    switch (parserType) {\n      case 'raster' || 'ndi':\n        return 'raster';\n      case 'rasterRgb':\n        return 'rasterRgb';\n      case 'rgb':\n        return 'rasterRgb';\n      case 'image':\n        return 'rasterTerrainRgb';\n      default:\n        return 'raster';\n    }\n  }\n  getLegend(name) {\n    if (name !== 'color') return {\n      type: undefined,\n      field: undefined,\n      items: []\n    };\n    const rampColors = this.getLayerConfig().rampColors;\n    return rampColor2legend(rampColors, name);\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_defineProperty","BaseLayer","rampColor2legend","RasterModels","RasterLayer","constructor","args","buildModels","_this","modelType","getModelType","layerModel","initLayerModels","getDefaultConfig","type","defaultConfig","raster","rasterRgb","raster3d","rasterTerrainRgb","parserType","layerSource","getParserType","getLegend","name","undefined","field","items","rampColors","getLayerConfig"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/raster/index.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseLayer from \"../core/BaseLayer\";\nimport { rampColor2legend } from \"../utils/rampcolor_legend\";\nimport RasterModels from \"./models/index\";\nexport default class RasterLayer extends BaseLayer {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"type\", 'RasterLayer');\n  }\n  buildModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const modelType = _this.getModelType();\n      _this.layerModel = new RasterModels[modelType](_this);\n      yield _this.initLayerModels();\n    })();\n  }\n  getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      raster: {},\n      rasterRgb: {},\n      raster3d: {},\n      rasterTerrainRgb: {}\n    };\n    return defaultConfig[type];\n  }\n  getModelType() {\n    // 根据 source 的类型判断 model type\n    const parserType = this.layerSource.getParserType();\n    switch (parserType) {\n      case 'raster' || 'ndi':\n        return 'raster';\n      case 'rasterRgb':\n        return 'rasterRgb';\n      case 'rgb':\n        return 'rasterRgb';\n      case 'image':\n        return 'rasterTerrainRgb';\n      default:\n        return 'raster';\n    }\n  }\n  getLegend(name) {\n    if (name !== 'color') return {\n      type: undefined,\n      field: undefined,\n      items: []\n    };\n    const rampColors = this.getLayerConfig().rampColors;\n    return rampColor2legend(rampColors, name);\n  }\n}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,OAAOC,SAAS,MAAM,mBAAmB;AACzC,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,eAAe,MAAMC,WAAW,SAASH,SAAS,CAAC;EACjDI,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACdN,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,aAAa,CAAC;EAC9C;EACAO,WAAWA,CAAA,EAAG;IACZ,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAOT,iBAAiB,CAAC,aAAa;MACpC,MAAMU,SAAS,GAAGD,KAAK,CAACE,YAAY,CAAC,CAAC;MACtCF,KAAK,CAACG,UAAU,GAAG,IAAIR,YAAY,CAACM,SAAS,CAAC,CAACD,KAAK,CAAC;MACrD,MAAMA,KAAK,CAACI,eAAe,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC,CAAC;EACN;EACAC,gBAAgBA,CAAA,EAAG;IACjB,MAAMC,IAAI,GAAG,IAAI,CAACJ,YAAY,CAAC,CAAC;IAChC,MAAMK,aAAa,GAAG;MACpBC,MAAM,EAAE,CAAC,CAAC;MACVC,SAAS,EAAE,CAAC,CAAC;MACbC,QAAQ,EAAE,CAAC,CAAC;MACZC,gBAAgB,EAAE,CAAC;IACrB,CAAC;IACD,OAAOJ,aAAa,CAACD,IAAI,CAAC;EAC5B;EACAJ,YAAYA,CAAA,EAAG;IACb;IACA,MAAMU,UAAU,GAAG,IAAI,CAACC,WAAW,CAACC,aAAa,CAAC,CAAC;IACnD,QAAQF,UAAU;MAChB,KAAK,QAAQ,IAAI,KAAK;QACpB,OAAO,QAAQ;MACjB,KAAK,WAAW;QACd,OAAO,WAAW;MACpB,KAAK,KAAK;QACR,OAAO,WAAW;MACpB,KAAK,OAAO;QACV,OAAO,kBAAkB;MAC3B;QACE,OAAO,QAAQ;IACnB;EACF;EACAG,SAASA,CAACC,IAAI,EAAE;IACd,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAO;MAC3BV,IAAI,EAAEW,SAAS;MACfC,KAAK,EAAED,SAAS;MAChBE,KAAK,EAAE;IACT,CAAC;IACD,MAAMC,UAAU,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC,CAACD,UAAU;IACnD,OAAO1B,gBAAgB,CAAC0B,UAAU,EAAEJ,IAAI,CAAC;EAC3C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}