{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\n/* babel-plugin-inline-import '../shaders/billboard_frag.glsl' */\nconst planeFrag = \"layout(std140) uniform commonUniforms {\\n vec2 u_size;\\n float u_raisingHeight;\\n float u_rotation;\\n float u_opacity;\\n};\\n\\nuniform sampler2D u_texture;\\n\\nin vec2 v_uv;\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\nvoid main() {\\n  outputColor = texture(SAMPLER_2D(u_texture), vec2(v_uv.x, 1.0 - v_uv.y));\\n  outputColor.a *= u_opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/billboard_vert.glsl' */\nconst planeVert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_EXTRUDE) in vec3 a_Extrude;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec2 u_size;\\n  float u_raisingHeight;\\n  float u_rotation;\\n  float u_opacity;\\n};\\n\\nout vec2 v_uv;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"rotation_2d\\\"\\nvoid main() {\\n  vec3 extrude = a_Extrude;\\n  v_uv = a_Uv;\\n  float raiseHeight = u_raisingHeight;\\n  if (\\n    u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\\n    u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET\\n  ) {\\n    float mapboxZoomScale = 4.0 / pow(2.0, 21.0 - u_Zoom);\\n    raiseHeight = u_raisingHeight * mapboxZoomScale;\\n  }\\n\\n  // \\u8BA1\\u7B97\\u7ECF\\u7EAC\\u5EA6\\u70B9\\u4F4D\\u5750\\u6807\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n  // \\u8BA1\\u7B97\\u7ED5 z \\u8F74\\u65CB\\u8F6C\\u540E\\u7684\\u504F\\u79FB\\n  vec2 offsetXY = project_pixel(rotate_matrix(vec2(extrude.x * u_size.x, 0.0), u_rotation));\\n  // \\u7ED5 z \\u8F74\\u65CB\\u8F6C\\n  float x = project_pos.x + offsetXY.x;\\n  float y = project_pos.y + offsetXY.y;\\n  // z \\u8F74\\u4E0D\\u53C2\\u4E0E\\u65CB\\u8F6C\\n  float z = project_pixel(extrude.y * u_size.y + raiseHeight);\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(x, y, z, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nexport default class BillBoardModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"radian\", 0);\n    // 旋转的弧度\n    _defineProperty(this, \"planeGeometryTriangulation\", () => {\n      const {\n        center = [120, 30]\n      } = this.layer.getLayerConfig();\n      return {\n        size: 4,\n        indices: [0, 1, 2, 2, 3, 0],\n        vertices: [...center, ...[1, 1], ...center, ...[0, 1], ...center, ...[0, 0], ...center, ...[1, 0]]\n      };\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      EXTRUDE: 9,\n      UV: 10\n    });\n  }\n  getUninforms() {\n    const commoninfo = this.getCommonUniformsInfo();\n    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n    this.updateStyleUnifoms();\n    return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n  }\n  getCommonUniformsInfo() {\n    const {\n      opacity,\n      width = 1,\n      height = 1,\n      raisingHeight = 0\n    } = this.layer.getLayerConfig();\n\n    /**\n     *               rotateFlag\n     * DEFAULT            1\n     * MAPBOX             1\n     * AMAP              -1\n     */\n    let rotateFlag = 1;\n    if (this.mapService.getType() === 'amap') {\n      rotateFlag = -1;\n    }\n    // 控制图标的旋转角度（绕 Z 轴旋转）\n    this.radian = rotateFlag * Math.PI * (this.mapService.getRotation() % 360) / 180;\n    const commonOptions = {\n      u_size: [width, height],\n      u_raisingHeight: Number(raisingHeight),\n      u_rotation: this.radian,\n      u_opacity: opacity || 1,\n      u_texture: this.texture\n    };\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  clearModels() {\n    var _this$texture;\n    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        drawCanvas\n      } = _this.layer.getLayerConfig();\n      const {\n        createTexture2D\n      } = _this.rendererService;\n      _this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      if (drawCanvas) {\n        _this.updateTexture(drawCanvas);\n      }\n      _this.initUniformsBuffer();\n      const model = yield _this.layer.buildLayerModel({\n        moduleName: 'geometryBillboard',\n        vertexShader: planeVert,\n        fragmentShader: planeFrag,\n        triangulation: _this.planeGeometryTriangulation,\n        defines: _this.getDefines(),\n        inject: _this.getInject(),\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: true\n        }\n      });\n      return [model];\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.initModels();\n    })();\n  }\n  updateTexture(drawCanvas) {\n    const {\n      createTexture2D\n    } = this.rendererService;\n    const {\n      canvasWidth = 1,\n      canvasHeight = 1\n    } = this.layer.getLayerConfig();\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      drawCanvas(canvas);\n      this.texture = createTexture2D({\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE\n      });\n      this.layerService.reRender();\n    }\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        shaderLocation: this.attributeLocation.EXTRUDE,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 3,\n        update: (feature, featureIdx, vertex, attributeIdx) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          const extrudeIndex = attributeIdx % 4 * 3;\n          return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[2], vertex[3]];\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","_objectSpread","_defineProperty","AttributeType","gl","BaseModel","planeFrag","planeVert","BillBoardModel","constructor","args","center","layer","getLayerConfig","size","indices","vertices","attributeLocation","Object","assign","MAX","EXTRUDE","UV","getUninforms","commoninfo","getCommonUniformsInfo","attributeInfo","getUniformsBufferInfo","getStyleAttribute","updateStyleUnifoms","uniformsOption","opacity","width","height","raisingHeight","rotateFlag","mapService","getType","radian","Math","PI","getRotation","commonOptions","u_size","u_raisingHeight","Number","u_rotation","u_opacity","u_texture","texture","textures","commonBufferInfo","clearModels","_this$texture","destroy","initModels","_this","drawCanvas","createTexture2D","rendererService","updateTexture","initUniformsBuffer","model","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","planeGeometryTriangulation","defines","getDefines","inject","getInject","primitive","TRIANGLES","depth","enable","buildModels","_this2","canvasWidth","canvasHeight","canvas","document","createElement","ctx","getContext","data","wrapS","CLAMP_TO_EDGE","wrapT","layerService","reRender","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","usage","DYNAMIC_DRAW","FLOAT","update","feature","featureIdx","vertex","attributeIdx","extrude","extrudeIndex"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-layers/es/geometry/models/billboard.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\n/* babel-plugin-inline-import '../shaders/billboard_frag.glsl' */\nconst planeFrag = \"layout(std140) uniform commonUniforms {\\n vec2 u_size;\\n float u_raisingHeight;\\n float u_rotation;\\n float u_opacity;\\n};\\n\\nuniform sampler2D u_texture;\\n\\nin vec2 v_uv;\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\nvoid main() {\\n  outputColor = texture(SAMPLER_2D(u_texture), vec2(v_uv.x, 1.0 - v_uv.y));\\n  outputColor.a *= u_opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/billboard_vert.glsl' */\nconst planeVert = \"layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\\nlayout(location = ATTRIBUTE_LOCATION_EXTRUDE) in vec3 a_Extrude;\\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec2 u_size;\\n  float u_raisingHeight;\\n  float u_rotation;\\n  float u_opacity;\\n};\\n\\nout vec2 v_uv;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"rotation_2d\\\"\\nvoid main() {\\n  vec3 extrude = a_Extrude;\\n  v_uv = a_Uv;\\n  float raiseHeight = u_raisingHeight;\\n  if (\\n    u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\\n    u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET\\n  ) {\\n    float mapboxZoomScale = 4.0 / pow(2.0, 21.0 - u_Zoom);\\n    raiseHeight = u_raisingHeight * mapboxZoomScale;\\n  }\\n\\n  // \\u8BA1\\u7B97\\u7ECF\\u7EAC\\u5EA6\\u70B9\\u4F4D\\u5750\\u6807\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n  // \\u8BA1\\u7B97\\u7ED5 z \\u8F74\\u65CB\\u8F6C\\u540E\\u7684\\u504F\\u79FB\\n  vec2 offsetXY = project_pixel(rotate_matrix(vec2(extrude.x * u_size.x, 0.0), u_rotation));\\n  // \\u7ED5 z \\u8F74\\u65CB\\u8F6C\\n  float x = project_pos.x + offsetXY.x;\\n  float y = project_pos.y + offsetXY.y;\\n  // z \\u8F74\\u4E0D\\u53C2\\u4E0E\\u65CB\\u8F6C\\n  float z = project_pixel(extrude.y * u_size.y + raiseHeight);\\n\\n  gl_Position = project_common_position_to_clipspace(vec4(x, y, z, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nexport default class BillBoardModel extends BaseModel {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"radian\", 0);\n    // 旋转的弧度\n    _defineProperty(this, \"planeGeometryTriangulation\", () => {\n      const {\n        center = [120, 30]\n      } = this.layer.getLayerConfig();\n      return {\n        size: 4,\n        indices: [0, 1, 2, 2, 3, 0],\n        vertices: [...center, ...[1, 1], ...center, ...[0, 1], ...center, ...[0, 0], ...center, ...[1, 0]]\n      };\n    });\n  }\n  get attributeLocation() {\n    return Object.assign(super.attributeLocation, {\n      MAX: super.attributeLocation.MAX,\n      EXTRUDE: 9,\n      UV: 10\n    });\n  }\n  getUninforms() {\n    const commoninfo = this.getCommonUniformsInfo();\n    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n    this.updateStyleUnifoms();\n    return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n  }\n  getCommonUniformsInfo() {\n    const {\n      opacity,\n      width = 1,\n      height = 1,\n      raisingHeight = 0\n    } = this.layer.getLayerConfig();\n\n    /**\n     *               rotateFlag\n     * DEFAULT            1\n     * MAPBOX             1\n     * AMAP              -1\n     */\n    let rotateFlag = 1;\n    if (this.mapService.getType() === 'amap') {\n      rotateFlag = -1;\n    }\n    // 控制图标的旋转角度（绕 Z 轴旋转）\n    this.radian = rotateFlag * Math.PI * (this.mapService.getRotation() % 360) / 180;\n    const commonOptions = {\n      u_size: [width, height],\n      u_raisingHeight: Number(raisingHeight),\n      u_rotation: this.radian,\n      u_opacity: opacity || 1,\n      u_texture: this.texture\n    };\n    this.textures = [this.texture];\n    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n    return commonBufferInfo;\n  }\n  clearModels() {\n    var _this$texture;\n    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n  }\n  initModels() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        drawCanvas\n      } = _this.layer.getLayerConfig();\n      const {\n        createTexture2D\n      } = _this.rendererService;\n      _this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      if (drawCanvas) {\n        _this.updateTexture(drawCanvas);\n      }\n      _this.initUniformsBuffer();\n      const model = yield _this.layer.buildLayerModel({\n        moduleName: 'geometryBillboard',\n        vertexShader: planeVert,\n        fragmentShader: planeFrag,\n        triangulation: _this.planeGeometryTriangulation,\n        defines: _this.getDefines(),\n        inject: _this.getInject(),\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: true\n        }\n      });\n      return [model];\n    })();\n  }\n  buildModels() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.initModels();\n    })();\n  }\n  updateTexture(drawCanvas) {\n    const {\n      createTexture2D\n    } = this.rendererService;\n    const {\n      canvasWidth = 1,\n      canvasHeight = 1\n    } = this.layer.getLayerConfig();\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      drawCanvas(canvas);\n      this.texture = createTexture2D({\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE\n      });\n      this.layerService.reRender();\n    }\n  }\n  registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        shaderLocation: this.attributeLocation.EXTRUDE,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 3,\n        update: (feature, featureIdx, vertex, attributeIdx) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          const extrudeIndex = attributeIdx % 4 * 3;\n          return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];\n        }\n      }\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        shaderLocation: this.attributeLocation.UV,\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT\n        },\n        size: 2,\n        update: (feature, featureIdx, vertex) => {\n          return [vertex[2], vertex[3]];\n        }\n      }\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}