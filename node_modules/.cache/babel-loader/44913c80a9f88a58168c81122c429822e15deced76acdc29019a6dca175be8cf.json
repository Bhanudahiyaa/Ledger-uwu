{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/colorhalftone.glsl' */\nconst colorHalftone = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_Center : [0.5, 0.5];\\nuniform float u_Angle : 0;\\nuniform float u_Size : 8;\\n\\n#pragma include \\\"common\\\"\\n\\nfloat scale = PI / u_Size;\\n\\nfloat pattern(float u_Angle, vec2 texSize, vec2 texCoord) {\\n  float s = sin(u_Angle), c = cos(u_Angle);\\n  vec2 tex = texCoord * texSize - u_Center * texSize;\\n  vec2 point = vec2(\\n    c * tex.x - s * tex.y,\\n    s * tex.x + c * tex.y\\n  ) * scale;\\n  return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/colorhalftone.js\\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\\n  vec3 cmy = 1.0 - color.rgb;\\n  float k = min(cmy.x, min(cmy.y, cmy.z));\\n  cmy = (cmy - k) / (1.0 - k);\\n  cmy = clamp(\\n    cmy * 10.0 - 3.0 + vec3(\\n      pattern(u_Angle + 0.26179, texSize, texCoord),\\n      pattern(u_Angle + 1.30899, texSize, texCoord),\\n      pattern(u_Angle, texSize, texCoord)\\n    ),\\n    0.0,\\n    1.0\\n  );\\n  k = clamp(k * 10.0 - 5.0 + pattern(u_Angle + 0.78539, texSize, texCoord), 0.0, 1.0);\\n  return vec4(1.0 - cmy - k, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = colorHalftone_filterColor(gl_FragColor, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class ColorHalftonePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('colorhalftone-pass', {\n      vs: quad,\n      fs: colorHalftone\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('colorhalftone-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}","map":{"version":3,"names":["_objectSpread","colorHalftone","quad","BasePostProcessingPass","ColorHalftonePass","setupShaders","shaderModuleService","registerModule","vs","fs","uniforms","getModule","width","height","rendererService","getViewportSize","u_ViewportSize"],"sources":["/Users/bhanudahiya/Desktop/ledger-IQ/node_modules/@antv/l7-core/es/services/renderer/passes/post-processing/ColorHalfTonePass.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/colorhalftone.glsl' */\nconst colorHalftone = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_Center : [0.5, 0.5];\\nuniform float u_Angle : 0;\\nuniform float u_Size : 8;\\n\\n#pragma include \\\"common\\\"\\n\\nfloat scale = PI / u_Size;\\n\\nfloat pattern(float u_Angle, vec2 texSize, vec2 texCoord) {\\n  float s = sin(u_Angle), c = cos(u_Angle);\\n  vec2 tex = texCoord * texSize - u_Center * texSize;\\n  vec2 point = vec2(\\n    c * tex.x - s * tex.y,\\n    s * tex.x + c * tex.y\\n  ) * scale;\\n  return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/colorhalftone.js\\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\\n  vec3 cmy = 1.0 - color.rgb;\\n  float k = min(cmy.x, min(cmy.y, cmy.z));\\n  cmy = (cmy - k) / (1.0 - k);\\n  cmy = clamp(\\n    cmy * 10.0 - 3.0 + vec3(\\n      pattern(u_Angle + 0.26179, texSize, texCoord),\\n      pattern(u_Angle + 1.30899, texSize, texCoord),\\n      pattern(u_Angle, texSize, texCoord)\\n    ),\\n    0.0,\\n    1.0\\n  );\\n  k = clamp(k * 10.0 - 5.0 + pattern(u_Angle + 0.78539, texSize, texCoord), 0.0, 1.0);\\n  return vec4(1.0 - cmy - k, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = colorHalftone_filterColor(gl_FragColor, u_ViewportSize, v_UV);\\n}\";\n/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */\nconst quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from \"../BasePostProcessingPass\";\nexport default class ColorHalftonePass extends BasePostProcessingPass {\n  setupShaders() {\n    this.shaderModuleService.registerModule('colorhalftone-pass', {\n      vs: quad,\n      fs: colorHalftone\n    });\n    const {\n      vs,\n      fs,\n      uniforms\n    } = this.shaderModuleService.getModule('colorhalftone-pass');\n    const {\n      width,\n      height\n    } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n        u_ViewportSize: [width, height]\n      })\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE;AACA,MAAMC,aAAa,GAAG,kzCAAkzC;AACx0C;AACA,MAAMC,IAAI,GAAG,qJAAqJ;AAClK,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,eAAe,MAAMC,iBAAiB,SAASD,sBAAsB,CAAC;EACpEE,YAAYA,CAAA,EAAG;IACb,IAAI,CAACC,mBAAmB,CAACC,cAAc,CAAC,oBAAoB,EAAE;MAC5DC,EAAE,EAAEN,IAAI;MACRO,EAAE,EAAER;IACN,CAAC,CAAC;IACF,MAAM;MACJO,EAAE;MACFC,EAAE;MACFC;IACF,CAAC,GAAG,IAAI,CAACJ,mBAAmB,CAACK,SAAS,CAAC,oBAAoB,CAAC;IAC5D,MAAM;MACJC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,eAAe,CAAC,CAAC;IAC1C,OAAO;MACLP,EAAE;MACFC,EAAE;MACFC,QAAQ,EAAEV,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEU,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QACvDM,cAAc,EAAE,CAACJ,KAAK,EAAEC,MAAM;MAChC,CAAC;IACH,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}