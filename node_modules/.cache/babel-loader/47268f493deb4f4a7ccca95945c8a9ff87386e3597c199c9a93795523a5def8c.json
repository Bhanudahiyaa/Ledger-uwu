{"ast":null,"code":"/**\n * @fileOverview MDS layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Matrix as MLMatrix, SingularValueDecomposition } from \"ml-matrix\";\nimport { floydWarshall, getAdjMatrix, scaleMatrix } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * mds 布局\n */\nexport class MDSLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局中心 */\n    this.center = [0, 0];\n    /** 边长度 */\n    this.linkDistance = 50;\n    this.nodes = [];\n    this.edges = [];\n    /** 迭代结束的回调函数 */\n    this.onLayoutEnd = () => {};\n    this.updateCfg(options);\n  }\n  getDefaultCfg() {\n    return {\n      center: [0, 0],\n      linkDistance: 50\n    };\n  }\n  /**\n   * 执行布局\n   */\n  execute() {\n    const self = this;\n    const {\n      nodes,\n      edges = []\n    } = self;\n    const center = self.center;\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    const linkDistance = self.linkDistance;\n    // the graph-theoretic distance (shortest path distance) matrix\n    const adjMatrix = getAdjMatrix({\n      nodes,\n      edges\n    }, false);\n    const distances = floydWarshall(adjMatrix);\n    self.handleInfinity(distances);\n    // scale the ideal edge length acoording to linkDistance\n    const scaledD = scaleMatrix(distances, linkDistance);\n    self.scaledDistances = scaledD;\n    // get positions by MDS\n    const positions = self.runMDS();\n    self.positions = positions;\n    positions.forEach((p, i) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes,\n      edges\n    };\n  }\n  /**\n   * mds 算法\n   * @return {array} positions 计算后的节点位置数组\n   */\n  runMDS() {\n    const self = this;\n    const dimension = 2;\n    const distances = self.scaledDistances;\n    // square distances\n    const M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5);\n    // double centre the rows/columns\n    const rowMeans = M.mean(\"row\");\n    const colMeans = M.mean(\"column\");\n    const totalMean = M.mean();\n    M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n    // take the SVD of the double centred matrix, and return the\n    // points from it\n    const ret = new SingularValueDecomposition(M);\n    const eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n    return ret.leftSingularVectors.toJSON().map(row => {\n      return MLMatrix.mul([row], [eigenValues]).toJSON()[0].splice(0, dimension);\n    });\n  }\n  handleInfinity(distances) {\n    let maxDistance = -999999;\n    distances.forEach(row => {\n      row.forEach(value => {\n        if (value === Infinity) {\n          return;\n        }\n        if (maxDistance < value) {\n          maxDistance = value;\n        }\n      });\n    });\n    distances.forEach((row, i) => {\n      row.forEach((value, j) => {\n        if (value === Infinity) {\n          distances[i][j] = maxDistance;\n        }\n      });\n    });\n  }\n  getType() {\n    return \"mds\";\n  }\n}","map":{"version":3,"names":["Matrix","MLMatrix","SingularValueDecomposition","floydWarshall","getAdjMatrix","scaleMatrix","Base","MDSLayout","constructor","options","center","linkDistance","nodes","edges","onLayoutEnd","updateCfg","getDefaultCfg","execute","self","length","x","y","adjMatrix","distances","handleInfinity","scaledD","scaledDistances","positions","runMDS","forEach","p","i","dimension","M","mul","pow","rowMeans","mean","colMeans","totalMean","add","subRowVector","subColumnVector","ret","eigenValues","sqrt","diagonalMatrix","diagonal","leftSingularVectors","toJSON","map","row","splice","maxDistance","value","Infinity","j","getType"],"sources":["../../src/layout/mds.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}